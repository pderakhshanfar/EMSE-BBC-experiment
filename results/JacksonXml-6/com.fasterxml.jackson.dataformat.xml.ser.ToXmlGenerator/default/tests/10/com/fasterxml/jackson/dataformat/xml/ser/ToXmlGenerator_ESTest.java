/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:54:15 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, " ?(s+\"CD5Ek.=", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(" ?(s+\"CD5Ek.=", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNotNull(simpleNsStreamWriter0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-3446), objectMapper0, simpleNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(" ?(s+\"CD5Ek.=", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-3446), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.writeRaw("Can not write a field name, expecting a value");
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(" ?(s+\"CD5Ek.=", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-3446), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("", "}WRVvdBc//z8tSB", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, (-1));
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      assertNotNull(bufferedOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(bufferedOutputStream0, writerConfig0, false);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNotNull(iSOLatin1XmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "JSON", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 2, objectMapper0, repairingNsStreamWriter0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0._verifyValueWrite("JSON");
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      char[] charArray0 = new char[3];
      toXmlGenerator0.writeString(charArray0, 0, 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[19];
      toXmlGenerator0.writeRawValue(charArray0, 1, 2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(19, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      try { 
        toXmlGenerator0.writeRawValue("Cannot support implicit polymorphic deserialization for POJOs-as-Arrays style: nominal type %s, actual type %s", 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <{-Q 2UIF`Iw>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", ",expecting field name");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeRawValue(",expecting field name", 3, 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      nonNsStreamWriter0.writeEmptyElement("Wi=m.!5+f6", "Wi=m.!5+f6");
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName(", expecting field name", "D$W[i", "D$W[i");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      try { 
        toXmlGenerator0.writeRawValue("{-Q 2UIF`Iw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iSOLatin1XmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 597, 2, objectMapper0, repairingNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(597, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      char[] charArray0 = new char[8];
      toXmlGenerator0.writeRaw(charArray0, 597, 0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(597, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      char[] charArray0 = new char[0];
      try { 
        toXmlGenerator0.writeRaw(charArray0, 1, 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.writeRaw("{-Q 2UIF`Iw", 1, 2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeRawValue("{-Q 2UIF`Iw");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write an attribute when there is no open start element.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(filterOutputStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNotNull(iSOLatin1XmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf((-3528L));
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isMissingNode());
      assertNull(longNode0.textValue());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertEquals(0, longNode0.size());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isMissingNode());
      assertNull(longNode0.textValue());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertEquals(0, longNode0.size());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-562), 42, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isMissingNode());
      assertNull(longNode0.textValue());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertEquals(0, longNode0.size());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("No FormatFeatures defined for parser of type ", "QYE&j", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isMissingNode());
      assertNull(longNode0.textValue());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertEquals(0, longNode0.size());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isArray());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isNaN());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isMissingNode());
      assertNull(longNode0.textValue());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertEquals(0, longNode0.size());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isShort());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeNumber("bGcZt3gPePOGG&k>");
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      nonNsStreamWriter0.writeEmptyElement("Wi=m.!5+f6", "Wi=m.!5+f6");
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName(", expecting field name", "D$W[i", "D$W[i");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      try { 
        toXmlGenerator0.writeNumber((long) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.codehaus.stax2.closeInputSource");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "UTF-8", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "UTF-8", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("UTF-8", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("UTF-8", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("UTF-8", "com.fasterxml.jackson.databind.ext.DOMDeserializer", "com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("UTF-8", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("UTF-8", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        toXmlGenerator0.writeNumber(56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <com.fasterxml.jackson.databind.ext.DOMDeserializer>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      try { 
        toXmlGenerator0.writeNumber(Float.NEGATIVE_INFINITY);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(" ", serializedString0.toString());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(1, serializedString0.charLength());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "5!Gg/+3-S7nE", true, filterOutputStream0, 0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "5!Gg/+3-S7nE", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("5!Gg/+3-S7nE", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("5!Gg/+3-S7nE", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "Current context not Object but ", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("5!Gg/+3-S7nE", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber(5);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("5!Gg/+3-S7nE", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <Current context not Object but >
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|%4F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|%4F", false, mockPrintStream0, 3);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|%4F", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|%4F", "0|%4F", "0|%4F");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeBinary((byte[]) null, (-653), 411);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      pipedWriter0.connect(pipedReader0);
      toXmlGenerator0.close();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "+", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      toXmlGenerator0.writeNumber(bigInteger0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <+>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator1);
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("{-Q 2UIF`Iw");
      assertNotNull(defaultPrettyPrinter0);
      
      ToXmlGenerator toXmlGenerator2 = (ToXmlGenerator)toXmlGenerator1.setPrettyPrinter(defaultPrettyPrinter0);
      assertSame(toXmlGenerator0, toXmlGenerator2);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator2);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertSame(toXmlGenerator2, toXmlGenerator1);
      assertSame(toXmlGenerator2, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(0, toXmlGenerator2.getHighestEscapedChar());
      assertFalse(toXmlGenerator2.canWriteTypeId());
      assertEquals((-1), toXmlGenerator2.getOutputBuffered());
      assertFalse(toXmlGenerator2.isClosed());
      assertTrue(toXmlGenerator2.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator2.canOmitFields());
      assertEquals(0, toXmlGenerator2.getFeatureMask());
      assertFalse(toXmlGenerator2.canWriteBinaryNatively());
      assertTrue(toXmlGenerator2.inRoot());
      assertFalse(toXmlGenerator2.canWriteObjectId());
      assertEquals(0, toXmlGenerator2.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(asciiXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "|k]Db`k8+DLiy?Kk", writerConfig0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("|k]Db`k8+DLiy?Kk", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, (-1), objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("|k]Db`k8+DLiy?Kk", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("|k]Db`k8+DLiy?Kk", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(4, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals((-1), toXmlGenerator1.getFormatFeatures());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(0, (-503));
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures((-49), (-393));
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-441), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(2, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals((-441), toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      boolean boolean0 = toXmlGenerator0.inRoot();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-16842752), (-16842752), objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-16842752), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-16842752), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals((-16842752), int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_1_1, toXmlGenerator_Feature0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf(1365L);
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(1365.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isDouble());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertEquals(1365, longNode0.intValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isLong());
      assertEquals((short)1365, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1365.0F, longNode0.floatValue(), 0.01F);
      assertNull(longNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals(1365L, longNode0.longValue());
      assertTrue(longNode0.isIntegralNumber());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(1365.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isDouble());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertEquals(1365, longNode0.intValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isLong());
      assertEquals((short)1365, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1365.0F, longNode0.floatValue(), 0.01F);
      assertNull(longNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals(1365L, longNode0.longValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON");
      assertNotNull(mockFileWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      assertNotNull(mockPrintStream0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "JSON", false, mockPrintStream0, 0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "SYa;gon", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("SYa;gon", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2385, 3, objectMapper0, repairingNsStreamWriter0);
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(1365.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isDouble());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertEquals(1365, longNode0.intValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isLong());
      assertEquals((short)1365, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1365.0F, longNode0.floatValue(), 0.01F);
      assertNull(longNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals(1365L, longNode0.longValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("SYa;gon", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2385, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.writeStartArray(1559);
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(1365.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isDouble());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertEquals(1365, longNode0.intValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isLong());
      assertEquals((short)1365, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1365.0F, longNode0.floatValue(), 0.01F);
      assertNull(longNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals(1365L, longNode0.longValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("SYa;gon", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2385, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertFalse(longNode0.isInt());
      assertTrue(longNode0.canConvertToLong());
      assertEquals(1365.0, longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.canConvertToInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isDouble());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isNaN());
      assertEquals(1365, longNode0.intValue());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.isLong());
      assertEquals((short)1365, longNode0.shortValue());
      assertFalse(longNode0.isFloat());
      assertEquals(1365.0F, longNode0.floatValue(), 0.01F);
      assertNull(longNode0.textValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isObject());
      assertEquals(1365L, longNode0.longValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("SYa;gon", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2385, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(2385, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.inRoot());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "D4}234@Jy'0L6kNKxA%", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, (-1), objectMapper0, simpleNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(4, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getFormatFeatures());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "': this breaks functionality such as indentation that relies on it. ", true, byteArrayBuilder0, 1);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(streamWriterDelegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-16842752), 2, objectMapper0, streamWriterDelegate0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-16842752), toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(2, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(mockPrintStream0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(asciiXmlWriter0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2336, 2, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2336, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartArray(3);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2336, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2336, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(2336, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "D4}234@Jy'0L6kNKxA%", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, (-1), objectMapper0, simpleNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-3), toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(4, toXmlGenerator1.getFeatureMask());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertNotNull(writerConfig0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(filterOutputStream0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "JSON", false, filterOutputStream0, 2);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1363), 56319, objectMapper0, nonNsStreamWriter0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals((-1363), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(56319, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals((-1363), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56318, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(56318, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals((-1363), toXmlGenerator1.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, true);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iSOLatin1XmlWriter0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(simpleNsStreamWriter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 922, 3, objectMapper0, simpleNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(922, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartArray();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(922, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(922, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.inRoot());
      assertEquals(922, toXmlGenerator1.getFeatureMask());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-16842752), (-16842752), objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-16842752), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-16842752), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-16842752), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals((-16842752), toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-16842752), toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "org.codehaus.stax2.ri.evt.BaseEventImpl", writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("org.codehaus.stax2.ri.evt.BaseEventImpl", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, simpleNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("org.codehaus.stax2.ri.evt.BaseEventImpl", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("org.codehaus.stax2.ri.evt.BaseEventImpl", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(prettyPrinter0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 1);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "sh", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("sh", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1467, 2, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("sh", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(1467, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("sh", "", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("sh", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(1467, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("sh", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals(1467, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField("sh", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 2, 2043);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|F", "0|F", "0|F");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.ctc.wstx.sw.BufferingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      char[] charArray0 = new char[19];
      try { 
        toXmlGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "M@^wW-a>H", true, byteArrayBuilder0, 908);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSk", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("JSk", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("JSk", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName((String) null, "", "P9g-O[pM^}p5LaXM");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("JSk", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeRawValue("{-Q 2UIF`Iw");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      try { 
        toXmlGenerator0.writeString("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <{-Q 2UIF`Iw>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      SerializedString serializedString0 = new SerializedString("{-Q 2UIF`Iw");
      assertEquals("{-Q 2UIF`Iw", serializedString0.getValue());
      assertEquals("{-Q 2UIF`Iw", serializedString0.toString());
      assertEquals(11, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write String value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "3", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("3", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("3", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|F", "0|F", "0|F");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 3, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{6Q 2UIF`I", false, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{6Q 2UIF`I", writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{6Q 2UIF`I", "{6Q 2UIF`I", "{6Q 2UIF`I");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BufferingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|F", "0|F", "0|F");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.initGenerator();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 0, 1572);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, filterOutputStream0, 3);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("", 3, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("", 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw('\\');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(simpleNsStreamWriter0);
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(streamWriterDelegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, (-1404), objectMapper0, streamWriterDelegate0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals((-1404), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.writeRaw('\\');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "=", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("=", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNotNull(repairingNsStreamWriter0);
      
      QName qName0 = new QName("=", "=", "");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1366, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("=", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(1366, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("=", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(1366, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertNotNull(writerConfig0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(deserializerFactoryConfig0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(defaultDeserializationContext_Impl0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertNotNull(objectMapper0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 61, 61, objectMapper0, streamWriter2Delegate0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(61, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(61, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("com.ctc.wstx.dtd.DTDSubsetImpl", "JSON", "writeRaw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(deserializerFactoryConfig0.hasKeyDeserializers());
      assertFalse(deserializerFactoryConfig0.hasDeserializers());
      assertFalse(deserializerFactoryConfig0.hasAbstractTypeResolvers());
      assertFalse(deserializerFactoryConfig0.hasValueInstantiators());
      assertFalse(deserializerFactoryConfig0.hasDeserializerModifiers());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(61, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(61, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|%4F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|%4F", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|%4F", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|%4F", "0|%4F", "0|%4F");
      assertNotNull(qName0);
      
      nonNsStreamWriter0.writeEmptyElement("0|%4F", "0|%4F", "0|%4F");
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "i=Hg$-RDfO", "i=Hg$-RDfO");
      assertNotNull(qName0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, streamWriter2Delegate0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("First call to readElementAsArray() must be for a START_ELEMENT, not directly for a textual event");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "1.1", true, mockPrintStream0, 1);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "1.1", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-79), 3, objectMapper0, streamWriter2Delegate0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-79), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("First call to readElementAsArray() must be for a START_ELEMENT, not directly for a textual event", "1.1", "C7g0-Fu0D6G(g<");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.1", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals((-79), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write null value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNotNull(simpleNsStreamWriter0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals(0, serializedString0.charLength());
      assertEquals("", serializedString0.getValue());
      assertEquals("", serializedString0.toString());
      assertNotNull(serializedString0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, filterOutputStream0, 1);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-52), 3, objectMapper0, streamWriter2Delegate0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-52), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "WRITE_XML_1_1");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-52), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, " ;aD;~}a$SrvwCoYlD", true, filterOutputStream0, 1316);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, " ;aD;~}a$SrvwCoYlD", writerConfig0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(" ;aD;~}a$SrvwCoYlD", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(" ;aD;~}a$SrvwCoYlD", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-753), 2, objectMapper0, streamWriter2Delegate0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(" ;aD;~}a$SrvwCoYlD", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals((-753), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName(" ;aD;~}a$SrvwCoYlD", "=-W-/q<o4)P$", "}<4=CM7 m");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(" ;aD;~}a$SrvwCoYlD", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals((-753), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 3, 2107);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 3, (-2172));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("u-FjmUY?GzG");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "u-FjmUY?GzG", false, mockPrintStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "u-FjmUY?GzG", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("u-FjmUY?GzG", "u-FjmUY?GzG", "u-FjmUY?GzG");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 56319, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <u-FjmUY?GzG>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNotNull(repairingNsStreamWriter0);
      
      QName qName0 = new QName("WwQ[>^'Dh&-VqM e-", "WwQ[>^'Dh&-VqM e-", "WwQ[>^'Dh&-VqM e-");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "bGcZt3gPePOGG&k>", "~iW*>mr.Zd3;");
      assertNotNull(qName0);
      
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unbound namespace URI '{-Q 2UIF`Iw'
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("0|F", "0|F", "0|F");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(jsonFactory0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-846), 3, objectMapper0, streamWriter2Delegate0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-846), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.handleMissingName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "D4}234@Jy'0L6kNKxA%", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, (-1), objectMapper0, simpleNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("D4}234@Jy'0L6kNKxA%", simpleNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      bufferingXmlWriter0.writeStartTagEnd();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 2, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_READ_IO_BUFFER, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("Can not ");
      assertNotNull(mockPrintStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNotNull(asciiXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "Can not ", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("Can not ", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1132, (-607), objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("Can not ", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-607), toXmlGenerator0.getFormatFeatures());
      assertEquals(1132, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      try { 
        toXmlGenerator0._verifyValueWrite("Can not ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not Can not , expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate((XMLStreamWriter) null);
      assertNotNull(streamWriterDelegate0);
      
      ToXmlGenerator toXmlGenerator0 = null;
      try {
        toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-888), (-888), (ObjectCodec) null, streamWriterDelegate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "#", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("#", repairingNsStreamWriter0.getEncoding());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("#", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("4WwQ>^'Dh&-VqM e-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "u-FjmUY?GzG", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "u-FjmUY?GzG", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("u-FjmUY?GzG", "u-FjmUY?GzG", "u-FjmUY?GzG");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0.writeString("u-FjmUY?GzG");
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("u-FjmUY?GzG", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("WwQ[>^'Dh&-VqM e-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._handleEndObject();
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(filterOutputStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, true);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNotNull(iSOLatin1XmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf((-3528L));
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528L), longNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertEquals((-3528), longNode0.intValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isObject());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, true);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528L), longNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertEquals((-3528), longNode0.intValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isObject());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528L), longNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertEquals((-3528), longNode0.intValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isObject());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("No FormatFeatures defined for parser of type ", "JSON", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528L), longNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertEquals((-3528), longNode0.intValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isObject());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._handleStartObject();
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(longNode0.isNaN());
      assertEquals(0, longNode0.size());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isDouble());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertEquals((-3528L), longNode0.longValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.booleanValue());
      assertFalse(longNode0.isBigDecimal());
      assertFalse(longNode0.isShort());
      assertEquals((-3528), longNode0.intValue());
      assertNull(longNode0.textValue());
      assertFalse(longNode0.isArray());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertTrue(longNode0.canConvertToLong());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isInt());
      assertFalse(longNode0.isObject());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("4WwQ>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.writeFieldName("4WwQ>^'Dh&-VqM e-");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeStartObject();
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeFieldName("u+{l)$Idn");
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_1_1, toXmlGenerator_Feature0);
      
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(1);
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_DECLARATION, toXmlGenerator_Feature0);
      
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn((-441));
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertEquals(1, toXmlGenerator_Feature0.getMask());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(ToXmlGenerator.Feature.WRITE_XML_1_1, toXmlGenerator_Feature0);
      
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(2, toXmlGenerator_Feature0.getMask());
      assertEquals(0, toXmlGenerator_Feature0.collectDefaults());
      assertFalse(toXmlGenerator_Feature0.enabledByDefault());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("", "7K");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("WwQ[>^'Dh&-VqM e-", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertNotNull(writerConfig0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(filterOutputStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNotNull(iSOLatin1XmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf((-3528L));
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isArray());
      assertEquals((-3528), longNode0.intValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isInt());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isArray());
      assertEquals((-3528), longNode0.intValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isInt());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-562), 42, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isArray());
      assertEquals((-3528), longNode0.intValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isInt());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.flush();
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isBigInteger());
      assertTrue(longNode0.isLong());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isMissingNode());
      assertEquals(0, longNode0.size());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertFalse(longNode0.isArray());
      assertEquals((-3528), longNode0.intValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isObject());
      assertTrue(longNode0.canConvertToLong());
      assertFalse(longNode0.isInt());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertNull(longNode0.textValue());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isNaN());
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertFalse(longNode0.isDouble());
      assertFalse(longNode0.isFloat());
      assertFalse(longNode0.isFloatingPointNumber());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertNotNull(simpleNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      toXmlGenerator0.flush();
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{6Q 2UIF`I", false, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{6Q 2UIF`I", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{6Q 2UIF`I", "{6Q 2UIF`I", "{6Q 2UIF`I");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.useDefaultPrettyPrinter();
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator1);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      toXmlGenerator0.writeNumber(bigInteger0);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("{6Q 2UIF`I", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|%4F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|%4F", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|%4F", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("0|%4F", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("0|F", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertNotNull(bigInteger0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "ZFB^eQB>'", false, mockPrintStream0, (-770));
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "ZFB^eQB>'", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("ZFB^eQB>'", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-770), 3, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("ZFB^eQB>'", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-770), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = QName.valueOf("ZFB^eQB>'");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("ZFB^eQB>'", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-770), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("ZFB^eQB>'", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-770), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeNumber(4347.52F);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "C", writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("C", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, repairingNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("C", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((float) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(filterOutputStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber(4347.52F);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.writeNumber((double) 2);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertNotNull(writerConfig0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(filterOutputStream0);
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNotNull(iSOLatin1XmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNotNull(jsonFactory0);
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      LongNode longNode0 = LongNode.valueOf((-3528L));
      assertEquals((-3528L), longNode0.longValue());
      assertNull(longNode0.textValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0, longNode0.size());
      assertNotNull(longNode0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(longNode0.textValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0, longNode0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-562), 42, objectMapper0, nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("QYE&j", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals((-3528L), longNode0.longValue());
      assertNull(longNode0.textValue());
      assertEquals((short) (-3528), longNode0.shortValue());
      assertFalse(longNode0.isMissingNode());
      assertFalse(longNode0.isNaN());
      assertEquals((-3528.0), longNode0.doubleValue(), 0.01);
      assertFalse(longNode0.isObject());
      assertFalse(longNode0.isShort());
      assertFalse(longNode0.isDouble());
      assertTrue(longNode0.isIntegralNumber());
      assertFalse(longNode0.isFloatingPointNumber());
      assertFalse(longNode0.isBigDecimal());
      assertEquals((-3528.0F), longNode0.floatValue(), 0.01F);
      assertEquals(JsonToken.VALUE_NUMBER_INT, longNode0.asToken());
      assertTrue(longNode0.isLong());
      assertFalse(longNode0.isFloat());
      assertTrue(longNode0.canConvertToInt());
      assertFalse(longNode0.isBigInteger());
      assertFalse(longNode0.booleanValue());
      assertEquals(JsonParser.NumberType.LONG, longNode0.numberType());
      assertFalse(longNode0.isArray());
      assertTrue(longNode0.canConvertToLong());
      assertEquals((-3528), longNode0.intValue());
      assertFalse(longNode0.isInt());
      assertEquals(JsonNodeType.NUMBER, longNode0.getNodeType());
      assertEquals(0, longNode0.size());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-562), toXmlGenerator0.getFeatureMask());
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-2.147483648E9));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertNotNull(writerConfig0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertNotNull(byteArrayBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "'{SXhF=", true, byteArrayBuilder0, 2047);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "'{SXhF=", writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("'{SXhF=", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-540), (-540), objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("'{SXhF=", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-540), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-540), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("'{SXhF=", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-540), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-540), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      
      toXmlGenerator0.writeNumber(39.130468226);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("'{SXhF=", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-540), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-540), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeNumber((long) 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "C", writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("C", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("C", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((long) 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertNotNull(qName0);
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber((long) 1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("{-Q 2UIF`Iw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertNotNull(writerConfig0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      assertNotNull(mockPrintStream0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertNotNull(bufferingXmlWriter0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertNotNull(nonNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      assertNotNull(qName0);
      
      toXmlGenerator0._nextIsAttribute = true;
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      
      toXmlGenerator0.writeNumber(0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("{-Q 2UIF`JIw", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertNotNull(writerConfig0);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "#", writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("#", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNotNull(repairingNsStreamWriter0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("#", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeNull();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNull();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeBoolean(true);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeBoolean(true);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeBoolean(true);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (-9352), 2881);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`w", "{-Q 2UIF`Iw", "{-Q 2UIF`w");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 1, 0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "write boolean value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 2, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 1, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1182), (-2250), objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[0];
      try { 
        toXmlGenerator0.writeRaw(charArray0, (-8961), (-950));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Tej2hH|)73", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 605, 4, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("", 3838, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-VQ 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-VQ 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-VQ 2UIF`Iw", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3306, 2, objectMapper0, xMLStreamWriter2_0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw((String) null, (-190), 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 215, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("{-Q 2UIF`Iw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 0, (-752));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      Version version0 = Version.unknownVersion();
      SimpleModule simpleModule0 = new SimpleModule("", version0);
      ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleModule0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "1.0", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, objectReader0, streamWriterDelegate0);
      char[] charArray0 = new char[4];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 139, 2741);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 3, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("", 0, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      PipedWriter pipedWriter0 = new PipedWriter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedWriter0, true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "': this breaks functionality such as indentation that relies on it. ", true, byteArrayBuilder0, 1);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-16842752), 2, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("", 2032, 231);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("{-Q 2UIF`Iw", (-247), 8150);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeRawValue("{-Q 2UIF`JIw");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "writeRaw", false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "No element/attribute name specified when trying to output element", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-3218), objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("No element/attribute name specified when trying to output element");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|%4F");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|%4F", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|%4F", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("0|%4F");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`JIw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`JIw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`JIw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`JIw", "{-Q 2UIF`JIw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((char[]) null, 5, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((char[]) null, 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{6Q 2UIF`I", false, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{6Q 2UIF`I", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{6Q 2UIF`I", "{6Q 2UIF`I", "{6Q 2UIF`I");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeString("{6Q 2UIF`I");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeString("");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write END_ELEMENT without open START_ELEMENT
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES, 5, 3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1207, 0, objectMapper0, simpleNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        jsonGenerator0.writeStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Array but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.useDefaultPrettyPrinter();
      jsonGenerator0.writeStartArray();
      assertEquals(3, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      int[] intArray0 = new int[11];
      toXmlGenerator0.writeArray(intArray0, 1, 0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("0|F");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "0|F", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "0|F", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("0|F", "0|F", "0|F");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("uID");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "uID", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "uID", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("uID", "uID", "uID");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "C", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 1, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "'{SXhF=", true, byteArrayBuilder0, 2047);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "'{SXhF=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-540), (-540), objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      toXmlGenerator0.writeNumber((-2791));
      try { 
        toXmlGenerator0.writeNumber(39.130468226);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "Failed to setValue() with method ", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Failed to setValue() with method ", true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, objectMapper0, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing((QName) null);
      assertTrue(boolean0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      QName qName0 = new QName("{-Q 2UIF`Iw", "{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-VQ 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-VQ 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-VQ 2UIF`Iw", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3306, 2, objectMapper0, xMLStreamWriter2_0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "4WwQ>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertFalse(boolean0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "kU`.D", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(3, 2);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileWriter mockFileWriter0 = new MockFileWriter("@R-#BdV", true);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1168);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(bufferedWriter0, writerConfig0, "{-Q 2i,UIF`Iw", true, byteArrayBuilder0, 2);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "@R-#BdV", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2109, objectMapper0, repairingNsStreamWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      assertEquals(2109, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator1.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, (OutputStream) null, (-1318));
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "Element <{0}> has non-mixed content specification; can not contain non-white space text, or any CDATA sections", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-4247), 1110, objectMapper0, streamWriterDelegate0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", nonNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 3, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber("WwQ[>^'Dh&-VqM e-");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "#", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawUTF8String((byte[]) null, 2, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", false, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, objectMapper0, nonNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[", writerConfig0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2620), 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, repairingNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeUTF8String((byte[]) null, 3, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0._reportUnimplementedStax2("com.ctc.wstx.util.SimpleCache");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.RepairingNsStreamWriter) does not implement Stax2 API natively and is missing method 'com.ctc.wstx.util.SimpleCache': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("{-Q 2UIF`Iw");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "{-Q 2UIF`Iw", true, mockPrintStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "{-Q 2UIF`Iw", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      try { 
        toXmlGenerator0.writeStringField("{-Q 2UIF`Iw", "{-Q 2UIF`Iw");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "WwQ[>^'Dh&-VqM e-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1686), 3, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextIsCData(true);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      LongNode longNode0 = LongNode.valueOf((-3528L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-2230), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw('{');
      assertEquals((-2230), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "R", true, filterOutputStream0, 3);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "R", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      LongNode longNode0 = LongNode.valueOf((-3528L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-562), 42, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsAttribute(false);
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "3", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "QYE&j", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      LongNode longNode0 = LongNode.valueOf((-3528L));
      IOContext iOContext0 = new IOContext(bufferRecycler0, longNode0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-562), 42, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(42, toXmlGenerator0.getFormatFeatures());
  }
}
