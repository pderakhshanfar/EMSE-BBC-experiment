/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 06:53:46 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.base.GeneratorBase;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.SequenceInputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Enumeration;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2301), (-2301), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextIsAttribute(true);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (-2301), (-2301));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "6k{EBJO3+~la", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("6k{EBJO3+~la", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("6k{EBJO3+~la", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(56320, 55296);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("6k{EBJO3+~la", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(55297, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(55297, toXmlGenerator1.getFormatFeatures());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      QName qName0 = new QName("Can not ");
      assertNotNull(qName0);
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "j>MPeosg", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("j>MPeosg", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, nonNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("j>MPeosg", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("j>MPeosg", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.writeNumber((-1662.076576711));
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("j>MPeosg", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0._verifyValueWrite("Current context not Object but ");
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeStringField("NY`.+_2Wj", "M%29Y`{MEi'");
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeEndObject();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      char[] charArray0 = new char[7];
      try { 
        toXmlGenerator0.writeString(charArray0, 55296, 254);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|^9{]~", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("|^9{]~", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1227), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("|^9{]~", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1227), toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("JSON", "JSON", "%)LB*a':3*%p61c");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("|^9{]~", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1227), toXmlGenerator0.getFormatFeatures());
      
      char[] charArray0 = new char[3];
      toXmlGenerator0.writeString(charArray0, 5, (-123));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("|^9{]~", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1227), toXmlGenerator0.getFormatFeatures());
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n", "vW+fFAlE Vy^kY");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(" ", serializedString0.toString());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-609), (-609), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-609), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-609), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-609), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-609), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      
      char[] charArray0 = new char[4];
      toXmlGenerator0.writeRawValue(charArray0, (-609), (-2545));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-609), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-609), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.writeString("Can not create an XMLStreamWriter for given node (of type ");
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      try { 
        toXmlGenerator0.writeRawValue("", 5, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <moY% ^'g>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("JSON", "rzh");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeRawValue("rzh", (-3341), (-52));
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      QName qName0 = QName.valueOf("JSON");
      assertNotNull(qName0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.close();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(13, byteArrayBuilder0.size());
      assertEquals(13, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      try { 
        toXmlGenerator0.writeRawValue("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, (-2504));
      assertNotNull(bufferingXmlWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1), (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      char[] charArray0 = new char[5];
      toXmlGenerator0.writeRaw(charArray0, 2, 2);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, 0);
      assertNotNull(bufferingXmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (byte) (-14), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-14), toXmlGenerator0.getFeatureMask());
      
      char[] charArray0 = new char[2];
      try { 
        toXmlGenerator0.writeRaw(charArray0, 496, 496);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.writeRaw("xm!<4F.?m/rS2#@h", 57343, (-2251));
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.Deserializers$Base", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-759), 2168, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "", false, (OutputStream) null, 2);
      assertNotNull(bufferingXmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      assertNotNull(streamWriterDelegate0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-235), (ObjectCodec) null, streamWriterDelegate0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-235), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      
      QName qName0 = new QName("Current event not START_ELEMENT", "JSON", "Current event not START_ELEMENT");
      assertNotNull(qName0);
      
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-235), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber("");
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-235), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.Deserializers$Base", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-759), 2168, objectMapper0, repairingNsStreamWriter0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = QName.valueOf("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeRawValue("yTiO$Dt*");
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <com.fasterxml.jackson.databind.deser.Deserializers$Base>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertEquals(MapperFeature.USE_STATIC_TYPING, mapperFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(asciiXmlWriter0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "%!`cA*eGXj)8mT", writerConfig0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("%!`cA*eGXj)8mT", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("%!`cA*eGXj)8mT", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      QName qName0 = new QName("", "%!`cA*eGXj)8mT");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("%!`cA*eGXj)8mT", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("%!`cA*eGXj)8mT", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.close();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(33, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(33, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("%!`cA*eGXj)8mT", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, nonNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ToXmlGenerator toXmlGenerator2 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator0, toXmlGenerator2);
      assertSame(toXmlGenerator2, toXmlGenerator1);
      assertSame(toXmlGenerator2, toXmlGenerator0);
      assertNotNull(toXmlGenerator2);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("JSON", nonNsStreamWriter0.getEncoding());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(1, toXmlGenerator2.getFormatFeatures());
      assertTrue(toXmlGenerator2.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator2.getHighestEscapedChar());
      assertFalse(toXmlGenerator2.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator2.getFeatureMask());
      assertEquals((-1), toXmlGenerator2.getOutputBuffered());
      assertFalse(toXmlGenerator2.canWriteObjectId());
      assertTrue(toXmlGenerator2.canOmitFields());
      assertFalse(toXmlGenerator2.isClosed());
      assertTrue(toXmlGenerator2.inRoot());
      assertFalse(toXmlGenerator2.canWriteTypeId());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      SimpleModule simpleModule0 = new SimpleModule();
      assertNotNull(simpleModule0);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.deser.std.MapDeserializer", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("com.fasterxml.jackson.databind.deser.std.MapDeserializer", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1561), objectMapper0, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("com.fasterxml.jackson.databind.deser.std.MapDeserializer", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1561), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals("SimpleModule-2", simpleModule0.getModuleName());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("com.fasterxml.jackson.databind.deser.std.MapDeserializer", nonNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1561), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1561), toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.overrideFormatFeatures(2, 0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-1431), objectMapper0, streamWriter2Delegate0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1431), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1431), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1431), int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      QName qName0 = QName.valueOf("JSON");
      assertNotNull(qName0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.close();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(13, byteArrayBuilder0.size());
      assertEquals(13, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(13, byteArrayBuilder0.size());
      assertEquals(13, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.isClosed());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.PROPAGATE_TRANSIENT_MARKER, mapperFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      assertNotNull(mockPrintStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1116), 55299, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1116), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(55299, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartArray();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1116), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(55299, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1116), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(55299, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(55299, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-1116), toXmlGenerator1.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, nonNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-1), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals((-1), toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartArray();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertFalse(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, streamWriter2Delegate0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 4, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.close();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(54, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(54, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(54, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(54, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.isClosed());
      assertEquals(4, toXmlGenerator1.getFormatFeatures());
      assertEquals(3, toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartArray();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(1, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(1, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "pl!:", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("pl!:", simpleNsStreamWriter0.getEncoding());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "pl!:", true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-403), 2, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("pl!:", simpleNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-403), toXmlGenerator0.getFeatureMask());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals("pl!:", simpleNsStreamWriter0.getEncoding());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-403), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertEquals((-403), toXmlGenerator1.getFeatureMask());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, 376);
      assertNotNull(bufferingXmlWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(prettyPrinter0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      QName qName0 = new QName("G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n", ") does not implement Stax2 API natively and is missing method '");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.writeNumberField(") does not implement Stax2 API natively and is missing method '", (double) 0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.DupDetector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, repairingNsStreamWriter0, true);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 872, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(872, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("JSON", "moY% ^'g", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(872, toXmlGenerator0.getFormatFeatures());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      toXmlGenerator0.writeString(charArray0, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      QName qName0 = new QName("", "", "write null value");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 1, 56319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      
      char[] charArray0 = new char[6];
      try { 
        toXmlGenerator0.writeString(charArray0, (-19), (-2142));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write String value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, (-2504));
      assertNotNull(bufferingXmlWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      assertNotNull(defaultPrettyPrinter0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator1.getFeatureMask());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertTrue(toXmlGenerator1.inRoot());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator1.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      BigDecimal bigDecimal0 = new BigDecimal((long) 55296);
      assertNotNull(bigDecimal0);
      assertEquals((short) (-10240), bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((short) (-10240), bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      try { 
        toXmlGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "S^c|'3LxV3>|\u0007Y6V", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("S^c|'3LxV3>|\u0007Y6V", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (byte)1, (byte) (-1), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("S^c|'3LxV3>|\u0007Y6V", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 664, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(664, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(664, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 73, 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("id");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, ".x]qteTd@w:Y<|9fTq", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(".x]qteTd@w:Y<|9fTq", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-11), (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(".x]qteTd@w:Y<|9fTq", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-11), toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName(":,jm`( S9Fl?PeqdoV");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals(".x]qteTd@w:Y<|9fTq", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-11), toXmlGenerator0.getFormatFeatures());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      charArray0[1] = 't';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'i';
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 0, 3398);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 928, 928, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(928, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(928, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      QName qName0 = QName.valueOf("'+D<Y9#YbVW6");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(928, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(928, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("'+D<Y9#YbVW6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 43, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "write null value", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("write null value", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-4055), (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals("write null value", nonNsStreamWriter0.getEncoding());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-4055), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("write null value", (-305), (-100));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "&]", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("&]", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("&]", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 159, (-31), objectMapper0, simpleNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertEquals(0, pipedInputStream0.available());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals((-31), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(159, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw('a');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, (OutputStream) null, (-1758));
      assertNotNull(bufferingXmlWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      assertNotNull(streamWriterDelegate0);
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 4, (ObjectCodec) null, streamWriterDelegate0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals("JSON", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0.writeRaw('a');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, streamWriter2Delegate0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("p{<&$q/-", "p{<&$q/-", "");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-609), (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-609), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", "com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals((-609), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      BigDecimal bigDecimal0 = new BigDecimal(57343);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-8193), bigDecimal0.shortValue());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeString("JSON");
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      
      try { 
        toXmlGenerator0.writeNumber("}#xISW");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("moY% ^'g", "moY% ^'g", "Cs{L<|");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 295, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(295, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(295, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      char[] charArray0 = new char[0];
      asciiXmlWriter0.writeRawAscii(charArray0, 55, (-857));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, charArray0.length);
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2315), (-2315), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2315), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-2315), toXmlGenerator0.getFeatureMask());
      
      QName qName0 = new QName("JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2315), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-2315), toXmlGenerator0.getFeatureMask());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((float) (-2315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -857
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-7), (-7), objectMapper0, streamWriter2Delegate0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-7), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-7), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-7), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-7), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((double) 56320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write null value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, streamWriter2Delegate0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2108), 3, objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2108), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-2108), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      char[] charArray0 = new char[4];
      asciiXmlWriter0.writeRawAscii(charArray0, (-2108), (-2108));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(4, charArray0.length);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2108
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MapperFeature mapperFeature0 = MapperFeature.USE_STATIC_TYPING;
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.USE_STATIC_TYPING, mapperFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertEquals(16384, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 97, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, (int) (byte)125, (int) (byte)64);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write Binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      MapperFeature mapperFeature0 = MapperFeature.REQUIRE_SETTERS_FOR_GETTERS;
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(256, mapperFeature0.getMask());
      assertEquals(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS, mapperFeature0);
      
      IOContext iOContext0 = new IOContext((BufferRecycler) null, mapperFeature0, false);
      assertNotNull(iOContext0);
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(256, mapperFeature0.getMask());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "&m@I9|Vz", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("&m@I9|Vz", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2482, 0, (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(256, mapperFeature0.getMask());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("&m@I9|Vz", nonNsStreamWriter0.getEncoding());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2482, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("> as a child of <");
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.writeString("Can not create an XMLStreamWriter for given node (of type ");
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <moY% ^'g>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, (-2504));
      assertNotNull(bufferingXmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2504), 3, (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2504), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.writeRaw('Q');
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-2504), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.handleMissingName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 21, 3, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(21, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeRaw('E');
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 27, 3, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertEquals(27, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      QName qName0 = new QName("lzVL7mw,0Va");
      assertNotNull(qName0);
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode(pipedOutputStream0);
      assertNotNull(pOJONode0);
      assertFalse(pOJONode0.isIntegralNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(pOJONode0.isIntegralNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-4274), (-27), objectMapper0, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(pOJONode0.isIntegralNumber());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertNull(pOJONode0.textValue());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-27), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-4274), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "pl!:", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("pl!:", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 28, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("pl!:", simpleNsStreamWriter0.getEncoding());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(28, toXmlGenerator0.getFormatFeatures());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.configure((ToXmlGenerator.Feature) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 3, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(4, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      try { 
        toXmlGenerator0._verifyValueWrite("%):IKI");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not %):IKI, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write null value", writerConfig0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(nonNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("write null value", nonNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 159, objectMapper0, nonNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertEquals("write null value", nonNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFeatureMask());
      assertEquals(159, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      try { 
        toXmlGenerator0._reportUnimplementedStax2("Ht;/");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.NonNsStreamWriter) does not implement Stax2 API natively and is missing method 'Ht;/': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 12, 3, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(12, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      QName qName0 = new QName("lzVL7mw,0Va");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(12, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ToXmlGenerator toXmlGenerator0 = null;
      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, (XMLStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeRaw(") as character #");
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeRawValue("yTiO$Dt*");
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("yTiO$Dt*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "VALUE_EMBEDDED_OBJECT", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("VALUE_EMBEDDED_OBJECT", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, simpleNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("VALUE_EMBEDDED_OBJECT", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("VALUE_EMBEDDED_OBJECT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      
      toXmlGenerator0._handleEndObject();
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
      assertEquals((-19), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      toXmlGenerator0._handleStartObject();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode(bufferRecycler0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(pOJONode0);
      assertNull(pOJONode0.textValue());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isIntegralNumber());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, true);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(pOJONode0.textValue());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "=cF_2:*'-<Ye|", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("=cF_2:*'-<Ye|", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      assertNotNull(streamWriter2Delegate0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("=cF_2:*'-<Ye|", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1822, 1, objectMapper0, streamWriter2Delegate0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(pOJONode0.textValue());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isMissingNode());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isBigInteger());
      assertFalse(pOJONode0.isInt());
      assertFalse(pOJONode0.isShort());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.booleanValue());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isIntegralNumber());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertEquals("=cF_2:*'-<Ye|", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(1822, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, (OutputStream) null, (-1758));
      assertNotNull(bufferingXmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "start an object", writerConfig0);
      assertNotNull(nonNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("start an object", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-231), (ObjectCodec) null, nonNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, nonNsStreamWriter0.getAttributeCount());
      assertNull(nonNsStreamWriter0.getBaseUri());
      assertEquals("start an object", nonNsStreamWriter0.getEncoding());
      assertEquals("1.0", nonNsStreamWriter0.getXmlVersion());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-231), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      try { 
        toXmlGenerator0.writeFieldName((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn((-3087));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      QName qName0 = new QName("G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n", ") does not implement Stax2 API natively and is missing method '");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.close();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.PROPAGATE_TRANSIENT_MARKER, mapperFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      assertNotNull(mockPrintStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.writeStartArray();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.flush();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.Deserializers$Base", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-759), 2168, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.flush();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      QName qName0 = new QName("G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n", "v]+dFAlE Vy^kY");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1969), (-1969), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigInteger0.shortValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1969), (-1969), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.deser.Deserializers$Base");
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "com.fasterxml.jackson.databind.deser.Deserializers$Base", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-759), 2168, objectMapper0, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("com.fasterxml.jackson.databind.deser.Deserializers$Base", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(2168, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-759), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1969), (-1969), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1969), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      assertNotNull(bigInteger0);
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      QName qName0 = new QName("G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n", "G=x .%n$c~|tUju]n");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      BigDecimal bigDecimal0 = new BigDecimal(3);
      assertNotNull(bigDecimal0);
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      BigDecimal bigDecimal0 = new BigDecimal(55296);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short) (-10240), bigDecimal0.shortValue());
      
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      QName qName0 = new QName("com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper$Base", "com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper$Base", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1024), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1024), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1024), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1024), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      BigDecimal bigDecimal0 = new BigDecimal((-261));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-261), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      assertNotNull(iSOLatin1XmlWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayBuilder0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1024), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1024), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      BigDecimal bigDecimal0 = new BigDecimal((-261));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-261), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "yF", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("yF", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("yF", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      QName qName0 = new QName("yF");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.useDefaultPrettyPrinter();
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("yF", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertFalse(toXmlGenerator1.isClosed());
      assertEquals(5, toXmlGenerator1.getFormatFeatures());
      assertEquals(5, toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("yF", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.writeNumber((float) 57343);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("yF", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(iSOLatin1XmlWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-17), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      
      QName qName0 = QName.valueOf("G=x .%n$c~|tUju]n");
      assertNotNull(qName0);
      
      toXmlGenerator1._nextIsUnwrapped = true;
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-17), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      
      toXmlGenerator1.setNextName(qName0);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(1, iSOLatin1XmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("G=x .%n$c~|tUju]n", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals((-17), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator1.getFormatFeatures());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.inRoot());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals((-17), toXmlGenerator1.getFeatureMask());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      
      try { 
        toXmlGenerator1.writeNumber((float) 56319);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-83), (-83), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0._nextIsAttribute = true;
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0.writeNumber((float) (-83));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write an attribute when there is no open start element.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertEquals(MapperFeature.PROPAGATE_TRANSIENT_MARKER, mapperFeature0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, false);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      assertNotNull(mockPrintStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(4, mapperFeature0.getMask());
      assertFalse(mapperFeature0.enabledByDefault());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-83), (-83), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.writeNumber((float) (-83));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-83), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-83), toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      assertNotNull(serializedString0);
      assertEquals(1, serializedString0.charLength());
      assertEquals(" ", serializedString0.getValue());
      assertEquals(" ", serializedString0.toString());
      
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.useDefaultPrettyPrinter();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertSame(toXmlGenerator1, toXmlGenerator0);
      assertNotNull(toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator1.canOmitFields());
      assertEquals(5, toXmlGenerator1.getFormatFeatures());
      assertTrue(toXmlGenerator1.inRoot());
      assertFalse(toXmlGenerator1.canWriteBinaryNatively());
      assertFalse(toXmlGenerator1.canWriteObjectId());
      assertEquals(5, toXmlGenerator1.getFeatureMask());
      assertEquals(0, toXmlGenerator1.getHighestEscapedChar());
      assertFalse(toXmlGenerator1.isClosed());
      assertFalse(toXmlGenerator1.canWriteTypeId());
      assertEquals((-1), toXmlGenerator1.getOutputBuffered());
      assertTrue(toXmlGenerator1.canWriteFormattedNumbers());
      
      toXmlGenerator0.writeStartObject();
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.writeNumberField("H#ZY?!6xX'r\"WG<=", (double) 56320);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertSame(toXmlGenerator0, toXmlGenerator1);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON", "rzh");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      try { 
        toXmlGenerator0.writeNumber(2.147483647E9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      assertNotNull(defaultSerializerProvider_Impl0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      assertNotNull(defaultDeserializationContext_Impl0);
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JSON", false);
      assertNotNull(mockFileOutputStream0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "S^c|'3LxV3>|\u0007Y6V", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("S^c|'3LxV3>|\u0007Y6V", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 5, 0, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, defaultDeserializationContext_Impl0.getDeserializationFeatures());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("S^c|'3LxV3>|\u0007Y6V", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((double) 57343);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      assertNotNull(streamWriter2Delegate0);
      
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, streamWriter2Delegate0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      QName qName0 = new QName("][i}:Vmji+z", "][i}:Vmji+z");
      assertNotNull(qName0);
      
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      assertNotNull(defaultXmlPrettyPrinter0);
      
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(3, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      QName qName0 = new QName("JSON", "rzh");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      
      try { 
        toXmlGenerator0.writeNumber((long) (-3));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, (String) null, false, (OutputStream) null, (-1758));
      assertNotNull(bufferingXmlWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "start an object", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("start an object", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 445, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertNotNull(toXmlGenerator0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, bufferingXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("start an object", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(445, toXmlGenerator0.getFeatureMask());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((long) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      QName qName0 = new QName("JSON", "rzh");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      
      toXmlGenerator0.writeNumber((long) (-3));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.isClosed());
      
      try { 
        toXmlGenerator0.writeNumber((-1975));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55281, 55281, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(55281, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(55281, toXmlGenerator0.getFormatFeatures());
      
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(55281, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(55281, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.setNextIsAttribute(true);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals(55281, toXmlGenerator0.getFeatureMask());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(55281, toXmlGenerator0.getFormatFeatures());
      
      try { 
        toXmlGenerator0.writeNumber(55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write an attribute when there is no open start element.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      POJONode pOJONode0 = new POJONode(bufferRecycler0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(pOJONode0);
      assertFalse(pOJONode0.isBigInteger());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, true);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      assertFalse(pOJONode0.isBigInteger());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      assertNotNull(objectMapper0);
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "=cF_2:*'-<Ye|", writerConfig0);
      assertNotNull(simpleNsStreamWriter0);
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("=cF_2:*'-<Ye|", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 5, objectMapper0, simpleNsStreamWriter0);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertFalse(pOJONode0.isBigInteger());
      assertEquals(JsonNodeType.POJO, pOJONode0.getNodeType());
      assertNull(pOJONode0.textValue());
      assertFalse(pOJONode0.isIntegralNumber());
      assertFalse(pOJONode0.isFloat());
      assertFalse(pOJONode0.isFloatingPointNumber());
      assertFalse(pOJONode0.isArray());
      assertFalse(pOJONode0.isDouble());
      assertFalse(pOJONode0.isMissingNode());
      assertFalse(pOJONode0.isLong());
      assertEquals(0, pOJONode0.size());
      assertFalse(pOJONode0.booleanValue());
      assertNull(pOJONode0.numberType());
      assertFalse(pOJONode0.isObject());
      assertFalse(pOJONode0.isBigDecimal());
      assertFalse(pOJONode0.isShort());
      assertEquals(JsonToken.VALUE_EMBEDDED_OBJECT, pOJONode0.asToken());
      assertFalse(pOJONode0.isInt());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertEquals(0, simpleNsStreamWriter0.getAttributeCount());
      assertNull(simpleNsStreamWriter0.getBaseUri());
      assertEquals("=cF_2:*'-<Ye|", simpleNsStreamWriter0.getEncoding());
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(2, toXmlGenerator0.getFeatureMask());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-3854));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON", "JSON", "JSON");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      
      toXmlGenerator0.writeNumber((-1975));
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertTrue(writerConfig0.willValidateContent());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willFixContent());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willValidateAttributes());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-1975), toXmlGenerator0.getFeatureMask());
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteObjectId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      assertNotNull(iOContext0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      assertNotNull(writerConfig0);
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2301), (-2301), objectMapper0, repairingNsStreamWriter0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNotNull(toXmlGenerator0);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      QName qName0 = new QName("moY% ^'g", "COLOR", "JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      
      toXmlGenerator0.writeNull();
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertFalse(writerConfig0.willValidateNames());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willEscapeCr());
      assertTrue(writerConfig0.willValidateStructure());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.isClosed());
      assertEquals((-2301), toXmlGenerator0.getFormatFeatures());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals((-2301), toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      QName qName0 = new QName("JSON");
      assertNotNull(qName0);
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      
      toXmlGenerator0.writeBinary((byte[]) null, (-3957), (-1692));
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canParseAsync());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals(0, byteArrayBuilder0.size());
      assertTrue(writerConfig0.willValidateContent());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertFalse(writerConfig0.willValidateAttributes());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      assertFalse(toXmlGenerator0.isClosed());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      assertNotNull(iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      assertNotNull(byteArrayBuilder0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      assertNotNull(writerConfig0);
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      assertNotNull(asciiXmlWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      assertNotNull(repairingNsStreamWriter0);
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      
      QName qName0 = new QName("JSON", "rzh");
      assertNotNull(qName0);
      
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertNotNull(toXmlGenerator0);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.setNextIsUnwrapped(true);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      toXmlGenerator0.setNextName(qName0);
      assertEquals(56320, GeneratorBase.SURR2_FIRST);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
      assertEquals(56319, GeneratorBase.SURR1_LAST);
      assertEquals(55296, GeneratorBase.SURR1_FIRST);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertFalse(jsonFactory0.requiresPropertyOrdering());
      assertEquals(" ", jsonFactory0.getRootValueSeparator());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertTrue(jsonFactory0.canParseAsync());
      assertFalse(jsonFactory0.canHandleBinaryNatively());
      assertTrue(jsonFactory0.canUseCharArrays());
      assertFalse(jsonFactory0.requiresCustomCodec());
      assertEquals(0, byteArrayBuilder0.size());
      assertEquals(0, byteArrayBuilder0.getCurrentSegmentLength());
      assertEquals("woodstox", writerConfig0.getImplName());
      assertFalse(writerConfig0.willValidateNames());
      assertTrue(writerConfig0.willValidateContent());
      assertEquals("wstxns", writerConfig0.getAutomaticNsPrefix());
      assertTrue(writerConfig0.willSupportNamespaces());
      assertFalse(writerConfig0.willAddSpaceAfterEmptyElem());
      assertTrue(writerConfig0.willEscapeCr());
      assertFalse(writerConfig0.automaticNamespacesEnabled());
      assertTrue(writerConfig0.willValidateStructure());
      assertFalse(writerConfig0.willCopyDefaultAttrs());
      assertEquals(933, writerConfig0.getConfigFlags());
      assertFalse(writerConfig0.willAutoCloseOutput());
      assertFalse(writerConfig0.willOutputCDataAsText());
      assertFalse(writerConfig0.willValidateAttributes());
      assertEquals("5.0", writerConfig0.getImplVersion());
      assertFalse(writerConfig0.willUseDoubleQuotesInXmlDecl());
      assertTrue(writerConfig0.automaticEndElementsEnabled());
      assertTrue(writerConfig0.automaticEmptyElementsEnabled());
      assertFalse(writerConfig0.willFixContent());
      assertEquals(1, asciiXmlWriter0.getRow());
      assertNull(repairingNsStreamWriter0.getBaseUri());
      assertEquals(0, repairingNsStreamWriter0.getAttributeCount());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
      assertEquals("JSON", repairingNsStreamWriter0.getEncoding());
      assertFalse(toXmlGenerator0.canWriteObjectId());
      assertTrue(toXmlGenerator0.canWriteFormattedNumbers());
      assertEquals(5, toXmlGenerator0.getFeatureMask());
      assertFalse(toXmlGenerator0.canWriteTypeId());
      assertFalse(toXmlGenerator0.isClosed());
      assertTrue(toXmlGenerator0.inRoot());
      assertTrue(toXmlGenerator0.canOmitFields());
      assertFalse(toXmlGenerator0.canWriteBinaryNatively());
      assertEquals((-3), toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), toXmlGenerator0.getOutputBuffered());
      assertEquals(0, toXmlGenerator0.getHighestEscapedChar());
      
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "", "");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeBoolean(true);
      assertEquals((-1975), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      QName qName0 = new QName("1.0", "1.0", "1.0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-1169), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (-19), 1744);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -19
         //
         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextName(qName0);
      try { 
        toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, (-1975), (-1771));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      QName qName0 = new QName("1.0", "1.0", "1.0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextName(qName0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(1000000);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArrayBuilder0.NO_BYTES, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, streamWriterDelegate0);
      char[] charArray0 = new char[0];
      try { 
        toXmlGenerator0.writeRaw(charArray0, 1, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2655, 0, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 56320, 2655);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56320
         //
         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "i}kB:8NtvXcYVv", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4001, 2, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("i}kB:8NtvXcYVv", (-871), 10);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("", (-1), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2605), (-2605), objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("G=x .%n$c~|tUju]n");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2816, 2816, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2816, 2816);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2816, 2816, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      char[] charArray0 = new char[2];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2816, 2816);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <JSON>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2816, 2816, objectMapper0, repairingNsStreamWriter0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2816, 2816);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      QName qName0 = new QName("1.0", "1.0", "1.0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("L&V@zzA6fv|@Ff", 0, 51);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      QName qName0 = new QName("1.0", "1.0", "1.0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("L&V@zzA6fv|@Ff", 0, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 57343, 7, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("': this breaks functionality such as indentation that relies on it. ", 56320, 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("L&V@zzA6fv|@Ff", 0, 51);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-40), objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("WRITE_XML_DECLARATION");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextName(qName0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 55296, 56319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 55296
         //
         verifyException("com.ctc.wstx.util.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      POJONode pOJONode0 = new POJONode(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "=cF_2:*'-<Ye|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 5, objectMapper0, simpleNsStreamWriter0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0._nextIsCData = true;
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextName(qName0);
      try { 
        toXmlGenerator0.writeString("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output a CDATA block outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      QName qName0 = new QName("JSON", "JSON", "JSON");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1975), (-1975), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      toXmlGenerator0.setNextName(qName0);
      try { 
        toXmlGenerator0.writeString("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, streamWriter2Delegate0, true);
      QName qName0 = new QName("1.0", "1.0", "1.0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.setNextName(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("1.0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write END_ELEMENT without open START_ELEMENT
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      POJONode pOJONode0 = new POJONode(bufferRecycler0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pOJONode0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "=cF_2:*'-<Ye|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-233), (-233), objectMapper0, simpleNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.writeStartArray();
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("H.:4Jp[h");
      toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeEndArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "pl!:", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 28, (ObjectCodec) null, simpleNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Array but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.writeEndArray();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("moY% ^'g", "JSON", "moY% ^'g");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.inRoot();
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("moY% ^'g");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName("moY% ^'g");
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1), 0, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("moY% ^'g");
      toXmlGenerator0.setNextName(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("moY% ^'g");
      toXmlGenerator0.useDefaultPrettyPrinter();
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-13), (-13), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals((-13), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "&m@I9|Vz", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2482, (-2361), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("[A53c$/&");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      assertEquals((-2361), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      IOContext iOContext0 = new IOContext((BufferRecycler) null, toXmlGenerator_Feature0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-237), 0, objectMapper0, streamWriter2Delegate0);
      QName qName0 = new QName("JSON", "nI8rg$.VHy\"WxHks", "nI8rg$.VHy\"WxHks");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("JSON");
      toXmlGenerator0.setNextName(qName0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(5, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-3), objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals((-3), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1116), 55299, objectMapper0, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(55299, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedWriter pipedWriter0 = new PipedWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(pipedWriter0, writerConfig0, "JSON", true, (OutputStream) null, (-2504));
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "write null value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures((-2108), (-1878));
      assertEquals((-3967), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2), 0, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(0, (-1564));
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      // Undeclared exception!
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      try { 
        toXmlGenerator0.writeRaw("a&Y`gPv8F#4T{s'");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid white space character (0x7f) in text to output (in xml 1.1, could output as a character entity)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 5, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber("}#xISW");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 56319, 57343);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, streamWriter2Delegate0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertTrue(boolean0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mapperFeature0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1116), 55299, objectMapper0, repairingNsStreamWriter0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(55299, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-83), (-83), objectMapper0, repairingNsStreamWriter0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, objectMapper0, streamWriter2Delegate0);
      SerializedString serializedString0 = new SerializedString("JSON");
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(dataOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "pl!:", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "pl!:", true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-403), 2, (ObjectCodec) null, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals((-1), int0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeUTF8String((byte[]) null, 2, 3);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Underlying Stax XMLStreamWriter (of type ", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 5, (ObjectCodec) null, streamWriterDelegate0);
      char[] charArray0 = new char[1];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2710, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("G=x .%n$c~|tUju]n", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "G=x .%n$c~|tUju]n", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-17), 0, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeStringField((String) null, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), (-1), objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsCData(true);
      assertEquals((-1), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder((BufferRecycler) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1969), (-1969), objectMapper0, repairingNsStreamWriter0);
      assertEquals((-1969), toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-1970), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), (-19), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals((-19), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 4480, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(4480, toXmlGenerator0.getFormatFeatures());
  }
}
