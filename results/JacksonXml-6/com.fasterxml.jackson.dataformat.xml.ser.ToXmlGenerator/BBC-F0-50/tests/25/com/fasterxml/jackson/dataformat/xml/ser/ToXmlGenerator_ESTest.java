/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 01:54:09 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.StringWriter;
import java.math.BigDecimal;
import java.math.BigInteger;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[4];
      toXmlGenerator0.writeRaw(charArray0, 55296, (-773));
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "34ogxa#[&GR?r8[?\"", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1135), (-2008), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("q+}$6i%bz,47%-Ede");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName("JSON");
      assertEquals((-2008), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, streamWriterDelegate0);
      toXmlGenerator0._verifyValueWrite("q>JGXt");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledByDefault();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbYNv0hY9Dd}I%\"{|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbYNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-432), (-432), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbYNv0hY9Dd}I%\"{|", "sPbYNv0hY9Dd}I%\"{|", "sPbYNv0hY9Dd}I%\"{|");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      toXmlGenerator0.writeString(charArray0, 132, (-432));
      assertEquals((-432), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 762, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("g}>", "PEL1C\"XU:k?#9M}<4", "11czVkQ:nHZ>iG");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(56319);
      char[] charArray0 = new char[2];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2211, 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <mZ>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(10.0F);
      try { 
        toXmlGenerator0.writeRawValue("start an array", 735, (-1980));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <mZ>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeRawValue("PEL1C\"XU:k?#9M}<4", 719, (-81));
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "' found, can't remove", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "write String value", "write String value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      toXmlGenerator0.writeNumber(bigInteger0);
      try { 
        toXmlGenerator0.writeRawValue("mm");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <write String value>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      try { 
        defaultXmlPrettyPrinter0.writeEndObject(toXmlGenerator0, 735);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write END_ELEMENT without open START_ELEMENT
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1305);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1305, 1305, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw("#", 57343, (-1));
      assertEquals(1305, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 762, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("g}/>", "PEL1C\"XU:k?#9M}<4", "11czVkQ:nHZ>iG");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(".UnshOfjz#hU");
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-{8!|D)^Y5)");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "-W^54g", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3967), 358, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("oao", "m$)T3W cexDF2ufT", ", expecting field name");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      try { 
        toXmlGenerator0.writeNumber((double) 358);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unbound namespace URI 'oao'
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 728, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("g}>", "PEL1C\"XU:k?#9M}<4", "11czVkQ:nHZ>iG");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((double) (byte)9);
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "' found, can't remove", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "write String value", "write String value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      toXmlGenerator0.writeNumber(bigInteger0);
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <write String value>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      StringWriter stringWriter0 = new StringWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, (String) null, true, mockFileOutputStream0, (-3695));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 262144, (-940), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("|/@Iw,4Urwg6|^CP!", "", "X");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber((short) (-2180));
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, ">qSvgx|sC[EsdVy", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "]T5-XoA/`[Jh!m\"", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1550, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("Current context not Array but ", "SCALAR", "Current context not Array but ");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, (-249), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", "=kszF`", "w{MX\"[+TrF7");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 3, (-1838));
      assertEquals((-249), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "z9<r~0B4nqu$(\"", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("=kszF`", "", "z9<r~0B4nqu$(\"");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "Wjv1m!q)&6s", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, repairingNsStreamWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("WRITE_XML_1_1");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockPrintStream mockPrintStream0 = new MockPrintStream("z;|)k7 kQz<GJtr-jiZ");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "z;|)k7 kQz<GJtr-jiZ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 396, 2, objectMapper0, simpleNsStreamWriter0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("z;|)k7 kQz<GJtr-jiZ");
      toXmlGenerator1.setPrettyPrinter(defaultPrettyPrinter0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PCtNM", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 180);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PCtNM", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1492), (-1492), (ObjectCodec) null, repairingNsStreamWriter0);
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter((PrettyPrinter) null);
      assertEquals((-1492), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(747);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter0, writerConfig0, "Current context not Array but ", true, byteArrayBuilder0, 3);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "W$5g", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.overrideFormatFeatures(0, 56319);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(735);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", true, byteArrayOutputStream0, (-1156));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1193), (-1156), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures((-1193), 3);
      assertEquals((-1153), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.inRoot();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, repairingNsStreamWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("$VALUES", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "$VALUES", false, mockFileOutputStream0, 809);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "$VALUES", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, (-2774), (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-2774), int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.writeStartObject();
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(1550, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3780), (-1735), (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-1733), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 1, (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mZ");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1550, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(735);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", true, byteArrayOutputStream0, (-1156));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1193), (-1156), (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-1156), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "id", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-202), 719, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(718, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.dtd.DTDCdataAttr", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, (-736), objectMapper0, streamWriter2Delegate0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals((-736), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mZ");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1550, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 4278, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField("mm", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2188, 2188, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbYNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbYNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbYNv0hY9Dd}I%\"{|", "sPbYNv0hY9Dd}I%\"{|", "sPbYNv0hY9Dd}I%\"{|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 132, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 132
         //
         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-665), 415, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("UTF8");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[3];
      asciiXmlWriter0.writeRawAscii(charArray0, 56319, (-767));
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("sPbNv0hY9Dd}I%\"{|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "N.IpSdN7~`~h$r", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 821, 15711167, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeRawValue("");
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <mZ>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1783), (-1783), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "i", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-9), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      iSOLatin1XmlWriter0.writeRawAscii((char[]) null, (-1253), (-1876));
      QName qName0 = new QName("i");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "mm", "mm");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(56320);
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <mm>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("g}>");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      Version version0 = new Version(742, 2, 15711167, "UTF-8", "UTF-8", "UTF-8");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2769, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("*E0mosS|T6ULtL{F'7", "PEL1C\"XU:k?#9Mf<|", "*E0mosS|T6ULtL{F'7");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-2434), (-1769));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-1), 735);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-202), 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("PEL1C\"XU:k?#9M}<4", 55296, 57343);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(751);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 751);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 751, 751, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null, 56320, 57343);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BufferingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2385);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.core.json.JsonReadContext", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, ", expecting field name", true, mockFileOutputStream0, 2385);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 2002, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9Mf<|", "mZ", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PCtNM", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 180);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PCtNM", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1492), (-1492), (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw((char[]) null, 0, 180);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ".'", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("dW)qyh-", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, ".'", false, mockFileOutputStream0, 0);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, ".'", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-499), (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 56320, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>J(X =t", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.dtd.DTDCdataAttr", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, (-736), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw('v');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "11czVkQ:nHZ>i\"/G", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1570, 1570, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("Invalid id attribute \"{0}\" for element <{1}>: already had id attribute \"", "Underlying Stax XMLStreamWriter (of type ", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      FloatNode floatNode0 = FloatNode.valueOf(719);
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "' found, can't remove", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "write String value", "write String value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      BigInteger bigInteger0 = floatNode0.bigIntegerValue();
      toXmlGenerator0.writeNumber(bigInteger0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <write String value>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "nh#Ml<D}+og6|q", false, mockFileOutputStream0, 735);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "nh#Ml<D}+og6|q", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1444, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("nh#Ml<D}+og6|q", "PEL1C\"XU:k?#9Mf<|", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      try { 
        toXmlGenerator0.writeNumber("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unbound namespace URI 'nh#Ml<D}+og6|q'
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Long long0 = new Long(1L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, long0, false);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 735, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-4449L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriterDelegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 1288, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("q>JGXt", "id", "start an object");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(658);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.NonNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 8, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("U\"))Y=+XO<pl*w#");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-114.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0.writeNumber((double) 735);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Current context not Array but ", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "mZ", false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1153), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("Can not write a field name, expecting a value", "", "Can not write a field name, expecting a value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      Version version0 = new Version(3, 2, 15711167, "UTF-8", "UTF-8", "UTF-8");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2769, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeFieldName("UTF-8");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, streamWriterDelegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      char[] charArray0 = new char[0];
      asciiXmlWriter0.writeRawAscii(charArray0, 719, (-919));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 645, 645, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("", "mm", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)99, (int) (byte)42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Cannot pass null KeyDeserializers", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-945), 1, objectMapper0, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:kw?#9Mf<|", "JSON");
      // Undeclared exception!
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "id", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNumber(56320);
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <id>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeBoolean(false);
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1473);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 5);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, (-2376), (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.handleMissingName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "com.ctc.wstx.dtd.DTDIdAttr", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 15711167, 748, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "i", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-9), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNull();
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "N.IpSdN7~`~h$r", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-736), 0, objectMapper0, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("", "PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0._verifyValueWrite("PEL1C\"XU:k?#9M}<4");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not PEL1C\"XU:k?#9M}<4, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0._reportUnimplementedStax2("com.fasterxml.jackson.databind.node.FloatNode");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.RepairingNsStreamWriter) does not implement Stax2 API natively and is missing method 'com.fasterxml.jackson.databind.node.FloatNode': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, (-1368), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      char[] charArray0 = new char[1];
      toXmlGenerator0.writeRawValue(charArray0, (-1368), (-1368));
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <PEL1C\"XU:k?#9M}<4>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "EesD 2", false);
      ToXmlGenerator toXmlGenerator0 = null;
      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, (ObjectCodec) null, (XMLStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "' found, can't remove", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mm", "write String value", "write String value");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0.writeNumber((long) 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write number, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((long) 697);
      assertEquals(697, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1252, (-1142), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", true, mockFileOutputStream0, (-1156));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "[,~=%gUg$]+R9J^/=U", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-737), 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw("U)");
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString("PEL1C\"XU:k?#9M}<4");
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("VALUE_STRING");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("writeRaw");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, (-1368), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0._handleStartObject();
      assertEquals((-1368), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "ISO-Latin1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("JsonIgnoreProperties.Value(ignored=%s,ignoreUnknown=%s,allowGetters=%s,allowSetters=%s,merge=%s)", "PEL1C\"XU:k?#9M}<4", "PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, (-249), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion", "=kszF`", "w{MX\"[+TrF7");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldId((-27L));
      toXmlGenerator0.writeNumber(0L);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion");
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      assertEquals((-249), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-665), 415, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("UTF8");
      toXmlGenerator0.setNextName(qName0);
      assertEquals(415, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(79);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 79, (-607), objectMapper0, simpleNsStreamWriter0);
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "' found, can't remove", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray(56319);
      // Undeclared exception!
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter0, writerConfig0, "", true, byteArrayBuilder0, 1);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 183, objectMapper0, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "i", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-9), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, streamWriterDelegate0);
      toXmlGenerator0.flush();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("i", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "i", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-9), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=,QO<`");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "=,QO<`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("=,QO<`");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2674, 2674, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.DeserializationFeature");
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      IntNode intNode0 = IntNode.valueOf(2674);
      BigInteger bigInteger0 = intNode0.bigIntegerValue();
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 762, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2674, 2674, (ObjectCodec) null, repairingNsStreamWriter0);
      IntNode intNode0 = IntNode.valueOf(2674);
      BigInteger bigInteger0 = intNode0.bigIntegerValue();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 728, 728, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("g}>", "PEL1C\"XU:k?#9M}<4", "11czVkQ:nHZ>iG");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(728, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("},ZkBLo3=Pq!c)t");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-196), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1\"\"XU,k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "PEL1\"\"XU,k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName(")VvM;@J$a_o");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseNsStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigDecimal) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "PEL1\"\"XU,k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[3];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(10.0F);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "mm", writerConfig0);
      QName qName0 = new QName("mm", "start an array", "Re,]p\"");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1), 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      try { 
        toXmlGenerator0.writeNumber((float) 735);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write an attribute when there is no open start element.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(")2>BV{AP<~G", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, ")2>BV{AP<~G", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((float) 735);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4", "Wp5Ojw=8Oc\"gnw-");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((-3536.1468416133));
      assertEquals(528, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 4210);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "?MCHtQ(C`,LcbtW", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4210, 0, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      QName qName0 = new QName("t]W\".", "g}>", "mm");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "g}>", false, mockPrintStream0, 735);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, (String) null, writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 769, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-4023.7869705875));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ", "mZ", "mZ");
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber((long) 735);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 691, 691, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      try { 
        toXmlGenerator0.writeNumber((long) 56320);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", true, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNumber(303);
      assertEquals(528, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.DeserializationFeature");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      try { 
        toXmlGenerator0.writeNumber((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(1420);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2674, 2674, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.DeserializationFeature");
      toXmlGenerator0._nextIsUnwrapped = true;
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeNull();
      assertEquals(2674, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("3XVr");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(objectOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "3XVr", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 171, 171, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("writeRawValue");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.writeNull();
      toXmlGenerator0.setNextIsCData(true);
      try { 
        toXmlGenerator0.writeString((char[]) null, 697, 171);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output a CDATA block outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeBoolean(true);
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, streamWriterDelegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPh&bNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPh&bNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPh&bNv0hY9Dd}I%\"{|");
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.setNextNameIfMissing(qName0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 719, 719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 719
         //
         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(747);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter0, writerConfig0, "Current context not Array but ", true, byteArrayBuilder0, 3);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "W$5g", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("Current context not Array but ", "", "");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsUnwrapped(true);
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArrayBuilder0.NO_BYTES, 147, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, (-249), (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, (byte[]) null, 3, (-1838));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPh&bNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPh&bNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 719, 719);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 57343, 735);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = FloatNode.valueOf(0.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "q>JGXt", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("zQiR$S)-r", 4582, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "start an object", false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "id", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("start an object", 0, 55296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2, 1858, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("BR}8lzG{9m.y:Pt.{ZO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("cwR 5R", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", true, mockFileOutputStream0, 4);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "Current context not Array but ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("cwR 5R", "Current context not Array but ", "PEL1C\"XU:k?#9Mf<|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 1459, 1024);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{8~9QO>>a+6q", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "{8~9QO>>a+6q", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 1, (ObjectCodec) null, streamWriterDelegate0);
      char[] charArray0 = new char[7];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 1, 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbYNv0hY9Dd}I%\"{|", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbYNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-432), (-432), (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, (-432), (-1929));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      QName qName0 = new QName("");
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2213), 735, (ObjectCodec) null, xMLStreamWriter2_0);
      toXmlGenerator0.setNextNameIfMissing(qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("8D,!", 56319, 56320);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.ser.BeanSerializerModifier");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-2213), 735, (ObjectCodec) null, xMLStreamWriter2_0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("8D,!", 56319, 56320);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-433), 735, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("com.fasterxml.jackson.core.JsonGenerationException");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("3XVr");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(objectOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "3XVr", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 171, 171, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("writeRawValue");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsCData(true);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((char[]) null, 697, 171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[5];
      toXmlGenerator0.writeString(charArray0, 858, (-1370));
      assertEquals(528, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(244);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 244, 244, (ObjectCodec) null, nonNsStreamWriter0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, (-2494), 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hY9Dd}I%\"{|");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hY9Dd}I%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0._nextIsCData = true;
      QName qName0 = new QName("sPbNv0hY9Dd}I%\"{|");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString("sPbNv0hY9Dd}I%\"{|");
      assertEquals(697, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeString("PEL1C\"XU:k?#9M}<4");
      assertEquals(528, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.DeserializationFeature");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.DeserializationFeature", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2674, 2674, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.DeserializationFeature");
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.setNextNameIfMissing(qName0);
      try { 
        toXmlGenerator0.writeString("com.fasterxml.jackson.databind.DeserializationFeature");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output non-whitespace characters outside main element tree (in prolog or epilog)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("sPbNv0hNY9D}%\"{|", true);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "sPbNv0hNY9D}%\"{|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 697, 697, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("sPbNv0hNY9D}%\"{|");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      try { 
        toXmlGenerator0.writeString("sPbNv0hNY9D}%\"{|");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write an attribute when there is no open start element.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 2718, 8233, objectMapper0, nonNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(752);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(charArrayWriter0, writerConfig0, "Current context not Array but ", true, byteArrayBuilder0, 3);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "start a objet", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Array but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray(57343);
      toXmlGenerator0.writeEndArray();
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeStartArray();
      assertEquals(719, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "PEL1C\"XU:k?#9M}<4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 719, 719, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.setNextNameIfMissing(qName0);
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mZ");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1550, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("mZ");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(1550, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=,QO<`", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "=,QO<`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = QName.valueOf("=,QO<`");
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FloatNode floatNode0 = new FloatNode(1.0F);
      IOContext iOContext0 = new IOContext(bufferRecycler0, floatNode0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "+,]R[suR(T", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-11), (-13), objectMapper0, streamWriter2Delegate0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals((-13), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nH)Z>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 528, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      QName qName0 = new QName("PEL1C\"XU:k?#9M}<4");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(528, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayBuilder0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "u50X2BzHYDpx4", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-732), 11, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.startWrappedValue((QName) null, (QName) null);
      assertEquals(11, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("-{8!|D)^Y5)");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "-W^54g", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-3967), 358, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("oao", "m$)T3W cexDF2ufT", ", expecting field name");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      boolean boolean1 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertFalse(boolean1 == boolean0);
      assertEquals(358, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      Version version0 = new Version(742, 2, 15711167, "UTF-8", "UTF-8", "UTF-8");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2769, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertTrue(boolean0);
      assertEquals(2769, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 5, 3759, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(3757, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(3332, (-1159));
      assertEquals(2438, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(2);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", true);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", true, mockFileOutputStream0, (-1156));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "[,~=%gUg$]+R9J^/=U", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-737), 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(733, 5);
      assertEquals(735, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=,QO<`");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "=,QO<`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "xiu-LVSE", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-121), 1444, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      // Undeclared exception!
      try { 
        toXmlGenerator1.initGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "N.IpSdN7~`~h$r", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-736), 0, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals("1.0", simpleNsStreamWriter0.getXmlVersion());
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=,QO<`");
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "=,QO<`", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      assertEquals("1.1", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(55296);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(".UnshOfjz#hU");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "start an array", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1228, 1197, (ObjectCodec) null, simpleNsStreamWriter0);
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 4, 62);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      Version version0 = new Version(3, 2, 15711167, "UTF-8", "UTF-8", "UTF-8");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2769, (ObjectCodec) null, repairingNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertTrue(boolean0);
      assertEquals(2769, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, streamWriter2Delegate0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertNotNull(object0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "11czVkQ:nHZ>iG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 762, 1550, (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("UTF-8", "UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockPrintStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "UTF-8", writerConfig0);
      Version version0 = new Version(3, 2, 15711167, "UTF-8", "UTF-8", "UTF-8");
      SimpleModule simpleModule0 = new SimpleModule(version0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleModule0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2769, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(2769, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("p^", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "p^", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(735, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(735);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("p^", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mm", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "p^", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "34ogxa#[&GR?r8[?\"", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1135), (-2008), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("q+}$6i%bz,47%-Ede");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertTrue(boolean0);
      
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("34ogxa#[&GR?r8[?\"", "http://www.w3.org/2001/XMLSchema");
      assertEquals((-2008), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("mm", false);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "mm", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 5, 3759, (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(3759, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9Mf<|", false);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "mZ", false, mockFileOutputStream0, 735);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "PEL1C\"XU:k?#9Mf<|", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 735, (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeUTF8String(byteArray0, (-1980), 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}ima#\\", true);
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "}ima#\\", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(simpleNsStreamWriter0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(streamWriter2Delegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 730, 730, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("}ima#\\", 56319, (-3114));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "34ogxa#[&GR?r8[?\"", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1135), (-2008), (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeStringField("34ogxa#[&GR?r8[?\"", "http://www.w3.org/2001/XMLSchema");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ObjectMapper objectMapper0 = new ObjectMapper();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(byteArrayOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, "N.IpSdN7~`~h$r", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-736), 0, objectMapper0, simpleNsStreamWriter0);
      toXmlGenerator0.writeRaw('E');
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("PEL1C\"XU:k?#9M}<4", false);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, (-249), (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.type.WritableTypeId$Inclusion");
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory();
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      StringWriter stringWriter0 = new StringWriter(0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("JSON");
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "JSON", true, mockPrintStream0, 0);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(bufferingXmlWriter0, "JSON", writerConfig0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, objectMapper0, nonNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate((XMLStreamWriter2) null);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 735, 3, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }
}
