/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 12:25:46 GMT 2021
 */

package com.fasterxml.jackson.dataformat.xml.ser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ctc.wstx.api.WriterConfig;
import com.ctc.wstx.sw.AsciiXmlWriter;
import com.ctc.wstx.sw.BufferingXmlWriter;
import com.ctc.wstx.sw.ISOLatin1XmlWriter;
import com.ctc.wstx.sw.NonNsStreamWriter;
import com.ctc.wstx.sw.RepairingNsStreamWriter;
import com.ctc.wstx.sw.SimpleNsStreamWriter;
import com.ctc.wstx.sw.XmlWriter;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.temporal.ChronoField;
import java.util.Locale;
import javax.xml.namespace.NamespaceContext;
import javax.xml.namespace.QName;
import javax.xml.stream.XMLStreamWriter;
import org.codehaus.stax2.XMLStreamWriter2;
import org.codehaus.stax2.ri.Stax2WriterAdapter;
import org.codehaus.stax2.util.StreamWriter2Delegate;
import org.codehaus.stax2.util.StreamWriterDelegate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ToXmlGenerator_ESTest extends ToXmlGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "#0#O?D?!QCb", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, (-925), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.overrideFormatFeatures(57343, 3526);
      assertEquals((-537), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeFieldName("tD0&FSiabs|8y2m(`;");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[3];
      toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 1060, (int) (byte)0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator_Feature0.enabledByDefault();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ";Y}w9q>C:_#-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0._verifyValueWrite("Current token (%s) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeString((char[]) null, 2, 0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EpA`&mO]e]lcuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "EpA`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      jsonGenerator0.writeEndObject();
      toXmlGenerator0.writeNumber("EpA`&mO]e]lcuwm!RdS");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile((File) null, "1.1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      QName qName0 = new QName("1.1", "write String value", "write String value");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), 65535, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeString((SerializableString) serializedString0);
      assertEquals(65535, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1955, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "q]1Z", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      repairingNsStreamWriter0.writeEndDocument();
      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 0, 122);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <q]1Z>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("J", "J", "javax.xml.stream.entities");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      repairingNsStreamWriter0.writeEndElement();
      try { 
        toXmlGenerator0.writeRawValue("UTF-8", 1539, (-1158));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <J>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeRawValue("E`&m7]e]cQuwm!RdS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&m7]e]cQuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue("E`&mO]e]cuwm!RdS");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw("E`&mO]e]cuwm!RdS", 2, 4);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((BigInteger) null);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^rWd^jI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2903), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <s7[o1B^rWd^jI7^.>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((BigDecimal) null);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EpA`&mO]e]lcuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "EpA`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.writeNumber("EpA`&mO]e]lcuwm!RdS");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&m7]e]cQuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[1];
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeBinary(byteArray0, 2, (int) (byte) (-69));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mO]e]cuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      repairingNsStreamWriter0.writeEmptyElement((String) null, "E`&m7]e]cQuwm!RdS", "Null constructor not allowed");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-33), (-3287), (ObjectCodec) null, nonNsStreamWriter0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      assertEquals((-3287), jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-3088), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(0, 1955);
      assertEquals((-4016), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.inRoot();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ".p&)+,\"s2Rp_u=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-162), 1, (ObjectCodec) null, simpleNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, ";/Q6~b~fZ02q!py#|U", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-169), objectMapper0, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals((-169), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName((String) null, "E`&mO]e]cuwm!RdS", "Current context not Array but ");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(byteArrayBuilder0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, ";/Q6~b~fZ02q!py#|U", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-169), objectMapper0, repairingNsStreamWriter0);
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals((-169), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "|1#~`jG@$cU.XJ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1cs_;2b3hM", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1806), 5, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      assertEquals(7, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS", ";\"0RDPm/,j", "E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1509), (ObjectCodec) null, nonNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals((-1511), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringWriter stringWriter0 = new StringWriter();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "", false, byteArrayBuilder0, 1);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "fy%w}N#{RiT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1258), 4493, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(4493, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ep`&mO]e]lcuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      QName qName0 = new QName("", "", " ]x;?;:hg(]ILhN:w");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, (-163), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals((-163), toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator.Feature toXmlGenerator_Feature1 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.disable(toXmlGenerator_Feature1);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TEXT_BUFFER, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter((XmlWriter) null, "|1#~`jG@$cU.XJ", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.configure(toXmlGenerator_Feature0, true);
      assertEquals(3, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter((Writer) null, writerConfig0, "JSON", false, byteArrayBuilder0, (-169));
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, "Can not write END_ELEMENT without open START_ELEMENT", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1210), 3, objectMapper0, simpleNsStreamWriter0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      toXmlGenerator0.configure(toXmlGenerator_Feature0, false);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.checkNextIsUnwrapped();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 49, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStringField((String) null, "oDzM3A]Gc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // local part cannot be \"null\" when creating a QName
         //
         verifyException("javax.xml.namespace.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-5393), (-713), (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 953, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-558), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      char[] charArray0 = new char[5];
      charArray0[3] = '\"';
      charArray0[4] = 'K';
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName((String) null, "E`&mO]e]cuwm!RdS", "Current context not Array but ");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mSO]e]cuwm!dS", "E`&mSO]e]cuwm!dS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.writeString("E`&mSO]e]cuwm!dS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mSO]e]cuwm!dS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write String value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "cp&", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1606, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = QName.valueOf("Current context not Object but ");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 335, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an object, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      try { 
        toXmlGenerator0.writeStartArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not start an array, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'S';
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 0, 679);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      QName qName0 = new QName("", "]S<=0o&wq_", "]S<=0o&wq_");
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Integer", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, xMLStreamWriter2_0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("Integer", 5, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1966, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("L", "", "L");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null, 1421, 57344);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "start an array", writerConfig0);
      QName qName0 = new QName((String) null, "E`&m7]e]cQuwm!RdS");
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1648, 2, (ObjectCodec) null, streamWriterDelegate0);
      Stax2WriterAdapter stax2WriterAdapter0 = (Stax2WriterAdapter)toXmlGenerator0._xmlWriter;
      ToXmlGenerator toXmlGenerator1 = new ToXmlGenerator(iOContext0, (-3461), 1648, (ObjectCodec) null, stax2WriterAdapter0);
      toXmlGenerator1.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator1.writeRawValue("start an array");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1527, (ObjectCodec) null, xMLStreamWriter2_0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("5OK/*ge~B");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "5OK/*ge~B", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 2, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw((char[]) null, 57343, 5869);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileWriter mockFileWriter0 = new MockFileWriter("JSON", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, ", expecting field name", true, pipedOutputStream0, 1);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(bufferingXmlWriter0, ",o#5\u0004>'ZFgs]!o", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1469), 0, objectMapper0, simpleNsStreamWriter0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, 55296, 3099);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper();
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockPrintStream mockPrintStream0 = new MockPrintStream("write String value");
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "write String value", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 5, objectMapper0, nonNsStreamWriter0);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(charArray0, (-169), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -169
         //
         verifyException("com.ctc.wstx.sw.ISOLatin1XmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("*p0lPp5\"}[g `Al", 1, 55296);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rrWd'jJI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rrWd'jJI7^.", writerConfig0);
      QName qName0 = QName.valueOf("s7[o1B^rrWd'jJI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      asciiXmlWriter0.writeRawAscii((char[]) null, 0, (-2226));
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("Current context not Array but ", (-442), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "' has value that is not of type ArrayNode (but ", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      XMLStreamWriter2 xMLStreamWriter2_0 = Stax2WriterAdapter.wrapIfNecessary(streamWriterDelegate0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1644, 1644, (ObjectCodec) null, xMLStreamWriter2_0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("' has value that is not of type ArrayNode (but ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      asciiXmlWriter0.close(true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw(']');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, streamWriter2Delegate0);
      QName qName0 = new QName("P?jh\"+8 &~", "P?jh\"+8 &~", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[5];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-33), (-2), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ChronoField chronoField0 = ChronoField.DAY_OF_WEEK;
      IOContext iOContext0 = new IOContext(bufferRecycler0, chronoField0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ep`&mO]e]lcuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Ep`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("R4,^=rYx\"l^JX/ibMf", "Underlying Stax XMLStreamWriter (of type ", "Ep`&mO]e]lcuwm!RdS");
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-1676), (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      BigDecimal bigDecimal0 = new BigDecimal(1);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1509), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "start an array", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName((String) null, "E`&mO]e]cuwm!RdS", "Current context not Array but ");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeNumber((String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mO]e]cuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ep`&mO]e]lcuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Ep`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("Ep`&mO]e]lcuwm!RdS", "Ep`&mO]e]lcuwm!RdS", "Ep`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeNumber(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <Ep`&mO]e]lcuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = QName.valueOf("com.ctc.wstx.dtd.DTDNotationAttr");
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2835, 2, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|S", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeNumber((-1955));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <->
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("K", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "{R{xO'd6x'KB:m$zn", writerConfig0);
      QName qName0 = QName.valueOf("Q$FH]");
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 4, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(1214.7546F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.writeNumber((float) 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&m7]e]cQuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[=WGK7MIgqEKy!^py", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1718), (-431), (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(1872.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.writeNumber((double) 55296);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mO]e]cuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 377, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.close();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-467), 1, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("writeR]w", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", writerConfig0);
      QName qName0 = new QName((String) null, "", "writeR]w");
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 0, (ObjectCodec) null, streamWriter2Delegate0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.util.StreamWriter2Delegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      Writer writer0 = asciiXmlWriter0.wrapAsRawWriter();
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(writer0, writerConfig0, "$X%-EaA0", false, mockFileOutputStream0, 0);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "", writerConfig0);
      QName qName0 = new QName("5.0", "", "write boolean value");
      Locale locale0 = Locale.GERMANY;
      IOContext iOContext0 = new IOContext(bufferRecycler0, locale0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Em#E=EKoAq)hMm:", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("org.codehaus.stax2.preserveLocation", "wLi;Vi!cx=$?jVWluT2");
      toXmlGenerator0.startWrappedValue((QName) null, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mOrPe]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mOrPe]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mOrPe]cuwm!RdS", "E`&mOrPe]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.close();
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mOrPe]cuwm!RdS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, 169, 55456);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 169
         //
         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      byte[] byteArray0 = new byte[5];
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)99, 155);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write Binary value, expecting field name
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Ea&m7]e]cQwm6RS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Ea&m7]e]cQwm6RS", writerConfig0);
      QName qName0 = new QName("Ea&m7]e]cQwm6RS", "Ea&m7]e]cQwm6RS", "Ea&m7]e]cQwm6RS");
      NamespaceContext namespaceContext0 = repairingNsStreamWriter0.getNamespaceContext();
      repairingNsStreamWriter0.setNamespaceContext(namespaceContext0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      toXmlGenerator0.startWrappedValue(qName0, qName0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3325, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("write null value", "", "");
      // Undeclared exception!
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7N]e]cQuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      char[] charArray0 = new char[1];
      asciiXmlWriter0.writeRawAscii(charArray0, (-1701), (-746));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7N]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7N]e]cQuwm!RdS");
      // Undeclared exception!
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&\u0007]e]cQ2Luwm!-dS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&\u0007]e]cQ2Luwm!-dS", writerConfig0);
      JsonFactory jsonFactory0 = new JsonFactory();
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, asciiXmlWriter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-643), 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("WRITE_XML_DECLARATION", "E`&\u0007]e]cQ2Luwm!-dS");
      try { 
        toXmlGenerator0.startWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid white space character (0x7) in text to output (in xml 1.1, could output as a character entity)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "[=WGK7MIgqEKy!^py", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.isEnabled((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 679, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("", "start an array", "VK5NC8'>+_F0bsjQ.X");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not output XML declaration, after other output has already been done.
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.handleMissingName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, ".p&)+,\"s2Rp_u=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 29, objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.EncodingXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      iSOLatin1XmlWriter0.writeDTD("J]bl1T&-");
      try { 
        toXmlGenerator0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ".`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.enable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[21B^rodz^jI7|^.");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[21B^rodz^jI7|^.", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "s7[21B^rodz^jI7|^.", true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3425, 3751, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.disable((ToXmlGenerator.Feature) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, ";Y}w9q>C:_#-", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "1.0", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      try { 
        toXmlGenerator0._reportUnimplementedStax2("E`&mO]e]cuwm!RdS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type com.ctc.wstx.sw.SimpleNsStreamWriter) does not implement Stax2 API natively and is missing method 'E`&mO]e]cuwm!RdS': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mSO]e]cuwm!dS", "E`&mSO]e]cuwm!dS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.finishWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to output second root, <E`&mSO]e]cuwm!dS>
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0.BYTE_WRITE_ENCODING_BUFFER, false);
      JsonFactory jsonFactory0 = new JsonFactory();
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      JavaType javaType0 = TypeFactory.unknownType();
      ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaType0, javaType0);
      ObjectReader objectReader0 = objectMapper0.readerFor((JavaType) referenceType0);
      ToXmlGenerator toXmlGenerator0 = null;
      try {
        toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2826), 0, objectReader0, (XMLStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.codehaus.stax2.ri.Stax2WriterAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 377, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.writeNull();
      assertEquals(377, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.writeRaw((char[]) null, 57343, 0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw("E`&mO]e]cuwm!RdS");
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString("E`&mO]e]cuwm!RdS");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0._xmlPrettyPrinter = (XmlPrettyPrinter) defaultXmlPrettyPrinter0;
      toXmlGenerator0._handleEndObject();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0._handleEndObject();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._handleStartObject();
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, ")DzgGj~`T+m", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, (-2608), objectMapper0, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0._handleStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("c*PWn@z,oIu\"ETs?", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1048);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(mockFileWriter0, writerConfig0, "c*PWn@z,oIu\"ETs?", false, byteArrayBuilder0, (-1947));
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "c*PWn@z,oIu\"ETs?", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 590, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Array but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "JSON", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 4, 0, objectMapper0, nonNsStreamWriter0);
      try { 
        toXmlGenerator0.writeFieldName("JSON");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      boolean boolean0 = toXmlGenerator_Feature0.enabledIn((-1425));
      assertTrue(boolean0);
      assertEquals(2, toXmlGenerator_Feature0.getMask());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((SerializableString) serializedString0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeRaw('Y');
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      int int0 = toXmlGenerator_Feature0.getMask();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.setNextName(qName0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.close();
      assertTrue(toXmlGenerator0.inRoot());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-438), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      try { 
        toXmlGenerator0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Trying to write END_DOCUMENT when document has no root (ie. trying to output empty document).
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mOrPe]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mOrPe]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.flush();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EpA`&mO]e]lcuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "EpA`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(";%Y}w9q>C:_#p", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, ";%Y}w9q>C:_#p", writerConfig0);
      QName qName0 = new QName(";%Y}w9q>C:_#p");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 2, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      BigInteger bigInteger0 = BigInteger.ONE;
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(2, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("J]bl1T&-", "", "J]bl1T&-");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      byte[] byteArray0 = new byte[2];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mSO]e]cuwm!dS", "E`&mSO]e]cuwm!dS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      toXmlGenerator0.writeNumber(bigInteger0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((BigInteger) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigInteger0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.cfg.ConfigOverride$Empty", writerConfig0);
      QName qName0 = new QName("t!YB\"UcEI@O", "t!YB\"UcEI@O", "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-293), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      toXmlGenerator0.writeNumberField("<QDD.UZ]<,NY5u~<:$", bigDecimal0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^rWd^jI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-10), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^rWd^jI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2903), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      toXmlGenerator0.writeNumber(bigDecimal0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      StringWriter stringWriter0 = new StringWriter(132);
      BufferingXmlWriter bufferingXmlWriter0 = new BufferingXmlWriter(stringWriter0, writerConfig0, "@$4V", false, mockFileOutputStream0, 3543);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(bufferingXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 4, 1, (ObjectCodec) null, streamWriter2Delegate0);
      BigDecimal bigDecimal0 = new BigDecimal((double) 56320);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(bigDecimal0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EpA`&mO]e]lcuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "EpA`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeEndObject();
      jsonGenerator0.writeNumber(1.0F);
      assertEquals(1, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "2IyQS", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeNumber((float) 2);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ".p&)+,\"s2Rp_u=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-162), 1, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((float) 55296);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName((String) null, "E`&mO]e]cuwm!RdS", "Current context not Array but ");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((float) 2);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EpA`&mO]e]lcuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "EpA`&mO]e]lcuwm!RdS", writerConfig0);
      QName qName0 = new QName("EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS", "EpA`&mO]e]lcuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeEndObject();
      jsonGenerator0.writeNumber((double) 1);
      assertEquals(1, jsonGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|S", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeNumber((-3958.958477933));
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      IOContext iOContext0 = new IOContext(bufferRecycler0, defaultXmlPrettyPrinter0, true);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2431, 2, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!#UgV#M@T$yMV6J'V0");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "!#UgV#M@T$yMV6J'V0", writerConfig0);
      QName qName0 = new QName("!#UgV#M@T$yMV6J'V0", "!#UgV#M@T$yMV6J'V0", "!#UgV#M@T$yMV6J'V0");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 338, 1157, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber((-626.8857176015));
      assertEquals(1157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-558), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeNumber((long) 3);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-5393), (-713), (ObjectCodec) null, simpleNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.writeNumber((long) (-5393));
      assertEquals((-713), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter((XmlWriter) null, "': this breaks functionality such as indentation that relies on it. ", writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, (-1492), (-1492), objectMapper0, streamWriter2Delegate0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((-971L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber(0L);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|S", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeNumber((-1955));
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "#fD)WG", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 0, objectMapper0, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber(1558);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer", writerConfig0);
      QName qName0 = new QName("com.fasterxml.jackson.databind.ext.CoreXMLSerializers$XMLGregorianCalendarSerializer");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1157, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeNumber(57343);
      assertEquals(1157, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("", ";\"0RDPm/,j", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      toXmlGenerator0.writeBinary((byte[]) null, 1444, 1);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|S", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeNull();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^rWd^jI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-558), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeBoolean(true);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("J]bl1T&-", "", "J]bl1T&-");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      toXmlGenerator0.writeBoolean(false);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBoolean(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mOrPe]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mOrPe]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("start an array", "E`&mOrPe]cuwm!RdS", "E`&mOrPe]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeBoolean(false);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1157, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      byte[] byteArray0 = new byte[1];
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArray0, 2, 55296);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^rWd^jI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^rWd^jI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary(byteArray0, 1168, 48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1168
         //
         verifyException("org.codehaus.stax2.ri.typed.ValueEncoderFactory$Base64Encoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeBinary((Base64Variant) null, byteArray0, (int) (byte)99, 155);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(nonNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 1, 3, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw((char[]) null, 57343, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, simpleNsStreamWriter0, true);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("E`&mO]e]cuwm!RdS", 57343, 5);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "writeRawValue", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, repairingNsStreamWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1746), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRaw("writeRawValue", 3, (-502));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerial!zer", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 775, 0, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRaw("com.fasterxml.jackson.databind.ser.std.NumberSerializers$FloatSerial!zer");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRaw': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("J]bl1&-");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockPrintStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 2, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("3", "J]bl1&-", "start an array");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((char[]) null, 0, 3527);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, false);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue((char[]) null, 56319, 0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "v,0J%./5+rXFBJ0<7a", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2761, (-1833), (ObjectCodec) null, streamWriterDelegate0);
      char[] charArray0 = new char[3];
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 0, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 335, (ObjectCodec) null, repairingNsStreamWriter0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue(charArray0, 2, 2000);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("You need to upgrade to using compliant Stax implementation like Woodstox or Aalto", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "%|p}Vf LbvH", writerConfig0);
      QName qName0 = QName.valueOf("");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1573, (-2871), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsAttribute(true);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("", 656, (-4308));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1509), (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "start an array", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue("write null value", 1, 2);
      assertEquals((-1509), toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, (-1509), (ObjectCodec) null, nonNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue("write null value", 1, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 5, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.setNextIsAttribute(true);
      QName qName0 = new QName("start an array", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeRawValue("start an array");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile((File) null, "1.1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      QName qName0 = new QName("1.1", "write String value", "write String value");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), 65535, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("U!9mE#CZG<s");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(filterOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(iSOLatin1XmlWriter0, "U!9mE#CZG<s", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3446, 3446, objectMapper0, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue("Sub-class ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile((File) null, "1.1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), 65535, (ObjectCodec) null, repairingNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawValue((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&m7]e]cQuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&m7]e]cQuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("E`&m7]e]cQuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsCData = true;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((char[]) null, 57343, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("", ";\"0RDPm/,j", "E`&mO]e]cuwm!RdS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((char[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.AsciiXmlWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^gWd^3DjI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^gWd^3DjI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^gWd^3DjI7^.", "s7[o1B^gWd^3DjI7^.", "s7[o1B^gWd^3DjI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0._nextIsCData = true;
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      char[] charArray0 = new char[4];
      try { 
        toXmlGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid null character in text to output
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^gWd^3DjI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "s7[o1B^gWd^3DjI7^.", writerConfig0);
      QName qName0 = new QName("s7[o1B^gWd^3DjI7^.", "s7[o1B^gWd^3DjI7^.", "s7[o1B^gWd^3DjI7^.");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      char[] charArray0 = new char[4];
      try { 
        toXmlGenerator0.writeString(charArray0, 3, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid null character in text to output
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY;
      DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[1];
      deserializationFeatureArray0[0] = deserializationFeature0;
      ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectReader0, repairingNsStreamWriter0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString(charArray0, 1, 86);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("You need to upgrade to using compliant Stax implementation liue Woodstox or Aalto", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "You need to upgrade to using compliant Stax implementation liue Woodstox or Aalto", writerConfig0);
      QName qName0 = new QName("You need to upgrade to using compliant Stax implementation liue Woodstox or Aalto");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-595), 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.setNextIsCData(true);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeString("You need to upgrade to using compliant Stax implementation liue Woodstox or Aalto");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s7[o1B^rWd^jI7^.");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "|S", writerConfig0);
      QName qName0 = new QName("-");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1883, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsUnwrapped = true;
      toXmlGenerator0.writeString("aGj}");
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("W:~}!", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "W:~}!", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("W:~}!");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0._nextIsAttribute = true;
      toXmlGenerator0.writeStartObject();
      toXmlGenerator0.writeStringField("W:~}!", "W:~}!");
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_XML_1_1", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1114111, 456, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0._handleEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write END_ELEMENT without open START_ELEMENT
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9T");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "9T", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      QName qName0 = new QName("9T", "9T", "9T");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      DefaultXmlPrettyPrinter defaultXmlPrettyPrinter0 = new DefaultXmlPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultXmlPrettyPrinter0);
      toXmlGenerator0.writeEndObject();
      toXmlGenerator0.writeBoolean(true);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", true);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeEndObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current context not Object but root
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`qKa1j'tGT0)~{*R<", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "Ep`&mO]e]lcuwm!RdS", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-286), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(defaultPrettyPrinter0);
      toXmlGenerator0.writeStartObject();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, (String) null, writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 0, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      double[] doubleArray0 = new double[5];
      toXmlGenerator0.writeArray(doubleArray0, 0, 0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.writeStartArray();
      toXmlGenerator0.writeEndArray();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("khA\"");
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "k+EN((2", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2871, 1157, (ObjectCodec) null, nonNsStreamWriter0);
      QName qName0 = new QName("", "L", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      try { 
        toXmlGenerator0.writeRepeatedFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("start an array", "E`&mSO]e]cuwm!dS", "E`&mSO]e]cuwm!dS");
      try { 
        toXmlGenerator0.finishWrappedValue(qName0, qName0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No open start element, when trying to write end element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.util.StaxUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "writeRawValue", writerConfig0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, repairingNsStreamWriter0, false);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-1746), 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.finishWrappedValue((QName) null, (QName) null);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      toXmlGenerator0.useDefaultPrettyPrinter();
      QName qName0 = new QName("start an array", "E`&mSO]e]cuwm!dS", "E`&mSO]e]cuwm!dS");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(simpleNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, streamWriterDelegate0);
      QName qName0 = new QName("", "", "");
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, "R*5SyB{McugHY.", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 1, objectMapper0, simpleNsStreamWriter0);
      QName qName0 = new QName("", "V&[cn7]!6Wu%K", "");
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      boolean boolean0 = toXmlGenerator0.setNextNameIfMissing(qName0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter((OutputStream) null, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ".p&)+,\"s2Rp_u=", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-162), 1, (ObjectCodec) null, simpleNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
      
      toXmlGenerator0.disable(toXmlGenerator_Feature0);
      boolean boolean0 = toXmlGenerator0.isEnabled(toXmlGenerator_Feature0);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(66, (-1));
      assertEquals(66, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "writeRawValue", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55578, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.overrideFormatFeatures(2, 1);
      assertEquals(0, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1993, (ObjectCodec) null, repairingNsStreamWriter0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      ToXmlGenerator toXmlGenerator1 = (ToXmlGenerator)toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      toXmlGenerator1.initGenerator();
      assertEquals(1993, toXmlGenerator1.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "writeRawValue", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 55578, 0, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      toXmlGenerator0.enable(toXmlGenerator_Feature0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.initGenerator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, (-3088), (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.initGenerator();
      toXmlGenerator0.initGenerator();
      assertEquals((-3088), toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_XML_1_1", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1114111, 456, (ObjectCodec) null, streamWriterDelegate0);
      assertEquals(456, toXmlGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      toXmlGenerator1.initGenerator();
      assertEquals(457, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int int0 = ToXmlGenerator.Feature.collectDefaults();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeNumber((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectMapper objectMapper0 = new ObjectMapper();
      ObjectReader objectReader0 = objectMapper0.reader();
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectReader0, repairingNsStreamWriter0);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeRawUTF8String(byteArray0, 121, (-3860));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mSO]e]cuwm!dS", true);
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(mockFileOutputStream0, writerConfig0, true);
      NonNsStreamWriter nonNsStreamWriter0 = new NonNsStreamWriter(iSOLatin1XmlWriter0, "E`&mSO]e]cuwm!dS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, nonNsStreamWriter0);
      boolean boolean0 = toXmlGenerator0.canWriteFormattedNumbers();
      assertTrue(boolean0);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
      StreamWriter2Delegate streamWriter2Delegate0 = new StreamWriter2Delegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1230, 1182, (ObjectCodec) null, streamWriter2Delegate0);
      Object object0 = toXmlGenerator0.getOutputTarget();
      assertEquals(1182, toXmlGenerator0.getFormatFeatures());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      MockFile mockFile0 = new MockFile((File) null, "1.1");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "1.1", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-19), 65535, (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeString((SerializableString) serializedString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No element/attribute name specified when trying to output element
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.getStaxWriter();
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":O<zhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      int int0 = toXmlGenerator0.getFormatFeatures();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("WRITE_XML_1_1", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1114111, 456, (ObjectCodec) null, streamWriterDelegate0);
      PrettyPrinter prettyPrinter0 = toXmlGenerator0._constructDefaultPrettyPrinter();
      JsonGenerator jsonGenerator0 = toXmlGenerator0.setPrettyPrinter(prettyPrinter0);
      assertEquals(456, jsonGenerator0.getFormatFeatures());
      
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_DECLARATION;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.enable(toXmlGenerator_Feature0);
      toXmlGenerator1.initGenerator();
      assertEquals(457, toXmlGenerator0.getFormatFeatures());
      assertEquals("1.0", repairingNsStreamWriter0.getXmlVersion());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      QName qName0 = new QName("E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS", "E`&mO]e]cuwm!RdS");
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.startWrappedValue(qName0, qName0);
      toXmlGenerator0.writeStartObject();
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
      toXmlGenerator0.writeString("E`&mO]e]cuwm!RdS");
      toXmlGenerator0.writeRepeatedFieldName();
      assertEquals(329, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      int int0 = toXmlGenerator0.getOutputBuffered();
      assertEquals(4, toXmlGenerator0.getFormatFeatures());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeUTF8String(byteArray0, (byte)0, (byte)36);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS", false);
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      StreamWriterDelegate streamWriterDelegate0 = new StreamWriterDelegate(repairingNsStreamWriter0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 2, (ObjectCodec) null, streamWriterDelegate0);
      try { 
        toXmlGenerator0.writeRawValue(">8r", (-431), 57343);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Underlying Stax XMLStreamWriter (of type org.codehaus.stax2.util.StreamWriterDelegate) does not implement Stax2 API natively and is missing method 'writeRawValue': this breaks functionality such as indentation that relies on it. You need to upgrade to using compliant Stax implementation like Woodstox or Aalto
         //
         verifyException("com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 2, 3, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0.setNextIsUnwrapped(false);
      assertEquals(3, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      try { 
        toXmlGenerator0.writeStringField("W", "W");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 4, (ObjectCodec) null, repairingNsStreamWriter0);
      ToXmlGenerator.Feature toXmlGenerator_Feature0 = ToXmlGenerator.Feature.WRITE_XML_1_1;
      ToXmlGenerator toXmlGenerator1 = toXmlGenerator0.disable(toXmlGenerator_Feature0);
      assertEquals(4, toXmlGenerator1.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      WriterConfig writerConfig0 = WriterConfig.createJ2MEDefaults();
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter((XmlWriter) null, "Element content can not contain child START_ELEMENT when using Typed Access methods", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator((IOContext) null, 3, 3, (ObjectCodec) null, repairingNsStreamWriter0);
      MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("Element content can not contain child START_ELEMENT when using Typed Access methods");
      toXmlGenerator0.setPrettyPrinter(minimalPrettyPrinter0);
      // Undeclared exception!
      try { 
        toXmlGenerator0.writeStartArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ctc.wstx.sw.BaseStreamWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 329, (ObjectCodec) null, repairingNsStreamWriter0);
      SerializedString serializedString0 = PrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR;
      try { 
        toXmlGenerator0.writeFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Can not write a field name, expecting a value
         //
         verifyException("com.fasterxml.jackson.core.JsonGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, false);
      RepairingNsStreamWriter repairingNsStreamWriter0 = new RepairingNsStreamWriter(asciiXmlWriter0, "E`&mO]e]cuwm!RdS", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 1, (ObjectCodec) null, repairingNsStreamWriter0);
      toXmlGenerator0.inRoot();
      assertEquals(1, toXmlGenerator0.getFormatFeatures());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("E`&mO]e]cuwm!RdS");
      WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
      AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(mockFileOutputStream0, writerConfig0, true);
      SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ":COzhb+B^4F-<z%4]", writerConfig0);
      ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-2119), 524288, (ObjectCodec) null, simpleNsStreamWriter0);
      toXmlGenerator0._releaseBuffers();
      assertEquals(524288, toXmlGenerator0.getFormatFeatures());
  }
}
