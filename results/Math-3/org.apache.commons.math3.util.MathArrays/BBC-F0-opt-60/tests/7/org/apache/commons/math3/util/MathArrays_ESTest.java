/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:47:37 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 4134);
      assertEquals(7, doubleArray0.length);
      assertEquals(4134, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 10000;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 10000, 10000, 2124}, intArray0);
      assertArrayEquals(new int[] {10000, 10000, 0, 0, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10000, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 10000, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-330), 1573);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 21.4;
      doubleArray0[1] = (-1200.495352);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 2091.91;
      doubleArray0[5] = 1233.1739621732531;
      doubleArray0[6] = 2.608E18;
      doubleArray0[7] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {21.4, (-1200.495352), 1.34217729E8, 3.141592653589793, 2091.91, 1233.1739621732531, 2.608E18, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {21.4, (-1200.495352), 1.34217729E8, 3.141592653589793, 2091.91, 1233.1739621732531, 2.608E18, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.8326666822043363E38, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,200.495 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[3] = 6.52E18;
      doubleArray0[4] = 957.7890059197;
      doubleArray0[5] = 1923.267446658;
      doubleArray0[6] = (-1869.99024);
      doubleArray0[7] = 957.7890059197;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.86285714285714278E18, 0.0, 6.52E18, 957.7890059197, 1923.267446658, (-1869.99024), 957.7890059197, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6.7809023540155689E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 6.52E18;
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = (-1048.65158597);
      doubleArray0[2] = 2463.66448340845;
      doubleArray0[3] = 2261.597234069924;
      double double1 = 1131.765961598;
      doubleArray0[4] = 1131.765961598;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2261.597234069924;
      doubleArray1[1] = 1131.765961598;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.52E18, (-1048.65158597), 2463.66448340845, 2261.597234069924, 1131.765961598}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2261.597234069924, 1131.765961598}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-373.94062269916);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-7.44321345601866E-11);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1033.298879357748;
      doubleArray0[5] = (-4.068233003401932E-9);
      doubleArray0[6] = 508.39292885597473;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-373.94062269916), 1.304E19, (-7.44321345601866E-11), 3.834E-20, 1033.298879357748, (-4.068233003401932E-9), 508.39292885597473}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-373.94062269916), 1.304E19, (-7.44321345601866E-11), 3.834E-20, 1033.298879357748, (-4.068233003401932E-9), 508.39292885597473}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      MathArrays.scaleInPlace((-7.44321345601866E-11), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.scaleInPlace(3.0280726633140465E-19, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(9.705950346648333E8, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double double1 = MathArrays.distance(doubleArray3, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {2.7833198746263842E-8, (-9.705950346648333E8), 5.5401426551857246E-21, (-2.853728039037554E-30), (-7.691064122924592E-8), 3.0280726633140465E-19, (-3.7840770890055287E-8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray3, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (-373.94062269916);
      doubleArray4[1] = (-5608.40143045);
      doubleArray4[2] = 9.313225746154785E-10;
      doubleArray4[3] = (-373.94062269916);
      doubleArray4[4] = (-4.068233003401932E-9);
      doubleArray4[5] = 3.834E-20;
      try { 
        MathArrays.ebeMultiply(doubleArray4, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 1.304E19;
      double double0 = (-2040.0);
      doubleArray0[2] = (-2040.0);
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-851.37);
      doubleArray0[5] = (-806.7672551634587);
      doubleArray0[6] = 0.04168701738764507;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.86285714285714278E18, 1.304E19, (-2040.0), 0.0, (-851.37), (-806.7672551634587), 0.04168701738764507}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.317238918096083E19, double2, 0.01);
      
      int int0 = 122;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 122);
      assertEquals(7, doubleArray0.length);
      assertEquals(122, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.86285714285714278E18, 1.304E19, (-2040.0), 0.0, (-851.37), (-806.7672551634587), 0.04168701738764507}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = 5073.98383184023;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 122;
      doubleArray2[1] = 5073.98383184023;
      doubleArray2[2] = 1.86285714285714278E18;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3612.36724554642);
      double[] doubleArray3 = MathArrays.scale(5073.98383184023, doubleArray2);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {619026.027484508, 2.574531192577606E7, 9.452107023885227E21, 0.0, (-1.832909299857176E7)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {122.0, 5073.98383184023, 1.86285714285714278E18, 0.0, (-3612.36724554642)}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (13,040,000,000,000,000,000 > -2,040)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 739.73;
      doubleArray0[2] = (-202.85875690795737);
      doubleArray0[3] = 1804.99409875;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 42.337100982666016;
      doubleArray0[6] = (-6.663542893624021E-14);
      doubleArray0[7] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4515.479;
      doubleArray0[3] = 873.984;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-208.119932789306);
      doubleArray1[3] = 873.984;
      doubleArray1[4] = 4515.479;
      double double0 = MathArrays.linearCombination(0.0, 4515.479, 0.0, 0.0, 0.0, (-208.119932789306), 0.0, 873.984);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      intArray0[1] = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      doubleArray1[2] = 0.017;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-2856.8481760238865);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-6454.97);
      doubleArray1[1] = (-4098.853641615208);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-6454.97), (-4098.853641615208)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-6454.97), (-4098.853641615208)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-6454.97), (-4098.853641615208)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals((-10553.823641615209), double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1482.0F);
      floatArray0[1] = (-902.0F);
      floatArray0[2] = (-1506.2488F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-2162.0999F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-319.51F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 982.47F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1482.0F), (-902.0F), (-1506.2488F), 1.0F, (-2162.0999F), 0.0F, (-319.51F), 0.0F, 982.47F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1073);
      intArray0[1] = (-891);
      intArray0[2] = 2145538128;
      intArray0[3] = 1843;
      intArray0[4] = 2;
      intArray0[5] = 174;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145538128;
      intArray1[1] = 2145538128;
      intArray1[2] = (-1073);
      intArray1[3] = (-891);
      intArray1[4] = (-891);
      intArray1[5] = 2145538128;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1073), (-891), 2145538128, 1843, 2, 174}, intArray0);
      assertArrayEquals(new int[] {2145538128, 2145538128, (-1073), (-891), (-891), 2145538128}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-7775590), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2679.2F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2679.2F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-2679.2F), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 111;
      intArray0[1] = (-3115);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2372;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {111, (-3115), 2, 2, 2372}, intArray0);
      assertArrayEquals(new int[] {111, (-3115), 2, 2, 2372}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2649.49);
      doubleArray0[1] = (-1216.8);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.003;
      doubleArray0[5] = 962.82618;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-2649.49), (-1216.8), 3.834E-20, (-1.0), 0.003, 962.82618}, doubleArray0, 0.01);
      assertEquals(9427434.75300239, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2649.49), (-1216.8), 3.834E-20, (-1.0), 0.003, 962.82618}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5298.98), (-2433.6), 7.668E-20, (-2.0), 0.006, 1925.65236}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2649.49), (-1216.8), 3.834E-20, (-1.0), 0.003, 962.82618}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3070.4127984690253, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.24740394949913025, 1.2599210498948732, 1.304E19, 0.0, (-3122.525282767381), (-704.3363422482073), (-704.3363422482073), 0.07073719799518585);
      assertEquals(2199258.5251720734, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 797.89070954;
      doubleArray0[1] = 1584.8744181922536;
      doubleArray0[2] = 797.89070954;
      doubleArray0[3] = (-6.032174644509064E-23);
      doubleArray0[4] = 2477.845545;
      doubleArray0[5] = 2301.747928;
      doubleArray0[5] = (-1553.0721);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1584.8744181922536;
      doubleArray1[1] = 1584.8744181922536;
      doubleArray1[2] = (-1553.0721);
      doubleArray1[3] = 2301.747928;
      doubleArray1[4] = 797.89070954;
      doubleArray1[5] = 2301.747928;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = Double.POSITIVE_INFINITY;
      doubleArray2[2] = (-1081.653);
      doubleArray2[4] = 4543.48575404;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-291.2301309128563), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.5574076175689697;
      doubleArray0[1] = (double) 134;
      doubleArray0[2] = (double) 134;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.7976931348623157E308);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.5574076175689697, 134.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5574076175689697, 134.0, 134.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.5574076175689697, 134.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5574076175689697, 134.0, 134.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 134;
      doubleArray0[2] = (-634.4383993408544);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1.5574076175689697;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-760.3985610568));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {10000.0, 134.0, (-634.4383993408544), Double.NaN, 1.5574076175689697}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-800.3252673652372), (-10.72435858269418), 50.77570815792424, Double.NaN, (-0.12464326679275428)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {10000.0, 134.0, (-634.4383993408544), Double.NaN, 1.5574076175689697}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {10000.0, 134.0, (-634.4383993408544), Double.NaN, 1.5574076175689697}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-800.3252673652372), (-10.72435858269418), 50.77570815792424, Double.NaN, (-0.12464326679275428)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {10000.0, 134.0, (-634.4383993408544), Double.NaN, 1.5574076175689697}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {10000.0, 134.0, (-634.4383993408544), Double.NaN, 1.5574076175689697}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 10000;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 10000;
      intArray0[4] = 10000;
      intArray0[5] = 10000;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {10000, 10000, 134, 10000, 10000, 10000}, intArray0);
      assertEquals(0, int0);
      
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 10000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-561.0842901781099);
      doubleArray1[1] = 1102.809697159362;
      doubleArray1[2] = (-1479.1141550801365);
      doubleArray1[3] = 1425.605728915;
      doubleArray1[4] = 2670706.367451056;
      doubleArray1[5] = (-2438.3798);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-561.0842901781099), 1102.809697159362, (-1479.1141550801365), 1425.605728915, 2670706.367451056, (-2438.3798), Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 307.9861291353066;
      doubleArray0[2] = 0.8644238378102517;
      doubleArray0[3] = (-1003.9993896424035);
      doubleArray0[4] = 242.92277197;
      doubleArray0[5] = (-2769.88344767);
      doubleArray0[6] = 2047.8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.8644238378102517);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 307.9861291353066, 0.8644238378102517, (-1003.9993896424035), 242.92277197, (-2769.88344767), 2047.8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-0.22671242030758892), (-6.363131384902061E-4), 0.7390564381981374, (-0.17881847385715186), 2.0389456569172686, (-1.5074110500019235)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[3] = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[3] = 2124;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2124;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = (double) 2124;
      doubleArray0[3] = (double) 2124;
      doubleArray0[4] = (-634.4383993408544);
      doubleArray0[5] = (double) 10000;
      doubleArray0[6] = (double) 10000;
      doubleArray0[7] = (double) 10000;
      doubleArray0[8] = (double) 134;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.5574076175689697);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2124.0, 10000.0, 2124.0, 2124.0, (-634.4383993408544), 10000.0, 10000.0, 10000.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.07211295330457987, 0.3395148460667602, 0.07211295330457987, 0.07211295330457987, (-0.021540125549105192), 0.3395148460667602, 0.3395148460667602, 0.3395148460667602, 0.0045494989372945865}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2124.0, 10000.0, 2124.0, 2124.0, (-634.4383993408544), 10000.0, 10000.0, 10000.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.07211295330457987, 0.3395148460667602, 0.07211295330457987, 0.07211295330457987, (-0.021540125549105192), 0.3395148460667602, 0.3395148460667602, 0.3395148460667602, 0.0045494989372945865}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2124.0, 10000.0, 2124.0, 2124.0, (-634.4383993408544), 10000.0, 10000.0, 10000.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.07211295330457987, 0.3395148460667602, 0.07211295330457987, 0.07211295330457987, (-0.021540125549105192), 0.3395148460667602, 0.3395148460667602, 0.3395148460667602, 0.0045494989372945865}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.6907726339767092, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2124.0, 10000.0, 2124.0, 2124.0, (-634.4383993408544), 10000.0, 10000.0, 10000.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.07211295330457987, 0.3395148460667602, 0.07211295330457987, 0.07211295330457987, (-0.021540125549105192), 0.3395148460667602, 0.3395148460667602, 0.3395148460667602, 0.0045494989372945865}, doubleArray1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double((-0.16624882440418567));
      assertNotNull(double0);
      assertEquals((-0.16624882440418567), (double)double0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1048.6388F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1048.6388F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-788));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-254.3F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 2161.07F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-254.3F), (-1.0F), 2161.07F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), (-1.0F), Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3011.743633800055;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3011.743633800055}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1620.5966F;
      floatArray0[1] = 1195.6515F;
      floatArray0[2] = (-720.86237F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.5F;
      floatArray0[7] = 1431.963F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1620.5966F, 1195.6515F, (-720.86237F), (-1.0F), 0.0F, (-1.0F), 0.5F, 1431.963F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {3011.743633800055}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[4];
      longArray1[0] = 114L;
      longArray1[1] = 2466L;
      longArray1[2] = (-3090L);
      longArray1[3] = 1660L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1660L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 2466L;
      longArray4[1] = 114L;
      longArray4[2] = 1660L;
      longArray4[3] = 1660L;
      longArray4[4] = 2466L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 114L;
      longArray5[1] = 114L;
      longArray5[2] = 1660L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1660L;
      longArray6[1] = 114L;
      longArray6[2] = 2466L;
      longArray6[3] = 2466L;
      longArray6[4] = (-3090L);
      longArray6[5] = (-3090L);
      longArray6[6] = 2466L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 1660L;
      longArray7[1] = 2466L;
      longArray7[2] = (-3090L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,090 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2201;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[3] = 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, (-2243));
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 951;
      int int1 = 1772;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 951, 1772);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-826.000905);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-826.000905)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-826.000905), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4108.0;
      doubleArray0[1] = 3008.813127;
      doubleArray0[2] = 5.0614674548127384E-8;
      doubleArray0[3] = 0.09221605171645797;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5.0614674548127384E-8;
      doubleArray2[1] = 3008.813127;
      doubleArray2[2] = 0.09221605171645797;
      doubleArray2[3] = 0.09221605171645797;
      doubleArray2[4] = 5.0614674548127384E-8;
      doubleArray2[5] = 4108.0;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = null;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[3] = 0;
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) 0;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (float) 0;
      floatArray1[7] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-1498.670724646699));
      assertNotNull(double0);
      assertEquals((-1498.670724646699), (double)double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2112120093, (-2628));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[][] longArray0 = new long[4][4];
      MathArrays.checkNonNegative(longArray0[0]);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3008.813127;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = null;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 3008.813127;
      doubleArray3[1] = 3008.813127;
      doubleArray3[2] = 3008.813127;
      doubleArray3[3] = 3008.813127;
      doubleArray3[4] = 3008.813127;
      doubleArray3[5] = 3008.813127;
      doubleArray3[6] = 3008.813127;
      doubleArray1[6] = doubleArray3;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10020;
      intArray0[3] = 2124;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2124;
      doubleArray0[2] = (double) 2124;
      doubleArray0[0] = (double) 2124;
      doubleArray0[4] = (-634.4383993408544);
      doubleArray0[5] = (double) 10020;
      doubleArray0[6] = (double) 10020;
      doubleArray0[7] = (double) 10020;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2124.0, 0.0, 2124.0, 0.0, (-634.4383993408544), 10020.0, 10020.0, 10020.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 10020, 0, 2124}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = (-400.5508);
      // Undeclared exception!
      try { 
        MathArrays.scale((-400.5508), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(310);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(310, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      integerArray0[7] = integer0;
      integerArray0[8] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (int)integerArray0[7];
      longArray1[1] = (-434L);
      longArray1[2] = (long) (int)integerArray0[6];
      longArray1[3] = (long) (int)integerArray0[5];
      longArray1[4] = (long) 0;
      longArray1[5] = (long) (int)integerArray0[2];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (int)integerArray0[1];
      longArray2[1] = (long) 0;
      longArray2[2] = (long) (int)integerArray0[6];
      longArray2[3] = (long) 310;
      longArray2[4] = (long) (int)integerArray0[5];
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1475;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2856.8481760238865), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2856.8481760238865), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2856.8481760238865, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3315.75207382834;
      doubleArray0[1] = 730.39735938794;
      doubleArray0[2] = (-3548.28673898502);
      doubleArray0[3] = 1321.77;
      doubleArray0[4] = 631.2664;
      doubleArray0[5] = 0.6409968137741089;
      doubleArray0[6] = 451.2880062396917;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3315.75207382834, 730.39735938794, (-3548.28673898502), 1321.77, 631.2664, 0.6409968137741089, 451.2880062396917}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3315.75207382834, 730.39735938794, (-3548.28673898502), 1321.77, 631.2664, 0.6409968137741089, 451.2880062396917}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 4397.33F;
      floatArray0[1] = (-1785.2563F);
      floatArray0[2] = (-2776.0F);
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {4397.33F, (-1785.2563F), (-2776.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 451.2880062396917;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 730.39735938794;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3315.75207382834, 730.39735938794, (-3548.28673898502), 1321.77, 631.2664, 0.6409968137741089, 451.2880062396917}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {451.2880062396917, 0.0, 730.39735938794}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.15;
      doubleArray0[2] = 1635.103395327;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.15, 1635.103395327}, doubleArray0, 0.01);
      assertEquals(2673563.135909884, double0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.15, 1635.103395327}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1011;
      intArray0[1] = 25;
      intArray0[2] = (-1);
      intArray0[3] = 280;
      intArray0[4] = (-1);
      intArray0[5] = 91;
      intArray0[6] = 1025;
      intArray0[7] = 225;
      intArray0[8] = 134217729;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = 1392.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.017;
      doubleArray0[7] = 17956.0;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1686L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-864);
      intArray0[1] = 579;
      intArray0[2] = (-842);
      intArray0[3] = 2774;
      intArray0[4] = 525;
      intArray0[5] = 2133;
      intArray0[6] = 4775;
      intArray0[7] = (-1510);
      intArray0[8] = 2425;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1510);
      intArray1[1] = 2774;
      intArray1[2] = 2133;
      intArray1[3] = (-864);
      intArray1[4] = 2133;
      intArray1[5] = (-842);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = (-2167.01306);
      doubleArray2[2] = (-2167.01306);
      doubleArray2[3] = (-2167.01306);
      doubleArray2[4] = (-2167.01306);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (-2856.8481760238865);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.017;
      doubleArray0[7] = 17956.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 0;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[][] doubleArray0 = new double[3][8];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1467;
      intArray1[1] = 2124;
      intArray1[2] = 1467;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1467, 2124, 1467}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5058, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0;
      doubleArray0[1] = (-2856.8481760238865);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.017;
      doubleArray0[7] = 17956.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2856.8481760238865), 0.0, 0.0, 0.0, 0.0, 0.017, 17956.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1422.18F);
      floatArray0[2] = (-764.9125F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1422.18F), (-764.9125F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-764.9125F);
      doubleArray0[2] = (double) (-764.9125F);
      doubleArray0[3] = (double) (-764.9125F);
      doubleArray0[4] = (double) (-1422.18F);
      doubleArray0[5] = (double) (-764.9125F);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1422.1800537109375));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(662.8112148542169, double0, 0.01);
      
      double[][] doubleArray2 = new double[4][7];
      doubleArray2[0] = doubleArray0;
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3059.64990234375, double1, 0.01);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-764.9125F);
      doubleArray3[1] = 3059.64990234375;
      doubleArray3[2] = 3059.64990234375;
      doubleArray3[3] = (double) 0.0F;
      doubleArray3[4] = (-1090.1294563512365);
      doubleArray3[5] = (double) (-764.9125F);
      doubleArray3[6] = (double) 0.0F;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0, 0.0, (-1.0), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1968;
      intArray0[1] = 16;
      intArray0[2] = (-334);
      intArray0[3] = 69;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1968, 16, (-334), 69}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-334);
      floatArray0[1] = (float) 1968;
      floatArray0[2] = (float) 69;
      floatArray0[3] = (float) 16;
      floatArray0[4] = (float) (-334);
      floatArray0[5] = (float) 16;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-334.0F), 1968.0F, 69.0F, 16.0F, (-334.0F), 16.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      long[] longArray0 = new long[0];
      long[][] longArray1 = new long[5][5];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = (long) 1467;
      longArray2[1] = (long) 1467;
      longArray2[2] = (long) 1467;
      longArray2[3] = (long) 1467;
      longArray2[4] = (long) 1467;
      longArray2[5] = (long) 1467;
      longArray2[6] = (long) 1467;
      longArray1[2] = longArray2;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1467L;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      double[] doubleArray0 = new double[2];
      intArray0[3] = 0;
      doubleArray0[1] = (double) 134;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 134.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (double) 0, (double) 134, (double) 10000, (double) 0, 0.0, (double) 0, (double) 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1340000.0, double1, 0.01);
      
      float[] floatArray0 = new float[2];
      intArray1[0] = 134;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 245.286121654165;
      doubleArray1[1] = 746.100117648;
      doubleArray1[2] = 245.286121654165;
      doubleArray1[3] = 746.100117648;
      doubleArray1[4] = 1.633123935319537E16;
      doubleArray1[5] = 245.286121654165;
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {245.286121654165, 746.100117648, 245.286121654165, 746.100117648, 1.633123935319537E16, 245.286121654165}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      Double double1 = new Double(746.100117648);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(746.100117648, (double)double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {245.286121654165, 746.100117648, 245.286121654165, 746.100117648, 1.633123935319537E16, 245.286121654165}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 746.100117648, 245.286121654165, 746.100117648, 1.633123935319537E16, 245.286121654165}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination((-3715.8027489734077), 2691.3115308159, (-1320.099628), 0.0, (-1320.099628), 0.0, 98516.85268445026, 2691.3115308159);
      assertEquals(2.551391588248028E8, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, (-984.28625742514));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-67.71116);
      doubleArray0[1] = (-67.71116);
      doubleArray0[2] = (-67.71116);
      doubleArray0[3] = (-67.71116);
      doubleArray0[4] = (-67.71116);
      doubleArray0[5] = 1233.135000646534;
      doubleArray0[6] = (-67.71116);
      doubleArray0[7] = (-67.71116);
      doubleArray0[8] = (-1773.49197430176);
      double[] doubleArray1 = MathArrays.scale((-67.71116), doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-67.71116), (-67.71116), (-67.71116), (-67.71116), (-67.71116), 1233.135000646534, (-67.71116), (-67.71116), (-1773.49197430176)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4584.801188545601, 4584.801188545601, 4584.801188545601, 4584.801188545601, 4584.801188545601, (-83497.00133037758), 4584.801188545601, 4584.801188545601, 120085.19883066237}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1773.49197430176);
      doubleArray2[1] = (-1773.49197430176);
      doubleArray2[2] = (-67.71116);
      doubleArray2[3] = (-1773.49197430176);
      doubleArray2[4] = (-1773.49197430176);
      doubleArray2[5] = (-67.71116);
      doubleArray2[6] = (-67.71116);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1773.49197430176), (-1773.49197430176), (-67.71116), (-1773.49197430176), (-1773.49197430176), (-67.71116), (-67.71116)}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -67.711 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      int int0 = 1;
      intArray0[1] = 1;
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      doubleArray1[2] = 0.017;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-2856.8481760238865);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 0;
      double double0 = 245.286121654165;
      double double1 = (-1320.099628);
      double double2 = 0.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1422.18F);
      floatArray1[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1422.18F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1422.18F);
      doubleArray0[3] = (-9.007199254740992E15);
      doubleArray0[4] = (double) (-1422.18F);
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.000179575256243E8);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, (-1422.1800537109375), (-9.007199254740992E15), (-1422.1800537109375), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.257359455563075E-28), -0.0, 1.579220578815718E-5, 1.0001795752559273E8, 1.579220578815718E-5, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, (-1422.1800537109375), (-9.007199254740992E15), (-1422.1800537109375), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.257359455563075E-28), -0.0, 1.579220578815718E-5, 1.0001795752559273E8, 1.579220578815718E-5, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, (-1422.1800537109375), (-9.007199254740992E15), (-1422.1800537109375), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.257359455563075E-28), -0.0, 1.579220578815718E-5, 1.0001795752559273E8, 1.579220578815718E-5, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.0001795752559273E8, double0, 0.01);
      
      double[][] doubleArray2 = new double[3][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, (-1422.1800537109375), (-1422.1800537109375), (-9.007199254740992E15)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4.257359455563075E-28), -0.0, 1.579220578815718E-5, 1.0001795752559273E8, 1.579220578815718E-5, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-764.9125F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-764.9124755859375), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-764.9124755859375), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-764.9124755859375), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(764.9124755859375, double0, 0.01);
      
      double[][] doubleArray2 = new double[7][8];
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 764.9124755859375;
      doubleArray3[1] = (double) 0.0F;
      doubleArray3[2] = (double) (-1422.18F);
      doubleArray3[3] = (double) 0.0F;
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = (double) (-764.9125F);
      doubleArray3[6] = (double) 0.0F;
      doubleArray3[7] = (double) (-1422.18F);
      doubleArray3[8] = 764.9124755859375;
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 1186.0;
      doubleArray4[1] = 1186.0;
      doubleArray2[3] = doubleArray4;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      int int0 = 134;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2.0217439756338078E-10;
      doubleArray0[2] = (double) 10000;
      doubleArray0[3] = (double) 134;
      doubleArray0[4] = (double) 134;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0217439756338078E-10, 10000.0, 134.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4.0434879512676156E-10, 20000.0, 268.0, 268.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = 2176.058;
      double double1 = MathArrays.linearCombination((double) 10000, 134.0, (-825.0), 1.0, 2176.058, (-2062.133103486089), 1.0, 2176.058);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3145970.178905732), double1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-1186.924146537179));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 2.0217439756338078E-10, 10000.0, 134.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4.0434879512676156E-10, 20000.0, 268.0, 268.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, (-2.3370244865560902E-11), (-1155.9448252212267), (-15.48966065796444), (-15.48966065796444)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.0217439756338078E-10, 10000.0, 134.0, 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 4.0434879512676156E-10, 20000.0, 268.0, 268.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, (-2.3370244865560902E-11), (-1155.9448252212267), (-15.48966065796444), (-15.48966065796444)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10000;
      floatArray0[1] = (float) 10000;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 10000;
      float float0 = (-1861.8186F);
      floatArray1[1] = (-1861.8186F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(2, floatArray1.length);
      assertEquals(2, floatArray0.length);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {10000.0F, (-1861.8186F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {10000.0F, 10000.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2972176.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2972176.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.833830174976E12}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2972176.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.833830174976E12}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 2124;
      longArray0[1] = (long) 134;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1444.272120112387);
      doubleArray0[2] = 134.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1444.272120112387), 134.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 927L;
      longArray2[1] = (-1817L);
      longArray2[2] = 9218868437227405312L;
      longArray2[3] = 2022L;
      longArray2[4] = (-1472L);
      longArray2[5] = (-1405L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,817 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(513.1549356210769, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[9];
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(497);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(497, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(2);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(2, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(0, (int)integer4);
      
      Integer integer5 = Integer.getInteger("ceZ>k  g", integer4);
      assertNotNull(integer5);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(0, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(int0);
      assertNotNull(integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertTrue(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertEquals(2, (int)integer6);
      
      integerArray0[5] = integer6;
      Integer integer7 = new Integer(1813);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertEquals(1813, (int)integer7);
      
      integerArray0[6] = integer7;
      Integer integer8 = new Integer(1256);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertEquals(1256, (int)integer8);
      
      integerArray0[7] = integer8;
      Integer integer9 = new Integer((-2463));
      assertNotNull(integer9);
      assertFalse(integer9.equals((Object)integer0));
      assertFalse(integer9.equals((Object)integer2));
      assertFalse(integer9.equals((Object)integer4));
      assertFalse(integer9.equals((Object)integer1));
      assertFalse(integer9.equals((Object)integer3));
      assertFalse(integer9.equals((Object)integer6));
      assertFalse(integer9.equals((Object)int0));
      assertFalse(integer9.equals((Object)integer5));
      assertFalse(integer9.equals((Object)integer7));
      assertFalse(integer9.equals((Object)integer8));
      assertEquals((-2463), (int)integer9);
      
      integerArray0[8] = integer9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1686L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1686L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1686.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1686L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1686.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1686.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      assertArrayEquals(new long[] {1686L, 0L, 0L}, longArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1686.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-470.211199105301);
      doubleArray0[1] = (-470.211199105301);
      doubleArray0[2] = (-470.211199105301);
      doubleArray0[3] = (-470.211199105301);
      doubleArray0[4] = 3850.433449292264;
      doubleArray0[5] = (-470.211199105301);
      doubleArray0[6] = 161.45;
      double[] doubleArray1 = MathArrays.scale((-470.211199105301), doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-470.211199105301), (-470.211199105301), (-470.211199105301), (-470.211199105301), 3850.433449292264, (-470.211199105301), 161.45}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {221098.571764045, 221098.571764045, 221098.571764045, 221098.571764045, (-1810516.9292668756), 221098.571764045, (-75915.59809555084)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1964.06);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-470.211199105301), (-470.211199105301), (-470.211199105301), (-470.211199105301), 3850.433449292264, (-470.211199105301), 161.45}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {221098.571764045, 221098.571764045, 221098.571764045, 221098.571764045, (-1810516.9292668756), 221098.571764045, (-75915.59809555084)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-556.0619832125014), (-556.0619832125014), (-556.0619832125014), (-556.0619832125014), 4553.442504379244, (-556.0619832125014), 190.92741168326262}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-470.211199105301));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-470.211199105301), (-470.211199105301), (-470.211199105301), (-470.211199105301), 3850.433449292264, (-470.211199105301), 161.45}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {221098.571764045, 221098.571764045, 221098.571764045, 221098.571764045, (-1810516.9292668756), 221098.571764045, (-75915.59809555084)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-556.0619832125014), (-556.0619832125014), (-556.0619832125014), (-556.0619832125014), 4553.442504379244, (-556.0619832125014), 190.92741168326262}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {133.12555212326612, 133.12555212326612, 133.12555212326612, 133.12555212326612, (-1090.1294563512365), 133.12555212326612, (-45.70950337039519)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      intArray0[2] = 218;
      intArray0[3] = 274;
      intArray0[4] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {134217729, 0, 218, 274, 2}, intArray1);
      assertArrayEquals(new int[] {134217729, 0, 218, 274, 2}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.scaleInPlace(163.46063152296, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-470.211199105301), (-470.211199105301), (-470.211199105301), (-470.211199105301), 3850.433449292264, (-470.211199105301), 161.45}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {221098.571764045, 221098.571764045, 221098.571764045, 221098.571764045, (-1810516.9292668756), 221098.571764045, (-75915.59809555084)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-90894.24294182507), (-90894.24294182507), (-90894.24294182507), (-90894.24294182507), 744308.5873693199, (-90894.24294182507), 31209.11528879028}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray3, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {(-470.211199105301), (-470.211199105301), (-470.211199105301), (-470.211199105301), 3850.433449292264, (-470.211199105301), 161.45}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {221098.571764045, 221098.571764045, 221098.571764045, 221098.571764045, (-1810516.9292668756), 221098.571764045, (-75915.59809555084)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-90894.24294182507), (-90894.24294182507), (-90894.24294182507), (-90894.24294182507), 744308.5873693199, (-90894.24294182507), 31209.11528879028}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {133.12555212326612, 133.12555212326612, 133.12555212326612, 133.12555212326612, (-1090.1294563512365), 133.12555212326612, (-45.70950337039519)}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(1231790.3840875735, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[][] longArray0 = new long[5][4];
      MathArrays.checkNonNegative(longArray0[0]);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<Integer> fieldElement1 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, fieldElement0, fieldElement0, fieldElement0, fieldElement1).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 10, 0);
      assertEquals(10, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 439318.70653652295, 0.0, 1.0);
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = Integer.valueOf(109);
      assertNotNull(integer0);
      assertEquals(109, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = (-784.34F);
      floatArray0[0] = (-784.34F);
      floatArray0[2] = (-764.9125F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-784.34F), 0.0F, (-764.9125F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-764.9125F);
      doubleArray0[2] = (double) (-764.9125F);
      doubleArray0[3] = (double) (-764.9125F);
      doubleArray0[4] = (double) 0.0F;
      floatArray0[1] = (-764.9125F);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      double[][] doubleArray2 = new double[4][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-244.11081F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-244.11081F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1686L;
      longArray0[1] = (-7L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1686L;
      doubleArray0[1] = (double) 1686L;
      doubleArray0[2] = 2.19591383392981E7;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1686.0, 1686.0, 2.19591383392981E7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1686.0, 1686.0, 2.19591383392981E7, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 436.87929174;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 436.87929174;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      floatArray0[2] = (-728.9609F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-728.9609F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-728.9609F);
      floatArray1[4] = (-728.9609F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(3, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NEGATIVE_INFINITY, (-728.9609F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-728.9609F), 0.0F, (-728.9609F), (-728.9609F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 436.87929174}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 436.87929174, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1686L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1686.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[0] = 0;
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "_`xs *?h8`_)2@ht.";
      stringArray0[2] = "_`xs *?h8`_)2@ht.";
      stringArray0[3] = "|C:P65~$HT^|";
      stringArray0[4] = "NOT_POSITIVE_SCALE";
      stringArray0[5] = "_`xs *?h8`_)2@ht.";
      stringArray0[7] = "_`xs *?h8`_)2@ht.";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-15);
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 436.87929174;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 436.87929174;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 436.87929174;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 436.87929174}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 436.87929174, 0.0, 0.0, 0.0, 436.87929174}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 284;
      intArray0[1] = 2;
      intArray0[2] = 299;
      intArray0[3] = 129;
      intArray0[4] = 349;
      intArray0[5] = 1;
      intArray0[6] = (-3538);
      intArray0[7] = 922;
      intArray0[8] = 134217729;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 284;
      intArray1[1] = 284;
      intArray1[2] = (-3538);
      intArray1[3] = 1;
      intArray1[4] = (-3538);
      intArray1[5] = 1;
      intArray1[6] = 2;
      intArray1[7] = 122;
      intArray1[8] = 284;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {284, 2, 299, 129, 349, 1, (-3538), 922, 134217729}, intArray0);
      assertArrayEquals(new int[] {284, 284, (-3538), 1, (-3538), 1, 2, 122, 284}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1.3421744516055605E8, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      intArray0[1] = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1467.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(245.286121654165, Double.NaN, 0.0, 98516.85268445026, 0.0, (-2310.812756222562), (-1320.099628), (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[2] = "`3h]Ms:{v{";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination(958.6636920939221, 1724.0, 1724.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 0.0;
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3660);
      assertNotNull(integer0);
      assertEquals(3660, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(3660);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3660, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(113);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(113, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(10);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(10, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(113);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(113, (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("org.apache.commons.math3.util.MathArrays$2");
      assertNull(integer6);
      
      integerArray0[6] = null;
      Integer integer7 = new Integer(133);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(133, (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = Integer.getInteger("org.apache.commons.math3.util.MathArrays$2");
      assertNull(integer8);
      
      integerArray0[8] = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-15);
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 14;
      intArray0[5] = (-2113);
      intArray0[6] = 169;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-15), 1186, 0, 0, 14, (-2113), 169}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2125;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      Integer integer0 = Integer.valueOf(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 10000;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.1111111111111111;
      doubleArray0[1] = (double) 134;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 10000;
      doubleArray0[4] = (double) 10000;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.1111111111111111, 134.0, 0.0, 10000.0, 10000.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1073741823));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1422.18F);
      floatArray0[2] = (-764.9125F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1422.18F), (-764.9125F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-764.9125F);
      doubleArray0[2] = (double) (-764.9125F);
      doubleArray0[3] = (double) (-764.9125F);
      doubleArray0[4] = (double) (-1422.18F);
      doubleArray0[5] = (double) (-764.9125F);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1422.1800537109375));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(662.8112148542169, double0, 0.01);
      
      double[][] doubleArray2 = new double[4][7];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-764.9125F);
      doubleArray3[1] = (double) (-1422.18F);
      doubleArray3[2] = 1186.0;
      doubleArray3[3] = (double) (-764.9125F);
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[0] = 0;
      Double double0 = new Double(0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 746.1001176475;
      doubleArray0[2] = 436.87929174;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 746.1001176475, 436.87929174}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {436.87929174, 0.0, 746.1001176475}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-67.8834);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1358.466;
      doubleArray0[5] = 1.304E19;
      Integer integer0 = Integer.valueOf(134217729);
      assertNotNull(integer0);
      assertEquals(134217729, (int)integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2.957007209750105E-8);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1358.466;
      doubleArray1[3] = 1358.466;
      doubleArray1[4] = 1.304E19;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1358.466;
      doubleArray1[7] = (-67.8834);
      doubleArray1[8] = 1.304E19;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 10000, 134, 2124}, intArray0);
      assertArrayEquals(new int[] {10000, 10000, 0, 0, 134}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10000, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 134;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 134;
      doubleArray0[4] = (double) 10000;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {134.0, 10000.0, 0.0, 134.0, 10000.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(377.427624, (double) 134, (double) 10000, (-1023.5897967531204), (double) 134, (double) 134, (double) 10000, 2.1959138339298125E7);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.1958121602631534E11, double1, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 134;
      doubleArray1[2] = 2643.7047128;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 10000;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 134;
      doubleArray1[8] = (double) 134;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      intArray0[1] = 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      doubleArray1[2] = 0.017;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-2856.8481760238865);
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.017;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 1467;
      doubleArray2[3] = (double) 1467;
      doubleArray2[4] = (double) 1467;
      doubleArray2[5] = 0.017;
      doubleArray2[6] = (-2856.8481760238865);
      doubleArray2[7] = (double) 1;
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.017, 1.0, 1467.0, 1467.0, 1467.0, 0.017, (-2856.8481760238865), 1.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1.4617850501429006E7, double0, 0.01);
      
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      intArray0[1] = 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      doubleArray1[2] = 0.017;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (-2856.8481760238865);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 1);
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[4] = 14;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2713.443431465118);
      doubleArray1[1] = (double) (-15);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (-1852.056135);
      doubleArray1[4] = (double) 1186;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2713.443431465118), (-15.0), 0.0, (-1852.056135), 1186.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3492.808065575939, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {7362775.255761195, 225.0, 0.0, 3430111.9271911383, 1406596.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2713.443431465118), (-15.0), 0.0, (-1852.056135), 1186.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 1186;
      floatArray0[1] = (float) (-15);
      floatArray0[2] = (float) 14;
      floatArray0[3] = (float) 1186;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 14;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 1186;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 14;
      floatArray1[1] = (float) (-15);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1186.0F, (-15.0F), 14.0F, 1186.0F, 0.0F, 14.0F, 0.0F, 1186.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {14.0F, (-15.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(245.286121654165, Double.NaN, 0.0, 98516.85268445026, 0.0, (-2310.812756222562), (-1320.099628), (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "`3h]Ms:{v{";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = (-15);
      int int1 = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 14;
      doubleArray0[3] = (double) 0;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 14.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-15);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -15 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 10000;
      integerArray0[1] = (Integer) 10000;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 10000;
      integerArray0[4] = (Integer) 2124;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 10000;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = (-1.0);
      double double1 = MathArrays.linearCombination(245.286121654165, Double.NaN, 0.0, 98516.85268445026, 0.0, (-2310.812756222562), (-1320.099628), (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 100.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1686L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1686L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1686.0, 0.0, 1686.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1686L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1686.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1.7168146928204135);
      doubleArray2[1] = (double) 1686L;
      doubleArray2[2] = (-813.8018247);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 250.808563866;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 97.565653690484);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 250.808563866, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 97.565653690484, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 250.808563866, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 97.565653690484, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(245.286121654165, Double.NaN, 0.0, 98516.85268445026, 0.0, (-2310.812756222562), (-1320.099628), (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "`3h]Ms:{v{";
      stringArray0[2] = "X!=<T$Q@iz}";
      stringArray0[3] = "`3h]Ms:{v{";
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 10000, 134, 2124}, intArray0);
      assertArrayEquals(new int[] {10000, 10000, 0, 0, 134}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10000, int0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = (double) 10000;
      doubleArray0[3] = (double) 134;
      doubleArray0[4] = (double) 10000;
      doubleArray0[5] = (double) 10000;
      doubleArray0[6] = (double) 10000;
      doubleArray0[7] = 3130.7635667504;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {134.0, 10000.0, 10000.0, 134.0, 10000.0, 10000.0, 10000.0, 3130.7635667504}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 134, 134);
      assertEquals(134, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-915.3), (-1173.3671375), 2358.7166612459105, 1.0, 1.34217729E8);
      assertEquals(1.3145008838302033E8, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double1 = new Double(1.3145008838302033E8);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.3145008838302033E8, double1, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_`xs *?h8`_)2@ht.";
      stringArray0[1] = "";
      stringArray0[2] = "NOT_POSITIVE_SCALE";
      stringArray0[3] = "|C:P65~$HT^|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 313.87394394;
      doubleArray0[1] = 121.1531605275;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 245.286121654165;
      doubleArray0[4] = (-1320.099628);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {313.87394394, 121.1531605275, 1.0, 245.286121654165, (-1320.099628), 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {98516.85268445026, 14678.088305802186, 1.0, 60165.28147614183, 1742663.0278457382, Double.POSITIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {313.87394394, 121.1531605275, 1.0, 245.286121654165, (-1320.099628), 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {627.74788788, 242.306321055, 2.0, 490.57224330833, (-2640.199256), Double.POSITIVE_INFINITY, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination((-1.0), 6.283185307179586, (-2310.812756222562), 4573.0412173725, 0.0, 0.0, (-1320.099628), (-1320.099628));
      assertEquals((-8824785.235175494), double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM";
      stringArray0[2] = "UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-915.3), (-1173.3671375), 2358.7166612459105, 1.0, 1.34217729E8);
      assertEquals(1.3145008838302033E8, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_`xs *?h8`_)2@ht.";
      stringArray0[1] = "";
      stringArray0[2] = "NOT_POSITIVE_SCALE";
      stringArray0[3] = "|C:P65~$HT^|";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-915.3), (-1173.3671375), 2358.7166612459105, 1.0, 1.34217729E8);
      assertEquals(1.3145008838302033E8, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 2124;
      intArray0[1] = 2124;
      intArray0[2] = 2124;
      intArray0[3] = 2124;
      intArray0[4] = 2124;
      intArray0[5] = 2124;
      intArray0[6] = 2124;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2124, 2124, 2124, 2124, 2124, 2124, 2124}, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 10000, 134, 2124}, intArray0);
      assertArrayEquals(new int[] {10000, 10000, 0, 0, 134}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10000, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 134;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 134;
      doubleArray0[4] = (double) 10000;
      doubleArray0[5] = (double) 134;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {134.0, 10000.0, 0.0, 134.0, 10000.0, 134.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      int int0 = 1186;
      intArray0[1] = 1186;
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-849.7247757463);
      doubleArray0[1] = (double) 1186;
      doubleArray0[2] = (double) 1186;
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-849.7247757463), 1186.0, 1186.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.1404812967570267E11), 1.59182226594E11, 1.59182226594E11}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (159,182,226,594 >= 159,182,226,594)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 313.87394394;
      doubleArray0[1] = 121.1531605275;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 2272.572031;
      doubleArray1[2] = (-348.1);
      doubleArray1[3] = (-416.21699860688005);
      doubleArray1[5] = 2272.572031;
      doubleArray1[5] = 2272.572031;
      doubleArray1[6] = (-1.0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 37);
      assertEquals(7, doubleArray1.length);
      assertEquals(37, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 2272.572031, (-348.1), (-416.21699860688005), 0.0, 2272.572031, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(7, doubleArray1.length);
      assertEquals(37, doubleArray2.length);
      assertEquals(37, doubleArray3.length);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 2272.572031, (-348.1), (-416.21699860688005), 0.0, 2272.572031, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(245.286121654165, Double.NaN, 0.0, 98516.85268445026, 0.0, (-2310.812756222562), (-1320.099628), (-1.0));
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "`3h]Ms:{v{";
      stringArray0[2] = "X!=<T$Q@iz}";
      stringArray0[3] = "`3h]Ms:{v{";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 313.87394394;
      doubleArray0[1] = 121.1531605275;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 245.286121654165;
      doubleArray0[4] = (-1320.099628);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {313.87394394, 121.1531605275, 1.0, 245.286121654165, (-1320.099628), 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {98516.85268445026, 14678.088305802186, 1.0, 60165.28147614183, 1742663.0278457382, Double.POSITIVE_INFINITY, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {313.87394394, 121.1531605275, 1.0, 245.286121654165, (-1320.099628), 1.7976931348623157E308, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {627.74788788, 242.306321055, 2.0, 490.57224330833, (-2640.199256), Double.POSITIVE_INFINITY, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination((-1.0), 6.283185307179586, (-2310.812756222562), 0.0, 0.0, 0.0, (-1320.099628), (-1320.099628));
      assertEquals(1742656.744660431, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM";
      stringArray0[2] = "`3h]Ms:{v{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2815.35823962));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.scale(4280.025, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(4280.025, 0.06666666666666667, (-4.503599627370496E15), 2776.955030106577);
      assertEquals((-1.2506293638812604E19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 2225L;
      longArray0[1] = 2225L;
      longArray0[2] = 2225L;
      longArray0[3] = 2225L;
      longArray0[4] = 2225L;
      longArray0[5] = 2225L;
      longArray0[6] = 2225L;
      longArray0[7] = 2225L;
      longArray0[8] = 2225L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {2225L, 2225L, 2225L, 2225L, 2225L, 2225L, 2225L, 2225L, 2225L}, longArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2225L;
      doubleArray0[1] = (double) 2225L;
      doubleArray0[2] = (double) 2225L;
      doubleArray0[3] = (double) 2225L;
      doubleArray0[4] = (double) 2225L;
      doubleArray0[5] = (double) 2225L;
      doubleArray0[6] = (double) 2225L;
      doubleArray0[7] = (double) 2225L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(1964.0599999999997, 1218.3070799074692, (double) 2225L, (-1.0), 2225.0, 2225.0);
      assertEquals(7341228.203363064, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2225.0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {278.125, 278.125, 278.125, 278.125, 278.125, 278.125, 278.125, 278.125}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0, 2225.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = (-250.239480465);
      doubleArray0[5] = 721.504566155;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, (-1.0), 0.0, (-250.239480465), 721.504566155}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-5734);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, (-5734), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-5734), 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(955.147787652853, (-2.6437112632041807E-8), (-2445.74988), (-2167.01306), 721.504566155, (double) 0);
      assertEquals(5299971.931428182, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1686L;
      longArray0[1] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 202, 202);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 10000;
      intArray0[2] = 134;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 10000, 134, 2124}, intArray0);
      assertArrayEquals(new int[] {10000, 10000, 0, 0, 134}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(10000, int0);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134, 134);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[4] = 14;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 14;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 14.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-15);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -15 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1422.18F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-764.9125F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1422.18F), 0.0F, (-764.9125F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 1853L;
      longArray1[1] = (-880L);
      longArray1[2] = 1482L;
      longArray1[3] = (-601L);
      longArray1[4] = (-4035746434778044925L);
      longArray1[5] = 1191L;
      longArray1[6] = (-3958705157555305932L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-601L);
      longArray2[1] = (-4035746434778044925L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-601L);
      longArray3[1] = (-880L);
      longArray3[2] = 1482L;
      longArray3[3] = 3952090531849364496L;
      longArray3[4] = (-880L);
      longArray3[5] = (-601L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-880L);
      longArray4[1] = 1482L;
      longArray4[2] = 1853L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 3952090531849364496L;
      longArray6[1] = (-3958705157555305932L);
      longArray6[2] = 3952090531849364496L;
      longArray6[3] = 1853L;
      longArray6[4] = 3952090531849364496L;
      longArray6[5] = 1482L;
      longArray6[6] = (-880L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4515.479;
      doubleArray0[3] = 873.984;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-208.119932789306);
      doubleArray1[3] = 873.984;
      doubleArray1[4] = 4515.479;
      doubleArray1[5] = 873.984;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-208.119932789306), 873.984, 4515.479, 873.984}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4686.209616564033, double0, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 120.02847313808;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-773.638764);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {120.02847313808, (-1.0), (-773.638764)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {240.05694627616, (-2.0), (-1547.277528)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-773.638764), (-773.638764), 120.02847313808, 120.02847313808, 0.0, (-773.638764), (-773.638764), 120.02847313808);
      assertEquals(520065.09192395513, double0, 0.01);
      
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      int int1 = 1741;
      Integer integer2 = new Integer(1741);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertEquals(1741, (int)integer2);
      
      int int2 = 233;
      Integer integer3 = new Integer(233);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(233, (int)integer3);
      
      Integer integer4 = Integer.valueOf(0);
      assertNotNull(integer4);
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int2));
      assertTrue(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(0, (int)integer4);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 250.808563866;
      doubleArray0[2] = (-1.58998329844285);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1724.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1724.0, 1.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[7];
      longArray1[0] = (-1L);
      longArray1[1] = 1059L;
      longArray1[2] = (-671L);
      longArray1[3] = (-1L);
      longArray1[4] = (-302932621132653753L);
      longArray1[5] = (-171L);
      longArray1[6] = (-2317L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1059L;
      longArray2[1] = (-171L);
      longArray2[2] = (-1L);
      longArray2[3] = (-171L);
      longArray2[4] = (-171L);
      longArray2[5] = (-1L);
      longArray2[6] = (-171L);
      longArray2[7] = 1059L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2317L);
      longArray3[1] = (-171L);
      longArray3[2] = (-2317L);
      longArray3[3] = (-2317L);
      longArray3[4] = (-171L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-302932621132653753L);
      longArray4[1] = 1059L;
      longArray4[2] = (-171L);
      longArray4[3] = (-3867L);
      longArray4[4] = (-2317L);
      longArray4[5] = (-171L);
      longArray4[6] = (-302932621132653753L);
      longArray4[7] = (-2317L);
      longArray4[8] = 1230L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-171L);
      longArray5[1] = 5221L;
      longArray5[2] = (-1L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-3867L);
      longArray6[1] = (-3867L);
      longArray6[2] = (-3867L);
      longArray6[3] = 572L;
      longArray6[4] = (-2317L);
      longArray6[5] = (-171L);
      longArray6[6] = 5221L;
      longArray6[7] = (-671L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2856.8481760238865);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2856.8481760238865), (-1.0), 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 81.1288258316;
      doubleArray0[2] = (-2281.459054746145);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (81.129 >= -2,281.459)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2856.8481760238865);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = (double) 1467;
      doubleArray1[1] = (double) 1467;
      doubleArray1[2] = 0.017;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2856.8481760238865), 1467.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1467;
      MathArrays.checkPositive(doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1467.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2079.3409683445707);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, (-2079.3409683445707), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3060.1272493657298;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-2167.01306);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3060.1272493657298, 1.304E19, (-2167.01306), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 746.1001176475;
      doubleArray0[2] = 436.87929174;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {746.1001176475, 0.0, 436.87929174}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 436.87929174;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 746.1001176475;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 436.87929174;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {746.1001176475, 0.0, 436.87929174}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 436.87929174, 0.0, 746.1001176475, 0.0, 436.87929174}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1422.18F);
      floatArray0[2] = (-764.9125F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1422.18F), (-764.9125F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-764.9125F);
      doubleArray0[2] = (double) (-764.9125F);
      doubleArray0[3] = (double) (-764.9125F);
      doubleArray0[4] = (double) (-1422.18F);
      doubleArray0[5] = (double) (-764.9125F);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1422.1800537109375));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-764.9124755859375), (-764.9124755859375), (-764.9124755859375), (-1422.1800537109375), (-764.9124755859375)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-242.72301186781144), (-242.72301186781144), (-242.72301186781144), (-451.2880062396917), (-242.72301186781144)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1007.635487453749), (-1007.635487453749), (-1007.635487453749), (-1873.4680599506291), (-1007.635487453749)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.5, (double) (-764.9125F), (-764.9124755859375), (double) (-764.9125F));
      assertEquals(584708.6390692145, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 250.808563866;
      doubleArray0[2] = (-1.58998329844285);
      doubleArray0[3] = (-822.215196);
      doubleArray0[4] = (-208.119932789306);
      doubleArray0[5] = 802.5;
      doubleArray0[6] = 1759.9681078;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1292;
      intArray0[1] = 102;
      intArray0[2] = (-1314);
      intArray0[3] = 369;
      int[] intArray1 = MathArrays.copyOf(intArray0, 369);
      assertEquals(4, intArray0.length);
      assertEquals(369, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1292, 102, (-1314), 369}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 1.0;
      double double1 = MathArrays.linearCombination(0.0, (-915.3), (-1173.3671375), 2358.7166612459105, 1.0, 1.34217729E8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.3145008838302033E8, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      MathArrays.checkRectangular(longArray0);
      assertEquals(4, longArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{JHiYkaL";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "";
      stringArray0[4] = "QU";
      stringArray0[5] = "#xb^tCb4N8H";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2146473067);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1358.466;
      doubleArray0[5] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      MathArrays.convolve(doubleArray0, doubleArray1);
      long[][] longArray1 = new long[2][2];
      longArray1[1] = longArray0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 124, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 746.1001176475;
      doubleArray0[2] = 436.87929174;
      MathArrays.equals(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2147.1335F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.141592653589793);
      MathArrays.checkOrder(doubleArray0);
      MathArrays.linearCombination(0.0, 2.0, (-1937.0397292532869), 0.0, 1673.952898332, (double) (-2147.1335F));
      MathArrays.distance1(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[3] = 2124;
      int[] intArray1 = new int[5];
      intArray1[0] = 10000;
      intArray1[1] = 10000;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[3];
      longArray1[0] = 1686L;
      longArray1[1] = 0L;
      longArray1[2] = 999L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = 999L;
      longArray2[1] = 1686L;
      longArray2[2] = 1686L;
      longArray2[3] = 1686L;
      longArray2[4] = 999L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 1686L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 999L;
      longArray4[1] = 1686L;
      longArray4[2] = 0L;
      longArray4[3] = 1686L;
      longArray4[4] = 1686L;
      longArray4[5] = 1686L;
      longArray4[6] = 1686L;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 139;
      intArray0[1] = 0;
      intArray0[2] = 1794;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1794;
      longArray0[1] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1794L;
      doubleArray0[1] = (double) 139;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 139;
      doubleArray0[4] = (double) 1794;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1794L;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1794L;
      doubleArray1[3] = (double) 139;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1794;
      doubleArray1[7] = (double) 1794L;
      doubleArray1[8] = (double) 1794;
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(3110.406565065088, double1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 1794L;
      MathArrays.equals(floatArray0, floatArray0);
      double double2 = MathArrays.linearCombination((double) 0, (double) 0L, (double) 1794, 3165.21899, 3110.406565065088, 4340.348159862263);
      assertEquals(1.917865027916376E7, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-436.21699860688005);
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 346;
      intArray0[1] = (-1);
      intArray0[2] = 1246;
      intArray0[3] = 1552;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-812.121036708863);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-3548.200710635503);
      doubleArray0[7] = 1653.848558113;
      doubleArray0[8] = 865.0242;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 865.0242, 0.0, (-1808.8319241220192), Double.NaN);
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("{0} is smaller than the minimum ({1})");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.{0} is smaller than the minimum ({1})
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4515.479;
      doubleArray0[3] = 873.984;
      doubleArray0[4] = (-1041.48975481581);
      doubleArray0[5] = (-43.3219);
      doubleArray0[6] = (-2408.89);
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2857.7609);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2857.7609), (-1.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3060.1272493657298;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-2167.01306);
      doubleArray0[3] = (-2713.443431465118);
      doubleArray0[4] = (-1858.065436004474);
      doubleArray0[5] = (-610.0);
      doubleArray0[6] = (-863.6939927);
      doubleArray0[7] = 941.0277876;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 2469.7;
      doubleArray0[3] = 0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.copyOf(doubleArray0, 0);
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = (long) 0;
      longArray3[2] = (-858L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 0L;
      longArray4[1] = (long) 0;
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-858L);
      longArray5[1] = 0L;
      longArray5[2] = (long) 0;
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = (-858L);
      longArray6[3] = 0L;
      longArray6[4] = 0L;
      longArray6[5] = (long) 0;
      longArray6[6] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = (long) 0;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = (long) 0;
      longArray7[4] = 0L;
      longArray7[5] = (long) 0;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -858 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.scale(4280.025, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      long[] longArray0 = new long[2];
      longArray0[0] = 538L;
      longArray0[1] = 2225L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {538L, 2225L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1467;
      intArray0[1] = 1;
      intArray0[2] = 967;
      intArray0[3] = 2555;
      intArray0[4] = (-1206);
      intArray0[5] = 5350;
      intArray0[6] = 7;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 120.02847313808;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-773.638764);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-773.638764), (-773.638764), 120.02847313808, 120.02847313808, 0.0, (-773.638764), (-773.638764), 120.02847313808);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1807);
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2257.66;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-67.8834);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1358.466;
      doubleArray0[5] = 1.304E19;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      longArray0[4] = 9218868437227405312L;
      longArray0[5] = 0L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-67.883 <= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 250.808563866;
      doubleArray0[2] = (-1.58998329844285);
      doubleArray0[3] = (-822.215196);
      doubleArray0[4] = (-208.119932789306);
      doubleArray0[5] = 802.5;
      doubleArray0[6] = 1759.9681078;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2126.911655237723, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.linearCombination(1.0, 1915.1245561027, 1915.1245561027, 1915.1245561027, 1.0, 1915.1245561027, 0.0, 1193.74430879);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1915.1245561027;
      doubleArray0[1] = 1193.74430879;
      doubleArray0[2] = 1193.74430879;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3671532.314499769;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1915.1245561027;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,915.125 > 1,193.744)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 2272.572031;
      doubleArray0[4] = (-250.239480465);
      doubleArray0[5] = 721.504566155;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 313.87394394;
      doubleArray0[1] = 121.1531605275;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 245.286121654165;
      doubleArray0[4] = (-1320.099628);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1.0), 6.283185307179586, (-2310.812756222562), 0.0, 0.0, 0.0, (-1320.099628), (-1320.099628));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM";
      stringArray0[2] = "`3h]Ms:{v{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1228.406808);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int int0 = (-1855);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1855));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-15);
      intArray0[1] = 1186;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 14;
      intArray0[5] = (-2113);
      intArray0[6] = 169;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2079.3409683445707);
      doubleArray0[2] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2079.3409683445707);
      doubleArray1[3] = Double.NaN;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-26.3726689);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 679.8653891115823;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = 1.34217729E8;
      double double0 = 3.32;
      doubleArray0[6] = 3.32;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 329);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 724.57852159, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3025.1962);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
