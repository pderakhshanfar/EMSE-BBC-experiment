/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:33:32 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1666.162725);
      doubleArray0[2] = 0.6299605249474366;
      doubleArray0[3] = 2100.77;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      longArray0[0] = null;
      long[] longArray1 = new long[3];
      long long0 = 1271L;
      longArray1[0] = 1271L;
      long long1 = 2819561105158720014L;
      longArray1[1] = 2819561105158720014L;
      long long2 = 561L;
      longArray1[2] = 561L;
      longArray0[1] = longArray1;
      // Undeclared exception!
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Double> fieldElement0 = (FieldElement<Double>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 25, 25);
      assertNotNull(fieldElementArray0);
      assertEquals(25, fieldElementArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[][] fieldElementArray0 = MathArrays.buildArray(field0, 25, (-1951));
      assertNotNull(fieldElementArray0);
      assertEquals(25, fieldElementArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-2828.8662));
      assertNotNull(double0);
      assertEquals((-2828.8662), (double)double0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      int int0 = (-2145359528);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "bM*fiA2Jpn]'*G4a\"t";
      stringArray0[1] = "{0&fJ^R-[OH%ez,";
      stringArray0[2] = "+%3b\"CYu&pUV.JqLzn";
      stringArray0[3] = "NOT_POWER_OF_TWO_PLUS_ONE";
      stringArray0[4] = "percentile implementation {0} does not support {1}";
      stringArray0[5] = "";
      stringArray0[6] = "*x=_kq";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      int int1 = 8;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 8, 8);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3651.2879041022657);
      doubleArray0[1] = (-1731.7644388617846);
      doubleArray0[2] = 2032.7272269055;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-2.6437112632041807E-8);
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 3743.6781791608;
      doubleArray0[8] = (-34.696065749);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3651.2879041022657), (-1731.7644388617846), 2032.7272269055, 1.304E19, (-2.6437112632041807E-8), 0.0, 1.304E19, 3743.6781791608, (-34.696065749)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 4660.571F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1605.9F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 2173.781F;
      floatArray0[6] = 1.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-808.7368F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-808.7368F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 2173.781F;
      floatArray1[8] = 4660.571F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 0.0F, (-808.7368F), 0.0F, 0.0F, 0.0F, 0.0F, 2173.781F, 4660.571F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 4660.571F, 0.0F, 1605.9F, 0.0F, 2173.781F, 1.0F, 0.0F, (-808.7368F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.1969549157367613E7;
      doubleArray0[1] = 2.1969549157367613E7;
      doubleArray0[2] = 2.1969549157367613E7;
      doubleArray0[3] = 2.1969549157367613E7;
      double[] doubleArray1 = MathArrays.scale(2.1969549157367613E7, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-301);
      intArray0[1] = 1;
      intArray0[2] = 2310;
      intArray0[3] = (-1613);
      intArray0[4] = (-2549);
      intArray0[5] = 362;
      intArray0[6] = 1;
      intArray0[7] = (-4756);
      intArray0[8] = (-3765);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-301), 1, 2310, (-1613), (-2549), 362, 1, (-4756), (-3765)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 2310);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2310, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7}, doubleArray0, 0.01);
      assertEquals(4.393909831473523E7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7, 2.1969549157367613E7}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14, 4.82661090177992E14}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 5080.2324F;
      floatArray0[1] = (-2516.0F);
      floatArray0[2] = 1302.0F;
      floatArray0[3] = 883.478F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 936.27F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {5080.2324F, (-2516.0F), 1302.0F, 883.478F, 0.0F, 936.27F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = null;
      int int0 = 111;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2788.77071365;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = (-3.356118100840571E-7);
      doubleArray0[3] = 118.58492;
      doubleArray0[4] = 2.092571258544922;
      doubleArray0[5] = 1.6322256934422705E7;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2788.77071365, 1.86285714285714278E18, (-3.356118100840571E-7), 118.58492, 2.092571258544922, 1.6322256934422705E7, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2788.77071365, 1.86285714285714278E18, (-3.356118100840571E-7), 118.58492, 2.092571258544922, 1.6322256934422705E7, 0.0}, doubleArray0, 0.01);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1380.7541906518);
      doubleArray0[1] = 3874.4825563038667;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 185.32717;
      doubleArray0[4] = (-161.887);
      doubleArray0[5] = (-310.8007859);
      doubleArray0[6] = 3049.0778115177;
      doubleArray0[7] = 445.45379;
      doubleArray0[8] = (-2503.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][3];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(298);
      assertNotNull(integer0);
      assertEquals(298, (int)integer0);
      
      Double double1 = new Double(2.800552834259E-8);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.800552834259E-8, (double)double1, 0.01);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      assertNotNull(pair0);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2250);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // org.apache.commons.math3.util.Pair
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1675);
      intArray0[3] = (-532);
      intArray0[4] = (-137);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, (-1675), (-532), (-137)}, intArray0);
      assertArrayEquals(new int[] {0, 0, (-1675), (-532), (-137)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2837));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 450.91;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 551.0;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 2.147483647E9, 450.91, 2.147483647E9, 551.0, 2.147483647E9, 2.147483647E9}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = (-929.780512218);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-929.780512218), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2425.776084);
      doubleArray0[1] = 4.116164446561962E-8;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.9921976327896118;
      doubleArray0[4] = 1.80143987890685E16;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (-937.1595);
      try { 
        MathArrays.normalizeArray(doubleArray0, 4.116164446561962E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.9921976327896118;
      doubleArray0[2] = 3366.0;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3.912E19;
      doubleArray0[5] = (-1241.20422);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1500.053);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.9921976327896118, 3366.0, 1.304E19, 3.912E19, (-1241.20422), (-1.0), (-1500.053)}, doubleArray0, 0.01);
      assertEquals(4.1236100688595665E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2219.95F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-168.604F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2219.95F, 0.0F, 1.0F, (-168.604F), Float.NaN, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 282.0;
      doubleArray0[1] = 1296.6775691775956;
      doubleArray0[2] = 1100.49728;
      doubleArray0[3] = 477144.0;
      doubleArray0[4] = (-1384.259);
      doubleArray0[5] = (-1960.9577);
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {282.0, 1296.6775691775956, 1100.49728, 477144.0, (-1384.259), (-1960.9577), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2691201395329994E-23, 1.0433748889012682E-22, 8.85517922535208E-23, 3.839351276089835E-20, (-1.113847508946741E-22), (-1.5778895779582659E-22), 8.046525317492906E-26}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(282.0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {282.0, 1296.6775691775956, 1100.49728, 477144.0, (-1384.259), (-1960.9577), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2691201395329994E-23, 1.0433748889012682E-22, 8.85517922535208E-23, 3.839351276089835E-20, (-1.113847508946741E-22), (-1.5778895779582659E-22), 8.046525317492906E-26}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.3989187934830586E-21, 2.9423171867015766E-20, 2.4971605415492865E-20, 1.0826970598573334E-17, (-3.14104997522981E-20), (-4.4496486098423097E-20), 2.2691201395329994E-23}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {282.0, 1296.6775691775956, 1100.49728, 477144.0, (-1384.259), (-1960.9577), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2691201395329994E-23, 1.0433748889012682E-22, 8.85517922535208E-23, 3.839351276089835E-20, (-1.113847508946741E-22), (-1.5778895779582659E-22), 8.046525317492906E-26}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.3989187934830586E-21, 2.9423171867015766E-20, 2.4971605415492865E-20, 1.0826970598573334E-17, (-3.14104997522981E-20), (-4.4496486098423097E-20), 2.2691201395329994E-23}, doubleArray2, 0.01);
      assertEquals(1.0827178263515273E-17, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3555.44347151659);
      doubleArray2[1] = 259.0;
      doubleArray2[2] = (-590.800783);
      doubleArray2[3] = 1.9699272335463627E-8;
      doubleArray2[4] = 1405.76338844;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3555.44347151659), 259.0, (-590.800783), 1.9699272335463627E-8, 1405.76338844}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(11, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 2000;
      intArray0[2] = 5;
      intArray0[3] = (-2319);
      intArray0[4] = (-992);
      intArray0[5] = 8;
      intArray0[6] = 2146630795;
      intArray0[7] = 1379;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2319);
      intArray1[1] = 2146630795;
      intArray1[2] = 2000;
      intArray1[3] = (-992);
      intArray1[4] = (-992);
      intArray1[5] = 2000;
      intArray1[6] = (-992);
      intArray1[7] = 1379;
      intArray1[8] = 5;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2319), 2146630795, 2000, (-992), (-992), 2000, (-992), 1379, 5}, intArray1);
      assertArrayEquals(new int[] {134217729, 2000, 5, (-2319), (-992), 8, 2146630795, 1379}, intArray0);
      assertEquals(2146631787, int0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4121.866);
      doubleArray0[1] = 3208.9;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1118.413887;
      doubleArray0[4] = 249.184011;
      doubleArray0[5] = 581.42343;
      doubleArray0[6] = 1.34217729E8;
      doubleArray0[7] = (-652.84118);
      doubleArray0[8] = 1966.4;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-4121.866), 3208.9, 1.304E19, 1118.413887, 249.184011, 581.42343, 1.34217729E8, (-652.84118), 1966.4}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 944.66F;
      floatArray0[1] = 159.673F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {944.66F, 159.673F, 1.4E-45F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.4E-45F;
      floatArray1[1] = 159.673F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {944.66F, 159.673F, 1.4E-45F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.4E-45F, 159.673F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2993.0);
      doubleArray0[1] = 1013.01;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1039.9431376638765;
      doubleArray0[5] = (-3266.86);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2993.0), 1013.01, 3.834E-20, 1.304E19, 1039.9431376638765, (-3266.86)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2993.0), 1013.01, 3.834E-20, 1.304E19, 1039.9431376638765, (-3266.86)}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1513.7F;
      doubleArray0[1] = (double) 1513.7F;
      doubleArray0[2] = (double) 1513.7F;
      doubleArray0[3] = (double) 1513.7F;
      doubleArray0[4] = (double) 1513.7F;
      doubleArray0[5] = (double) 1513.7F;
      doubleArray0[6] = (double) 1513.7F;
      doubleArray0[7] = (double) 1513.7F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1513.7F;
      floatArray0[1] = 1513.7F;
      floatArray0[2] = 1513.7F;
      floatArray0[3] = 1513.7F;
      floatArray0[4] = 1513.7F;
      floatArray0[5] = 1513.7F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1513.7F, 1513.7F, 1513.7F, 1513.7F, 1513.7F, 1513.7F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1513.7F;
      floatArray1[1] = 1513.7F;
      floatArray1[2] = 1513.7F;
      floatArray1[3] = 1513.7F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {1513.7F, 1513.7F, 1513.7F, 1513.7F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-621.72709);
      doubleArray0[1] = (double) 1513.7F;
      doubleArray0[2] = (double) 1513.7F;
      doubleArray0[3] = (double) 1513.7F;
      doubleArray0[4] = (double) 1513.7F;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 1513.7F;
      doubleArray0[7] = (double) 1513.7F;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-621.72709), 1513.699951171875, 1513.699951171875, 1513.699951171875, 1513.699951171875, Double.NaN, 1513.699951171875, 1513.699951171875}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 309.094819103;
      doubleArray0[1] = (-1540.180619535);
      doubleArray0[2] = 3705.4;
      doubleArray0[3] = (-690.459);
      doubleArray0[4] = (-1.5707963267948966);
      doubleArray0[5] = 0.75;
      doubleArray0[6] = (-1926.762889856154);
      doubleArray0[7] = (-1283.4729855652);
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {309.094819103, (-1540.180619535), 3705.4, (-690.459), (-1.5707963267948966), 0.75, (-1926.762889856154), (-1283.4729855652), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {309.094819103, (-1540.180619535), 3705.4, (-690.459), (-1.5707963267948966), 0.75, (-1926.762889856154), (-1283.4729855652), 3.834E-20}, doubleArray0, 0.01);
      assertEquals(4694.05367533991, double1, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.9);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 217;
      intArray0[1] = (-1416);
      intArray0[2] = 308;
      intArray0[3] = 38;
      intArray0[4] = 275;
      intArray0[5] = 2514;
      intArray0[6] = 947;
      intArray0[7] = 207;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {217, (-1416), 308, 38, 275, 2514, 947, 207}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2514;
      doubleArray0[1] = (double) 38;
      doubleArray0[2] = (double) 308;
      doubleArray0[3] = (-3459.791933);
      doubleArray0[4] = (double) 2514;
      doubleArray0[5] = (double) 217;
      doubleArray0[6] = (double) 38;
      doubleArray0[7] = (double) 308;
      doubleArray0[8] = (double) 308;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2514.0, 38.0, 308.0, (-3459.791933), 2514.0, 217.0, 38.0, 308.0, 308.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2514;
      doubleArray2[1] = (double) 207;
      doubleArray2[2] = (double) 217;
      boolean boolean0 = MathArrays.equals(doubleArray2, (double[]) null);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2514.0, 207.0, 217.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray2.length);
      
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 275;
      longArray1[1] = (long) 217;
      longArray1[2] = (long) 275;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 100L;
      longArray2[1] = (long) 2514;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 217;
      longArray3[1] = 0L;
      longArray3[2] = (long) 0;
      longArray3[3] = (long) (-1416);
      longArray3[4] = (long) (-1416);
      longArray3[5] = (long) 217;
      longArray3[6] = (long) 207;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) (-1416);
      longArray4[1] = (long) 308;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 947;
      longArray4[4] = 0L;
      longArray4[5] = (long) (-1416);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1172L;
      longArray5[1] = 0L;
      longArray5[2] = (long) 207;
      longArray5[3] = (long) 38;
      longArray5[4] = (long) 207;
      longArray5[5] = (long) 217;
      longArray5[6] = (long) 308;
      longArray5[7] = (long) 275;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 826;
      Integer integer0 = new Integer(826);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(826, (int)integer0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      long[][] longArray0 = new long[20][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(20, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(231.0, 5450.563, 1.44888888888888883E18, 1.44888888888888883E18);
      assertEquals(2.0992790123456787E36, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(13, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(826);
      assertNotNull(integer0);
      assertEquals(826, (int)integer0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 826;
      floatArray0[1] = (float) 826;
      floatArray0[2] = (float) 826;
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = (float) 826;
      floatArray0[6] = 0.5F;
      floatArray0[7] = (float) 826;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 560.0F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = (float) 826;
      floatArray1[3] = (float) 826;
      floatArray1[4] = (float) 826;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {826.0F, 826.0F, 826.0F, 3.4028235E38F, 826.0F, 0.0F, 0.5F, 826.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {560.0F, 3.4028235E38F, 826.0F, 826.0F, 826.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double double0 = MathArrays.linearCombination((double) 826.0F, 2.3711665593610223E7, (-2248.18868967377), (-3079.8047));
      assertEquals(1.959275976241499E10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3621.0F);
      floatArray0[1] = 1513.7F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3621.0F), 1513.7F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1513.7F;
      floatArray1[1] = (-3621.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-3621.0F), 1513.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1513.7F, (-3621.0F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = (-3555.2F);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      double double0 = (-1540.180619535);
      doubleArray0[3] = (-1540.180619535);
      doubleArray0[4] = (double) (-3555.2F);
      doubleArray0[5] = (double) 0.0F;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-3555.2F);
      doubleArray1[3] = (double) (-3555.2F);
      doubleArray1[4] = (double) (-3555.2F);
      doubleArray1[5] = (-1540.180619535);
      doubleArray1[6] = (double) 0.0F;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-3555.2F);
      floatArray0[3] = 3.4028235E38F;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      intArray0[1] = 1381;
      intArray0[2] = 242;
      intArray0[3] = 121;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 689L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 689L;
      longArray2[1] = 689L;
      longArray2[2] = 6722166367014452318L;
      longArray2[3] = 689L;
      longArray2[4] = 689L;
      longArray2[5] = 689L;
      longArray2[6] = 689L;
      longArray2[7] = 689L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 689L;
      longArray3[1] = 689L;
      longArray3[2] = 6722166367014452318L;
      longArray3[3] = 826L;
      longArray3[4] = 9193070505571053912L;
      longArray3[5] = 6722166367014452318L;
      longArray3[6] = 689L;
      longArray3[7] = 689L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 36, 36);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2483.5501800158977;
      doubleArray0[1] = (double) (-856);
      doubleArray0[2] = (double) (-856);
      doubleArray0[3] = (-890.5151745312);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2483.5501800158977, (-856.0), (-856.0), (-890.5151745312)}, doubleArray0, 0.01);
      assertEquals(8426510.772727331, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-856);
      intArray0[1] = (-856);
      intArray0[2] = (-856);
      intArray0[3] = 268;
      intArray0[4] = (-856);
      intArray0[5] = (-856);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-856);
      intArray1[1] = 268;
      intArray1[2] = (-856);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-554L);
      longArray0[1] = 6722166367014452318L;
      longArray0[2] = 4607182418800017408L;
      longArray0[3] = 0L;
      longArray0[4] = (-328L);
      longArray0[5] = (-827L);
      longArray0[6] = 2146955955L;
      longArray0[7] = (-845L);
      longArray0[8] = 2146955955L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -554 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1513.651F;
      floatArray0[2] = 0.0F;
      int[] intArray0 = new int[6];
      intArray0[0] = 2144886932;
      intArray0[1] = (-2145384445);
      intArray0[2] = (-2279);
      intArray0[3] = 2145819427;
      intArray0[4] = (-2147482394);
      intArray0[5] = 1;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = (-2147482394);
      intArray1[2] = (-2145384445);
      intArray1[3] = (-2279);
      intArray1[4] = 1;
      intArray1[5] = (-175);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2144886932, (-2145384445), (-2279), 2145819427, (-2147482394), 1}, intArray0);
      assertArrayEquals(new int[] {1, (-2147482394), (-2145384445), (-2279), 1, (-175)}, intArray1);
      assertEquals((-4263269), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2145819427;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2.145819427E9}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.34217729E8;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.145819427E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.8800701033602128E17}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 77.39518529;
      doubleArray0[1] = 77.39518529;
      doubleArray0[2] = 77.39518529;
      doubleArray0[3] = 77.39518529;
      MathArrays.scaleInPlace(77.39518529, doubleArray0);
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.scale(5990.0147060734325, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray3, doubleArray1);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {5990.0147060734325, 5990.0147060734325, 5990.0147060734325, 5990.0147060734325}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7, 3.588027617897599E7}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146955955;
      intArray0[1] = 1632;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1632;
      floatArray1[1] = (float) 2146955955;
      floatArray1[2] = (float) 1632;
      floatArray1[3] = 1.0F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1632.0F, 2.1469559E9F, 1632.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 2146955955;
      longArray0[1] = (long) 2146955955;
      longArray0[2] = (long) 1632;
      longArray0[3] = (long) 2146955955;
      longArray0[4] = (long) 2146955955;
      longArray0[5] = (long) 1632;
      longArray0[6] = (long) 1632;
      longArray0[7] = (long) 2146955955;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2146955955L, 2146955955L, 1632L, 2146955955L, 2146955955L, 1632L, 1632L, 2146955955L}, longArray0);
      assertEquals(8, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 999L;
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[4];
      intArray0[0] = 2145819427;
      intArray0[1] = (-1831);
      intArray0[2] = 147;
      intArray0[3] = 1612;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 2.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(2.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      Integer[] integerArray0 = new Integer[2];
      int int0 = 39;
      Integer integer0 = new Integer(39);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(39, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(39);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(39, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 39;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {39.0, 39.0, 39.0, 39.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.003;
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-553));
      assertNotNull(integer0);
      assertEquals((-553), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1085));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1085), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-504));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-504), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-355));
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-355), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(264);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(264, (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = Integer.getInteger("N+/8v8lyc`DJOP=\"#/7", integerArray0[4]);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(264, (int)integer5);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((int) integerArray0[5]);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertTrue(integer6.equals((Object)integer5));
      assertEquals(264, (int)integer6);
      assertEquals(8, integerArray0.length);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(264);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(264, (int)integer7);
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.003, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Integer integer0 = new Integer((-2896));
      assertNotNull(integer0);
      assertEquals((-2896), (int)integer0);
      
      int int0 = (-87);
      Integer integer1 = new Integer((-87));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-87), (int)integer1);
      
      Integer integer2 = new Integer((-87));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-87), (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-87), (int)integer3);
      
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) int0;
      floatArray0[1] = (float) int0;
      floatArray0[2] = (float) int0;
      floatArray0[3] = (float) int0;
      floatArray0[4] = (float) int0;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (float) int0;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) (-87);
      floatArray1[4] = (float) int0;
      floatArray1[5] = (float) int0;
      floatArray1[6] = (float) (-87);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1.0F), (-87.0F), 0.0F, (-87.0F), (-87.0F), (-87.0F), (-87.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-87.0F), (-87.0F), (-87.0F), (-87.0F), (-87.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer0 = new Integer((-2896));
      assertNotNull(integer0);
      assertEquals((-2896), (int)integer0);
      
      int int0 = (-87);
      Integer integer1 = new Integer((-87));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-87), (int)integer1);
      
      Integer integer2 = new Integer((-87));
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-87), (int)integer2);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer1;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-87), (int)integer3);
      
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      integerArray0[3] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 44;
      intArray0[1] = 44;
      intArray0[2] = (-734);
      intArray0[3] = 44;
      intArray0[4] = 44;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 44;
      intArray1[1] = 44;
      intArray1[2] = 5000;
      intArray1[3] = 77;
      intArray1[4] = (-734);
      intArray1[5] = 5000;
      intArray1[6] = (-734);
      intArray1[7] = (-734);
      intArray1[8] = (-734);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {44, 44, (-734), 44, 44}, intArray0);
      assertArrayEquals(new int[] {44, 44, 5000, 77, (-734), 5000, (-734), (-734), (-734)}, intArray1);
      assertEquals(5786.63365005942, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {44, 44, (-734), 44, 44}, intArray0);
      assertArrayEquals(new int[] {44, 44, (-734), 44, 44}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-1.0F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-1.0F);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) (-1.0F);
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3005);
      assertNotNull(integer0);
      assertEquals(3005, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-365));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-365), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-2145384445));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2145384445), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertEquals((-2145384445), (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(3005);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertEquals(3005, (int)integer4);
      
      integerArray0[4] = integer4;
      integerArray0[5] = integer3;
      Integer integer5 = new Integer(3005);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertEquals(3005, (int)integer5);
      
      integerArray0[6] = integer5;
      Integer integer6 = new Integer(37);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertEquals(37, (int)integer6);
      
      integerArray0[7] = integer6;
      Integer integer7 = new Integer((-365));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertEquals((-365), (int)integer7);
      
      integerArray0[8] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      MathArrays.scaleInPlace(2.146955955E9, doubleArray0);
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.146955955E9);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0976257438650307E-10, 7.15651985E8, 7.15651985E8, 0.0, 7.15651985E8, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer(89);
      assertNotNull(integer0);
      assertEquals(89, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(89);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(89, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1068);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1068, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger("");
      assertNull(integer3);
      
      integerArray0[3] = null;
      Integer integer4 = new Integer((-761));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-761), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[2]);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)integer2));
      assertEquals(1068, (int)integer5);
      assertEquals(6, integerArray0.length);
      
      integerArray0[5] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0976257438650307E-10, 7.15651985E8, 7.15651985E8, 0.0, 7.15651985E8, 0.0}, doubleArray1, 0.01);
      assertEquals(6.010683514013791E37, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-1.0F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-1.0F);
      floatArray1[7] = (-1.0F);
      floatArray1[8] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertTrue(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-23);
      intArray0[1] = (-23);
      intArray0[2] = (-23);
      intArray0[3] = (-23);
      intArray0[4] = (-23);
      intArray0[6] = (-23);
      intArray0[7] = (-23);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-23), (-23), (-23), (-23), (-23), 0, (-23), (-23)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-23), (-23), (-23), (-23), (-23), 0, (-23), (-23)}, intArray0);
      assertArrayEquals(new int[] {(-23), (-23), (-23), (-23), (-23), 0, (-23), (-23)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1848.4087;
      doubleArray0[1] = (double) (-23);
      doubleArray0[2] = 320.0;
      doubleArray0[3] = (double) (-23);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-23);
      doubleArray0[6] = (double) (-23);
      doubleArray0[7] = (double) (-23);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 441;
      intArray0[1] = 2146955955;
      intArray0[2] = 2146955955;
      intArray0[3] = 2146955955;
      intArray0[4] = 2146955955;
      intArray0[5] = 2146955955;
      int int0 = new Integer(441);
      assertEquals(441, int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2146955955;
      doubleArray0[1] = (-2018.1501);
      doubleArray0[2] = (double) 441;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 2146955955;
      doubleArray0[5] = (double) 2146955955;
      doubleArray0[6] = (double) 2146955955;
      doubleArray0[7] = (double) 2146955955;
      doubleArray0[8] = (double) 2146955955;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {2.146955955E9, (-2018.1501), 441.0, 0.0, 2.146955955E9, 2.146955955E9, 2.146955955E9, 2.146955955E9, 2.146955955E9}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 231;
      Integer integer0 = new Integer(231);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(231, (int)integer0);
      
      int int1 = 418;
      Integer integer1 = new Integer(418);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(418, (int)integer1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      float float0 = (-15.850076F);
      floatArray0[1] = (-15.850076F);
      floatArray0[2] = (float) 231;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-15.850076F), 231.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.003;
      doubleArray0[2] = 4.503599627370495E15;
      doubleArray0[3] = 3086.7935;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.003, 4.503599627370495E15, 3086.7935, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1036.7300099441), (-846.58), (-2248.18868967377), (-1344.94959), 0.0, 3086.7935, 1158.6982357091777, 0.003);
      assertEquals(3901378.8243325576, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.003, 4.503599627370495E15, 3086.7935, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.003, 4.503599627370495E15, 3086.7935, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[4];
      longArray1[0] = 1023L;
      long long0 = 4503599627370495L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 4503599627370495L;
      longArray1[3] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      Integer integer0 = new Integer(826);
      assertNotNull(integer0);
      assertEquals(826, (int)integer0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      MathArrays.scaleInPlace(2.146955955E9, doubleArray0);
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.146955955E9);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0976257438650307E-10, 7.15651985E8, 7.15651985E8, 0.0, 7.15651985E8, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(1158.6982357091777, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.975348154407625E12, 3.2439269966737718E31, 3.2439269966737718E31, 0.0, 3.2439269966737718E31, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {4.29391191E9, 2.79963056532E28, 2.79963056532E28, 0.0, 2.79963056532E28, 0.0}, doubleArray0, 0.01);
      assertEquals(4.849102381557019E28, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, (-2018.1501), 0.0, 0.0, (double) 1023L);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 1023L;
      longArray0[2] = 1023L;
      longArray0[3] = 1023L;
      longArray0[4] = 1023L;
      longArray0[5] = 1023L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1023L, 1023L, 1023L, 1023L, 1023L, 1023L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 1023L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[6];
      int int0 = 3;
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", integer0);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(3, (int)integer1);
      
      integerArray0[0] = integer1;
      Integer integer2 = new Integer(3);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(3, (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = Integer.getInteger("", int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(3, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((-657));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-657), (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(int0);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals(3, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = new Integer(491);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertEquals(491, (int)integer6);
      
      integerArray0[5] = integer6;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.44888888888888883E18;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.44888888888888883E18}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(21, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer0 = new Integer((-2896));
      assertNotNull(integer0);
      assertEquals((-2896), (int)integer0);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2896), (int)integer1);
      assertEquals(8, integerArray0.length);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer((-2994));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-2994), (int)integer2);
      
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-2896);
      doubleArray2[1] = (double) (int)integerArray0[6];
      doubleArray2[2] = (double) (-2896);
      doubleArray2[3] = (-2543.0);
      doubleArray2[4] = (double) (int)integerArray0[3];
      doubleArray2[5] = (double) (int)integerArray0[5];
      doubleArray2[6] = (double) (-2994);
      doubleArray2[7] = (double) (int)integerArray0[4];
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2896.0), (-2896.0), (-2896.0), (-2543.0), (-2896.0), (-2896.0), (-2994.0), (-2994.0)}, doubleArray2, 0.01);
      assertEquals(6.6329001E7, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1681.2538730435904), 1.34217729E8, 1.0, (-1.7976931348623157E308), 1.0, 3.834E-20, 588.275193, (-1032.19882));
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2000);
      intArray0[1] = 0;
      intArray0[3] = (-2000);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-2000), 0, 0, (-2000)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2000), 0, 0, (-2000)}, intArray0);
      assertArrayEquals(new int[] {(-2000), 0, 0, (-2000)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1029L;
      doubleArray0[1] = 2.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1029.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-661));
      assertNotNull(integer0);
      assertEquals((-661), (int)integer0);
      
      Integer integer1 = new Integer((-661));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-661), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      Integer integer3 = Integer.getInteger("IIG8,=i3ON2e", 119);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(119, (int)integer3);
      
      Integer integer4 = new Integer((-2436));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals((-2436), (int)integer4);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1036.7300099441);
      doubleArray0[1] = (-1036.7300099441);
      doubleArray0[2] = 4.503599627370495E15;
      doubleArray0[3] = 3086.7935;
      doubleArray0[4] = (-3667.53238);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1036.7300099441), (-1036.7300099441), 4.503599627370495E15, 3086.7935, (-3667.53238)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 9007199254740990L;
      longArray0[1] = 0L;
      longArray0[2] = (-1850L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,850 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1036.7300099441);
      doubleArray0[1] = 0.003;
      doubleArray0[2] = 4.503599627370495E15;
      doubleArray0[3] = 3086.7935;
      doubleArray0[4] = (-3667.53238);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1036.7300099441), 0.003, 4.503599627370495E15, 3086.7935, (-3667.53238)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1036.7300099441), (-846.58), (-2248.18868967377), (-1344.94959), (-3667.53238), 3086.7935, 1158.6982357091777, 0.003);
      assertEquals((-7419536.287290974), double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1036.7300099441), 0.003, 4.503599627370495E15, 3086.7935, (-3667.53238)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1036.7300099441), 0.003, 4.503599627370495E15, 3086.7935, (-3667.53238)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4.503599627378288E15, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, (-2018.1501), 0.0, 0.0, (double) 1023L);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 1023L;
      longArray0[2] = 1023L;
      longArray0[3] = 1023L;
      longArray0[4] = 1023L;
      longArray0[5] = 1023L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1023L, 1023L, 1023L, 1023L, 1023L, 1023L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-1911);
      intArray0[2] = 0;
      intArray0[3] = (-2000);
      intArray0[4] = 108;
      intArray0[5] = (-4365);
      intArray0[6] = (-1);
      intArray0[7] = 236;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {2, (-1911), 0, (-2000), 108, (-4365), (-1), 236}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(8, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, (-1911), 0, (-2000), 108, (-4365), (-1), 236}, intArray1);
      assertArrayEquals(new int[] {2, (-1911), 0, (-2000), 108, (-4365), (-1), 236}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("ABzS+LQyx(OppV,Yx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.ABzS+LQyx(OppV,Yx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.0;
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      Integer integer1 = new Integer((-616));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-616), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3986.9F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3986.9F), 1.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2146955955);
      assertNotNull(integer0);
      assertEquals(2146955955, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(134217729);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2146955955);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2146955955, (int)integer2);
      
      integerArray0[2] = integer2;
      int int0 = 28;
      Integer integer3 = new Integer(28);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(28, (int)integer3);
      
      integerArray0[3] = integer3;
      int int1 = 0;
      Integer integer4 = new Integer(0);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertEquals(0, (int)integer4);
      
      integerArray0[4] = integer4;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, integerArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) integerArray0[2];
      intArray0[1] = (int) integerArray0[2];
      intArray0[2] = 2146955955;
      intArray0[3] = 2146955955;
      intArray0[4] = (int) integerArray0[0];
      intArray0[5] = (int) integerArray0[1];
      intArray0[6] = int1;
      intArray0[7] = (int) integerArray0[1];
      intArray0[8] = 28;
      int[] intArray1 = MathArrays.copyOf(intArray0, int0);
      assertNotNull(intArray1);
      assertFalse(int0 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2146955955, 2146955955, 2146955955, 2146955955, 2146955955, 134217729, 0, 134217729, 28}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(28, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      Integer integer0 = new Integer(2541);
      assertNotNull(integer0);
      assertEquals(2541, (int)integer0);
      
      int int0 = 8;
      Integer integer1 = new Integer(2541);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2541, (int)integer1);
      
      Integer integer2 = new Integer(8);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(8, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      Integer integer3 = new Integer(8);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(8, (int)integer3);
      
      integerArray0[0] = integer3;
      integerArray0[1] = integer2;
      integerArray0[2] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = int0;
      intArray0[1] = int0;
      intArray0[2] = 2541;
      int[] intArray1 = MathArrays.copyOf(intArray0, int0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {8, 8, 2541, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {8, 8, 2541}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(8, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-661));
      assertNotNull(integer0);
      assertEquals((-661), (int)integer0);
      
      Integer integer1 = new Integer((-661));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-661), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(2, (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer1);
      assertNotNull(integer3);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals((-661), (int)integer3);
      
      int int0 = 119;
      Integer integer4 = Integer.getInteger("", 119);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(119, (int)integer4);
      
      int int1 = (-1);
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-1), (int)integer5);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) int1;
      floatArray0[1] = (float) (int)integerArray0[3];
      floatArray0[2] = (float) 1023L;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) (int)integerArray0[4];
      floatArray0[5] = (float) (int)integerArray0[3];
      floatArray0[6] = (float) int0;
      floatArray0[7] = (float) (-1);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-1.0F), (-661.0F), 1023.0F, 2.0F, (-661.0F), (-661.0F), 119.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(3139.835712276781, 4.455505956692757, 4.455505956692757, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2147268921);
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2147268921), 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer0 = new Integer((-2896));
      assertNotNull(integer0);
      assertEquals((-2896), (int)integer0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2896), (int)integer1);
      assertEquals(7, integerArray0.length);
      
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      Integer integer2 = new Integer((-2994));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2994), (int)integer2);
      
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-2896);
      doubleArray3[1] = (double) (int)integerArray0[6];
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (double) (int)integerArray0[5];
      doubleArray3[4] = (double) (int)integerArray0[1];
      doubleArray3[5] = (double) (int)integerArray0[5];
      doubleArray3[6] = 2.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2896.0), (-2896.0), 2.0, (-2896.0), (-2896.0), (-2896.0), 2.0}, doubleArray3, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, (-2018.1501), 0.0, 0.0, (double) 1023L);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 1023L;
      longArray0[2] = 1023L;
      longArray0[3] = 1023L;
      longArray0[4] = 1023L;
      longArray0[5] = 1023L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1023L, 1023L, 1023L, 1023L, 1023L, 1023L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1023L;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1023.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[1] = 1513.651F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3602.2612F);
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1997));
      assertNotNull(integer0);
      assertEquals((-1997), (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(803);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(803, (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1513.651F;
      doubleArray0[1] = (-1151.0826044213);
      doubleArray0[2] = (double) (int)integerArray0[2];
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3602.2612F);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (int)integerArray0[2];
      doubleArray1[3] = (double) (int)integerArray0[0];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-3602.26123046875), 0.0, 803.0, (-1997.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1513.6510009765625, (-1151.0826044213), 803.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-4805760.317278087), double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = int0;
      intArray0[2] = (-1997);
      intArray0[3] = (int) integerArray0[2];
      intArray0[4] = int0;
      intArray0[5] = (-1997);
      intArray0[6] = (-1997);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-280));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-1883);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1883);
      doubleArray0[1] = (double) 113.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2733.0605);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1883.0), 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2907.5440234463276, (-174.4835234463277)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1883.0), 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2907.5440234463276, (-174.4835234463277)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1883.0), 113.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2907.5440234463276, (-174.4835234463277)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-5474905.396149435), 657104.94929887, (-19716.638149435028)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1883);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1883));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[18];
      floatArray0[2] = (-1.0F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 1023L;
      double double0 = 2.0;
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      float float0 = 682.7F;
      floatArray0[0] = 682.7F;
      floatArray0[1] = (float) 1023L;
      floatArray0[2] = (float) 1023L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {682.7F, 1023.0F, 1023.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-661));
      assertNotNull(integer0);
      assertEquals((-661), (int)integer0);
      
      Integer integer1 = new Integer((-661));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-661), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer1);
      assertNotNull(integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-661), (int)integer3);
      
      Integer integer4 = Integer.getInteger("IIG8,=i3ON2e", 119);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(119, (int)integer4);
      
      Integer integer5 = new Integer((-2436));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-2436), (int)integer5);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1883);
      doubleArray0[1] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {(-2.455432E22), 1.700416E38}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-292.57854));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.455432E22), 1.700416E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.224887966411043E-14, (-292.57854000000003)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1883);
      doubleArray2[1] = (double) (-1883);
      doubleArray2[2] = (-292.57854);
      doubleArray2[3] = 1275.854667;
      doubleArray2[4] = 3.834E-20;
      doubleArray2[5] = 1.304E19;
      doubleArray2[6] = 1.304E19;
      doubleArray2[7] = (double) (-1883);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(3512);
      assertNotNull(integer0);
      assertEquals(3512, (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3512;
      doubleArray0[1] = (double) 3512;
      doubleArray0[2] = (double) (int)integerArray0[0];
      doubleArray0[3] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3512.0, 3512.0, 3512.0, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2334144E7, 2.4668288E7, 3.7002432E7, 9.42769996784E11, 9.4275766264E11, 9.42745328496E11, 1.801439877791744E16}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(3139.835712276781, 4.455505956692757, 4.455505956692757, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 4.455505956692757;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.455505956692757}, doubleArray4, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[2] = (-3555.2F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3555.2F), 3.4028235E38F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-3555.2F), (double) 0.0F, (double) 0.0F, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2146955955;
      intArray0[1] = 1632;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2146955955, 1632}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1632;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1632.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-661));
      assertNotNull(integer0);
      assertEquals((-661), (int)integer0);
      
      Integer integer1 = new Integer((-661));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-661), (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer1);
      assertNotNull(integer3);
      assertFalse(integer1.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((-661), (int)integer3);
      
      Integer integer4 = Integer.getInteger("", 119);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(119, (int)integer4);
      
      Integer integer5 = new Integer((-1));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals((-1), (int)integer5);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer4;
      integerArray0[2] = integer5;
      integerArray0[3] = integer3;
      integerArray0[4] = integer1;
      integerArray0[5] = integer5;
      integerArray0[6] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3555.2F);
      floatArray0[3] = 3.4028235E38F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 3.4028235E38F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-3555.2F);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 0.0, (-3555.199951171875)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3555.2F);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-3555.2F);
      doubleArray1[3] = (double) 3.4028235E38F;
      doubleArray1[4] = (double) 0.0F;
      doubleArray1[5] = (double) (-3555.2F);
      doubleArray1[6] = (double) 0.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 3.4028234663852886E38, 0.0, (-3555.199951171875)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3555.199951171875), 0.0, (-3555.199951171875), 3.4028234663852886E38, 0.0, (-3555.199951171875), 0.0}, doubleArray1, 0.01);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, (-1581.84522812035), (double) 3.4028235E38F, 893.08, 1023.0, 3.4028234663852886E38);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6.520081987471524E41, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = new Integer((-21475));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-21475), (int)integer1);
      
      Integer integer2 = new Integer(233);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(233, (int)integer2);
      
      Integer integer3 = Integer.getInteger(";&", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(233, (int)integer3);
      
      Integer integer4 = Integer.getInteger("", integer3);
      assertNotNull(integer4);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertEquals(233, (int)integer4);
      
      Integer integer5 = new Integer(0);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(0, (int)integer5);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 1.0, 0.0, (-2018.1501), 0.0, 2.144597377E9, (double) 1023L);
      assertEquals(2.193923116671E12, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 1023L;
      longArray0[2] = 1023L;
      longArray0[3] = 1023L;
      longArray0[4] = 1023L;
      longArray0[5] = 1023L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1023L, 1023L, 1023L, 1023L, 1023L, 1023L}, longArray0);
      assertEquals(6, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1023L;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1023.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-517.7364507256);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-517.7364507256), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-2644281811660520851L);
      longArray0[1] = 1L;
      longArray0[2] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,644,281,811,660,520,851 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1023L;
      doubleArray0[1] = 2.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1023.0, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 999L;
      longArray0[0] = 999L;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 999L;
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.scale(1334.2468733, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3647);
      doubleArray0[2] = (double) (-3647);
      doubleArray0[3] = (double) (-1883);
      double[][] doubleArray1 = new double[3][4];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-3647);
      doubleArray2[1] = (double) (-3647);
      doubleArray2[2] = (double) (-3647);
      doubleArray2[3] = (double) (-1883);
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = (double) (-1883);
      double double0 = MathArrays.distance(doubleArray3, doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1883.0)}, doubleArray4, 0.01);
      assertEquals(1883.0, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertEquals(1, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 3.834E-20, 3.834E-20);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 7.848361555046424E-8;
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 7.848361555046424E-8);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7.848361555046424E-8, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.84836155504259E-8, 3.833999999998127E-20}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {7.848361555046424E-8, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.159677909873072E-15, 1.4699556E-39}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {7.848361555046424E-8, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = Double.NaN;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = Double.NaN;
      doubleArray3[7] = 3.834E-20;
      doubleArray3[8] = 7.848361555046424E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, Double.NaN, 0.0, Double.NaN, 3.834E-20, 7.848361555046424E-8}, doubleArray3, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(9, doubleArray3.length);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2061.84);
      doubleArray0[0] = (-2061.84);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-3253.09641452);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2061.84), (-1.0), (-3253.09641452)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2061.84);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-3253.09641452);
      doubleArray1[3] = (-2061.84);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-2061.84);
      doubleArray1[7] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 3270;
      intArray0[1] = (-1537);
      intArray0[2] = 3561;
      intArray0[3] = (-791);
      intArray0[4] = 0;
      intArray0[5] = 2147483646;
      intArray0[6] = (-1033);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {3270, (-1537), 3561, (-791), 0, 2147483646, (-1033)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-791);
      doubleArray0[1] = (double) (-791);
      doubleArray0[2] = (double) (-1537);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {(-791.0), (-791.0), (-1537.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-1537), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-791.0), (-791.0), (-1537.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1215767.0, 1215767.0, 2362369.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2147483646;
      floatArray0[2] = (-756.8044F);
      floatArray0[3] = (float) 3561;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 2.14748365E9F, (-756.8044F), 3561.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-517.7364507256);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4.23719669792332E-8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-517.7364507256), 0.0, 4.23719669792332E-8, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-517.7364507256), 0.0, 4.23719669792332E-8, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1.304E19, 0.0, (-517.7364507256), 3.834E-20, (-103.09411209282), (-517.7364507256));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(53375.57968564378, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1264.897);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 4503599627370495L;
      double double0 = (-1990.8766071922);
      doubleArray0[5] = (-1990.8766071922);
      double double1 = (-3326.4);
      doubleArray0[6] = (-3326.4);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,264.897 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 1023L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 4503599627370495L;
      doubleArray0[2] = 1.9868161777724352E-8;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 2.0282409603651661E31, 3.947438524258269E-16, 1.0, 1.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(233);
      assertNotNull(integer0);
      assertEquals(233, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-3934));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-3934), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(2144597377);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(2144597377, (int)integer2);
      
      Integer integer3 = Integer.getInteger("", integer2);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2144597377, (int)integer3);
      
      integerArray0[2] = integer3;
      Integer integer4 = Integer.getInteger("", 2144597377);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertEquals(2144597377, (int)integer4);
      
      integerArray0[3] = integer4;
      Integer integer5 = new Integer(233);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer0));
      assertEquals(233, (int)integer5);
      
      integerArray0[4] = integer5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      double[] doubleArray1 = MathArrays.scale(100.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1000000.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 100.0, (-1498.51), 645.7);
      assertEquals((-967587.907), double0, 0.01);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 0.0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1000000.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 645.7;
      doubleArray4[1] = (-967587.907);
      doubleArray4[2] = (-967587.907);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-967587.907);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1498.51);
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      
      doubleArray5[0] = 100.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-1498.51);
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 100.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (-967587.907);
      doubleArray5[8] = 0.0;
      double double1 = MathArrays.distanceInf(doubleArray4, doubleArray5);
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {100.0, 0.0, 0.0, (-1498.51), 0.0, 100.0, 0.0, (-967587.907), 0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {645.7, (-967587.907), (-967587.907), 0.0, (-967587.907), 0.0, (-1498.51), 0.0}, doubleArray4, 0.01);
      assertEquals(967587.907, double1, 0.01);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(9, doubleArray5.length);
      assertEquals(8, doubleArray4.length);
      
      double[] doubleArray6 = MathArrays.scale(4427.28410541809, doubleArray2);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {100.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1000000.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4.42728410541809E9, 0.0}, doubleArray6, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray6.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2098);
      intArray0[1] = (-485);
      intArray0[2] = (-2096);
      intArray0[3] = (-1335);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2098), (-485), (-2096), (-1335)}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 4503599627370495L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1883), (-3647));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 138;
      intArray0[1] = 1024;
      intArray0[2] = 2144597377;
      intArray0[3] = (-3605);
      int[] intArray1 = MathArrays.copyOf(intArray0, 1024);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {138, 1024, 2144597377, (-3605)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1024, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2144597377;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.144597377E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.5992979094352804E18}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.144597377E9}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-3605);
      doubleArray2[1] = (double) 138;
      doubleArray2[2] = (double) 2144597377;
      doubleArray2[3] = (double) (-3605);
      doubleArray2[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-3605.0), 138.0, 2.144597377E9, (-3605.0), 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray2.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 11, 1024);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = 145.28019;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(145.28019, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 12.85380455, 12.85380455, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[9][7];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray0;
      doubleArray3[5] = doubleArray0;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(9, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray5 = MathArrays.scale(105.53107873, doubleArray0);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray5.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1191.0);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1705.590057779243);
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.scale((-517.7364507256), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 113.0F;
      floatArray0[1] = 113.0F;
      floatArray0[2] = 113.0F;
      floatArray0[3] = 1052.4354F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {113.0F, 113.0F, 113.0F, 1052.4354F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      double double0 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertEquals(11, doubleArray0.length);
      
      double double0 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 4503599627370495L;
      doubleArray0[2] = 1.9868161777724352E-8;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 38.3;
      doubleArray0[6] = 1.0E-5;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 0.0, 0.0, 0.0, 38.3, 1.0E-5}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = 3756.63231594221;
      double double2 = (-744.4443991780189);
      double double3 = 268.7;
      double double4 = MathArrays.linearCombination(876.7388349571906, 38.3, 1202.64795562688, (-1861.829), 893.08, 268.7);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-1965575.147197978), double4, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0E-5, 0.0, 0.0, 0.0, 0.0, 38.3, 1.0E-5}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float float1 = (-1.0F);
      floatArray0[2] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      int int0 = 881;
      intArray0[0] = 881;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1299.1676;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1299.1676}, doubleArray2, 0.01);
      assertEquals(1299.1676, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      
      int int1 = 28;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 28);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1299.1676}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(28, doubleArray3.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3483.312331013;
      doubleArray0[1] = 3372.7044315694634;
      doubleArray0[2] = 3372.7044315694634;
      doubleArray0[3] = (-1648.24004);
      doubleArray0[4] = 248.0;
      doubleArray0[5] = 3900.83862097;
      doubleArray0[6] = 3900.83862097;
      doubleArray0[7] = (-1648.24004);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 618.7793069143942;
      doubleArray0[1] = 1724.8990576874685;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1724.8990576874685;
      double[] doubleArray1 = MathArrays.scale(1724.8990576874685, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {618.7793069143942, 1724.8990576874685, 0.0, 1724.8990576874685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1067331.8434131434, 2975276.759211117, 0.0, 2975276.759211117}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 113.0F;
      floatArray0[1] = 1052.4354F;
      floatArray0[2] = 2548.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {113.0F, 1052.4354F, 2548.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 2733.0605);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {618.7793069143942, 1724.8990576874685, 0.0, 1724.8990576874685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {415.66402858164486, 1158.6982357091777, 0.0, 1158.6982357091777}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 889;
      intArray0[1] = 0;
      double double0 = MathArrays.linearCombination(0.5039018405998233, 0.0, 3.4028234663852886E38, 1724.8990576874685, 0.0, (-5287.69164469));
      assertEquals(5.869526990644789E41, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {618.7793069143942, 1724.8990576874685, 0.0, 1724.8990576874685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {415.66402858164486, 1158.6982357091777, 0.0, 1158.6982357091777}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {889, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {889, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {618.7793069143942, 1724.8990576874685, 0.0, 1724.8990576874685}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1067331.8434131434, 2975276.759211117, 0.0, 2975276.759211117}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 3086.7935, 0.0, 2852.490484134, (double) 1023L, 1773.13117969, 1773.13117969, 2852.490484134);
      assertEquals(6871753.014009888, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-103.09411209282);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-103.09411209282), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-103.09411209282), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[7][3];
      doubleArray3[0] = null;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray1;
      doubleArray3[5] = null;
      doubleArray3[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-103.09411209282);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1023L;
      doubleArray0[3] = (-103.09411209282);
      doubleArray0[1] = (-103.09411209282);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-103.09411209282);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-103.094 >= -103.094)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1032.88815587);
      doubleArray0[1] = 306.0472697925856;
      doubleArray0[2] = 1.0;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1032.88815587);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-1032.88815587);
      doubleArray1[5] = (-1032.88815587);
      doubleArray1[6] = (-3555.199951171875);
      doubleArray1[7] = 306.0472697925856;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Integer, Double>> field0 = (Field<Pair<Integer, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Integer, Double>[] pairArray0 = MathArrays.buildArray(field0, 2250);
      assertNotNull(pairArray0);
      assertEquals(2250, pairArray0.length);
      
      double double1 = MathArrays.linearCombination(2295.1651503, (-138.24390133484442), (-834.568415756), 0.0, (-834.568415756), 0.0, 838.0, 838.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(384951.4154147534, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      double double1 = (-1231.8016451985);
      doubleArray3[1] = (-1231.8016451985);
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = Double.NEGATIVE_INFINITY;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 4503599627370495L;
      doubleArray0[2] = 1.9868161777724352E-8;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 4.503599627370495E15, 1.9868161777724352E-8, 1.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      longArray0[1] = 4503599627370495L;
      longArray0[2] = 0L;
      longArray0[3] = 1L;
      longArray0[4] = 0L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4427.28410541809;
      doubleArray0[1] = (double) 1L;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4427.28410541809, 1.0}, doubleArray0, 0.01);
      assertEquals(4427.284218354143, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4427.28410541809, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4427.28410541809, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1270.52;
      doubleArray0[1] = (-1296.743648565458);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1270.52, 0.0, 0.0, (-1296.743648565458), 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1373.6667);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-1705.590057779243);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-19.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1373.6667), 0.0, 2.0, (-1705.590057779243), 0.0, (-19.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0, 1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1373.6667), 0.0, 2.0, (-1705.590057779243), 0.0, (-19.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1373.6667), 0.0, 2.0, (-1705.590057779243), 0.0, (-19.0)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-1705.590057779243);
      doubleArray3[1] = (-1373.6667);
      doubleArray3[2] = (-1373.6667);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1078);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1078)}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination((double) 1023L, (double) 1023L, 636.821433, 2.479773539153719E-5, (double) 4503599627370495L, 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.872693914091126E34, double1, 0.01);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2210.764927846913;
      doubleArray0[1] = (-704.1646155);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2210.764927846913, (-704.1646155), 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2210.764927846913, (-704.1646155), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4421.529855693826, (-1408.329231), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(777.3728, 2210.764927846913, 3.4028234663852886E38, 2.893485277253286E-8);
      assertEquals(9.846019601077824E30, double0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-955), 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = null;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray3 = new double[3][0];
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1023L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-103.09411209282);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1023L;
      doubleArray0[3] = (-103.09411209282);
      doubleArray0[4] = (-103.09411209282);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-103.09411209282);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,023 >= -103.094)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 881;
      intArray0[1] = (-693);
      intArray0[2] = 182;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 881;
      intArray1[1] = 881;
      intArray1[2] = 1;
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {881, 881, 1, 0, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.7713047F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3555.2F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      long[][] longArrayArray0 = null;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4503599627370495L;
      longArray2[1] = 167L;
      longArray2[2] = 0L;
      longArray2[3] = 4503599627370495L;
      longArray2[4] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 0L;
      longArray4[1] = 1508L;
      longArray4[2] = (-1L);
      longArray4[3] = 892L;
      longArray4[4] = 0L;
      longArray4[5] = 167L;
      longArray4[6] = 0L;
      longArray4[7] = 4503599627370495L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1508L;
      longArray5[1] = (-2719L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 12.85380455, 12.85380455, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) (-955);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) (-955);
      longArray1[5] = 81L;
      longArray1[6] = (long) 0;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -955 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = (-495L);
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-495L);
      longArray1[3] = (-149L);
      longArray1[4] = 2899L;
      longArray1[5] = (-495L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2899L;
      longArray2[1] = 0L;
      longArray2[2] = (-495L);
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[2] = (-149L);
      longArray3[4] = 2899L;
      longArray3[5] = (-2173L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-149L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 3257.84154720066;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1383.540918));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, Double.NaN, (-1.0), 100.0, 3257.84154720066}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.41215556306307144, (-41.21555630630714), (-1342.7375172567558)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 269;
      int int1 = 313;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 269, 313);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 635.03041492;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-5350.74);
      doubleArray0[3] = (-2046.106153);
      doubleArray0[4] = 1448.0;
      doubleArray0[5] = 0.366272509098053;
      doubleArray0[6] = (-290.7389);
      doubleArray0[7] = (-452.0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.366272509098053;
      doubleArray1[1] = (-5350.74);
      doubleArray1[2] = (-290.7389);
      doubleArray1[3] = 0.366272509098053;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray2, 0.366272509098053);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1149.2801304);
      doubleArray0[1] = (-381.069570922);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1149.2801304);
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1675);
      intArray0[3] = (-532);
      intArray0[4] = (-137);
      MathArrays.copyOf(intArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2837));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 100.0;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {100.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-952.0F);
      floatArray0[3] = 1031.007F;
      floatArray0[4] = (-3381.3904F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1373.6667);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = (-1705.590057779243);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-19.0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1705.590057779243);
      doubleArray2[1] = (-1373.6667);
      doubleArray2[2] = (-1373.6667);
      doubleArray2[3] = (-1373.6667);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[4][3];
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2.0;
      doubleArray3[0] = doubleArray4;
      doubleArray3[1] = doubleArray1;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = (-1705.590057779243);
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2.0;
      doubleArray5[4] = (-1705.590057779243);
      doubleArray3[2] = doubleArray5;
      doubleArray3[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3121.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-517.7364507256);
      doubleArray0[0] = (-517.7364507256);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-103.09411209282);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-517.736 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = 2899L;
      longArray1[2] = 0L;
      longArray1[3] = (-3042L);
      longArray1[4] = (-495L);
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (-149L);
      longArray3[1] = (-3042L);
      longArray3[2] = 0L;
      longArray3[3] = 2899L;
      longArray3[4] = 2899L;
      longArray3[5] = (-495L);
      longArray3[6] = (-1753L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = (-149L);
      longArray4[3] = 2899L;
      longArray4[4] = (-3042L);
      longArray4[5] = (-3042L);
      longArray4[6] = (-2173L);
      longArray4[7] = 0L;
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (-149L);
      longArray5[1] = (-1753L);
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = (-149L);
      longArray5[5] = (-2173L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1883), 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 881;
      intArray0[1] = (-693);
      intArray0[2] = 182;
      int[] intArray1 = new int[7];
      intArray1[0] = 881;
      intArray1[1] = 881;
      intArray1[2] = 1;
      intArray1[3] = 191;
      intArray1[4] = 881;
      intArray1[5] = 881;
      intArray1[6] = (-693);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1755, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[9][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 1594L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 0L;
      longArray2[1] = 1594L;
      longArray2[2] = 761L;
      longArray2[3] = 1594L;
      longArray2[4] = 1594L;
      longArray2[5] = 1594L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 1594L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 1594L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 761L;
      longArray4[1] = 0L;
      longArray4[2] = 1594L;
      longArray4[3] = 1594L;
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 761L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 761L;
      longArray5[1] = 761L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = (-1462L);
      longArray6[1] = 1594L;
      longArray6[2] = 0L;
      longArray6[3] = 1594L;
      longArray6[4] = 761L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      longArray7[0] = 1594L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = (-1462L);
      longArray8[1] = 0L;
      longArray8[2] = 1594L;
      longArray8[3] = 0L;
      longArray8[4] = 761L;
      longArray8[5] = 761L;
      longArray8[6] = 761L;
      longArray8[7] = 1594L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[6];
      longArray9[0] = 0L;
      longArray9[1] = 0L;
      longArray9[2] = 0L;
      longArray9[3] = 1594L;
      longArray9[4] = 1594L;
      longArray9[5] = 761L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0E-5;
      doubleArray0[5] = 2976.882897557;
      doubleArray0[6] = 804.12;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-95.0856331615), (-95.0856331615));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1657.08033464);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 9041.277633723348;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      try { 
        MathArrays.convolve(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 602.00772;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 602.00772;
      MathArrays.checkOrder(doubleArray2);
      double[] doubleArray3 = MathArrays.scale(2250.324, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,354,712.421 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3555.2F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3555.2F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-3555.2F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 3.4028235E38F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2437.03610123));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 2210.764927846913;
      doubleArray0[0] = 2210.764927846913;
      double double1 = (-704.1646155);
      doubleArray0[1] = (-704.1646155);
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = (-1119.9732511);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 6.283185307179586;
      doubleArray0[5] = 3.32;
      doubleArray0[6] = (-1251.71654482468);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      MathArrays.linearCombination((-1251.71654482468), 0.0, (-1251.71654482468), 0.0, 0.0, 1.0);
      MathArrays.linearCombination(1416.0, 0.0, 100.0, 0.0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      int int0 = (-157);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-157));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = (-1.0F);
      floatArray0[0] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 214.42221661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = 1.0;
      MathArrays.linearCombination((-1880.24), 0.0, (-20.0), 0.0, 1.0, 1.0);
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 893.08;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 105.53107873;
      doubleArray0[5] = (-3086.7935);
      doubleArray0[6] = (-1630.434943949);
      doubleArray0[7] = 6.283185307179586;
      doubleArray0[8] = (-3.141592653589793);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      MathArrays.scaleInPlace(Double.NEGATIVE_INFINITY, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0E-5;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(643.0573494449568, Double.NaN, 3756.63231594221, (-1014.4673), (-744.4443991780189), 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 192.890007;
      MathArrays.linearCombination((-206.3072), 1.0, 192.890007, 192.890007, 1.7976931348623157E308, 1.0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134;
      int int1 = (-3982);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134, (-3982));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = MathArrays.linearCombination(38.3, 38.3, 0.0, 3900.83862097, 0.0, 3372.7044315694634, (-1648.24004), 0.0);
      assertEquals(1466.8899999999999, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4418);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2282.65;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) (-4418);
      double double0 = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) (-4418);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 999L;
      longArray0[0] = 999L;
      int int0 = 962;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 962, 962);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.linearCombination((-3045.0), 0.0, (-3045.0), (-941.75896));
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 52;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 52);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 34, (-826));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 100.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.scale(100.0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.linearCombination(0.0, 100.0, (-1498.51), 645.7);
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 0.0);
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 645.7;
      doubleArray4[1] = (-967587.907);
      doubleArray4[2] = (-967587.907);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-967587.907);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = (-1498.51);
      doubleArray4[7] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray4, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(Double.NaN, 12.85380455, 12.85380455, Double.NaN);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, (-955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 748.508025123352;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination((-1000.14681), 0.0, 0.0, 0.0, 0.0, 20.0);
      assertEquals(0.0, double2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 814.0F;
      floatArray0[1] = (-1697.6128F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1460.0887F;
      floatArray0[4] = 2166.0F;
      floatArray0[5] = 59.091F;
      floatArray0[6] = 1.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 618.7793069143942;
      doubleArray0[1] = 1724.8990576874685;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1724.8990576874685;
      double[] doubleArray1 = MathArrays.scale(1724.8990576874685, doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 113.0F;
      floatArray0[1] = 1052.4354F;
      floatArray0[2] = 2548.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 2733.0605);
      int[] intArray0 = new int[5];
      intArray0[0] = 889;
      intArray0[1] = 0;
      intArray0[2] = (-766);
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[][] doubleArray3 = new double[4][4];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {0.0, 415.66402858164486, 1158.6982357091777, 1158.6982357091777}, doubleArray2, 0.01);
      
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 889;
      intArray1[2] = (-766);
      intArray1[3] = 889;
      intArray1[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(2667, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[][] longArray0 = new long[5][1];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 4503599627370495L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 0L;
      longArray1[5] = 892L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 1023L;
      longArray2[1] = 1L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 892L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 167L;
      longArray3[1] = 1023L;
      longArray3[2] = 1023L;
      longArray3[3] = 1L;
      longArray3[4] = 1L;
      longArray3[5] = 4503599627370495L;
      longArray3[6] = 1023L;
      longArray3[7] = 0L;
      longArray3[8] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      longArray4[0] = 1L;
      longArray4[1] = 1L;
      longArray4[2] = 1023L;
      longArray4[3] = 4503599627370495L;
      longArray4[4] = 0L;
      longArray4[5] = 4503599627370495L;
      longArray4[6] = 4503599627370495L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 892L;
      longArray5[1] = 1L;
      longArray5[2] = 4503599627370495L;
      longArray5[3] = 1L;
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray5[6] = 1023L;
      longArray5[7] = 167L;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1270.52;
      doubleArray0[1] = (-1298.242667);
      doubleArray0[2] = 350.8278623;
      doubleArray0[3] = 673.4653617337827;
      doubleArray0[4] = 1.0E-5;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,298.243 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
