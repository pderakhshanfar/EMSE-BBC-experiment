/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:57:16 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1756.516905;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1756.516905}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 263.8256241602644;
      doubleArray0[1] = (-641.1873683241525);
      doubleArray0[2] = 1.8014398777956028E16;
      doubleArray0[3] = (-27.2420803);
      doubleArray0[4] = 1.304E19;
      int int0 = 3574;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3574);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {263.8256241602644, (-641.1873683241525), 1.8014398777956028E16, (-27.2420803), 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3574, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 3574);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {263.8256241602644, (-641.1873683241525), 1.8014398777956028E16, (-27.2420803), 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3574, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {263.8256241602644, (-641.1873683241525), 1.8014398777956028E16, (-27.2420803), 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3574, doubleArray2.length);
      assertEquals(3574, doubleArray3.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 3574;
      longArray0[1] = (long) 3574;
      longArray0[2] = (long) 3574;
      longArray0[3] = (long) 3574;
      longArray0[4] = (long) 3574;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3574L, 3574L, 3574L, 3574L, 3574L}, longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray0, 1764.17);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {263.8256241602644, (-641.1873683241525), 1.8014398777956028E16, (-27.2420803), 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.564349350222585E-14, (-8.66259972635871E-14), 2.4337897724389768, (-3.680472339450682E-15), 1761.736210227561}, doubleArray4, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray4, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = (-2908.059990127);
      doubleArray0[2] = 1547.89738;
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-44.233309));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), (-2908.059990127), 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.155454601192349E-304, 7.155454601192349E-304, (-3.808693585241644E-304), -0.0, 1.088386881579394E-305, Double.NEGATIVE_INFINITY, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), (-2908.059990127), 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.155454601192349E-304, 7.155454601192349E-304, (-3.808693585241644E-304), -0.0, 1.088386881579394E-305, Double.NEGATIVE_INFINITY, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), (-2908.059990127), 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.155454601192349E-304, 7.155454601192349E-304, (-3.808693585241644E-304), -0.0, 1.088386881579394E-305, Double.NEGATIVE_INFINITY, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3602;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3602, 0, 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), (-2908.059990127), 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.155454601192349E-304, 7.155454601192349E-304, (-3.808693585241644E-304), -0.0, 1.088386881579394E-305, Double.NEGATIVE_INFINITY, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1927.0;
      doubleArray0[3] = 1166.6352443308;
      doubleArray0[4] = (-1094.89);
      doubleArray0[5] = 137.1248308;
      doubleArray0[6] = (-3225.114221240444);
      doubleArray0[7] = (-3142.0);
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1285.8727444966);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, 1927.0, 1166.6352443308, (-1094.89), 137.1248308, (-3225.114221240444), (-3142.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.1648751660349612E-20), Double.NaN, (-585.4758594025484), (-354.4560312837972), 332.6578431246789, (-41.662313522604585), 979.8788377540889, 954.6264401882755, 0.3038276385067713}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, Double.NaN, 1927.0, 1166.6352443308, (-1094.89), 137.1248308, (-3225.114221240444), (-3142.0), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.1648751660349612E-20), Double.NaN, (-585.4758594025484), (-354.4560312837972), 332.6578431246789, (-41.662313522604585), 979.8788377540889, 954.6264401882755, 0.3038276385067713}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1745.74562084596);
      doubleArray0[1] = (-1851.6191512206);
      doubleArray0[2] = 2743.073728255;
      doubleArray0[3] = 164268.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1745.74562084596), (-1851.6191512206), 2743.073728255, 164268.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3047627.7727028467, 6464912.049435752, (-6148924.4163506385), (-5.836985389871423E8), (-6.007990959867682E8), 9.011984703859847E8, 2.6983975824E10}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.scaleInPlace(1.304E19, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1745.74562084596), (-1851.6191512206), 2743.073728255, 164268.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.974106615604512E25, 8.430245312464222E25, (-8.018197438921233E25), (-7.611428948392336E27), (-7.834420211667458E27), 1.175162805383324E28, 3.5187104474496E29}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3.522366533992731E29, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1745.74562084596), (-1851.6191512206), 2743.073728255, 164268.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.974106615604512E25, 8.430245312464222E25, (-8.018197438921233E25), (-7.611428948392336E27), (-7.834420211667458E27), 1.175162805383324E28, 3.5187104474496E29}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1914);
      intArray0[1] = (-2195);
      intArray0[2] = (-1298);
      intArray0[3] = 1727;
      intArray0[4] = 20;
      intArray0[5] = 342;
      intArray0[6] = 18;
      intArray0[7] = 2451;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1914), (-2195), (-1298), 1727, 20, 342, 18, 2451}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1801, (-2112));
      assertNotNull(objectArray0);
      assertEquals(1801, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1756.516905;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1756.516905}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-544.477504));
      assertEquals((-544.477504), (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<String, Double> pair0 = new Pair<String, Double>("zero not allowed here", double0);
      assertNotNull(pair0);
      
      Pair<String, Double> pair1 = new Pair<String, Double>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 234;
      doubleArray0[1] = (double) 234;
      doubleArray0[2] = (double) 234;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 234;
      doubleArray0[5] = (double) 234;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {234.0, 234.0, 234.0, Double.NaN, 234.0, 234.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 234, 234);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 234;
      doubleArray0[1] = (double) 234;
      doubleArray0[2] = (double) 234;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) 234;
      doubleArray0[5] = (double) 234;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {234.0, 234.0, 234.0, Double.NaN, 234.0, 234.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 234, 234);
      assertNotNull(objectArray0);
      assertEquals(234, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 1073741824, (-1344));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1427.2F;
      floatArray0[1] = (-1479.7F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 3378.8413F;
      floatArray0[5] = (-1409.8868F);
      floatArray0[6] = 631.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = -0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1409.8868F);
      floatArray1[3] = (-1479.7F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1427.2F;
      floatArray1[7] = 3378.8413F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1427.2F, (-1479.7F), 0.0F, 0.0F, 3378.8413F, (-1409.8868F), 631.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {-0.0F, 0.0F, (-1409.8868F), (-1479.7F), 0.0F, 0.0F, 1427.2F, 3378.8413F}, floatArray1, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 90);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 337.0;
      doubleArray0[1] = 4914.293126819;
      doubleArray0[2] = (-4142.086457);
      doubleArray0[3] = 2462.647345;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 0.0875862700108075;
      doubleArray0[2] = 540.9039407103;
      doubleArray0[3] = (-4.503599627370496E15);
      doubleArray0[4] = 1684.72;
      doubleArray0[5] = 7.615050625153852E14;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1069.705597545851);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0875862700108075, 540.9039407103, (-4.503599627370496E15), 1684.72, 7.615050625153852E14, 1.0, (-1069.705597545851)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace(970.4, doubleArray0);
      assertArrayEquals(new double[] {1.2654016E22, 84.9937164184876, 524893.1840652751, (-4.3702930784003292E18), 1634852.288, 7.3896451266492979E17, 970.4, (-1038042.3118584938)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.2654016776256707E22, double1, 0.01);
      assertArrayEquals(new double[] {1.2654016E22, 84.9937164184876, 524893.1840652751, (-4.3702930784003292E18), 1634852.288, 7.3896451266492979E17, 970.4, (-1038042.3118584938)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.2654016776256707E22, double2, 0.01);
      assertArrayEquals(new double[] {1.2654016E22, 84.9937164184876, 524893.1840652751, (-4.3702930784003292E18), 1634852.288, 7.3896451266492979E17, 970.4, (-1038042.3118584938)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.2654016E22, 84.9937164184876, 524893.1840652751, (-4.3702930784003292E18), 1634852.288, 7.3896451266492979E17, 970.4, (-1038042.3118584938)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.5308032E22, 169.9874328369752, 1049786.3681305503, (-8.7405861568006584E18), 3269704.576, 1.47792902532985958E18, 1940.8, (-2076084.6237169877)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[13];
      intArray0[4] = 0;
      intArray0[2] = 0;
      intArray0[5] = 1658;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-540.9039407103);
      doubleArray0[2] = (double) 1658;
      doubleArray0[3] = (-540.9039407103);
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(22, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 113.03967, (double) 0, (double) 1658);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -\u221E is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[13];
      intArray0[2] = 0;
      intArray0[5] = 1658;
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1658;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1658.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[0];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1077.0354018080695);
      doubleArray0[1] = 1696.01059423287;
      doubleArray0[2] = 0.9;
      doubleArray0[3] = (-474.07114142);
      doubleArray0[4] = 1.3431199999999999E22;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 1142.453682735205;
      doubleArray0[7] = 6869254.467189684;
      doubleArray0[8] = (-2696.449812116);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {(-1077.0354018080695), 1696.01059423287, 0.9, (-474.07114142), 1.3431199999999999E22, Double.POSITIVE_INFINITY, 1142.453682735205, 6869254.467189684, (-2696.449812116)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3046.2954;
      doubleArray0[1] = 402.095572691;
      doubleArray0[2] = (-262.37823681);
      doubleArray0[3] = 9.007199254740992E15;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 130.04132170083108);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3046.2954, 402.095572691, (-262.37823681), 9.007199254740992E15, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.39808500848373E-11, 5.80524958357606E-12, (-3.7880823700369134E-12), 130.0413217007851, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2117;
      intArray0[1] = 2147472329;
      intArray0[2] = 2095;
      intArray0[3] = 71;
      intArray0[4] = 342;
      intArray0[5] = (-1982292597);
      intArray0[6] = 10;
      intArray0[7] = (-2493);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 342;
      intArray1[1] = 1956330722;
      intArray1[2] = 2;
      intArray1[3] = 2147472329;
      intArray1[4] = 71;
      intArray1[5] = (-1982292597);
      intArray1[6] = 71;
      intArray1[7] = 71;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1956346667), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2117, 2147472329, 2095, 71, 342, (-1982292597), 10, (-2493)}, intArray0);
      assertArrayEquals(new int[] {342, 1956330722, 2, 2147472329, 71, (-1982292597), 71, 71}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      long[][] longArray0 = new long[3][7];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) (-2493);
      longArray1[1] = (long) 342;
      longArray1[2] = (long) 10;
      longArray1[3] = (long) 71;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 342;
      longArray2[1] = (long) 2;
      longArray2[2] = (long) (-1982292597);
      longArray2[3] = (long) 1956330722;
      longArray2[4] = (-1073741824L);
      longArray2[5] = 2813L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 321L;
      longArray3[1] = (long) 10;
      longArray3[2] = (long) (-1956346667);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,493 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 614.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-940.98615F);
      floatArray0[5] = 1099.021F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {Float.NaN, (-1.0F), 614.0F, 0.0F, (-940.98615F), 1099.021F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      intArray0[5] = 1672;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-540.9039407103);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-540.9039407103);
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(22, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1672);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 979.547161758797;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) 0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1030;
      doubleArray0[1] = (double) 1030;
      doubleArray0[2] = (double) 1030;
      doubleArray0[3] = (double) 1030;
      doubleArray0[4] = (double) 1030;
      doubleArray0[5] = (double) 1030;
      doubleArray0[6] = (double) 1030;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1030.0, 1030.0, 1030.0, 1030.0, 1030.0, 1030.0, 1030.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.553561500917073E22, double1, 0.01);
      assertArrayEquals(new double[] {1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22, 1.3431199999999999E22}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3.7999795083850525E-8);
      doubleArray0[1] = (-130.0);
      doubleArray0[2] = (-3.141592653589793);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      intArray0[5] = 1672;
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 1672;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 1672.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.34217729E8, 1.0);
      assertEquals(1.3421773E8, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = 0.19999998807907104;
      doubleArray2[2] = 1.34217729E8;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.3421773E8;
      doubleArray2[5] = (double) int0;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<String, Object> pair0 = new Pair<String, Object>("jR", "jR");
      assertNotNull(pair0);
      
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 509;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 509);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 21.937469314309567);
      assertEquals(7357939.288376171, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 21.937469314309567);
      assertEquals(7357939.288376171, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2639.457665819631;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2639.457665819631);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2639.457665819631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2639.457665819631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2639.457665819631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2639.457665819631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2639.457665819631, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 21;
      intArray0[1] = 20;
      intArray0[2] = 2146162119;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 2639.457665819631;
      doubleArray0[2] = (-708.508851332653);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(963);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(963, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((-792687554));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-792687554), (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(125);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(125, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer0));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(134217729);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(134217729, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(295);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(295, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals(7363411.1756978305, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-249.43111);
      doubleArray0[1] = 7363411.1756978305;
      doubleArray0[2] = 7363411.1756978305;
      doubleArray0[3] = 1320.694642;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-249.43111), 7363411.1756978305, 7363411.1756978305, 1320.694642, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-249.43111), 7363411.1756978305, 7363411.1756978305, 1320.694642, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-249.43111), 7363411.1756978305, 7363411.1756978305, 1320.694642, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0413436036738E7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-249.43111), 7363411.1756978305, 7363411.1756978305, 1320.694642, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 7363411.1756978305;
      doubleArray2[1] = (-878.33);
      doubleArray2[2] = 3.834E-20;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      intArray0[5] = 1672;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-540.9039407103);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 476.246591667027);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-540.9039407103), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {476.246591667027, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-540.9039407103), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {476.246591667027, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-540.9039407103), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {476.246591667027, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 817;
      intArray1[1] = 0;
      intArray1[2] = 1672;
      intArray1[3] = 1672;
      intArray1[4] = 1672;
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1672, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertArrayEquals(new int[] {817, 0, 1672, 1672, 1672}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(5, intArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(509);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(509, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("LN[9&4}E6WQ!PZ", (int) integerArray0[0]);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(509, (int)integer2);
      assertNotNull(integer2);
      assertEquals(3, integerArray0.length);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[2] = (-708.508851332653);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, (-708.508851332653), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 2639.0, 0.0, 1247.3, -0.0, (-1.0), 2564.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2639.0;
      doubleArray1[1] = (-1.0);
      double double2 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2639.0001894657, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, (-708.508851332653), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2639.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1792), (-1792));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.0013888888689039883);
      doubleArray0[1] = (-20.849928586977);
      doubleArray0[2] = (-4902.2488);
      doubleArray0[3] = (-4241.906108309719);
      doubleArray0[4] = 1672.0;
      doubleArray0[5] = 1.0708593250394448E-7;
      doubleArray0[6] = 0.6931470632553101;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-0.0013888888689039883), (-20.849928586977), (-4902.2488), (-4241.906108309719), 1672.0, 1.0708593250394448E-7, 0.6931470632553101}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.0027777777378079765), (-41.699857173954), (-9804.4976), (-8483.812216619437), 3344.0, 2.1417186500788895E-7, 1.3862941265106201}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      float float0 = (-681.3684F);
      floatArray0[0] = (-681.3684F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-681.3684F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.003 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals(7363411.1756978305, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-249.43111);
      doubleArray0[1] = 0.097;
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-481.69513F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-481.69513F);
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-481.69513F), 0.0F, (-481.69513F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "'ES/x{";
      stringArray0[2] = "Z/vp";
      stringArray0[3] = "ca3f>P3(\"";
      stringArray0[4] = "*f^eC;";
      stringArray0[5] = "_/6;2t3|SxwU^";
      stringArray0[6] = "}2mKKWaPDrLO#wR;z";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-903.073F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2595.5F;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2595.5}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "'ES/x{";
      double double0 = MathArrays.linearCombination((-1985.2023938915413), (-1985.2023938915413), (-1985.2023938915413), (-2873.203950785), (-4106.905272053), (-1985.2023938915413), (-878.0177146664538), (-2873.203950785));
      assertEquals(2.0320682050154E7, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2873.203950785);
      doubleArray0[1] = (-2873.203950785);
      doubleArray0[2] = (-4106.905272053);
      doubleArray0[3] = (-1985.2023938915413);
      doubleArray0[4] = (-878.0177146664538);
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "'ES/x{";
      stringArray0[2] = "Z/vp";
      stringArray0[3] = "ca3f>P3(\"";
      stringArray0[4] = "*f^eC;";
      stringArray0[5] = "_/6;2t3|SxwU^";
      stringArray0[6] = "}2mKKWaPDrLO#wR;z";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-903.073F);
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Field<Pair<Object, Integer>> field0 = (Field<Pair<Object, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2041);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Object>[] pairArray0 = MathArrays.buildArray(field0, 509);
      assertNotNull(pairArray0);
      assertEquals(509, pairArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 509;
      intArray0[1] = 1100;
      intArray0[2] = 509;
      intArray0[3] = 509;
      intArray0[4] = 123;
      intArray0[5] = 509;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {509, 1100, 509, 509, 123, 509}, intArray0);
      assertArrayEquals(new int[] {509, 1100, 509, 509, 123, 509}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1551;
      intArray0[2] = (-1186);
      intArray0[3] = (-82);
      intArray0[4] = 2145048859;
      intArray0[5] = 1545;
      intArray0[6] = 22;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1551;
      intArray1[1] = 1551;
      intArray1[2] = 977;
      intArray1[3] = (-1186);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 343.3581624215;
      doubleArray1[3] = 2.0;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "'ES/x{";
      stringArray0[2] = "Z/vp";
      stringArray0[3] = "ca3f>P3(\"";
      stringArray0[4] = "*f^eC;";
      stringArray0[5] = "_/6;2t3|SxwU^";
      stringArray0[6] = "}2mKKWaPDrLO#wR;z";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-903.073F);
      floatArray0[4] = 2595.5F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-481.69513F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, (-903.073F), 2595.5F, 0.0F, (-481.69513F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[4] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      Double double0 = new Double(2.68435458E8);
      assertEquals(2.68435458E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      floatArray0[1] = 0.0F;
      floatArray0[1] = (-759.45F);
      floatArray0[2] = (-759.45F);
      floatArray0[3] = (-759.45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-759.45F), (-759.45F), (-759.45F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-759.45F);
      doubleArray1[2] = 1.304E19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-759.4500122070312), 1.304E19}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals(7363411.1756978305, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-249.43111);
      doubleArray0[1] = 0.097;
      doubleArray0[4] = (-106.65524626024);
      doubleArray0[5] = (-878.33);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-249.43111), 0.097, 0.0, 0.0, (-106.65524626024), (-878.33)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-674.996746348);
      doubleArray0[1] = (-3576.97986694294);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.503599627370496E15;
      doubleArray1[1] = (-3576.97986694294);
      doubleArray1[2] = (-3576.97986694294);
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {4.503599627370496E15, (-3576.97986694294), (-3576.97986694294), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 2574.936796678, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals(5559815.373286524, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5559815.373286524;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {5559815.373286524}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.0911546985033168E13}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 5.0614674548127384E-8;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 5559815.373286524;
      doubleArray2[3] = (-249.43111);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 2639.0;
      doubleArray0[2] = (-708.508851332653);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2639.0, (-708.508851332653), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2639.0, 2639.0, 0.0, 1247.3, -0.0, (-1.0), 2564.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6964321.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2639.0, (-708.508851332653), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[5] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 0, (-2329.6606), (-357.485401), Double.NEGATIVE_INFINITY, 117906.8277014692, Double.NEGATIVE_INFINITY, (-357.485401), (double) 0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[5] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 3147.890576, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals(7363411.1756978305, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace(132.02455, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double double0 = new Double(132.02455);
      assertEquals(132.02455, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 361;
      intArray0[1] = 134217729;
      intArray0[2] = (-1004);
      intArray0[3] = (-94);
      intArray0[4] = (-3509);
      intArray0[5] = 352;
      intArray0[6] = 1770;
      intArray0[7] = 229;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {361, 134217729, (-1004), (-94), (-3509), 352, 1770, 229}, intArray0);
      assertArrayEquals(new int[] {361, 134217729, (-1004), (-94), (-3509), 352, 1770, 229}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {361, 134217729, (-1004), (-94), (-3509), 352, 1770, 229}, intArray0);
      assertArrayEquals(new int[] {361, 134217729, (-1004), (-94), (-3509), 352, 1770, 229}, intArray1);
      assertArrayEquals(new int[] {361, 134217729, (-1004), (-94), (-3509), 352, 1770, 229}, intArray2);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[3];
      longArray1[0] = (-9223372036854775808L);
      longArray1[1] = 1L;
      longArray1[2] = (-2256L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[5] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 1672;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1672;
      intArray1[2] = int0;
      intArray1[3] = int0;
      intArray1[4] = 0;
      intArray1[5] = 1672;
      intArray1[6] = int0;
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1672, int2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1672, 0, 0, 0, 1672, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      double double1 = 4037.160138475657;
      doubleArray0[2] = 4037.160138475657;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = (-64.52310460543515);
      doubleArray1[2] = (-64.52310460543515);
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 1.7976931348623157E308;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, (-64.52310460543515), (-64.52310460543515), 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray1, 0.01);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((-510.93), (-510.93), 1.34217729E8, 1.0);
      assertEquals(1.344787784649E8, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 362;
      intArray0[5] = (-77);
      intArray0[3] = (-1381);
      intArray0[4] = 6072;
      intArray0[5] = (-3717);
      intArray0[6] = 952;
      intArray0[7] = 365;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {134217729, 362, 0, (-1381), 6072, (-3717), 952, 365}, intArray1);
      assertArrayEquals(new int[] {134217729, 362, 0, (-1381), 6072, (-3717), 952, 365}, intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertArrayEquals(new int[] {134217729, 362, 0, (-1381), 6072, (-3717), 952, 365}, intArray2);
      assertArrayEquals(new int[] {134217729, 362, 0, (-1381), 6072, (-3717), 952, 365}, intArray0);
      assertEquals(8, intArray2.length);
      assertEquals(8, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1931.0123;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-519.7062646071251);
      doubleArray1[3] = (-1151.4368344457034);
      doubleArray1[4] = (-3.141592653589793);
      doubleArray1[5] = 583.669;
      doubleArray1[6] = 576.574632;
      doubleArray1[7] = 0.902267575263977;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1931.0123, 1.0, (-519.7062646071251), (-1151.4368344457034), (-3.141592653589793), 583.669, 576.574632, 0.902267575263977}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.0;
      doubleArray3[1] = 1383.843465737601;
      doubleArray3[2] = 1.34217729E8;
      doubleArray3[3] = (-1443.04);
      doubleArray3[4] = 1.34217729E8;
      doubleArray3[5] = 1.34217729E8;
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1383.843465737601, 1.34217729E8, (-1443.04), 1.34217729E8, 1.34217729E8}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[4] = (-44.233309);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, (-44.233309), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-572.2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Integer integer0 = new Integer((-2146845578));
      assertEquals((-2146845578), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2140513561);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2140513561, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(183);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(183, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer((-1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-1), (int)integer3);
      assertNotNull(integer3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2243.083;
      doubleArray0[1] = 3365.28664;
      doubleArray0[2] = 0.6931470632553101;
      doubleArray0[3] = 0.9285714285714286;
      doubleArray0[4] = (-915.47636509255);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2243.083, 3365.28664, 0.6931470632553101, 0.9285714285714286, (-915.47636509255)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,365.287 >= 0.693)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      Integer integer0 = new Integer(237);
      assertEquals(237, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1190);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1190, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(237);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(237, (int)integer3);
      assertNotNull(integer3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      Integer integer4 = Integer.valueOf(0);
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[1] = integer4;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 2427.16349, 1.0, (-452.082370231), (-626.4397929), 1.0, (-632.9), 1.0);
      assertEquals((-1711.4221631310002), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 1320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      double double0 = MathArrays.linearCombination(546.279095754447, (-2437.0), (-1749.437578428188), (-2908.059990127), (-2908.059990127), (-1749.437578428188), (-2437.0), (-2908.059990127));
      assertEquals(1.5930598893689271E7, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-248.91416909334), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(33.4679645, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 389.116F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 389.116F;
      floatArray1[1] = 389.116F;
      floatArray1[2] = 389.116F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = (-342.9F);
      floatArray1[5] = 389.116F;
      floatArray1[6] = 389.116F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {389.116F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {389.116F, 389.116F, 389.116F, 1.0F, (-342.9F), 389.116F, 389.116F}, floatArray1, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 1.7976931348623157E308, (-1.0));
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5816.119980254), Double.POSITIVE_INFINITY, 3095.79476, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2278.2102F);
      floatArray0[1] = (-2278.2102F);
      floatArray0[2] = (-2278.2102F);
      floatArray0[3] = (-2278.2102F);
      floatArray0[4] = -0.0F;
      floatArray0[5] = -0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2278.2102F), (-2278.2102F), (-2278.2102F), (-2278.2102F), -0.0F, -0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-2278.2102F), (-2278.2102F), (-2278.2102F), (-2278.2102F), -0.0F, -0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5816.119980254), Double.POSITIVE_INFINITY, 3095.79476, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5816.119980254), Double.POSITIVE_INFINITY, 3095.79476, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1070.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1180.073517631);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-307.1);
      doubleArray0[6] = 3035.025;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1887);
      double double0 = MathArrays.linearCombination((-1180.073517631), 3061.738, (-886.2), (-1180.073517631));
      assertEquals((-2567294.78039991), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 367);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(367, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(367, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3147.890576, 0.0, (-249.43111), (-878.33), 3147.890576, (-878.33), (-249.43111), 0.0);
      assertEquals((-2545803.90277178), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-324));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 911L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 911L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3556.30728657943;
      doubleArray0[1] = 3005.610406493249;
      doubleArray0[2] = (double) 911L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3556.30728657943, 3005.610406493249, 911.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1672;
      intArray0[1] = 1672;
      intArray0[2] = 1672;
      intArray0[3] = 1672;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1672, 1672, 1672, 1672}, intArray0);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer integer0 = new Integer((-1924));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1924), (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 1672;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 2427.16349);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(12, doubleArray0.length);
      assertEquals(12, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 1472.9166926804448);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[5] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1672;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 1672;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      Integer integer1 = new Integer(3688);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(3688, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, integerArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.6298661983696785E7, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = (-511.440041561395);
      double double2 = MathArrays.linearCombination((-4037.160138475657), 4037.160138475657, (-511.440041561395), 1.0, 4037.160138475657, 4037.160138475657);
      assertEquals(double2, double1, 0.01);
      assertEquals((-511.440041561395), double2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.6298661983696785E7, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray2.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1962);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-1962)}, intArray0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1962)}, intArray0);
      assertArrayEquals(new int[] {(-1962)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((-510.93), (-510.93), 1.34217729E8, 1.0);
      assertEquals(1.344787784649E8, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = -0.0F;
      floatArray0[1] = (-2278.2102F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {-0.0F, (-2278.2102F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {-0.0F, (-2278.2102F)}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-3356), (-3356));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-759.45F);
      floatArray0[2] = (-759.45F);
      floatArray0[3] = (-759.45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, (-759.45F), (-759.45F), (-759.45F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-759.45F), (double) 0.0F, (-3465.2), 1.7976931348623157E308);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = (double) (-759.45F);
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) (-759.45F);
      doubleArray2[4] = Double.NEGATIVE_INFINITY;
      doubleArray2[5] = (-510.93);
      doubleArray2[6] = (-2908.059990127);
      doubleArray2[7] = (-3465.2);
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, (-759.4500122070312), 0.0, (-759.4500122070312), Double.NEGATIVE_INFINITY, (-510.93), (-2908.059990127), (-3465.2)}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.7976931348623157E308, (-759.4500122070312), 0.0, (-759.4500122070312), Double.NEGATIVE_INFINITY, (-510.93), (-2908.059990127), (-3465.2)}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {2.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[3] = 2.0;
      double double0 = MathArrays.linearCombination((-399.2), 2.0, 0.0, 2.0);
      assertEquals((-798.4), double0, 0.01);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-674.996746348);
      MathArrays.scaleInPlace(455620.6075803862, doubleArray0);
      assertArrayEquals(new double[] {(-3.075424276858596E8), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double0 = new Double(15438.756998961033);
      assertEquals(15438.756998961033, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.075424276858596E8), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.4582344826912192E16, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 12;
      intArray0[1] = 272;
      intArray0[2] = 134217729;
      intArray0[3] = 22;
      intArray0[4] = (-1);
      intArray0[5] = 2100007933;
      intArray0[6] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {12, 272, 134217729, 22, (-1), 2100007933, (-1)}, intArray0);
      assertArrayEquals(new int[] {12, 272, 134217729, 22, (-1), 2100007933, (-1)}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {12, 272, 134217729, 22, (-1), 2100007933, (-1)}, intArray0);
      assertArrayEquals(new int[] {12, 272, 134217729, 22, (-1), 2100007933, (-1)}, intArray1);
      assertArrayEquals(new int[] {12, 272, 134217729, 22, (-1), 2100007933, (-1)}, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1070.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1180.073517631);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-307.1);
      doubleArray0[6] = 3035.025;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1887);
      intArray0[2] = (-2228);
      intArray0[3] = 2129;
      intArray0[4] = 2669;
      intArray0[5] = 2;
      intArray0[6] = 33;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1070.0, 0.0, (-1180.073517631), (-1.0), (-307.1), 0.0, 3035.025}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = (-814);
      intArray0[3] = 3046;
      // Undeclared exception!
      try { 
        MathArrays.scale((-3618.5349), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = 2522L;
      longArray4[3] = (long) 0;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[3];
      longArray1[2] = 0L;
      longArray1[1] = 9223372036854775807L;
      longArray1[2] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-9223372036854775808L);
      doubleArray0[1] = (double) 0L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-124.252794733));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.223372036854776E18), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-124.252794733), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(124.252794733, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.223372036854776E18), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-124.252794733), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-9.223372036854776E18), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-124.252794733), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-22);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {1, (-22)}, intArray0);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-9,223,372,036,854,776,000 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4037.1606338733645, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double double2 = new Double((-4037.160138475657));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-4037.160138475657), (double)double2, 0.01);
      assertNotNull(double2);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-36));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[5] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1672;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 1672}, intArray0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, Double.NEGATIVE_INFINITY, 0.0, 0.0, (-540.9039407103)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 1672;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = 0L;
      double double0 = (-2905.12);
      double double1 = 3005.610406493249;
      double[] doubleArray0 = new double[6];
      double double2 = 3556.30728657943;
      doubleArray0[0] = 3556.30728657943;
      doubleArray0[1] = 3005.610406493249;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 4.503599627370496E15;
      doubleArray0[4] = (-2905.12);
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3556.30728657943, 3005.610406493249, 0.0, 4.503599627370496E15, (-2905.12), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-787);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-787));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 69.6358923;
      doubleArray0[1] = 980.2;
      doubleArray0[2] = 2740.4825162456;
      int int0 = 294;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 294);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {69.6358923, 980.2, 2740.4825162456}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(294, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 294;
      intArray0[1] = 294;
      intArray0[2] = 294;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {294, 294, 294}, intArray0);
      assertArrayEquals(new int[] {294, 294, 294}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double double0 = MathArrays.distance(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {294, 294, 294}, intArray0);
      assertArrayEquals(new int[] {294, 294, 294}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 294;
      doubleArray2[1] = 2740.4825162456;
      doubleArray2[2] = 2740.4825162456;
      doubleArray2[3] = (double) 294;
      doubleArray2[4] = (double) 294;
      doubleArray2[5] = (double) 294;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1760.2825162456, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {69.6358923, 980.2, 2740.4825162456}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {294.0, 2740.4825162456, 2740.4825162456, 294.0, 294.0, 294.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 294
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[3];
      longArray1[2] = 0L;
      longArray1[1] = 9223372036854775807L;
      longArray1[2] = 9223372036854775807L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3556.30728657943;
      doubleArray0[1] = 3005.610406493249;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 4.503599627370496E15;
      doubleArray0[4] = (-2905.12);
      doubleArray0[5] = (double) 0L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0L);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3556.30728657943, 3005.610406493249, 0.0, 4.503599627370496E15, (-2905.12), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-787));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2892);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      double[][] doubleArray0 = new double[4][8];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.304E19;
      doubleArray0[0] = doubleArray1;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = (-9223372036854775808L);
      longArray2[7] = 0L;
      longArray2[8] = (-9223372036854775808L);
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-9223372036854775808L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (-9223372036854775808L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.494140625;
      doubleArray0[1] = 1.494140625;
      doubleArray0[2] = 1.494140625;
      doubleArray0[3] = 1.494140625;
      doubleArray0[4] = 1.494140625;
      doubleArray0[5] = 1.494140625;
      double[] doubleArray1 = MathArrays.scale(1.494140625, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.494140625, 1.494140625, 1.494140625, 1.494140625, 1.494140625, 1.494140625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 17;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray2 = new int[5];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 17;
      intArray2[1] = 17;
      intArray2[2] = 17;
      intArray2[3] = 17;
      intArray2[4] = 17;
      double double0 = MathArrays.distance(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17, 17, 17, 17, 17}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17}, intArray1);
      assertArrayEquals(new int[] {17, 17, 17, 17, 17}, intArray2);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertEquals(5, intArray2.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.494140625, 1.494140625, 1.494140625, 1.494140625, 1.494140625, 1.494140625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.464912414550781, 4.464912414550781, 4.464912414550781, 4.464912414550781, 4.464912414550781, 4.464912414550781}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906, 2.2324562072753906}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray3 = MathArrays.copyOf(intArray1);
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertNotNull(intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {17}, intArray3);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17}, intArray1);
      assertEquals(1, intArray3.length);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int int1 = MathArrays.distance1(intArray1, intArray0);
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertArrayEquals(new int[] {17}, intArray0);
      assertArrayEquals(new int[] {17}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      int[] intArray4 = MathArrays.copyOf(intArray2, 0);
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray4);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray4);
      assertArrayEquals(new int[] {17, 17, 17, 17, 17}, intArray2);
      assertEquals(0, intArray4.length);
      assertEquals(5, intArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 17, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-1)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 2147482844);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = -0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      double double0 = (-540.9039407103);
      doubleArray0[1] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 309.10689;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      double double2 = 0.0;
      doubleArray0[5] = 0.0;
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-540.9039407103), Double.NEGATIVE_INFINITY, 309.10689, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, 292577.0730759318, Double.POSITIVE_INFINITY, 95547.06944547211, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double4 = MathArrays.linearCombination(4880.84929, Double.NaN, (-540.9039407103), 0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 0;
      integerArray0[4] = (Integer) 0;
      integerArray0[5] = (Integer) 0;
      integerArray0[6] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[3] = (-435.00152949797);
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, (-435.00152949797), (-44.233309), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, (-435.00152949797), (-44.233309), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1081;
      intArray0[1] = 82;
      intArray0[2] = 1081;
      intArray0[3] = 0;
      intArray0[4] = 1081;
      intArray0[5] = (-1);
      intArray0[6] = 1081;
      intArray0[7] = 82;
      intArray0[8] = 1081;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1081);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {1081, 82, 1081, 0, 1081, (-1), 1081, 82, 1081}, intArray0);
      assertEquals(1081, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-44.233309));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, -0.0, -0.0, 0.0, Double.NaN, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, -0.0, -0.0, 0.0, Double.NaN, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2908.059990127), 1.7976931348623157E308, 1547.89738, 0.0, (-44.233309), 1.7976931348623157E308, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, -0.0, -0.0, 0.0, Double.NaN, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3602;
      intArray0[1] = (-22);
      intArray0[2] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {3602, (-22), 1}, intArray0);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-0 <= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2417.414017);
      doubleArray0[0] = (-2417.414017);
      double double1 = (-1459.3107696);
      doubleArray0[1] = (-1459.3107696);
      double double2 = (-2586.97);
      doubleArray0[2] = (-2586.97);
      doubleArray0[3] = 3189.952465;
      doubleArray0[4] = 1668.8813;
      doubleArray0[5] = 3.834E-20;
      double double3 = (-2477.1409031026);
      doubleArray0[6] = (-2477.1409031026);
      double double4 = 68.61556008272967;
      doubleArray0[7] = 68.61556008272967;
      doubleArray0[8] = 9.007199254744178E15;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2417.414017), (-1459.3107696), (-2586.97), 3189.952465, 1668.8813, 3.834E-20, (-2477.1409031026), 68.61556008272967, 9.007199254744178E15}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double((-121.2529));
      assertEquals((-121.2529), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-540.9039407103);
      doubleArray0[1] = 1340.9796571276308;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 299.14094944487374;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-540.9039407103), 1340.9796571276308, 1.0, 299.14094944487374}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {292577.0730759318, 1798226.4408301383, 1.0, 89485.3076347805}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3034;
      intArray0[1] = 2922;
      intArray0[2] = 0;
      intArray0[3] = 2922;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {3034, 2922, 0, 2922}, intArray0);
      assertArrayEquals(new int[] {3034, 2922, 0, 2922}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {3034, 2922, 0, 2922}, intArray0);
      assertArrayEquals(new int[] {3034, 2922, 0, 2922}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -540.904 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2564.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2564.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2564.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2564.0;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2564.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Integer integer0 = new Integer(2457);
      assertEquals(2457, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", 2457);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2457, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(881);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(881, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(519);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(519, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(881);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(881, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer3;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-429.638186764001);
      doubleArray0[1] = 2506.2648;
      doubleArray0[2] = (-793.3295851048697);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      Double double0 = new Double(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-429.638186764001), 2506.2648, (-793.3295851048697), Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {184588.9715258586, 6281363.247719039, 629371.8306026647, Double.POSITIVE_INFINITY, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 142;
      intArray0[1] = 0;
      intArray0[2] = 2266;
      intArray0[3] = 142;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {142, 0, 2266, 142, 0}, intArray0);
      assertArrayEquals(new int[] {142, 0, 2266, 142, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {142, 0, 2266, 142, 0}, intArray0);
      assertArrayEquals(new int[] {142, 0, 2266, 142, 0}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 2639.457665819631;
      doubleArray0[2] = (-708.508851332653);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2639.457665819631, (-708.508851332653)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("A99*ut`x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.A99*ut`x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1582));
      assertEquals((-1582), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1582), (int)integer1);
      assertNotNull(integer1);
      assertEquals(9, integerArray0.length);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      integerArray0[3] = integerArray0[1];
      Integer integer3 = Integer.getInteger("", (int) integerArray0[3]);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals((-1582), (int)integer3);
      assertNotNull(integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[4] = integer3;
      Integer integer4 = new Integer(519);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(519, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(1190);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(1190, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[6] = integer5;
      int int0 = (-3703);
      Integer integer6 = new Integer((-3703));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals((-3703), (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[7] = integer6;
      Integer integer7 = new Integer(0);
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(0, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[8] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double double0 = MathArrays.linearCombination((double) integerArray0[1], (double) integerArray0[1], 1.5852796E7, 1883.2);
      assertEquals(2.98564881512E10, double0, 0.01);
      assertEquals(9, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2407.563F;
      floatArray0[1] = 2407.563F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.linearCombination((double) (-38.8F), (-1025.604886865573), (-2803.2461077), 1088.0);
      int[] intArray0 = new int[4];
      floatArray0[1] = (float) 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 2407.563F, (double) 0, (double) (-38.8F), 1.34217729E8);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (-2803.2461077);
      doubleArray1[2] = 2.0;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,803.246)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.1893F;
      floatArray0[1] = (-759.45F);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 1.1893F;
      doubleArray0[2] = (double) (-759.45F);
      doubleArray0[3] = (double) 1.1893F;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-759.45F);
      doubleArray1[2] = (double) 1.1893F;
      doubleArray1[3] = (-1739.23129);
      doubleArray1[4] = (double) (-759.45F);
      doubleArray1[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) (-759.45F);
      doubleArray1[8] = (double) (-759.45F);
      MathArrays.distance1(doubleArray0, doubleArray1);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 309.10689;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = new Double(0.0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 287;
      intArray0[3] = 2922;
      intArray0[4] = (-3589);
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray1);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 2.0;
      doubleArray0[0] = 2.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 1635.14865455, 1635.14865455, 1635.14865455);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2673711.122476675;
      doubleArray0[2] = 1635.14865455;
      doubleArray0[3] = 1635.14865455;
      doubleArray0[4] = 2673711.122476675;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2059);
      int int0 = 822;
      intArray0[1] = 822;
      intArray0[2] = (-2408);
      intArray0[3] = (-108);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0);
      double double0 = new Integer((-2059));
      MathArrays.copyOf(intArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int1 = (-2511);
      int int2 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2511), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = (-9223372036854775808L);
      longArray2[7] = 0L;
      longArray2[8] = (-9223372036854775808L);
      longArray0[1] = longArray2;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (-9223372036854775808L);
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (-9223372036854775808L);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(4, intArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 2.68435458E8, 0.0, 0.0, 0.0, (-1.8446744073709552E19), 0.0, (-1.8446744073709552E19)}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3287.16272594;
      doubleArray0[1] = (-2980.5215401457167);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 803.82;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4509.442762745957, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3602;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, false);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 4004.229242958639;
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = 0.0;
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1582));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("", (int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(519);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1190);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3703));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1582);
      doubleArray0[2] = (double) (-1582);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (int)integerArray0[4];
      doubleArray0[5] = (double) (-3703);
      doubleArray0[6] = (double) (-1582);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1,582)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[3] = (-435.00152949797);
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3602;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 17;
      intArray0[1] = (-1);
      intArray0[2] = (-784);
      intArray0[3] = 3046;
      intArray0[4] = 83;
      intArray0[5] = 2;
      Integer integer0 = new Integer(472);
      Integer integer1 = new Integer(1465);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1582));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      int int0 = 0;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("", (int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(519);
      integerArray0[5] = integer5;
      Integer integer6 = Integer.getInteger("", (Integer) int0);
      integerArray0[6] = integer6;
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      intArray0[1] = 1190;
      intArray0[2] = (int) integerArray0[0];
      intArray0[3] = 587;
      intArray0[4] = 0;
      intArray0[5] = (int) integerArray0[1];
      intArray0[6] = (-502);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = (-9223372036854775808L);
      longArray2[7] = 0L;
      longArray2[8] = (-9223372036854775808L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = (-9223372036854775808L);
      longArray0[2] = longArray3;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-9223372036854775808L);
      doubleArray0[1] = (double) (-9223372036854775808L);
      doubleArray0[2] = (double) (-9223372036854775808L);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0L;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-44.233309));
      MathArrays.safeNorm(doubleArray1);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3602;
      intArray0[1] = 0;
      intArray0[2] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[3] = (-435.00152949797);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-435.00152949797);
      doubleArray1[1] = 1547.89738;
      doubleArray1[2] = 1547.89738;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = (-435.00152949797);
      doubleArray1[5] = (-2908.059990127);
      doubleArray1[6] = 3035.025;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.1893F;
      floatArray0[1] = (-759.45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-38.8F);
      floatArray0[4] = 2407.563F;
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 0.0F, (double) (-759.45F), 1088.0, (-1025.604886865573));
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-759.45F);
      doubleArray0[1] = (double) 0.0F;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 2407.563F, (double) 1.1893F, 184588.9715258586, 0.9315965175628662);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      int[] intArray0 = new int[7];
      Double double0 = new Double(1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      int[] intArray2 = MathArrays.copyOf(intArray1);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-6.580030846706924E10), double1, 0.01);
      
      int[] intArray3 = new int[1];
      intArray3[0] = 2147471859;
      double double2 = MathArrays.distance(intArray3, intArray2);
      assertEquals(2.147471859E9, double2, 0.01);
      assertNotSame(intArray2, intArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1070.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1180.073517631);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-307.1);
      doubleArray0[5] = 142.0;
      doubleArray0[6] = 3035.025;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1887);
      intArray0[2] = (-2228);
      intArray0[3] = 2129;
      intArray0[4] = 2669;
      intArray0[5] = 2;
      intArray0[6] = 33;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1), (-1887), (-2228), 2129, 2669, 2, 33, 0, 0}, intArray1);
      
      MathArrays.copyOf(doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2145650229));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1070.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1180.073517631);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-307.1);
      doubleArray0[5] = 142.0;
      doubleArray0[6] = 3035.025;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int int0 = (-1);
      int int1 = (-1887);
      int int2 = (-2228);
      int int3 = 2129;
      int int4 = 2;
      int int5 = (-483);
      Integer integer0 = new Integer((-483));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 2639.457665819631;
      doubleArray0[2] = (-708.508851332653);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2639.457665819631;
      doubleArray2[1] = -0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = null;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-429.638186764001);
      doubleArray0[1] = 2506.2648;
      doubleArray0[2] = (-781.78369846);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-781.78369846), (-429.638186764001), 0.0, 0.0, 2506.2648, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, (-429.638186764001), 20.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1170.3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1577.70120499999);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      long[][] longArray0 = new long[8][0];
      long[] longArray1 = new long[7];
      longArray1[0] = 326L;
      longArray1[1] = (-774L);
      longArray1[2] = 0L;
      longArray1[3] = 100L;
      longArray1[4] = 58L;
      longArray1[5] = (-4508L);
      longArray1[6] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-4508L);
      longArray2[1] = (-4508L);
      longArray2[2] = (-774L);
      longArray2[3] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 326L;
      longArray3[1] = 1L;
      longArray3[2] = 100L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 326L;
      longArray4[1] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 326L;
      longArray5[1] = 748L;
      longArray5[2] = (-774L);
      longArray5[3] = 326L;
      longArray5[4] = 326L;
      longArray5[5] = 58L;
      longArray5[6] = (-4508L);
      longArray5[7] = 100L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 1L;
      longArray6[1] = 748L;
      longArray6[2] = 100L;
      longArray6[3] = 0L;
      longArray6[4] = (-774L);
      longArray6[5] = 748L;
      longArray6[6] = 100L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = 58L;
      longArray7[1] = 1L;
      longArray7[2] = (-2828L);
      longArray7[3] = 1L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[9];
      longArray8[0] = 100L;
      longArray8[1] = (-774L);
      longArray8[2] = 1L;
      longArray8[3] = 58L;
      longArray8[4] = 1L;
      longArray8[5] = 1L;
      longArray8[6] = 0L;
      longArray8[7] = (-774L);
      longArray8[8] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-8.23272387925438);
      doubleArray0[1] = (-8.23272387925438);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-8.23272387925438);
      doubleArray0[4] = (-8.23272387925438);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-8.23272387925438));
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2014;
      intArray0[2] = 1;
      intArray0[3] = 3602;
      intArray0[4] = 3602;
      intArray0[5] = 3602;
      intArray0[6] = 0;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-8.3 < 0.017)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 1635.14865455, 0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1635.14865455;
      doubleArray0[3] = 1635.14865455;
      doubleArray0[4] = 0.0;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-2059);
      intArray0[1] = 822;
      intArray0[2] = (-2408);
      intArray0[3] = (-108);
      MathArrays.distance(intArray0, intArray0);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.copyOf(intArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2511), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.1893F;
      floatArray0[1] = (-759.45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-38.8F);
      floatArray0[4] = 2407.563F;
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 0.0F, (double) (-759.45F), 1088.0, (-1025.604886865573));
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-759.45F);
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 134217729, 0.0, (double) 1.1893F, (-1115858.1169097435));
      MathArrays.checkOrder(doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1327089.992675347);
      doubleArray2[1] = (double) 1.1893F;
      doubleArray2[2] = (double) (-759.45F);
      doubleArray2[3] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3556.30728657943;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[3];
      int int0 = 859;
      intArray0[0] = 859;
      int int1 = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 0;
      int int2 = 0;
      MathArrays.copyOf(intArray0, 0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 859;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1459L);
      longArray0[2] = (-1L);
      long long0 = 2043L;
      longArray0[3] = 2043L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,459 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-429.638186764001);
      doubleArray0[1] = 2506.2648;
      doubleArray0[2] = (-429.638186764001);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1538.492192813);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1770.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1538.492192813);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-20.0);
      doubleArray2[8] = (-1538.492192813);
      doubleArray1[5] = doubleArray2;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2072.277379018974;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, 2072.277379018974, 2072.277379018974, Double.NaN, 2072.277379018974, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1682.23512284522;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      MathArrays.equals(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(1682.23512284522, 1391.49458, 5671.21164511265, (-847.0), (-1871.0), 1682.23512284522);
      assertEquals((-5610157.122529063), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 134217729;
      intArray0[1] = 115;
      intArray0[2] = 38;
      intArray0[3] = 12;
      intArray0[4] = 2615;
      MathArrays.copyOf(intArray0);
      MathArrays.copyOf(intArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 12;
      longArray0[1] = (long) 115;
      longArray0[2] = (long) 134217729;
      longArray0[3] = (long) 115;
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2363.89541295);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-2420.661948764);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1790.048948);
      doubleArray0[6] = 46.37772;
      doubleArray0[7] = (-2120.1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (-0 >= -2,420.662)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1022.264610478398);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2686.6);
      doubleArray0[3] = 1536.6751672;
      doubleArray0[4] = (-1073.404);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2686.6);
      doubleArray1[3] = (-1073.404);
      doubleArray1[4] = (-1073.404);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.linearCombination((-35.32), 0.0, (-35.32), 0.0, (-35.32), (-35.32));
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1247.5024;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-35.32);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer((-1582));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[0]);
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger("", (int) integerArray0[3]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(519);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(1190);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3703));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 17;
      intArray0[1] = (-1);
      intArray0[2] = (-814);
      intArray0[3] = 3046;
      intArray0[4] = 83;
      intArray0[5] = 2;
      intArray0[6] = (-2564);
      intArray0[7] = 587;
      intArray0[8] = 2550;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      double double0 = 983.65;
      doubleArray0[1] = 983.65;
      double double1 = (-2031.5241284049057);
      doubleArray0[2] = (-2031.5241284049057);
      double double2 = 3.141592653589793;
      doubleArray0[3] = 3.141592653589793;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 4037.160138475657;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, (-4037.160138475657), 1.0, 1.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1402;
      intArray0[2] = 0;
      intArray0[3] = 82;
      intArray0[4] = (-1);
      intArray0[5] = (-1785);
      intArray0[6] = 1081;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-510.93), (-510.93), 1.34217729E8, 1.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = -0.0F;
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 343.3581624215;
      doubleArray1[3] = 2.0;
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 343.3581624215;
      doubleArray1[3] = 2.0;
      MathArrays.linearCombination(doubleArray1, doubleArray1);
      MathArrays.convolve(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3287.16272594;
      doubleArray0[1] = (-2980.5215401457167);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 803.82;
      doubleArray0[5] = (-3562.0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 337;
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 337;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 337;
      MathArrays.distance(intArray0, intArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (long) 337;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 337;
      longArray2[3] = (long) 0;
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 337;
      longArray3[3] = (long) 337;
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 337;
      longArray3[6] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (long) 337;
      longArray4[1] = 0L;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 337;
      longArray4[4] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 337;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = (long) 337;
      longArray5[6] = (long) 0;
      longArray5[7] = (-130L);
      longArray5[8] = (long) 337;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (long) 337;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -130 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1348.51629);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3165.45210549;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0E-5;
      doubleArray1[6] = 2433.3825121942;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scale(Double.POSITIVE_INFINITY, doubleArray0);
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[1];
      longArray1[0] = 3014L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = 3014L;
      longArray2[1] = 3014L;
      longArray2[2] = 3014L;
      longArray2[3] = 3014L;
      longArray2[4] = 3014L;
      longArray2[5] = 3014L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 3014L;
      longArray3[1] = 3014L;
      longArray3[2] = 3014L;
      longArray3[3] = 2601L;
      longArray3[4] = 3014L;
      longArray3[5] = 3014L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = 3014L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 3014L;
      longArray6[1] = 2601L;
      longArray6[2] = 2601L;
      longArray6[3] = 3014L;
      longArray6[4] = 3014L;
      longArray6[5] = 1678L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = 3014L;
      longArray7[1] = 3014L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      longArray8[0] = 3014L;
      longArray8[1] = 2601L;
      longArray8[2] = 2601L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[9];
      longArray9[0] = 3014L;
      longArray9[1] = 1678L;
      longArray9[2] = 1678L;
      longArray9[3] = 2601L;
      longArray9[4] = 1678L;
      longArray9[5] = 2601L;
      longArray9[6] = 1678L;
      longArray9[7] = 1678L;
      longArray9[8] = (-1L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1756.516905;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double[] doubleArray2 = MathArrays.scale((-293.4), doubleArray0);
      assertArrayEquals(new double[] {(-515362.05992699997)}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 104;
      intArray0[2] = 0;
      intArray0[3] = 1215;
      intArray0[4] = 1107;
      intArray0[5] = 198;
      intArray0[6] = 62;
      intArray0[7] = 0;
      intArray0[8] = 4905;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-540.9039407103);
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 309.10689;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.801439877791744E16, 292577.0730759318, Double.POSITIVE_INFINITY, 95547.06944547211, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 287;
      intArray0[3] = 2922;
      intArray0[4] = (-3589);
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 0, 287, 2922, (-3589), 0}, intArray1);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.linearCombination((-0.9989422789463738), (-0.9989422789463738), 1.34217729E8, (-0.9989422789463738));
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Object>>) null, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = (-944.910819);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {2.0, Double.NaN, (-20.0), (-944.910819)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 720.0436337816559;
      doubleArray0[1] = 0.0;
      double double0 = (-254.18536346);
      doubleArray0[2] = (-254.18536346);
      double double1 = 340.48910920211;
      doubleArray0[3] = 340.48910920211;
      doubleArray0[4] = (-2195.8);
      double double2 = 0.0;
      doubleArray0[5] = 0.0;
      double double3 = (-1.0);
      doubleArray0[6] = (-1.0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (720.044 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2908.059990127);
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1547.89738;
      doubleArray0[3] = (-435.00152949797);
      doubleArray0[4] = (-44.233309);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray1);
      int[] intArray0 = new int[3];
      intArray0[0] = 3602;
      intArray0[1] = 0;
      intArray0[2] = 1;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
