/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 06:15:55 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g##?";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ")";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-4612.936575);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 32768);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(32768, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, (-4612.936575)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      MathArrays.normalizeArray(doubleArray1, 1.0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(346.0);
      assertEquals(346.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("$VALUES").when(field0).getZero();
      int int0 = 11;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 11;
      floatArray0[1] = (float) 11;
      floatArray0[2] = (float) 11;
      floatArray0[3] = (float) 11;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {11.0F, 11.0F, 11.0F, 11.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 84);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = Integer.getInteger("", (-2641));
      assertEquals((-2641), (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 11);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 11;
      doubleArray0[3] = (double) 11;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 4.23719669792332E-8;
      doubleArray0[3] = 4.069660531168222E19;
      doubleArray0[4] = (-0.7853981633974483);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 4.23719669792332E-8, 4.069660531168222E19, (-0.7853981633974483)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 4.069660531168222E19);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, 4.23719669792332E-8, 4.069660531168222E19, (-0.7853981633974483)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 9.87564678092843E18, 3.2089768351232366E-8, 3.0820958530753786E19, (-0.5948094205600546)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-831.65036268);
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-831.65036268), 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {691642.3257457755, (-6.37709498103024E-17), 1.4699556E-39}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(691642.3257457755, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-5.752045910513128E8), 2.6517566769093032E-14}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-5.752045910513128E8), 2.6517566769093032E-14}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {691642.3257457755, (-6.37709498103024E-17), 1.4699556E-39}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.978358411343777E14), 5.5022014659883174E-8, (-2.5365756292847614E-30), 3.8979645770602207E-53}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertEquals(3.978358411343777E14, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-5.752045910513128E8), 2.6517566769093032E-14}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {691642.3257457755, (-6.37709498103024E-17), 1.4699556E-39}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.978358411343777E14), 5.5022014659883174E-8, (-2.5365756292847614E-30), 3.8979645770602207E-53}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Pair<String, String> pair0 = new Pair<String, String>("if4OL\"~Ml;>d@&f ", "if4OL\"~Ml;>d@&f ");
      assertNotNull(pair0);
      
      Pair<String, String> pair1 = new Pair<String, String>(pair0);
      assertNotNull(pair1);
      assertTrue(pair1.equals((Object)pair0));
      
      Double double0 = new Double(891.04);
      assertEquals(891.04, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 11, (-15));
      assertNotSame(pair0, pair1);
      assertNotSame(pair1, pair0);
      assertNotNull(objectArray0);
      assertEquals(11, objectArray0.length);
      assertTrue(pair0.equals((Object)pair1));
      assertTrue(pair1.equals((Object)pair0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-15);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -15 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-360.77066F);
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      floatArray0[3] = (-1902.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1845.2195F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-360.77066F), Float.NEGATIVE_INFINITY, (-1902.0F), 0.0F, (-1845.2195F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1845.2195F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[6] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1845.219482421875), 0.0, 0.0, 0.0, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-360.77066F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 932.513283;
      doubleArray0[2] = 1.63E18;
      double[] doubleArray1 = MathArrays.scale(1.63E18, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.51999665129E21, 2.6569E36}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[8][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray2;
      doubleArray3[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.6569E36, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.51999665129E21, 2.6569E36}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray4);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray4.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.51999665129E21, 2.6569E36}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 189;
      intArray0[1] = 134217729;
      intArray0[2] = (-2126);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {189, 134217729, (-2126)}, intArray0);
      assertArrayEquals(new int[] {189, 134217729, (-2126)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false, false);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 932.513283, 1.63E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-2100);
      intArray0[1] = 134217729;
      intArray0[2] = (-1);
      intArray0[3] = 58;
      int[] intArray1 = MathArrays.copyOf(intArray0, 58);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(58, intArray1.length);
      assertArrayEquals(new int[] {(-2100), 134217729, (-1), 58}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 302.967;
      doubleArray0[1] = (-3165.610964);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 302.967);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {302.967, (-3165.610964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-32.064414661173004), 335.031414661173}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-3165.610964);
      doubleArray2[1] = (Double) 302.967;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {302.967, (-3165.610964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-32.064414661173004), 335.031414661173}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkOrder(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {302.967, (-3165.610964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-32.064414661173004), 335.031414661173}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-1070293.5790524913), double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {302.967, (-3165.610964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-32.064414661173004), 335.031414661173}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {302.967, (-3165.610964)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-32.064414661173004), 335.031414661173}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1028.1266875636463, (-21485.172408430495), 112246.04880986686}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2147483540));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2142697887);
      intArray0[1] = 1112;
      intArray0[2] = (-238);
      intArray0[3] = 5089;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 5089;
      intArray1[1] = 1112;
      intArray1[2] = 1112;
      intArray1[3] = (-2142697887);
      intArray1[4] = (-1814);
      intArray1[5] = (-238);
      intArray1[6] = 1112;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-9559994), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      assertArrayEquals(new int[] {(-2142697887), 1112, (-238), 5089}, intArray0);
      assertArrayEquals(new int[] {5089, 1112, 1112, (-2142697887), (-1814), (-238), 1112}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1112;
      doubleArray0[1] = (double) (-238);
      doubleArray0[2] = (double) (-2142697887);
      doubleArray0[3] = (double) (-2142697887);
      doubleArray0[4] = (double) (-238);
      doubleArray0[5] = (double) (-2142697887);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1112.0, (-238.0), (-2.142697887E9), (-2.142697887E9), (-238.0), (-2.142697887E9)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-297.802F);
      floatArray0[1] = (-2746.0F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2746.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {(-297.802F), (-2746.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2746.0F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-2746.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-297.802F);
      doubleArray0[4] = (double) (-297.802F);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) (-297.802F);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2746.0), 0.0, (-297.802001953125), (-297.802001953125), 0.0, (-297.802001953125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 7540516.0, 0.0, 88686.03236728907, 88686.03236728907, 0.0, 88686.03236728907}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2200.886753601912);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-2200.886753601912)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4843902.502180363}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 132.0;
      doubleArray0[1] = (-14.788298);
      doubleArray0[2] = 2615.9860625657993;
      doubleArray0[3] = (-5536.222395957465);
      doubleArray0[4] = (-4.9E-324);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6124.604819153417, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {132.0, (-14.788298), 2615.9860625657993, (-5536.222395957465), (-4.9E-324)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (132 >= -14.788)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(2146432521);
      assertEquals(2146432521, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2146432521);
      assertEquals(2.146432521E9, (double)double0, 0.01);
      assertNotNull(double0);
      
      Pair<Object, Object> pair0 = new Pair<Object, Object>(class0, double0);
      assertNotNull(pair0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int[] intArray0 = new int[2];
      intArray0[0] = 1687;
      intArray0[1] = 1687;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1687, 1687}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1687;
      floatArray0[1] = (float) 1687;
      floatArray0[2] = (float) 1687;
      floatArray0[3] = (float) 1687;
      floatArray0[4] = (float) 1687;
      floatArray0[5] = (float) 1687;
      floatArray0[6] = (float) 1687;
      floatArray0[7] = (float) 1687;
      floatArray0[8] = (float) 1687;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1687, 1687);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146862994;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146862994);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int[] intArray0 = new int[2];
      intArray0[0] = 1687;
      intArray0[1] = 1687;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1687, 1687}, intArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1687;
      floatArray0[1] = (float) 1687;
      floatArray0[2] = (float) 1687;
      floatArray0[3] = (float) 1687;
      floatArray0[4] = (float) 1687;
      floatArray0[5] = (float) 1687;
      floatArray0[6] = (float) 1687;
      floatArray0[7] = (float) 1687;
      floatArray0[8] = (float) 1687;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F, 1687.0F}, floatArray0, 0.01F);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1687, 1687);
      assertNotNull(objectArray0);
      assertEquals(1687, objectArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1687.0F;
      doubleArray0[1] = (double) 1687.0F;
      doubleArray0[2] = (double) 1687.0F;
      doubleArray0[3] = (double) 1687.0F;
      doubleArray0[4] = (double) 1687.0F;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1687.0, 1687.0, 1687.0, 1687.0, 1687.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1225.3973F);
      floatArray0[3] = (-1503.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = Float.NaN;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1225.3973F), (-1503.0F), 0.0F, (-1.0F), (-1.0F), Float.NaN, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 693.9F;
      floatArray0[1] = 1381.8953F;
      floatArray0[2] = 1381.8953F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {693.9F, 1381.8953F, 1381.8953F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-3810.5173F);
      floatArray0[1] = 603.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-3810.5173F);
      floatArray0[5] = (-521.1F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1551.47F);
      floatArray0[8] = 2381.6118F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-3810.5173F), 603.0F, 0.0F, 0.0F, (-3810.5173F), (-521.1F), 0.0F, (-1551.47F), 2381.6118F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "d";
      stringArray0[1] = "->\bC_];SDsRk";
      stringArray0[2] = "b?";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "";
      stringArray0[6] = "*c!xDw";
      stringArray0[7] = "AFYzR5v:";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 9;
      intArray0[1] = 180;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 9;
      intArray1[1] = 9;
      intArray1[2] = 133;
      intArray1[3] = 180;
      intArray1[4] = 9;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(171, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {9, 180}, intArray0);
      assertArrayEquals(new int[] {9, 9, 133, 180, 9}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = Double.NaN;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 2313;
      intArray0[2] = 0;
      intArray0[3] = (-1719);
      intArray0[4] = 43;
      int int0 = 3365;
      intArray0[5] = 3365;
      intArray0[6] = 8;
      int int1 = 1133;
      intArray0[7] = 1133;
      int int2 = (-2031);
      intArray0[8] = (-2031);
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int3);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {134217729, 2313, 0, (-1719), 43, 3365, 8, 1133, (-2031)}, intArray0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 134217729;
      doubleArray0[2] = (double) 43;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.801439877791744E16, 1.1542724694E10, 1849.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 43.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.68435458E8, 86.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.34217729E8, 43.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-2031);
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1.304E19);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1842.26;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 1842.26}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 1842.26}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(1.4142135623730951, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 1842.26}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.4142135623730951;
      doubleArray2[1] = (-1.0);
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(1843.2615810099023, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {(-1.0), 1842.26}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4142135623730951, (-1.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4472.483803647832);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-4472.483803647832)}, doubleArray0, 0.01);
      
      Field<Pair<Integer, FieldElement<Double>>> field0 = (Field<Pair<Integer, FieldElement<Double>>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4), (-4));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3391.56;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4.503599627370496E15);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-1188.48);
      doubleArray0[5] = 1595.52694;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean1);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3391.56, 0.0, (-4.503599627370496E15), 1.0, (-1188.48), 1595.52694}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long[] longArray0 = new long[5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-3766.19103);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-3766.19103)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1020.22217F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      float float0 = (-3378.9824F);
      floatArray1[1] = (-3378.9824F);
      floatArray1[2] = (-1020.22217F);
      floatArray1[3] = (-1020.22217F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-1020.22217F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-3378.9824F), (-1020.22217F), (-1020.22217F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("gKv9hJ06jiLVO{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.gKv9hJ06jiLVO{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1953;
      intArray0[1] = 2967;
      intArray0[2] = 192;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = 201;
      intArray0[5] = 174;
      intArray0[6] = (-1176);
      intArray0[7] = (-3446);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {1953, 2967, 192, Integer.MAX_VALUE, 201, 174, (-1176), (-3446)}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long[][] longArray0 = new long[1][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1621;
      doubleArray0[1] = (double) 1621;
      doubleArray0[2] = (double) 1621;
      doubleArray0[3] = (double) 1621;
      doubleArray0[4] = (double) 1621;
      doubleArray0[5] = 1592.1455602594874;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 9218868437227405312L;
      floatArray0[1] = (float) 9218868437227405312L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 9218868437227405312L;
      floatArray0[5] = (float) 9218868437227405312L;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 9.2188684E18F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.2188684372274053E18}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.checkOrder(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(904.6527622, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(10, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][6];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      double double1 = (-1482.645);
      double double2 = MathArrays.linearCombination(1778.8, 0.0, 1989.75176, (-1482.645), (-1482.645), 1989.75176);
      assertEquals((-5900190.996410401), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "";
      stringArray0[2] = ">*@\"IID?vWQpHo<";
      stringArray0[3] = "7~";
      stringArray0[4] = "W>_\"Te3S8";
      stringArray0[5] = "";
      stringArray0[6] = "LT*lG>-";
      stringArray0[7] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-312.87);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-312.87));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-312.87)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-312.87)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 8388608;
      intArray0[1] = 1621;
      intArray0[2] = 1617;
      intArray0[3] = 1617;
      intArray0[4] = (-1066);
      intArray0[5] = Integer.MAX_VALUE;
      intArray0[6] = 1;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 8388608;
      intArray1[1] = 1;
      intArray1[2] = 1617;
      intArray1[3] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][3];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NaN;
      doubleArray0[4] = doubleArray1;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(1.34217729E8, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145485988, 1599);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[4];
      floatArray0[1] = 716.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 716.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      double double0 = new Double(0.0F);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-4075.11);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4075.11), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4075.11), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean2);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Q:Z";
      stringArray0[1] = "p,bF>zebBW ";
      stringArray0[2] = ".w(O?PKM $";
      stringArray0[3] = "*m0<TDdPP$Jk~w7mo";
      stringArray0[4] = "";
      stringArray0[5] = "BB)C]IYi";
      stringArray0[6] = "d;o`[";
      stringArray0[7] = "Y WRD!";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-3239.823F);
      floatArray0[2] = (float) 9218868437227405312L;
      floatArray0[3] = (float) 9218868437227405312L;
      floatArray0[4] = (float) 9218868437227405312L;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1074L;
      floatArray1[1] = (float) 9218868437227405312L;
      floatArray1[2] = (-3239.823F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1074.0F, 9.2188684E18F, (-3239.823F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-3239.823F), 9.2188684E18F, 9.2188684E18F, 9.2188684E18F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BN";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$2";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 759.2F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.4E-45F, (-1.0F), 759.2F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1595.52694;
      doubleArray0[1] = 1595.52694;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1595.52694, 1595.52694, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-477);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-477)}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-477);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2720);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4489.376F;
      floatArray0[3] = (-1017.31F);
      floatArray0[4] = 1011.034F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 4489.376F, (-1017.31F), 1011.034F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      double double2 = MathArrays.linearCombination(1335.013, (double) (-1.0F), (double) 0.0F, (double) (-1.0F), 0.9974949359893799, (double) 0.0F);
      assertEquals((-1335.013), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 9218868437227405312L;
      floatArray0[1] = (float) 1621;
      floatArray0[2] = (float) 1621;
      floatArray0[3] = (float) 9218868437227405312L;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {9.2188684E18F, 1621.0F, 1621.0F, 9.2188684E18F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1621;
      intArray0[1] = 1621;
      intArray0[2] = 2549;
      intArray0[3] = 1621;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1621, 1621, 2549, 1621}, intArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1621, 1621, 2549, 1621}, intArray0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2146862994;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2146862994);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 854;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 854;
      longArray1[1] = (long) 854;
      longArray1[2] = (long) 854;
      longArray1[3] = (long) 854;
      longArray1[4] = (long) 854;
      longArray1[5] = (long) 854;
      longArray1[6] = (long) 854;
      longArray1[7] = (long) 854;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 854;
      longArray2[1] = (long) 854;
      longArray2[2] = 854L;
      longArray2[3] = (long) 854;
      longArray2[4] = 2047L;
      longArray2[5] = (long) 854;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[5][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,621
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(1169.69352, 1169.69352, 484.86540455, 1169.69352, 1600.0, 1169.69352, (-313.0), (-1.0));
      assertEquals(3807149.484504304, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3365;
      intArray0[1] = (-3674);
      intArray0[2] = 2;
      intArray0[3] = 3365;
      intArray0[4] = 3365;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3365, (-3674), 2, 3365, 3365}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3365, (-3674), 2, 3365, 3365}, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3365;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 3365;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3365.0, 2.0, 3365.0}, doubleArray2, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-313.0);
      doubleArray3[1] = (double) (-3674);
      doubleArray3[2] = 2115.06;
      doubleArray3[3] = (double) 3365;
      doubleArray3[4] = (-313.0);
      try { 
        MathArrays.linearCombination(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = (-388.521555214);
      doubleArray0[2] = 409.402762;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (double) 10;
      doubleArray0[5] = (double) 10;
      doubleArray0[6] = (double) 10;
      doubleArray0[7] = (double) 10;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {10.0, (-388.521555214), 409.402762, 3.834E-20, 10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(0.008336750013465571, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {10.0, (-388.521555214), 409.402762, 3.834E-20, 10.0, 10.0, 10.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.08336750013465571, (-3.239007080661979), 3.413088481616342, 3.1963099551627E-22, 0.08336750013465571, 0.08336750013465571, 0.08336750013465571, 0.08336750013465571}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {10.0, 409.402762, 10.0, 10.0, (-388.521555214), 3.834E-20, 10.0, 10.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {10.0, 409.402762, 10.0, 10.0, (-388.521555214), 3.834E-20, 10.0, 10.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.08336750013465571, 0.08336750013465571, 0.08336750013465571, 0.08336750013465571, 3.413088481616342, 0.08336750013465571, (-3.239007080661979), 3.1963099551627E-22}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -388.522 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2053.0);
      doubleArray0[1] = (-2053.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2053.0), (-2053.0)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2053.0), (-2053.0)}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3529);
      intArray0[1] = 2461;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3529), 2461}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-2053.0), (-2053.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1093.99399);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1093.99399)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1093.99399)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray2);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 854;
      floatArray0[2] = (float) 854;
      floatArray0[3] = (float) 854;
      floatArray0[4] = (float) 854;
      floatArray0[5] = (float) 854;
      floatArray0[6] = (float) 854;
      floatArray0[7] = (float) 854;
      boolean boolean3 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean3);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 854.0F, 854.0F, 854.0F, 854.0F, 854.0F, 854.0F, 854.0F}, floatArray0, 0.01F);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[0];
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(10, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[18];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[1] = (double) 10;
      doubleArray2[2] = (double) 10;
      double double1 = 2835.0;
      doubleArray2[3] = 2835.0;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 18 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-743));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3159;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(10, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 10;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2148.0;
      doubleArray0[1] = 2148.0;
      doubleArray0[2] = (-173.2785788);
      double[] doubleArray1 = MathArrays.scale(2148.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {2148.0, 2148.0, (-173.2785788)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4613904.0, 4613904.0, (-372202.3872624)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 5456;
      intArray0[1] = (-2604);
      intArray0[2] = (-71);
      intArray0[3] = 1608;
      intArray0[4] = 2084;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1608;
      intArray1[1] = 1608;
      intArray1[2] = 5456;
      intArray1[3] = (-2604);
      intArray1[4] = 1608;
      intArray1[5] = (-2604);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(9003.515813280943, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {5456, (-2604), (-71), 1608, 2084}, intArray0);
      assertArrayEquals(new int[] {1608, 1608, 5456, (-2604), 1608, (-2604)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.linearCombination((-2308.3965282), (double) 2084, 2283.7818343092326, 6565.0, 4.991547374890962E19, 4.116164446561962E-8, (-3.7999795083850525E-8), (double) (-71));
      assertEquals(2.0546131661149648E12, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(10, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 10;
      floatArray0[1] = (float) 10;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 10;
      floatArray1[1] = (float) 10;
      floatArray1[2] = (float) 10;
      floatArray1[3] = (float) 10;
      floatArray1[4] = (float) 10;
      floatArray1[5] = (float) 10;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {10.0F, 10.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {10.0F, 10.0F, 10.0F, 10.0F, 10.0F, 10.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(10, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "(6\"Q9uns>12nT4";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-81.0);
      doubleArray3[1] = (double) 10;
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray3);
      assertFalse(boolean1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-81.0), 10.0}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1.0F), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1621;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".iG@6i7'3t-";
      stringArray0[1] = "a+q06cM{4uVt";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1621;
      floatArray0[1] = (float) 1621;
      floatArray0[2] = (float) 1621;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 9218868437227405312L;
      floatArray0[5] = (float) 9218868437227405312L;
      floatArray0[6] = (float) 1074L;
      floatArray0[7] = (float) 1621;
      floatArray0[8] = (float) 1621;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1621.0F, 1621.0F, 1621.0F, 0.0F, 9.2188684E18F, 9.2188684E18F, 1074.0F, 1621.0F, 1621.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1074L;
      floatArray0[1] = (float) 1074L;
      floatArray0[2] = (float) 9218868437227405312L;
      floatArray0[3] = (float) 1074L;
      floatArray0[4] = (float) 1074L;
      floatArray0[5] = (float) 9218868437227405312L;
      floatArray0[6] = (float) 9218868437227405312L;
      floatArray0[7] = (float) 1074L;
      floatArray0[8] = 1718.3049F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1074.0F, 1074.0F, 9.2188684E18F, 1074.0F, 1074.0F, 9.2188684E18F, 9.2188684E18F, 1074.0F, 1718.3049F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = (double) 9.2188684E18F;
      doubleArray0[2] = (double) 1074.0F;
      doubleArray0[3] = (double) 9.2188684E18F;
      doubleArray0[4] = (double) 1718.3049F;
      doubleArray0[5] = (double) 1074.0F;
      doubleArray0[6] = (double) 1074.0F;
      doubleArray0[7] = (double) 9218868437227405312L;
      doubleArray0[8] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1049.2264440558);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {193.78120294454092, 193.78120294454092, 2.2575548548020043E-14, 193.78120294454092, 3.611887933385027E-14, 2.2575548548020043E-14, 2.2575548548020043E-14, 193.78120294454092, 274.10163227763627}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.2188684372274053E18, 9.2188684372274053E18, 1074.0, 9.2188684372274053E18, 1718.304931640625, 1074.0, 1074.0, 9.2188684372274053E18, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {193.78120294454092, 193.78120294454092, 2.2575548548020043E-14, 193.78120294454092, 3.611887933385027E-14, 2.2575548548020043E-14, 2.2575548548020043E-14, 193.78120294454092, 274.10163227763627}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.2188684372274053E18, 9.2188684372274053E18, 1074.0, 9.2188684372274053E18, 1718.304931640625, 1074.0, 1074.0, 9.2188684372274053E18, 1.304E19}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (9,218,868,437,227,405,300 <= 9,218,868,437,227,405,300)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UE!f6wp2n";
      stringArray0[1] = "dH[fp*";
      stringArray0[2] = "string \"{0}\" unparseable (from position {1})";
      stringArray0[3] = "no data";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 9218868437227405312L;
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[2] = (double) 9218868437227405312L;
      doubleArray0[3] = (double) 1074L;
      doubleArray0[4] = (double) 9218868437227405312L;
      doubleArray0[5] = (double) 9218868437227405312L;
      doubleArray0[6] = (double) 1074L;
      doubleArray0[7] = (double) 1074L;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.843773687445481E19, 1.843773687445481E19, 1.843773687445481E19, 2148.0, 1.843773687445481E19, 1.843773687445481E19, 2148.0, 2148.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.2188684372274053E18, 9.2188684372274053E18, 9.2188684372274053E18, 1074.0, 9.2188684372274053E18, 9.2188684372274053E18, 1074.0, 1074.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 163;
      intArray0[1] = (-1109);
      intArray0[2] = 490;
      intArray0[3] = 1297;
      intArray0[4] = 223;
      int int0 = (-829);
      intArray0[5] = (-829);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {163, (-1109), 490, 1297, 223, (-829)}, intArray0);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-829);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 215);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(215, doubleArray1.length);
      assertArrayEquals(new double[] {(-829.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {163, (-1109), 490, 1297, 223, (-829)}, intArray0);
      assertArrayEquals(new int[] {163, (-1109), 490, 1297, 223, (-829)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-829.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int2);
      assertNotSame(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {163, (-1109), 490, 1297, 223, (-829)}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int[] intArray2 = MathArrays.copyOf(intArray0, 223);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotNull(intArray2);
      assertEquals(223, intArray2.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {163, (-1109), 490, 1297, 223, (-829)}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(215, doubleArray1.length);
      assertArrayEquals(new double[] {(-829.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(223, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(215, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(215, doubleArray1.length);
      assertArrayEquals(new double[] {(-829.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1074L;
      doubleArray0[1] = (double) 1074L;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1074.0, 1074.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 854;
      intArray0[1] = 1314;
      intArray0[2] = 715;
      intArray0[3] = (-2050);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 715;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {715.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {715.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(715.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {715.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(714.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {715.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1595.52694;
      doubleArray0[0] = 1595.52694;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-2830.0);
      int int0 = 3159;
      int int1 = (-1301);
      int int2 = 1;
      int[] intArray0 = new int[5];
      intArray0[0] = (-1301);
      intArray0[1] = 1;
      intArray0[2] = (-1301);
      intArray0[3] = (-1301);
      intArray0[4] = 3159;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      Double double0 = new Double((-3486.4538822448));
      assertEquals((-3486.4538822448), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-215.19728F);
      floatArray0[1] = (-215.19728F);
      floatArray0[2] = 4360.268F;
      floatArray0[3] = (-215.19728F);
      floatArray0[4] = (-215.19728F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-215.19728F), (-215.19728F), 4360.268F, (-215.19728F), (-215.19728F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 120);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(120, intArray1.length);
      assertArrayEquals(new int[] {2, 2}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      FieldElement<Double>[] fieldElementArray0 = MathArrays.buildArray(field0, 2);
      assertNotNull(fieldElementArray0);
      assertEquals(2, fieldElementArray0.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-30);
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = 2;
      intArray2[5] = 2;
      intArray2[6] = 2;
      intArray2[7] = 2;
      int int0 = MathArrays.distance1(intArray2, intArray2);
      assertEquals(0, int0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(8, intArray2.length);
      assertArrayEquals(new int[] {(-30), 2, 2, 2, 2, 2, 2, 2}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray1 = new long[5][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(5, longArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(1621, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 0L}, longArray0);
      
      long[][] longArray1 = new long[2][6];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 743.2505569580638;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "te+2yN3,yj";
      stringArray0[2] = "";
      stringArray0[3] = "=ssOZo(i9/D";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {743.2505569580638, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1486.5011139161277, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "N";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 701.3162988201;
      doubleArray2[1] = (-505.99666842085);
      doubleArray2[7] = (-1335.013);
      doubleArray2[1] = (-505.99666842085);
      doubleArray2[4] = (-505.99666842085);
      doubleArray2[5] = 701.3162988201;
      doubleArray2[6] = (-505.99666842085);
      doubleArray2[7] = 3.834E-20;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 0L}, longArray0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1621;
      doubleArray0[1] = (double) 1074L;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 9218868437227405312L;
      doubleArray1[1] = (double) 9218868437227405312L;
      doubleArray1[2] = (double) 9218868437227405312L;
      doubleArray1[3] = 1776.9341317;
      doubleArray1[4] = (double) 1074L;
      doubleArray1[5] = 1223.48912936;
      doubleArray1[6] = (double) 1074L;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1.4943785736745624E22, 2.4844850438327857E22, 2.4844850438327857E22, 9.901064701582235E21, 3649381.2574458, 3136751.87869256, 3054981.3249326404, 1153476.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1621.0, 1074.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.2188684372274053E18, 9.2188684372274053E18, 9.2188684372274053E18, 1776.9341317, 1074.0, 1223.48912936, 1074.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      Double double0 = new Double((-3486.4538822448));
      assertEquals((-3486.4538822448), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-215.19728F);
      floatArray0[1] = (-215.19728F);
      floatArray0[2] = 4360.268F;
      floatArray0[3] = (-215.19728F);
      floatArray0[4] = (-215.19728F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-215.19728F), (-215.19728F), 4360.268F, (-215.19728F), (-215.19728F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Double>> field0 = (Field<FieldElement<Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Double>[] fieldElementArray0 = MathArrays.buildArray(field0, 2);
      assertNotNull(fieldElementArray0);
      assertEquals(2, fieldElementArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-30);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2294.4917501971);
      doubleArray0[3] = 701.3162988201;
      doubleArray0[4] = (-1335.013);
      doubleArray0[5] = (-505.99666842085);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(20, doubleArray0.length);
      assertEquals(20, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OKypmmA:0<";
      stringArray0[1] = "OKypmmA:0<";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "number of interpolation points ({0})";
      stringArray0[4] = "covariance matrix";
      stringArray0[5] = "N";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      assertEquals(20, doubleArray0.length);
      assertEquals(20, doubleArray2.length);
      assertEquals(20, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      Double double0 = new Double((-3486.4538822448));
      assertEquals((-3486.4538822448), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-215.19728F);
      floatArray0[1] = (-215.19728F);
      floatArray0[2] = 4360.268F;
      double double1 = MathArrays.linearCombination((double) 4360.268F, (double) (-215.19728F), (-4503.134), 347.7917, (-883.1447), 1600.0);
      assertEquals((-3917501.9810028416), double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3615.0981);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 8.662678822125E-20, 3615.0981, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {0L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.scale(1074L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((double) 1621, (double) 1074L, 2729.3388933605, (double) 1074L, 0.366272509098053, 1.0, (-2762.52249676), (-283.1126));
      assertEquals(5454369.264357901, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-2677);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2677), (-2677));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      int int0 = 1621;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1621, 1621);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2787.221555);
      doubleArray0[1] = (-2787.221555);
      doubleArray0[2] = (-2787.221555);
      doubleArray0[3] = (-2787.221555);
      doubleArray0[4] = (-2787.221555);
      doubleArray0[5] = (-2787.221555);
      doubleArray0[6] = (-2787.221555);
      doubleArray0[7] = (-2787.221555);
      MathArrays.scaleInPlace((-2787.221555), doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618, 7768603.996656618}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[5];
      longArray1[0] = (-5773L);
      longArray1[1] = 0L;
      longArray1[2] = (-969L);
      longArray1[3] = (-1L);
      longArray1[4] = 9007199254740990L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      longArray0[2] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-969L);
      longArray2[1] = 0L;
      longArray2[2] = (-560L);
      longArray2[3] = 9007199254740990L;
      longArray2[4] = 0L;
      longArray0[3] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1073741824L);
      longArray3[1] = 9007199254740990L;
      longArray3[2] = 9007199254740990L;
      longArray3[3] = (-969L);
      longArray3[4] = 9007199254740990L;
      longArray3[5] = 0L;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1073741824L);
      longArray4[1] = (-1073741824L);
      longArray0[5] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {9218868437227405312L, 1074L}, longArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1621, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray2 = MathArrays.scale(1074L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[][] longArray1 = new long[6][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 1074L;
      longArray2[1] = (long) 1621;
      longArray2[2] = (long) (-287);
      longArray2[3] = 9218868437227405312L;
      longArray2[4] = 1074L;
      longArray1[2] = longArray2;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = 9218868437227405312L;
      longArray3[1] = (long) 1621;
      longArray3[2] = (long) (-287);
      longArray3[3] = (long) 1621;
      longArray3[4] = (long) (-287);
      longArray3[5] = 1074L;
      longArray3[6] = (long) 1621;
      longArray1[5] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2294.4917501971);
      doubleArray0[3] = 701.3162988201;
      doubleArray0[4] = (-1335.013);
      doubleArray0[5] = (-505.99666842085);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(20, doubleArray0.length);
      assertEquals(20, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OKypmmA:0<";
      stringArray0[1] = "TOO_SMALL_INTEGRATION_INTERVAL";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "number of interpolation points ({0})";
      stringArray0[4] = "covariance matrix";
      stringArray0[5] = "N";
      long[][] longArray0 = new long[0][8];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.304E19, (-20.0), (-1418.81045503), 0.0, 1884.63, (-1418.81045503), 3.834E-20, (-2279.7720871732));
      assertEquals((-2.608000000000027E20), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertTrue(int1 == int0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2576.5286F;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1600.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 2066.585F;
      floatArray0[1] = (-1912.7611F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 2064.4F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {2066.585F, (-1912.7611F), 0.0F, 0.0F, (-1.0F), 2064.4F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 3.834E-20, 1600.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 5.865827662008209E-8;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5.865827662008209E-8, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 5.865827662008209E-8, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertEquals(1.1731655324016419E-7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 5.865827662008209E-8, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 5.865827662008209E-8, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1120.8384F;
      floatArray0[3] = (-454.5115F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3000.279F);
      floatArray0[6] = (-2888.0F);
      floatArray0[7] = 1.0F;
      floatArray0[8] = (-1367.9688F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.5F, 0.0F, 1120.8384F, (-454.5115F), 0.0F, (-3000.279F), (-2888.0F), 1.0F, (-1367.9688F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      double double0 = 743.2505569580638;
      int int1 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 743.2505569580638;
      doubleArray0[4] = (double) 2;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 743.2505569580638, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 2.0, 743.2505569580638, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      int[] intArray0 = new int[3];
      intArray0[0] = 1581;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1581, 0, 0}, intArray0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1581;
      doubleArray1[1] = (double) 1581;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1.304E19, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1581.0, 1581.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((-880.35611839341), 2.0, (double) 1581, 1.304E19, 0.7316888570785522, (double) 0, 2254.1162309144, 2729.3388933605);
      assertEquals(2.0616240000000005E22, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1925.56;
      doubleArray0[0] = 1925.56;
      doubleArray0[1] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-109.4415), 683.94, 2136.7268038583475, 0.0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1581);
      double[][] doubleArray2 = new double[0][9];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      MathArrays.linearCombination(3707781.3136, 767.331168679, 1167.2, 478.53249, (-1808.1), 1167.2, 8.0E298, 508.5719003116333);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2294.4917501971);
      doubleArray0[3] = 701.3162988201;
      doubleArray0[4] = (-1335.013);
      doubleArray0[5] = (-505.99666842085);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OKypmmA:0<";
      stringArray0[1] = "TOO_SMALL_INTEGRATION_INTERVAL";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "number of interpolation points ({0})";
      stringArray0[4] = "covariance matrix";
      stringArray0[5] = "N";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.scale(1074L, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double1 = MathArrays.linearCombination((double) 1621, (double) 1074L, 2729.3388933605, (double) 1074L, 0.366272509098053, 1.0, (-2762.52249676), (-283.1126));
      assertEquals(5454369.264357901, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1312.1246), 1.0, 0.0, (-1312.1246));
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1312.1246);
      doubleArray1[4] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) (-2804);
      doubleArray3[1] = (double) (-2804);
      doubleArray1[5] = doubleArray3;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(3512.33578304477, (-2287.8), 3512.33578304477, 1.34217729E8, (-2287.8), (-2287.8));
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1675);
      intArray0[0] = (-1675);
      int int1 = (-860);
      intArray0[1] = (-860);
      intArray0[2] = 798;
      int int2 = (-1052);
      intArray0[3] = (-1052);
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-860), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1669.85409066;
      doubleArray0[1] = 347.7917;
      doubleArray0[2] = (-1159.4);
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 156.3F;
      floatArray0[1] = 90.63917F;
      floatArray0[2] = (-216.58163F);
      floatArray0[3] = (-1658.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-348.0F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,159.4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1925.556949;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1925.556949);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.0E-5, 1.3421772773731402E8, (-2036.195873412798), (-1.0), 0.0, 1.3421772773731402E8);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1240.9696127086);
      doubleArray0[1] = 2804.18;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,240.97 <= 2,804.18)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[1];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-477);
      doubleArray0[1] = 701.3162988201;
      doubleArray0[2] = (-274.7592075269299);
      doubleArray0[3] = (-1335.013);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-274.7592075269299), (-505.99666842085), (-1.0), (-1.0), 4.3466666666666665E18, 3.834E-20, (-203.897668539559), (-1418.81045503));
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = (-477);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-477);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 1925.556949;
      doubleArray0[0] = 1925.556949;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1925.556949);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1811);
      intArray0[3] = (-1811);
      intArray0[4] = 0;
      intArray0[5] = (-1811);
      intArray0[6] = (-1811);
      intArray0[7] = 0;
      intArray0[8] = (-1062);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1062));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1240.9696127086);
      doubleArray0[1] = 2804.18;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-4115.6731705113325);
      doubleArray0[5] = 743.2505569580638;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.linearCombination(0.0, 743.2505569580638, (-2074.45), Double.NaN);
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 2;
      longArray1[1] = (long) 2;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 2;
      longArray2[1] = (long) 2;
      longArray2[2] = (long) 2;
      longArray2[3] = (-3738L);
      longArray2[4] = (long) 2;
      longArray2[5] = (long) 2;
      longArray2[6] = (long) 2;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (long) 2;
      longArray3[1] = (-3738L);
      longArray3[2] = (long) 2;
      longArray3[3] = (-3738L);
      longArray3[4] = 0L;
      longArray3[5] = (-3738L);
      longArray3[6] = 0L;
      longArray3[7] = (long) 2;
      longArray3[8] = (-3738L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-3738L);
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = (-3738L);
      longArray2[2] = 0L;
      longArray5[6] = 0L;
      longArray5[7] = (long) 2;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = 1L;
      longArray6[2] = (long) 2;
      longArray6[3] = (long) 2;
      longArray6[4] = 0L;
      longArray6[5] = 1L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,738 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1595.52694;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-983.398510634);
      doubleArray0[6] = 1595.52694;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.distance(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[1];
      doubleArray0[3] = (double) (-2683.85F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.1337609379381584E-4, 1.3041210224308816E19, Double.NaN, (-1.8629952560936228E-4), Double.NaN, (-5.084408757927124E-4), 3.1337609379381584E-4, Double.NaN, Double.NaN}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-477);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-477);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2294.4917501971);
      doubleArray0[3] = 701.3162988201;
      doubleArray0[4] = (-1335.013);
      doubleArray0[5] = (-505.99666842085);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, (-1418.81045503), (-505.99666842085), (-505.99666842085), (-1.0), (-1.0), 701.3162988201, 3.834E-20);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[1];
      MathArrays.distance1(intArray1, intArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1595.52694;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-2830.0);
      doubleArray0[5] = (-983.398510634);
      doubleArray0[6] = (-1605.669805);
      MathArrays.linearCombination((-1605.669805), 1.7976931348623157E308, Double.NaN, 1926.556959, 1.7976931348623157E308, (-880.35611839341), (-2010.4368575645462), 5198.33195146);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("%`,-oi%#mP &7O~X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.%`,-oi%#mP &7O~X
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1110.874);
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4057;
      intArray0[1] = 3192;
      intArray0[2] = 113;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-2026);
      intArray0[6] = 0;
      intArray0[7] = 891;
      intArray0[8] = (-1384);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1806.34);
      doubleArray0[3] = (-488.5652718);
      doubleArray0[4] = (-2136.3248);
      doubleArray0[5] = 104.64;
      doubleArray0[6] = 3683.0163;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1240.9696127086);
      doubleArray0[1] = 2804.18;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-4115.6731705113325);
      doubleArray0[5] = 743.2505569580638;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.linearCombination(0.0, 743.2505569580638, (-2074.45), Double.NaN);
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[2];
      longArray1[0] = (long) 2;
      longArray1[1] = (long) 2;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 2;
      longArray2[1] = (long) 2;
      longArray2[2] = (long) 2;
      longArray2[3] = (-3738L);
      longArray2[4] = (long) 2;
      longArray2[5] = (long) 2;
      longArray2[6] = (long) 2;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (long) 2;
      longArray3[1] = (-3738L);
      longArray3[2] = (long) 2;
      longArray3[3] = (-3738L);
      longArray3[4] = 0L;
      longArray3[5] = (-3738L);
      longArray3[6] = 0L;
      longArray3[7] = (long) 2;
      longArray3[8] = (-3738L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = (-3738L);
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = (-3738L);
      longArray5[5] = 0L;
      longArray5[6] = 0L;
      longArray5[7] = (long) 2;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = 1L;
      longArray6[2] = (long) 2;
      longArray6[3] = (long) 2;
      longArray6[4] = 0L;
      longArray6[5] = 1L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,738 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2703.8586564627376);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.scale((-1540.2), doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-464.1949F);
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-464.1949F);
      doubleArray0[3] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3282.23;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3330.2395226599;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-458.6662724205655);
      doubleArray0[3] = (-27.5549781);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1194.41218232101);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.scaleInPlace(1.0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3330.2395226599;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = (-458.6662724205655);
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-1194.41218232101);
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(629.4701720867556, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2820.2F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 306;
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {306, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3512.33578304477);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3512.33578304477);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 161.833;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 3512.335925400177;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-1.0);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      MathArrays.linearCombination((-1.0), Double.NaN, (-91.28828), 3512.335925400177);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1925.56;
      doubleArray0[1] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-109.4415), 683.94, 2136.7268038583475, 0.0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1581);
      double[][] doubleArray2 = new double[0][9];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2677);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2677), (-2677));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 3253.920629903;
      doubleArray0[0] = 3253.920629903;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1925.556949;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1925.556949);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.linearCombination(1.0E-5, 1.34217729E8, (-2036.195873412798), (-1.0), 0.0, 1.34217729E8);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathArrays.linearCombination((-2231.0), (-2231.0), (-2287.8), (-2231.0), (-2287.8), (-2287.8));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2231.0);
      doubleArray0[1] = (-2231.0);
      doubleArray0[2] = 1.531547164E7;
      doubleArray0[3] = 1.531547164E7;
      doubleArray0[4] = (-2231.0);
      doubleArray0[5] = (-2231.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,231 <= -2,231)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1159.4);
      doubleArray0[1] = 2013.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-277.34854398);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 2013.0, (-277.34854398), Double.POSITIVE_INFINITY, 0.0, (-430.5669));
      MathArrays.linearCombination(1.7976931348623157E308, 1.0E-5, 1361.14175257, (-277.34854398), 1.7976931348623157E308, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1235);
      intArray0[1] = 1372;
      MathArrays.distanceInf(intArray0, intArray0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,159.4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1240.9696127086);
      doubleArray0[1] = 2804.18;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,240.97 <= 2,804.18)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2294.4917501971);
      doubleArray0[3] = 701.3162988201;
      doubleArray0[4] = (-1335.013);
      doubleArray0[5] = (-505.99666842085);
      doubleArray0[6] = (-274.7592075269299);
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, (-1418.81045503), (-505.99666842085), (-505.99666842085), (-1.0), (-1.0), 701.3162988201, 3.834E-20);
      assertEquals(256033.62845299963, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[0];
      MathArrays.distance1(intArray1, intArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 5262397.899972353, 492545.86728954385, 1780924.6971689998, 255526.63178457879, 75217.8629132996, 3.834E-20}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-711.21514739);
      doubleArray0[1] = 3464.0614311385716;
      doubleArray0[2] = (-729.70937);
      doubleArray0[3] = (-151.804492032557);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1422.2604;
      doubleArray1[1] = (-729.70937);
      doubleArray1[2] = 2255.404005588787;
      doubleArray1[3] = (-729.70937);
      doubleArray1[4] = 3464.0614311385716;
      doubleArray1[5] = (-711.21514739);
      doubleArray1[6] = 3464.0614311385716;
      doubleArray1[7] = 3464.0614311385716;
      doubleArray1[8] = 3464.0614311385716;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 854;
      intArray0[1] = 1314;
      intArray0[2] = 715;
      intArray0[3] = (-2053);
      intArray0[4] = 3159;
      intArray0[5] = (-1301);
      intArray0[6] = 0;
      intArray0[7] = 1;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (double) 3159, 2152.2337771203042, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 107.5019517201446;
      doubleArray0[1] = 2152.2337771203042;
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-201.0284219395313);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-2729.3388933605);
      doubleArray0[3] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3421772902790132E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 891.8147097070682;
      doubleArray0[1] = 891.8147097070682;
      doubleArray0[2] = 891.8147097070682;
      doubleArray0[3] = 891.8147097070682;
      doubleArray0[4] = 4989.0319157;
      doubleArray0[5] = 891.8147097070682;
      doubleArray0[6] = 891.8147097070682;
      MathArrays.scale(891.8147097070682, doubleArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = 1074L;
      longArray0[1] = (-3738L);
      long long0 = (-575L);
      longArray0[2] = (-575L);
      long long1 = 1949L;
      longArray0[3] = 1949L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,738 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-1312.1246), 1.0, 0.0, (-1312.1246));
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2804));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-1806.34);
      doubleArray0[4] = (-2136.3248);
      doubleArray0[5] = 104.64;
      doubleArray0[6] = 3683.0163;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[2];
      intArray0[0] = 1621;
      intArray0[1] = 1621;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 9218868437227405312L;
      doubleArray1[2] = (double) 9218868437227405312L;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 9218868437227405312L;
      long long0 = 1074L;
      longArray0[1] = 1074L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[0];
      int int0 = 1621;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1621);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1621;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray1);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-287);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1621, (-287));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-3548.321394454591);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = (-1811.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.32;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2576.5286F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1.0F));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = MathArrays.linearCombination(7043.0281, 1.304E19, 1.304E19, 1193.6418238648);
      assertEquals(1.0740617580719699E23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1.0F);
      MathArrays.scale(1.0F, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-1), 72);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distance(doubleArray0, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][7];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 1614);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1595.52694;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = (-2830.0);
      doubleArray0[5] = (-983.398510634);
      doubleArray0[6] = (-1605.669805);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-691.61584940652);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.distance(doubleArray1, doubleArray1);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2683.85F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2787.221555);
      doubleArray0[1] = 1489.1043;
      doubleArray0[2] = (-2787.221555);
      doubleArray0[3] = (-2787.221555);
      doubleArray0[4] = (-2787.221555);
      doubleArray0[5] = (-2787.221555);
      doubleArray0[6] = (-2787.221555);
      doubleArray0[7] = (-2787.221555);
      MathArrays.scaleInPlace((-2787.221555), doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[5];
      longArray1[0] = (-5773L);
      longArray1[1] = 0L;
      longArray1[2] = (-969L);
      longArray1[3] = (-1L);
      longArray1[4] = 9007199254740990L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-5773L);
      longArray2[1] = 0L;
      longArray2[2] = (-969L);
      longArray2[3] = 0L;
      longArray2[4] = (-969L);
      longArray2[5] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-1L);
      longArray3[1] = 9007199254740990L;
      longArray3[2] = (-1073741824L);
      longArray3[3] = (-5773L);
      longArray3[4] = (-5773L);
      longArray3[5] = (-969L);
      longArray3[6] = 0L;
      longArray3[7] = (-1L);
      longArray3[8] = (-969L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-969L);
      longArray4[1] = 0L;
      longArray4[2] = (-560L);
      longArray4[3] = 9007199254740990L;
      longArray4[4] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      longArray5[0] = (-1073741824L);
      longArray5[1] = 9007199254740990L;
      longArray5[2] = 9007199254740990L;
      longArray5[3] = (-969L);
      longArray5[4] = 9007199254740990L;
      longArray5[5] = 0L;
      longArray5[6] = (-969L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-1073741824L);
      longArray6[1] = (-1073741824L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 854;
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int0 = (-1);
      int int1 = 72;
      int int2 = 942;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 942, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      double double1 = (-2205.037);
      doubleArray0[1] = (-2205.037);
      doubleArray0[2] = (-3302.3782794599);
      MathArrays.equals(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1825);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1825));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1110.874);
      MathArrays.equals(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-477);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) (-477);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-477);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-477);
      doubleArray1[1] = (double) (-477);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.828818E-17), 227529.0, 227529.0, 0.0, 0.0, 227529.0, 227529.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1852.948;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,852.948 >= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2427.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2323.6455941228);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2762.52249676);
      doubleArray0[1] = 1.34217729E8;
      double double0 = (-836.14);
      doubleArray0[2] = (-836.14);
      double double1 = (-812.883074991);
      doubleArray0[3] = (-812.883074991);
      double double2 = 0.0;
      doubleArray0[4] = 0.0;
      double double3 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= -836.14)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1094.290633567;
      doubleArray0[1] = 260.087182094682;
      doubleArray0[2] = 970.05607;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1681.78199394275);
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = (-1661.235684);
      doubleArray0[8] = 5131.945345088892;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1978.2945553);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-150.05792636341);
      doubleArray0[5] = 1600.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 959.82287677;
      doubleArray0[8] = (-1809.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 208.511117293;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 3.141592653589793;
      doubleArray2[6] = 1.0;
      doubleArray2[7] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
