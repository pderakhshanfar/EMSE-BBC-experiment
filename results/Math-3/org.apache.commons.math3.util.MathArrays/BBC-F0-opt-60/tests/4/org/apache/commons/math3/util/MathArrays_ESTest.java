/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:35:53 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483531, 232);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 119;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(119);
      assertEquals(119.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = new Double(955.44407639);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(955.44407639, (double)double1, 0.01);
      assertNotNull(double1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (double) 119;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-4124.21833076572);
      doubleArray0[4] = (double) 119;
      doubleArray0[5] = (-4124.21833076572);
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {3.834E-20, 119.0, 3.834E-20, (-4124.21833076572), 119.0, (-4124.21833076572)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 119);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 119, 232);
      assertNotNull(objectArray0);
      assertEquals(119, objectArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-4124.21833076572);
      doubleArray0[2] = (-4124.21833076572);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, (-4124.21833076572), (-4124.21833076572), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, (-1.5812253080155768E-16), (-1.5812253080155768E-16), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.236190275763203E-16, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {3.834E-20, (-4124.21833076572), (-4124.21833076572), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, (-1.5812253080155768E-16), (-1.5812253080155768E-16), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray2.length);
      assertArrayEquals(new double[] {3.834E-20, (-4124.21833076572), (-4124.21833076572), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1113.7239F;
      floatArray0[2] = 463.8329F;
      floatArray0[3] = (-2992.38F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 3097.325F;
      floatArray0[6] = 1.4E-45F;
      floatArray0[7] = (-658.31744F);
      floatArray0[8] = (-5159.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1113.7239F, 463.8329F, (-2992.38F), 0.0F, 3097.325F, 1.4E-45F, (-658.31744F), (-5159.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 463.8329F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 3097.325F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3131.8626724439537, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.401298464324817E-45, (-1.0), 463.8328857421875, 1.401298464324817E-45, 0.0, 3097.324951171875}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(13, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.401298464324817E-45, (-1.0), 463.8328857421875, 1.401298464324817E-45, 0.0, 3097.324951171875}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 0.0;
      double double0 = 436.477572231;
      doubleArray0[1] = 436.477572231;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(436.477572231, double1, 0.01);
      assertEquals(15, doubleArray0.length);
      
      double[][] doubleArray1 = new double[5][0];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 436.477572231;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 242.0;
      doubleArray0[1] = 1167.412639607587;
      doubleArray0[2] = 4255.239481;
      doubleArray0[3] = 1464.902808;
      doubleArray0[4] = 20.99214428;
      doubleArray0[5] = 1.8014720341498956E16;
      doubleArray0[6] = (-1204.120982089);
      doubleArray0[7] = (-2233.8624);
      doubleArray0[8] = (-1.7976931348623157E308);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {242.0, 1167.412639607587, 4255.239481, 1464.902808, 20.99214428, 1.8014720341498956E16, (-1204.120982089), (-2233.8624), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {58564.0, 1362852.2711155536, 1.8107063040661145E7, 2145940.236886285, 440.6701214723368, 3.245301489824163E32, 1449907.3395069782, 4990141.22213376, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[2];
      int int0 = 2147108016;
      intArray0[0] = 2147108016;
      int int1 = 134217729;
      intArray0[1] = 134217729;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {2147108016, 134217729}, intArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {242.0, 1167.412639607587, 4255.239481, 1464.902808, 20.99214428, 1.8014720341498956E16, (-1204.120982089), (-2233.8624), (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {58564.0, 1362852.2711155536, 1.8107063040661145E7, 2145940.236886285, 440.6701214723368, 3.245301489824163E32, 1449907.3395069782, 4990141.22213376, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147108016, 2147108016);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-1424.3);
      doubleArray0[2] = 540.43217297805;
      doubleArray0[3] = 2859.95831224;
      doubleArray0[4] = (-2462.46001950195);
      doubleArray0[5] = 1.2321232056217255E24;
      doubleArray0[6] = (-500.511978545);
      doubleArray0[7] = 2.608E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.2321232056244855E24, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, (-1424.3), 540.43217297805, 2859.95831224, (-2462.46001950195), 1.2321232056217255E24, (-500.511978545), 2.608E18}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double1 = new Double(3012.85023708693);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(3012.85023708693, (double)double1, 0.01);
      assertNotNull(double1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-1597);
      int int1 = 15;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1597), 15);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = (-1);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray1 = new long[1][7];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(1, longArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long[][] longArray0 = new long[4][1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-595.6519978);
      doubleArray0[1] = 1.633123935319537E16;
      doubleArray0[2] = (-1301.741155219904);
      doubleArray0[3] = 538.5903573333;
      doubleArray0[4] = 2588.93291868;
      doubleArray0[5] = 714.268466;
      doubleArray0[6] = (-2531.45);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 375);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(375, doubleArray1.length);
      assertArrayEquals(new double[] {(-595.6519978), 1.633123935319537E16, (-1301.741155219904), 538.5903573333, 2588.93291868, 714.268466, (-2531.45)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-345.16957552718);
      doubleArray0[1] = (-345.16957552718);
      doubleArray0[2] = (-1583.7135222898);
      doubleArray0[3] = 1004.7856;
      doubleArray0[4] = 2.608E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E18, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-345.16957552718), (-345.16957552718), (-1583.7135222898), 1004.7856, 2.608E18}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.8307188599677033E-8;
      doubleArray0[1] = 1.3039999999999998E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.087;
      doubleArray0[4] = (-5745.684656115761);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.8441344853345157E19, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.8307188599677033E-8, 1.3039999999999998E19, 1.304E19, 0.087, (-5745.684656115761)}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.8441344853345157E19;
      doubleArray2[1] = 1.3039999999999998E19;
      doubleArray2[2] = 1.8307188599677033E-8;
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 1.8307188599677033E-8;
      doubleArray3[2] = 1.8441344853345157E19;
      doubleArray3[3] = 1.8441344853345157E19;
      doubleArray3[4] = 0.087;
      doubleArray1[5] = doubleArray3;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      try { 
        MathArrays.normalizeArray(doubleArray0, 2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      float float1 = 1679.0059F;
      floatArray0[1] = 1679.0059F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1679.0059F;
      floatArray1[1] = 1679.0059F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1679.0059F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1679.0059F, 1679.0059F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 1679.0059F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1679.0059F, 1679.0059F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2139758886, 4495);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[6];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2148);
      intArray1[1] = 400;
      intArray1[2] = 134217729;
      intArray1[3] = 1;
      intArray1[4] = 2145918426;
      intArray1[5] = 34;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2014828558), int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-2148), 400, 134217729, 1, 2145918426, 34}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 45.7228F;
      floatArray0[3] = (-1.4E-45F);
      floatArray0[4] = (-1.4E-45F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 45.7228F, (-1.4E-45F), (-1.4E-45F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1849.1212109715714;
      doubleArray0[1] = 129.04109157;
      doubleArray0[2] = 0.036;
      doubleArray0[3] = 543.8633881148;
      doubleArray0[4] = 36.0;
      doubleArray0[5] = 1383.136;
      doubleArray0[6] = 6.52E18;
      doubleArray0[7] = (-2796.39324629);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (0.036 <= 543.863)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3.145894820876798E-6;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 1957.7529886521265;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 3.145894820876798E-6, Double.NaN, 1957.7529886521265}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(Double.NaN, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = 436.477572231;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(436.477572231, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 436.477572231, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-88);
      intArray0[1] = 1336;
      intArray0[2] = 1963;
      intArray0[3] = 12;
      intArray0[4] = 14;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-88), 1336, 1963, 12, 14}, intArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2102.050834944931;
      doubleArray0[1] = (-269.8576936302213);
      doubleArray0[2] = (-2578.970498252505);
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 4164.54563061435;
      doubleArray0[7] = 2466.76628;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2102.050834944931, (-269.8576936302213), (-2578.970498252505), 2.17333333333333325E18, 1.0, Double.NaN, 4164.54563061435, 2466.76628}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.718281828459045);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {2102.050834944931, (-269.8576936302213), (-2578.970498252505), 2.17333333333333325E18, 1.0, Double.NaN, 4164.54563061435, 2466.76628}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6291257302735984E-15, (-3.3752266788262123E-16), (-3.2256297430360743E-15), 2.718281828459038, 1.2507431726038517E-18, Double.NaN, 5.2087770144881E-15, 3.0852910831194012E-15}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = (-2743.593);
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-2743.593), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(3282.8059895187616);
      assertEquals(3282.8059895187616, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-1);
      intArray1[4] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), 0, (-1)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray2[3] = (-1);
      intArray2[4] = 1;
      intArray2[5] = (-1);
      intArray2[6] = 1;
      double double1 = MathArrays.distance(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(4.0, double1, 0.01);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray2.length);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {1, 1, 1, (-1), 1, (-1), 1}, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 242;
      longArray0[1] = (long) 242;
      longArray0[2] = (long) 242;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 242;
      doubleArray0[1] = (double) 242;
      doubleArray0[2] = (double) 242L;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {242.0, 242.0, 242.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {242.0, 242.0, 242.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(242.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {242.0, 242.0, 242.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-3447.73839785722);
      doubleArray1[2] = (-46.421304);
      doubleArray1[3] = (-3138.05395695);
      doubleArray1[4] = (-980.83586);
      doubleArray1[5] = 1286.3;
      doubleArray1[6] = 0.097;
      doubleArray1[7] = 250.90158;
      doubleArray1[8] = 788.92;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, (-3447.73839785722), (-46.421304), (-3138.05395695), (-980.83586), 1286.3, 0.097, 250.90158, 788.92}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-3981);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-3981);
      intArray0[7] = (-3981);
      intArray0[8] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-3981), (-1), 0, (-1), (-1), (-3981), (-3981), (-1)}, intArray0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-3981), (-1), 0, (-1), (-1), (-3981), (-3981), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-1), (-3981), (-1), 0, (-1), (-1), (-3981), (-3981), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 97.5556F;
      floatArray0[1] = 365.13754F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {97.5556F, 365.13754F}, floatArray0, 0.01F);
      
      floatArray0[0] = 97.5556F;
      int[] intArray0 = new int[6];
      intArray0[0] = 2465;
      intArray0[1] = 4;
      intArray0[2] = 115;
      intArray0[3] = 2818;
      intArray0[4] = 2146598087;
      intArray0[5] = 297;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {2465, 4, 115, 2818, 2146598087, 297}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4055.146265067248);
      doubleArray1[1] = 291.29174;
      doubleArray1[2] = 2.891718146597532E14;
      doubleArray1[3] = 1.700917683982398E7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-4,055.146 <= 291.292)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-188.99F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-188.99F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) 239;
      floatArray1[3] = 751.4587F;
      floatArray1[4] = 751.4587F;
      floatArray1[5] = 2507.65F;
      floatArray1[6] = 751.4587F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, (-188.99F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 239.0F, 751.4587F, 751.4587F, 2507.65F, 751.4587F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 239;
      intArray0[2] = 239;
      intArray0[3] = 239;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = (-1759);
      intArray1[2] = 134217729;
      intArray1[3] = 239;
      intArray1[4] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(134219488, int0);
      assertEquals(5, intArray1.length);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {134217729, (-1759), 134217729, 239, 134217729}, intArray1);
      assertArrayEquals(new int[] {134217729, 239, 239, 239}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray4.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[1];
      intArray0[0] = 637;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {637}, intArray0);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4124.21833076572);
      doubleArray1[1] = (-4124.21833076572);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4124.21833076572), (-4124.21833076572)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4124.21833076572);
      doubleArray3[1] = (-4124.21833076572);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-4124.21833076572);
      doubleArray3[6] = (-4124.21833076572);
      doubleArray3[7] = 0.0;
      doubleArray3[8] = (-4124.21833076572);
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      int int0 = 239;
      int int1 = 0;
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 239;
      doubleArray2[7] = (double) 239;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 239.0, 239.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[5];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 436.477572231;
      doubleArray0[1] = 436.477572231;
      doubleArray0[2] = 436.477572231;
      doubleArray0[3] = 436.477572231;
      doubleArray0[4] = 436.477572231;
      doubleArray0[5] = 436.477572231;
      doubleArray0[6] = 436.477572231;
      doubleArray0[7] = 436.477572231;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1234.5450046415249, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(436.477572231, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231, 436.477572231}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {190512.67106066784, 190512.67106066784, 190512.67106066784, 190512.67106066784, 190512.67106066784, 190512.67106066784, 190512.67106066784, 190512.67106066784}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1550);
      intArray1[1] = 4;
      intArray1[2] = 94;
      doubleArray0[2] = (double) (-3482);
      intArray1[4] = 104;
      intArray1[5] = 102;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1556.3315842069132, double1, 0.01);
      assertEquals(5, intArray0.length);
      assertEquals(6, intArray1.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1550), 4, 94, 0, 104, 102}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-287.5174860033);
      doubleArray1[1] = 1142.18764;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 0.7602969940671149;
      doubleArray1[5] = 0.3333333333333333;
      doubleArray1[6] = 188.99000549316406;
      doubleArray1[7] = 575.12861;
      doubleArray1[8] = (-1775.629);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 5492.619F;
      floatArray1[1] = 0.0F;
      float float0 = 0.0F;
      floatArray1[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5492.619F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      int int0 = 239;
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-188.99F);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-188.99F);
      floatArray1[1] = 751.4587F;
      floatArray1[2] = (-1011.1F);
      floatArray1[3] = 751.4587F;
      floatArray1[4] = 751.4587F;
      floatArray1[5] = (-1704.285F);
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-188.99F), 751.4587F, (-1011.1F), 751.4587F, 751.4587F, (-1704.285F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, integerArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2482.8596750490237);
      doubleArray1[1] = 1547.7042449;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-2482.8596750490237), 1547.7042449}, doubleArray1, 0.01);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-2482.8596750490237), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 97.5556F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1967.169351);
      doubleArray0[1] = (-108.0);
      doubleArray0[2] = 1059.373706197;
      doubleArray0[3] = 0.125;
      doubleArray0[4] = 362.725;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1967.169351), (-108.0), 1059.373706197, 0.125, 362.725}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1967.169351);
      doubleArray2[1] = 794.94567672718;
      doubleArray2[2] = 0.125;
      doubleArray2[3] = 362.725;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {(-1967.169351), 794.94567672718, 0.125, 362.725}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float float0 = 751.4587F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-188.99F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      int int0 = 239;
      int int1 = 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 239;
      double[] doubleArray0 = null;
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 242;
      floatArray0[1] = (float) 242;
      floatArray0[2] = (float) 242;
      floatArray0[3] = (float) 242;
      floatArray0[4] = (float) 242;
      floatArray0[5] = (float) 242;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (float) 242;
      floatArray0[8] = (float) 242;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {242.0F, 242.0F, 242.0F, 242.0F, 242.0F, 242.0F, (-1.0F), 242.0F, 242.0F}, floatArray0, 0.01F);
      
      Double double0 = new Double(0.3333333333333333);
      assertEquals(0.3333333333333333, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[4];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {242.0F, 242.0F, 242.0F, 242.0F, 242.0F, 242.0F, (-1.0F), 242.0F, 242.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(9, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertArrayEquals(new float[] {242.0F, 242.0F, 242.0F, 242.0F, 242.0F, 242.0F, (-1.0F), 242.0F, 242.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 242;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {242}, intArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1480L;
      longArray0[1] = (long) 242;
      longArray0[2] = (long) 242;
      longArray0[3] = (long) 242;
      Integer integer0 = new Integer(242);
      assertEquals(242, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 242;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-987.2310395951517);
      doubleArray0[1] = (double) 1480L;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-987.2310395951517), 1480.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -987.231 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2547;
      intArray0[1] = 1835;
      intArray0[2] = 97;
      intArray0[3] = 304;
      intArray0[4] = 194;
      intArray0[5] = (-1218);
      intArray0[6] = 1681;
      intArray0[7] = (-971);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2547, 1835, 97, 304, 194, (-1218), 1681, (-971)}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float float0 = 751.4587F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-188.99F);
      Double double0 = new Double((-188.99F));
      assertEquals((-188.99000549316406), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("XTn6[lcPc$p?6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.XTn6[lcPc$p?6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-188.99F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      int int0 = 0;
      int[] intArray0 = new int[7];
      intArray0[1] = 239;
      int int1 = 15;
      intArray0[2] = 15;
      intArray0[3] = 0;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 239;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 15;
      integerArray0[3] = (Integer) 239;
      Integer integer0 = new Integer(15);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 15;
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 239;
      doubleArray0[1] = (double) int1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) 239;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {239.0, 15.0, 0.0, 0.0, 0.0, 239.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-1484.0599F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-1484.0599F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 239;
      intArray0[2] = 15;
      intArray0[3] = 0;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 239;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 15;
      integerArray0[3] = (Integer) 239;
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 15;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(15, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 1549;
      int int1 = 1549;
      int int2 = 0;
      int int3 = 1223;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1549;
      doubleArray0[1] = (double) 1223;
      doubleArray0[2] = Double.NaN;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1549.0, 1223.0, Double.NaN}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,549 >= 1,223)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[0] = 436.477572231;
      Double double0 = new Double(436.477572231);
      assertEquals(436.477572231, (double)double0, 0.01);
      assertNotNull(double0);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      Double double1 = new Double((double) double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(436.477572231, (double)double1, 0.01);
      assertNotNull(double1);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      double double2 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 244);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(2629.8622670176, Double.POSITIVE_INFINITY, 0.0, 0.0, (-3768.1838157), 1.304E19, 0.0, (-1892.8812767));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.700917683982398E7;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 741.42108983886;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-578.2249634310665);
      doubleArray0[5] = (-498.2);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 741.42108983886;
      doubleArray1[1] = (-498.2);
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-578.2249634310665);
      doubleArray1[4] = 1.700917683982398E7;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 1541.2911F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1541.2911F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {3.4028235E38F, 1541.2911F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1541.2911F, 3.4028235E38F, 3.4028235E38F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[9];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = 751.4587F;
      floatArray0[2] = 751.4587F;
      floatArray0[3] = 751.4587F;
      floatArray0[4] = 751.4587F;
      floatArray0[5] = 751.4587F;
      floatArray0[6] = 751.4587F;
      floatArray0[7] = 751.4587F;
      floatArray0[8] = 751.4587F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, 751.4587F, 751.4587F, 751.4587F, 751.4587F, 751.4587F, 751.4587F, 751.4587F, 751.4587F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 751.4587F, 2930.0534361, (double) 751.4587F, (-0.0013888888689039883), (double) 751.4587F, 1.34217729E8, (-2228.0), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0086127917250006E11, double1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 239;
      intArray0[1] = 239;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2105));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.700917683982398E7, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 119, 232);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1957.7529886521265;
      doubleArray0[1] = (double) 9218868437227405312L;
      doubleArray0[2] = (double) 9218868437227405312L;
      doubleArray0[3] = (double) 9218868437227405312L;
      doubleArray0[4] = 1957.7529886521265;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.596754852157096E19, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1957.7529886521265, 9.2188684372274053E18, 9.2188684372274053E18, 9.2188684372274053E18, 1957.7529886521265}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(8.498753526290766E37, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.6638460115913547E41, 7.834889063929706E56, 7.834889063929706E56, 7.834889063929706E56, 1.6638460115913547E41}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1042.0);
      doubleArray1[1] = 3.32;
      doubleArray1[2] = (-8.0E298);
      doubleArray1[3] = (-935.391);
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8.0E298, double0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-1042.0), 3.32, (-8.0E298), (-935.391)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-1042.0), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {-0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2515;
      intArray0[1] = 181;
      intArray0[2] = 74;
      intArray0[3] = 3788;
      intArray0[4] = (-3326);
      intArray0[5] = 1006;
      intArray0[6] = 2146686216;
      intArray0[7] = (-1169);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2515, 181, 74, 3788, (-3326), 1006, 2146686216, (-1169)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<FieldElement<Object>, Object> pair0 = new Pair<FieldElement<Object>, Object>(fieldElement0, object0);
      assertNotNull(pair0);
      
      Pair<FieldElement<Object>, Object> pair1 = new Pair<FieldElement<Object>, Object>(pair0);
      assertTrue(pair1.equals((Object)pair0));
      assertNotNull(pair1);
      
      Integer integer0 = new Integer(879);
      assertEquals(879, (int)integer0);
      assertNotNull(integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 119, 119);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 3.834E-20;
      double double1 = (-4124.21833076572);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 436.477572231;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(436.477572231, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      
      int int0 = 1010;
      Integer integer0 = new Integer(1010);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1010, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Integer integer0 = new Integer((-4431));
      assertEquals((-4431), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Object[][] objectArray0 = MathArrays.buildArray(field0, 387, (-2603));
      assertNotNull(objectArray0);
      assertEquals(387, objectArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ijZd4[";
      stringArray0[1] = "w#IUT%p`}i_y%j";
      stringArray0[2] = "";
      stringArray0[3] = "/<aee>_1u0s|ZI";
      stringArray0[4] = "";
      stringArray0[5] = "'!/@";
      stringArray0[6] = "";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$1";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[1];
      intArray0[0] = 242;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {242}, intArray0);
      
      long[][] longArray0 = new long[5][2];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 242;
      longArray2[1] = (long) 242;
      longArray2[2] = (long) 242;
      longArray2[3] = (long) 242;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 242;
      longArray3[1] = (long) 242;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 242;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-32.9), 0.0, 0.0, 0.0, (-32.9), 436.477572231, 436.477572231, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-14360.1121263999), double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      long long0 = (-846L);
      longArray2[3] = (-846L);
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -846 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      Integer integer0 = new Integer(19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 1549;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      int int0 = (-2852);
      Integer integer0 = new Integer((-2852));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2852), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 1549;
      long[][] longArray0 = new long[4][1];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (int)integerArray0[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1549;
      longArray2[1] = (-619L);
      longArray2[2] = (long) 134217729;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1549;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -619 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2098.51881907);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2098.51881907)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-2098.51881907)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {0.0, (-2098.51881907)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 242;
      int[] intArray0 = new int[1];
      intArray0[0] = 242;
      long long0 = 0L;
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3286);
      intArray0[2] = 542;
      intArray0[3] = 0;
      intArray0[4] = 242;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-3286), 0, 542, 0, 242}, intArray0);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-3286), 0, 542, 0, 242}, intArray0);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      Integer integer0 = new Integer(19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(134217729);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(134217729, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(14);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(14, (int)integer2);
      assertNotNull(integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = (Integer) 1549;
      integerArray0[4] = (Integer) 1549;
      integerArray0[5] = integer1;
      Integer integer3 = new Integer(114);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(114, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[6] = integer3;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)integerArray0[5];
      doubleArray0[1] = (double) 19;
      doubleArray0[2] = (double) (int)integerArray0[5];
      doubleArray0[3] = (double) (int)integerArray0[1];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, 19.0, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1549, 0, 0, 0, 0}, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 19.0, 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 19.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      Integer integer0 = new Integer(19);
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = (-801.395263563);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-801.395263563));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 880.66;
      Integer integer0 = new Integer(2951);
      assertEquals(2951, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2951);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2951, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {880.66}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[2];
      intArray0[1] = (int) integerArray0[3];
      intArray0[2] = 2951;
      intArray0[3] = (int) integerArray0[2];
      intArray0[4] = 1204763289;
      intArray0[5] = 0;
      intArray0[6] = (int) integerArray0[1];
      intArray0[7] = 2951;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {2951, 2951, 2951, 2951, 1204763289, 0, 2951, 2951}, intArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, (int) integerArray0[2]);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, integerArray0.length);
      assertEquals(2951, doubleArray1.length);
      assertArrayEquals(new double[] {880.66}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 242;
      doubleArray1[1] = (double) 242;
      doubleArray1[2] = (double) 242;
      doubleArray1[3] = (double) 242;
      doubleArray1[4] = (double) 242;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray1 = new long[1][7];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(1, longArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      FieldElement<Object>[] fieldElementArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2147483521;
      intArray0[2] = 3;
      intArray0[3] = 2;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {1, 2147483521, 3, 2}, intArray0);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2147483521;
      doubleArray3[2] = (-2772.02);
      doubleArray3[3] = (double) 2147483521;
      doubleArray3[4] = 3.834E-20;
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray3);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(boolean1);
      assertEquals(5, doubleArray3.length);
      assertArrayEquals(new double[] {1.0, 2.147483521E9, (-2772.02), 2.147483521E9, 3.834E-20}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(1.2779646443033559, (-4124.21833076572), 0.0, (-1725.804584579567));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5270.605212106393), double1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.700917683982398E7, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-5270.605212106393), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, (-7.74755564692498E-36), (-8.964865610561562E10)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Double double0 = new Double(4817.4734951825085);
      assertEquals(4817.4734951825085, (double)double0, 0.01);
      assertNotNull(double0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-3.4028235E38F)}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4126.0347F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-4126.0347F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 174.9073F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 174.9073F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[1];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[0] = double0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1344.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1344.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1344.0F)}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 436.477572231;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(436.477572231, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3254.3599F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 4879.5F;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3254.3599F, (-1.0F), 0.0F, 4879.5F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, (double) 3254.3599F, (double) 0.0F, 436.477572231, (double) (-1.0F), (-4671.809834716), (-1862.22), 82.843052);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-149600.178460724), double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("d_V?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.d_V?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      Double[] doubleArray0 = new Double[1];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) doubleArray0[0];
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[0] = (double) doubleArray0[0];
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = (double) 0.0F;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double1 = MathArrays.distance(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 119, 119);
      assertNotNull(objectArray0);
      assertEquals(119, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      int int0 = (-2361);
      Integer integer0 = new Integer((-2361));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-2361), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer integer1 = Integer.valueOf(2147268921);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2147268921, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(6.52E18, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-2046));
      assertEquals((-2046), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2046));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2046), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[3];
      intArray0[1] = (-2046);
      intArray0[2] = (-2046);
      intArray0[3] = (int) integerArray0[0];
      intArray0[4] = (int) integerArray0[3];
      intArray0[5] = (int) integerArray0[3];
      intArray0[6] = (int) integerArray0[0];
      intArray0[7] = (int) integerArray0[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2046), (-2046), (-2046), (-2046), (-2046), (-2046), (-2046), (-2046)}, intArray0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {(-2046), (-2046), (-2046), (-2046), (-2046), (-2046), (-2046), (-2046)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      intArray0[1] = 134217729;
      Integer integer0 = new Integer(134217729);
      assertEquals(134217729, (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer0;
      integerArray0[1] = (Integer) 1549;
      Integer integer1 = new Integer(471);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(471, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[2] = integer1;
      integerArray0[3] = (Integer) 134217729;
      integerArray0[4] = (Integer) 1549;
      Integer integer2 = new Integer(1000);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1000, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[5] = integer2;
      integerArray0[6] = (Integer) 134217729;
      integerArray0[7] = (Integer) 134217729;
      Integer integer3 = new Integer(471);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(471, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[8] = integer3;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 471;
      doubleArray0[2] = (double) (int)integerArray0[5];
      doubleArray0[3] = (double) (int)integerArray0[7];
      doubleArray0[4] = (double) (int)integerArray0[8];
      doubleArray0[5] = (double) (int)integerArray0[7];
      doubleArray0[6] = (double) 1000;
      doubleArray0[7] = (double) 471;
      doubleArray0[8] = (double) (int)integerArray0[5];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, 471.0, 1000.0, 1.34217729E8, 471.0, 1.34217729E8, 1000.0, 471.0, 1000.0}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8, 471.0, 1000.0, 1.34217729E8, 471.0, 1.34217729E8, 1000.0, 471.0, 1000.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(1.2779646443033559, (-4124.21833076572), 0.0, (-1725.804584579567));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5270.605212106393), double1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(660);
      assertEquals(660, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1397);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1397, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1464);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1464, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(3, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, integerArray0.length);
      
      double double2 = MathArrays.distance(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(1.700917683982398E7, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, (-4124.21833076572)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.4699556E-39, 1.700917683982398E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 1.7005052621493213E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      Integer integer0 = new Integer((-4431));
      assertEquals((-4431), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 387, (int) integerArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      double double0 = MathArrays.linearCombination(2615.787319898045, 0.0, 0.0, (-490.4), 0.0, (-293.48), 258.39, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 436.477572231;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(436.477572231, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 436.477572231}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 436.477572231;
      double double1 = MathArrays.linearCombination((-32.9), 436.477572231, 436.477572231, (-1892.8812767), (-32.9), 436.477572231, 436.477572231, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-854920.4484283315), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 1223;
      intArray0[4] = (-2821);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 1549;
      longArray0[3] = (-695L);
      longArray0[2] = (long) 1223;
      longArray0[3] = (long) 1223;
      longArray0[4] = (long) 1549;
      longArray0[2] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 1549;
      longArray0[8] = (long) 1549;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {1549L, 0L, 0L, 1223L, 1549L, 0L, 0L, 1549L, 1549L}, longArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1614);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(1614, intArray1.length);
      assertArrayEquals(new int[] {1549, 134217729, 0, 1223, (-2821)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 1549;
      doubleArray0[3] = (double) 1614;
      doubleArray0[4] = (double) 1223L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 1549.0, 1614.0, 1223.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[2];
      floatArray0[0] = 751.4587F;
      floatArray0[1] = (-188.99F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {751.4587F, (-188.99F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 239;
      intArray0[2] = 15;
      intArray0[3] = 0;
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 239;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 15;
      integerArray0[3] = (Integer) 239;
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 15;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double double0 = new Double((-548.0794));
      assertEquals((-548.0794), (double)double0, 0.01);
      assertNotNull(double0);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 3.834E-20;
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 3.834E-20;
      doubleArray1[3] = (Double) 3.834E-20;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 880.66;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-801.395263563));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {880.66}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-801.395263563)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1061);
      intArray0[1] = (-1471);
      intArray0[2] = 520;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1061);
      intArray1[1] = (-1061);
      intArray1[2] = (-1061);
      intArray1[3] = (-1471);
      intArray1[4] = 520;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1991, int0);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {(-1061), (-1471), 520}, intArray0);
      assertArrayEquals(new int[] {(-1061), (-1061), (-1061), (-1471), 520}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1061);
      doubleArray0[1] = (double) (-1061);
      doubleArray0[2] = (double) (-1471);
      doubleArray0[3] = (double) (-1061);
      doubleArray0[4] = (double) (-1061);
      doubleArray0[5] = (double) 520;
      doubleArray0[6] = (double) 520;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1061.0), (-1061.0), (-1471.0), (-1061.0), (-1061.0), 520.0, 520.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][1];
      doubleArray0[0] = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1413.364872);
      doubleArray1[1] = (-1273.0233);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = (-796.5854616);
      doubleArray0[1] = doubleArray1;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1002.9812328343713;
      doubleArray2[1] = 4347.85634673091;
      doubleArray2[2] = (-1273.0233);
      doubleArray2[3] = (-1413.364872);
      doubleArray2[4] = (-1273.0233);
      doubleArray2[5] = (-796.5854616);
      doubleArray2[6] = 1.0;
      doubleArray0[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-4431));
      assertEquals((-4431), (int)integer0);
      assertNotNull(integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[4] = integer1;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      integerArray0[7] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2046));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-2046), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer((-483));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-483), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1200);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1200, (int)integer3);
      assertNotNull(integer3);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (-2237.116F);
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-2237.116F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(0.0, (double) 0.0F, 1.0, (double) 0.0F, 836.7861725921364, (double) 0.0F);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1255));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(6.52E18, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1895;
      intArray0[2] = 1895;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 1895, 1895}, intArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Object>[] fieldElementArray0 = MathArrays.buildArray(field0, 1895);
      assertNotNull(fieldElementArray0);
      assertEquals(1895, fieldElementArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 3.834E-20;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4124.21833076572);
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 0.0;
      double double1 = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = (-4124.21833076572);
      doubleArray1[6] = 0.0;
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-4124.21833076572), 3.834E-20, 3.834E-20, 0.0, 3.834E-20, (-4124.21833076572), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-3789);
      intArray0[0] = (-3789);
      int int1 = 412;
      intArray0[1] = 412;
      int int2 = (-3500);
      intArray0[2] = (-3500);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      assertArrayEquals(new int[] {(-3789), 412, (-3500)}, intArray0);
      assertArrayEquals(new int[] {(-3789), 412, (-3500)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      intArray0[1] = 1549;
      intArray0[2] = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1549;
      doubleArray0[1] = (double) 1549;
      doubleArray0[2] = (double) 1223;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1223;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1549.0, 1549.0, 1223.0, 0.0, 1223.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1549;
      floatArray0[1] = (float) 1549;
      floatArray0[2] = (float) 1549;
      floatArray0[3] = (float) 0;
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1549.0F, 1549.0F, 1549.0F, 0.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(1549.0, (double) 1.0F, 0.0, 3265.6676369026327, (-1021.7795845584026), (double) 1.0F);
      assertEquals(527.2204154415974, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertArrayEquals(new double[] {1549.0, 1549.0, 1223.0, 0.0, 1223.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2313));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(6.52E18, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer((-2046));
      assertEquals((-2046), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-2046));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2046), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, integerArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2813.28122;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 2813.28122;
      doubleArray1[4] = (double) (int)integer0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2813.28122, 0.0, 1.0, 2813.28122, (-2046.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1549;
      intArray0[0] = 1549;
      int int1 = 134217729;
      intArray0[1] = 134217729;
      int int2 = 19;
      Integer integer0 = new Integer(19);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(19, (int)integer0);
      assertNotNull(integer0);
      
      int int3 = 0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(134217729);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(134217729, (int)integer2);
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 1549;
      integerArray0[1] = integer1;
      integerArray0[2] = integer2;
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) 1549;
      integerArray0[5] = (Integer) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, integerArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 19.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1000.1);
      doubleArray0[1] = 1738.2633;
      doubleArray0[2] = 716.0;
      double double0 = 1160.7932636319754;
      doubleArray0[3] = 1160.7932636319754;
      doubleArray0[4] = 3.834E-20;
      double double1 = 0.8414709568023682;
      doubleArray0[5] = 0.8414709568023682;
      double double2 = (-0.010714690733195933);
      doubleArray0[6] = (-0.010714690733195933);
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(2425.25401127561, double3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1000.1), 1738.2633, 716.0, 1160.7932636319754, 3.834E-20, 0.8414709568023682, (-0.010714690733195933)}, doubleArray0, 0.01);
      
      double double4 = 3.477448886213115E7;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.477448886213115E7);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-1000.1), 1738.2633, 716.0, 1160.7932636319754, 3.834E-20, 0.8414709568023682, (-0.010714690733195933)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3295410542923229E7), 2.3108613343862135E7, 9518562.09252378, 1.543167982746408E7, 5.096950707086056E-16, 11186.58317231667, (-142.44196794150088)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-1000.1), 1738.2633, 716.0, 1160.7932636319754, 3.834E-20, 0.8414709568023682, (-0.010714690733195933)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.3295410542923229E7), 2.3108613343862135E7, 9518562.09252378, 1.543167982746408E7, 5.096950707086056E-16, 11186.58317231667, (-142.44196794150088)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.3296740083977522E10, 4.016885448952583E10, 6.815290458247026E9, 1.7912989990245747E10, 1.954170901096794E-35, 9413.184845358579, 1.5262216339209917}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 0.8414709568023682);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray3.length);
      assertArrayEquals(new double[] {(-1000.1), 1738.2633, 716.0, 1160.7932636319754, 3.834E-20, 0.8414709568023682, (-0.010714690733195933)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.3217215319825197), 0.559180813783612, 0.23032958394109, 0.3734148456061074, 1.2333570179191886E-23, 2.7069225611564297E-4, (-3.4468020371989836E-6)}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2104.861F);
      float float0 = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-2104.861F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray4 = new double[3];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = 1160.7932636319754;
      doubleArray4[2] = 2425.25401127561;
      try { 
        MathArrays.ebeMultiply(doubleArray4, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 1.4699556E-39;
      doubleArray0[2] = 190.43473;
      doubleArray0[3] = (-2472.6540026);
      doubleArray0[4] = 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {6.52E18, 190.43473, 3.834E-20, 1.4699556E-39, (-2472.6540026)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      MathArrays.scaleInPlace(6.52E18, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1895;
      intArray0[2] = 1895;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 1895, 1895}, intArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.8342593554399999E22, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1895);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 1549;
      intArray0[0] = 1549;
      intArray0[1] = 1549;
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 1223;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1549;
      doubleArray0[1] = (double) 1549;
      doubleArray0[2] = (double) 1223;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1223;
      doubleArray0[5] = (double) 0;
      double[][] doubleArray1 = new double[0][8];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 1223.0, 1223.0, 1549.0, 1549.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1.2689346832018833));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[][] longArray0 = new long[4][9];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 1008L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 10000L;
      longArray2[1] = 10000L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-85L);
      longArray3[1] = 4471L;
      longArray3[2] = 1L;
      longArray3[3] = 9218868437227405312L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 4471L;
      longArray4[1] = 9218868437227405312L;
      longArray4[2] = 243L;
      longArray4[3] = 1008L;
      longArray4[4] = 4471L;
      longArray4[5] = 1008L;
      longArray4[6] = (-1L);
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 1223;
      double double0 = MathArrays.linearCombination((double) 134217729, (double) 1223, (double) 134217729, (double) 1223, (double) 134217729, (double) 0, (-93.142186), (-189.774));
      assertEquals(3.282965828099652E11, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3127.570427786638;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (-189.774);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {3127.570427786638, 0.0, 1.34217729E8, (-189.774)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 3.834E-20, (-2536.08617652587), (-786.454149192698), (-2536.08617652587), (-3002.0), 0.0);
      assertEquals(1994515.4962390156, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 0.0;
      doubleArray2[4] = (Double) 0.0;
      doubleArray2[5] = (Double) 0.0;
      doubleArray2[6] = (Double) 0.0;
      doubleArray2[7] = (Double) 0.0;
      doubleArray2[8] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotNull(doubleArray4);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray4.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 387, 387);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-611.5824790823);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-611.5824790823), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-611.5824790823), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {(-611.5824790823), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-611.5824790823), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-611.5824790823);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1223;
      intArray0[2] = 1223;
      int int0 = (-2146615505);
      intArray0[3] = 1223;
      intArray0[4] = 1223;
      intArray0[5] = (-2821);
      intArray0[6] = 1223;
      intArray0[7] = 0;
      doubleArray0[0] = (double) 1223;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146615505);
      intArray1[1] = (-2821);
      intArray1[2] = 1223;
      intArray1[3] = 1223;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-611.5824790823);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 2813.28122;
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      double double1 = (-614.1);
      doubleArray0[2] = (-614.1);
      double double2 = 1923.8521391816707;
      doubleArray0[3] = 1923.8521391816707;
      double double3 = 1839.642394032;
      doubleArray0[4] = 1839.642394032;
      doubleArray0[5] = 1297.78789647033;
      double double4 = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 20.0;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(15, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2813.28122, Double.NaN, (-614.1), 1923.8521391816707, 1839.642394032, 1297.78789647033, 0.0, 20.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 15
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-936.1807496);
      double double1 = Double.NaN;
      double double2 = 6.52E18;
      double double3 = MathArrays.linearCombination((-936.1807496), Double.NaN, 6.52E18, 6.52E18);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      Double[] doubleArray0 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4359.0;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 719;
      intArray0[1] = (-114);
      intArray0[2] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {719, (-114), (-1)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-114);
      doubleArray0[1] = (double) (-114);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-114.0), (-114.0)}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray3[1] = 0L;
      longArray3[2] = (long) (-1);
      longArray3[3] = (long) (-114);
      longArray3[4] = 0L;
      longArray2[1] = 9958L;
      longArray3[6] = (long) 719;
      longArray3[7] = 9218868437227405312L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3286);
      intArray0[1] = (-3286);
      intArray0[2] = 542;
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = (long) (-3286);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,286 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.6187186152;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      Double[] doubleArray3 = new Double[9];
      doubleArray3[0] = (Double) 0.0;
      doubleArray3[1] = (Double) 0.0;
      doubleArray3[2] = (Double) 0.0;
      doubleArray3[3] = (Double) 0.0;
      doubleArray3[4] = (Double) 0.0;
      doubleArray3[5] = (Double) 0.0;
      doubleArray3[6] = (Double) 0.0;
      doubleArray3[7] = (Double) 0.0;
      doubleArray3[8] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray3.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray5 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotNull(doubleArray5);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray5.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[5];
      longArray1[0] = 4257L;
      longArray1[1] = 0L;
      longArray1[2] = (-3079L);
      longArray1[3] = 0L;
      longArray1[4] = (-610L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-3079L);
      longArray2[2] = (-610L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1515L);
      longArray3[1] = (-3079L);
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[][] longArray4 = new long[1][1];
      assertFalse(longArray4.equals((Object)longArray0));
      
      longArray4[0] = longArray2;
      MathArrays.checkRectangular(longArray4);
      assertFalse(longArray4.equals((Object)longArray0));
      assertEquals(1, longArray4.length);
      assertNotSame(longArray4, longArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-611.5824790823);
      doubleArray0[1] = 2173.384420833;
      doubleArray0[2] = (-611.5824790823);
      doubleArray0[3] = 2173.384420833;
      doubleArray0[4] = 2173.384420833;
      doubleArray0[5] = 2173.384420833;
      doubleArray0[6] = (-611.5824790823);
      double[] doubleArray1 = MathArrays.scale(2173.384420833, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-611.5824790823), 2173.384420833, (-611.5824790823), 2173.384420833, 2173.384420833, 2173.384420833, (-611.5824790823)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1329203.832091895), 4723599.840719596, (-1329203.832091895), 4723599.840719596, 4723599.840719596, 4723599.840719596, (-1329203.832091895)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1065.8129449447838;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 589.602;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1056.900625;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1065.8129449447838, 1.34217729E8, 0.0, 589.602, 0.0, 0.0, 1056.900625, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1135957.2336118727, 1.801439877791744E16, 0.0, 347630.518404, 0.0, 0.0, 1117038.9311253906, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-1754.180317575), 0.0, 0.0, 589.602);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {1.0, 1065.8129449447838, 1.34217729E8, 0.0, 589.602, 0.0, 0.0, 1056.900625, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1135957.2336118727, 1.801439877791744E16, 0.0, 347630.518404, 0.0, 0.0, 1117038.9311253906, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1065.8129449447838, 1.34217729E8, 0.0, 589.602, 0.0, 0.0, 1056.900625, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1065.8129449447838, 1.34217729E8, 0.0, 589.602, 0.0, 0.0, 1056.900625, Double.NaN}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-145);
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-145), 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-145), 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = 196.1488919;
      double double1 = (-1106.769123);
      double double2 = MathArrays.linearCombination(4500.34557, 1.304E19, 196.1488919, (-1106.769123));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.868450623280001E22, double2, 0.01);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][2];
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double3 = 0.0;
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 5.868450623280001E22;
      doubleArray2[2] = 1.304E19;
      doubleArray2[3] = 1.304E19;
      doubleArray2[4] = 4500.34557;
      doubleArray2[5] = 196.1488919;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 910.2479877911146, 910.2479877911146, 787.80414158674, 1.7976931348623157E308, 910.2479877911146);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4359.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4359.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4359.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4359.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4359.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {4359.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[5];
      longArray1[0] = 4257L;
      longArray1[1] = 0L;
      longArray1[2] = (-3079L);
      longArray1[3] = 0L;
      longArray1[4] = (-610L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-3079L);
      longArray2[2] = (-610L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1515L);
      longArray3[1] = (-3079L);
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-1515L);
      longArray4[1] = 4257L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-611.5824790823);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (-1195.51606725025);
      doubleArray0[3] = 2173.384420833;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-611.582 >= -\u221E)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1453.9;
      doubleArray0[1] = 3369.0;
      doubleArray0[2] = 863.026854;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1453.9, 3369.0, 863.026854, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1453.9, 3369.0, 863.026854, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453.9, 3369.0, 863.026854, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = 2731L;
      longArray0[2] = 2188L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 2731L, 2188L, 0L}, longArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {1453.9, 3369.0, 863.026854, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453.9, 3369.0, 863.026854, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2113825.2100000004, 1.1350161E7, 744815.3507251373, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1453.9;
      doubleArray3[1] = (double) 0L;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 2188L;
      doubleArray3[4] = (double) 2731L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 0L;
      doubleArray3[8] = 3369.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,453.9 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1711);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1711), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2098.51881907);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-2098.51881907)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-2098.51881907)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 502.936;
      doubleArray0[1] = 1405.6410062315722;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-1208.30382);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {502.936, 1405.6410062315722, 1.34217729E8, (-1208.30382)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Integer[] integerArray0 = new Integer[9];
      int int0 = 0;
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(int0);
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(int0);
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int0);
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer3));
      assertTrue(integer5.equals((Object)integer0));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-2046));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertEquals((-2046), (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(0);
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer1));
      assertTrue(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertTrue(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer2));
      assertEquals(0, (int)integer7);
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(0);
      assertTrue(integer8.equals((Object)integer7));
      assertTrue(integer8.equals((Object)integer2));
      assertTrue(integer8.equals((Object)integer0));
      assertTrue(integer8.equals((Object)integer1));
      assertTrue(integer8.equals((Object)integer3));
      assertTrue(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertTrue(integer8.equals((Object)integer5));
      assertTrue(integer8.equals((Object)int0));
      assertEquals(0, (int)integer8);
      assertNotNull(integer8);
      
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2046);
      doubleArray0[4] = (double) (-2046);
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) int0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2046.0), (-2046.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-3286);
      intArray0[0] = (-3286);
      intArray0[1] = 392;
      intArray0[2] = 542;
      intArray0[3] = 0;
      int int1 = 242;
      intArray0[4] = 242;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-3286), 392, 542, 0, 242}, intArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-614.1);
      doubleArray0[3] = 1923.8521391816707;
      doubleArray0[4] = 1839.642394032;
      doubleArray0[5] = 1297.78789647033;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 20.0;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2813.28122, Double.NaN, (-614.1), 1923.8521391816707, 1839.642394032, 1297.78789647033, 0.0, 20.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2813.28122, Double.NaN, (-614.1), 1923.8521391816707, 1839.642394032, 1297.78789647033, 0.0, 20.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 3.834E-20, (-2536.08617652587), (-786.454149192698), (-2536.08617652587), (-3002.0), 0.0);
      assertEquals(1994515.4962390156, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1530.613006243299);
      doubleArray2[1] = 1065.45412131;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-2536.08617652587);
      doubleArray2[4] = (-2780.298713);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-2536.08617652587);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-803.66965511567);
      doubleArray0[1] = 1.0E-5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.8014398778563324E16, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-803.66965511567), 1.0E-5, 0.0, 1.34217729E8, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1999);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 3;
      intArray0[5] = 227;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {(-1999), 0, 0, 0, 3, 227, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 3489;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3489);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2472.6540026);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2472.6540026)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 2472.6540026}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-538.9386F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 568.632F;
      floatArray0[3] = (-1906.8146F);
      floatArray0[4] = (-188.99F);
      floatArray0[5] = 3181.52F;
      floatArray0[6] = 658.1664F;
      floatArray0[7] = (-3082.057F);
      floatArray0[8] = 751.4587F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-538.9386F), 0.0F, 568.632F, (-1906.8146F), (-188.99F), 3181.52F, 658.1664F, (-3082.057F), 751.4587F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 53;
      intArray0[3] = 0;
      intArray0[4] = 239;
      intArray0[5] = 1895;
      intArray0[6] = 0;
      intArray0[7] = (-2047);
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 53, 0, 239, 1895, 0, (-2047), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = 2.0;
      doubleArray0[3] = 2.0;
      MathArrays.scaleInPlace(2.0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2.0;
      doubleArray1[2] = 2.0;
      doubleArray1[3] = 2.0;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 2.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 3.32;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 2.0, 3.32}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 2.0, 2.0, 2.0, 2.0, 2.0, 0.0, 2.0, 3.32}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 5 and 6 are not increasing (2 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1036.78);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1.304E19, (-1036.78)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, (-2.7039222399999997E22), 1074912.7684}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      double[][] doubleArray1 = new double[3][0];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 436.477572231;
      doubleArray1[0] = doubleArray2;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1939, 247);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2189);
      int int1 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2189), 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2814.121269871), 1.304E19, 6155.204474643014, 0.0, 0.0, (-1860.5305423));
      assertEquals((-3.669614135911784E22), double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 1505.4292F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1093.5951F;
      floatArray0[7] = 1726.907F;
      floatArray0[8] = 831.3598F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = 2523.5892704148214;
      doubleArray0[1] = 2523.5892704148214;
      doubleArray0[2] = (-20.0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1549;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 134217729;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1895;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 1549;
      doubleArray1[1] = (double) 134217729;
      doubleArray1[2] = (double) 134217729;
      MathArrays.equals(doubleArray0, doubleArray1);
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, 962);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 9218868437227405312L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[6];
      longArray1[0] = 1023L;
      longArray1[1] = 10000L;
      longArray1[2] = 243L;
      longArray1[3] = (-1L);
      longArray1[4] = 0L;
      longArray1[5] = 0L;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-552.8693949316);
      doubleArray0[4] = (-243.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-581.99106261219);
      doubleArray0[7] = 680.3288104267137;
      doubleArray0[8] = 3055.28844;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[5];
      longArray1[0] = 148L;
      longArray1[1] = (-167L);
      longArray1[2] = 0L;
      longArray1[3] = (-1L);
      longArray1[4] = 2650L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-167L);
      longArray2[1] = (-167L);
      longArray2[2] = 2650L;
      longArray2[3] = (-167L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = (-2650L);
      longArray3[1] = 2650L;
      longArray3[2] = (-167L);
      longArray3[3] = 0L;
      longArray3[4] = (-167L);
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray3[7] = 0L;
      longArray3[8] = 2650L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 2650L;
      longArray4[1] = (-1L);
      longArray4[2] = (-2650L);
      longArray4[3] = (-167L);
      longArray4[4] = 148L;
      longArray4[5] = (-167L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = (-1L);
      longArray5[1] = 148L;
      longArray5[2] = 2650L;
      longArray5[3] = (-1L);
      longArray5[4] = 2650L;
      longArray5[5] = 0L;
      longArray5[6] = (-1L);
      longArray5[7] = (-167L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = (-167L);
      longArray6[1] = (-1L);
      longArray6[2] = (-1L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      longArray7[0] = 0L;
      longArray7[1] = 2650L;
      longArray7[2] = 0L;
      longArray7[3] = 148L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 0L;
      longArray8[1] = 2650L;
      longArray8[2] = 148L;
      longArray8[3] = (-167L);
      longArray8[4] = 0L;
      longArray8[5] = 0L;
      longArray8[6] = 2650L;
      longArray8[7] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[1];
      longArray9[0] = (-167L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2813.28122;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-614.1);
      doubleArray0[3] = 1923.8521391816707;
      doubleArray0[4] = 1839.642394032;
      doubleArray0[5] = 1297.78789647033;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 20.0;
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 20.0, 2813.28122, 1297.78789647033, 1839.642394032, 1923.8521391816707, Double.NaN, (-614.1)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 719;
      intArray0[1] = (-114);
      intArray0[2] = (-1);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 719;
      doubleArray0[1] = (double) (-114);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 0L;
      longArray2[1] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (long) 0;
      longArray3[1] = 0L;
      longArray3[2] = (long) (-1);
      longArray3[3] = (long) (-114);
      longArray3[4] = (-1914L);
      longArray3[5] = 10000L;
      longArray3[6] = (long) 719;
      longArray3[7] = 9218868437227405312L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-2764);
      intArray0[1] = 187;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-580);
      intArray0[5] = 0;
      int int0 = 1245;
      intArray0[6] = 1245;
      intArray0[7] = 1;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1733.75);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 187;
      doubleArray0[5] = (double) (-2764);
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 2549.71638;
      doubleArray0[3] = (-2277.66);
      doubleArray0[4] = 572.8523659039273;
      doubleArray0[5] = 4213.444;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 572.8523659039273;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1195.705764281119;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      MathArrays.normalizeArray(doubleArray2, 1195.705764281119);
      MathArrays.OrderDirection.values();
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      MathArrays.linearCombination(3.141592653589793, (-4124.21833076572), 1195.705764281119, (-1725.804584579567));
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,429,712.275 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4124.21833076572);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0L;
      doubleArray2[1] = (double) 0L;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double1 = (-590.419073);
      doubleArray0[2] = (-590.419073);
      double double2 = (-199.0926357);
      doubleArray0[3] = (-199.0926357);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = 436.477572231;
      doubleArray0[1] = 436.477572231;
      MathArrays.safeNorm(doubleArray0);
      double[][] doubleArray1 = new double[3][0];
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 436.477572231;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][1];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
