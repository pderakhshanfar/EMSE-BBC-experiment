/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 01:05:29 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-37);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-37));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 15;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 15);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 15;
      MathArrays.buildArray(field0, 15);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 15;
      doubleArray0[1] = 1394.5296877964;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1394.6103578224006);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("L;7LRLHzQtdC_D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.L;7LRLHzQtdC_D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[6];
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 134217729, 134217729);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1423;
      intArray0[1] = 0;
      intArray0[2] = 1821;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.safeNorm(doubleArray0);
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray1[2] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 3.834E-20;
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1053.0;
      doubleArray0[3] = 1.34217729E8;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2805.672927392;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1605.7135075084072);
      doubleArray0[3] = (-2318.15);
      doubleArray0[4] = (-2368.0);
      doubleArray0[5] = (-1450.4017362419215);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1620.66729423;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1637);
      assertEquals(1637, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1637;
      intArray0[1] = (-3020);
      intArray0[2] = 1637;
      intArray0[3] = 1637;
      MathArrays.distance1(intArray0, intArray0);
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-834.0830757066);
      doubleArray1[1] = 1099.8597514190799;
      doubleArray1[2] = 0.04168701738764507;
      doubleArray1[3] = 2213.613791;
      doubleArray1[4] = (-1025.7479952);
      doubleArray1[5] = 1.5;
      doubleArray1[6] = (-1852.49058004);
      doubleArray1[7] = 415.82726;
      doubleArray1[8] = (-331.056874229162);
      MathArrays.equals(doubleArray1, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("PF`NLBO|)GQ142");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.PF`NLBO|)GQ142
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1271;
      intArray0[0] = 1271;
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      Integer integer0 = new Integer((-2233));
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int1 = 539;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1271, 539);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 621.48;
      doubleArray0[2] = (-1559.8455927);
      doubleArray0[3] = 3126.8737610935;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 0;
      MathArrays.buildArray(field0, 0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1394.5296877964;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, 1394.5296877964);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("L;7LRLHzQtdC_D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.L;7LRLHzQtdC_D
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-469);
      intArray0[1] = 526;
      intArray0[2] = (-714);
      intArray0[3] = 1418;
      intArray0[4] = 886;
      intArray0[5] = 2;
      intArray0[6] = (-2144433244);
      intArray0[7] = 1;
      intArray0[8] = (-1945);
      int[] intArray1 = new int[9];
      intArray1[0] = (-364);
      intArray1[1] = 526;
      intArray1[2] = 886;
      intArray1[3] = (-2144433244);
      intArray1[4] = 886;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = (-714);
      MathArrays.distance1(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1271;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1271, 539);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 1271;
      doubleArray0[3] = 2959.3;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) 1271;
      doubleArray0[6] = (double) 539;
      doubleArray0[7] = (double) 539;
      MathArrays.checkPositive(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 2.2860509143963117E-8;
      doubleArray0[2] = (-1140.83414);
      doubleArray0[3] = (-1971.12042006867);
      doubleArray0[4] = 0.5000000000042687;
      doubleArray0[5] = 759.0;
      doubleArray0[6] = (-1093.275248604);
      doubleArray0[7] = 196.84413295056;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2896.205599319;
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = (-1060.4328203658774);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1425.39648);
      doubleArray0[5] = 1302.7467;
      doubleArray0[6] = 96.0;
      doubleArray0[7] = (-1609.61212688568);
      doubleArray0[8] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.exception.MathIllegalNumberException";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.010714690733195933);
      doubleArray0[1] = 3860.01697;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.5707963267948966;
      doubleArray0[4] = (-6.032174644509064E-23);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = (-7.44321345601866E-11);
      doubleArray0[7] = 1332.70812;
      doubleArray0[8] = (-1127.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2356.3286539126;
      doubleArray0[1] = 291.1;
      doubleArray0[2] = 413.70928179;
      MathArrays.checkPositive(doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147482454);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-300.053927305864);
      doubleArray0[1] = 536.68125596;
      doubleArray0[2] = 2494.180151600212;
      doubleArray0[3] = 4829.233935892;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 1.44888888888888474E18;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 1091.1;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-6.663542893624021E-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "number of points ({0})";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = new int[2];
      intArray1[0] = 13;
      intArray1[1] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 2027.0F;
      floatArray0[1] = 3080.9392F;
      floatArray0[2] = (-209.22F);
      floatArray0[3] = (-786.6F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 4081.0F;
      floatArray0[7] = (-108.206F);
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      MathArrays.scaleInPlace((-209.22F), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.distanceInf(intArray0, intArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[2];
      MathArrays.distanceInf(intArray0, intArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0uv&qX|%:zp";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = 1968.0;
      doubleArray0[2] = 1582.0873616420733;
      doubleArray0[3] = (-5.7618793749770706E-8);
      doubleArray0[4] = 2295.395224411609;
      doubleArray0[5] = 1038.537287;
      doubleArray0[6] = (-79.4529);
      doubleArray0[7] = (-2.6437112632041807E-8);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2144452747);
      intArray0[1] = 680;
      int[] intArray1 = new int[1];
      intArray1[0] = (-2144452747);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1108;
      intArray0[1] = 283;
      intArray0[2] = 96;
      int int0 = new Integer(283);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 644);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 694.0F;
      floatArray0[1] = 2068.5F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2086.3F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2354.5715F);
      floatArray0[6] = (-391.0F);
      floatArray0[7] = 0.5F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-2086.3F);
      floatArray1[4] = 694.0F;
      floatArray1[5] = (-2354.5715F);
      floatArray1[6] = 0.5F;
      floatArray1[7] = (-391.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      long[][] longArray0 = new long[0][1];
      MathArrays.checkNonNegative(longArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-4209.48);
      doubleArray0[1] = (-1837.64426444);
      doubleArray0[2] = (-18.430862426757812);
      doubleArray0[3] = 1.3868176E7;
      doubleArray0[4] = (-2164.182367515436);
      doubleArray0[5] = (-596.5625023906025);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.387700229999677E7;
      doubleArray2[1] = (-2164.182367515436);
      doubleArray2[2] = (-18.430862426757812);
      doubleArray2[3] = (-2164.182367515436);
      doubleArray2[4] = (-2164.182367515436);
      doubleArray2[5] = 1.3868176E7;
      doubleArray2[6] = (-18.430862426757812);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-619.292F);
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-619.292F);
      floatArray1[1] = (-619.292F);
      floatArray1[2] = (-619.292F);
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.equals(floatArray0, (float[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-277.4127F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = Float.NaN;
      MathArrays.equals(floatArray0, floatArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 733.819521867;
      doubleArray0[1] = 2908.07441327973;
      doubleArray0[2] = (-1.7168146928204135);
      doubleArray0[3] = (-1.7014117331926443E39);
      doubleArray0[4] = 0.8333333333333334;
      doubleArray0[5] = 1.1579207543382391E77;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 551.49;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2741.210811469);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1854.1163;
      doubleArray0[1] = (-871.2653983826455);
      doubleArray0[2] = (-1879.937052);
      doubleArray0[3] = 3887.9791525158;
      doubleArray0[4] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1712;
      intArray0[1] = (-3357);
      MathArrays.copyOf(intArray0, 1712);
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (float) 1712;
      floatArray0[2] = (-1524.634F);
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[3] = (float) 1712;
      floatArray1[4] = (float) 1712;
      floatArray1[5] = (float) 0;
      floatArray1[6] = (-1524.634F);
      floatArray1[7] = (float) 1712;
      MathArrays.equals(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3.4028235E38F);
      doubleArray0[1] = (double) (-3.4028235E38F);
      doubleArray0[2] = (double) (-3.4028235E38F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray1, (-3.4028234663852886E38));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2039));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1107);
      intArray0[1] = (-4596);
      intArray0[2] = 9;
      intArray0[3] = (-2429);
      intArray0[4] = 66;
      intArray0[5] = 173;
      intArray0[6] = 135;
      intArray0[7] = 8;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-4596);
      doubleArray0[1] = (double) (-1107);
      doubleArray0[2] = (double) 9;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-2429);
      floatArray0[1] = (float) (-2429);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 135;
      doubleArray2[1] = (double) 135;
      doubleArray2[2] = (double) (-1107);
      doubleArray2[3] = (double) 173;
      doubleArray2[4] = (double) 135;
      doubleArray2[5] = (double) (-1107);
      MathArrays.distance(doubleArray1, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[][] longArray0 = new long[3][7];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1473.169632;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1792.035944);
      doubleArray0[4] = (-3986.5122177);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3390.522;
      doubleArray0[7] = (-1102.29441);
      doubleArray0[8] = 2306.811215;
      MathArrays.safeNorm(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      int[] intArray1 = new int[6];
      intArray1[0] = 1;
      intArray1[1] = (-2146658326);
      intArray1[2] = 275;
      intArray1[3] = 302;
      intArray1[4] = 308;
      intArray1[5] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2146658326, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray2, doubleArray1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "D7RK'G/3TOalXg";
      stringArray0[1] = "W";
      stringArray0[2] = "NOT_POSITIVE_DEFINITE_MATRIX";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-2443.04819);
      doubleArray3[1] = (-235.26985119);
      doubleArray3[2] = 102.91362;
      doubleArray3[3] = 1798.9425838511368;
      doubleArray3[4] = 102.91362;
      doubleArray3[5] = 658.129089;
      doubleArray3[6] = 1.86285714285714278E18;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      floatArray0[7] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = (-1);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2607);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      int int1 = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      MathArrays.copyOf(intArray0);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-1267.8745254));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray0);
      MathArrays.ebeDivide(doubleArray3, doubleArray0);
      MathArrays.safeNorm(doubleArray2);
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray5 = new double[7][4];
      doubleArray5[0] = doubleArray1;
      doubleArray5[1] = doubleArray3;
      doubleArray5[2] = doubleArray1;
      doubleArray5[3] = doubleArray1;
      doubleArray5[4] = doubleArray2;
      doubleArray5[5] = doubleArray0;
      doubleArray5[6] = doubleArray3;
      MathArrays.sortInPlace(doubleArray4, mathArrays_OrderDirection0, doubleArray5);
      MathArrays.ebeDivide(doubleArray3, doubleArray2);
      MathArrays.ebeSubtract(doubleArray1, doubleArray3);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1046.141F);
      floatArray0[1] = (-2095.7F);
      floatArray0[2] = (-2022.87F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 776.0F;
      floatArray0[5] = (-1052.8F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8333333333333334;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][7];
      doubleArray1[1] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1[0]);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray1[0]);
      MathArrays.scale((-6493.475070182267), doubleArray3);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equals((double[]) null, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (-1279.343067252);
      doubleArray4[1] = (-722.82492989);
      doubleArray4[2] = (-722.82492989);
      doubleArray4[3] = (-722.82492989);
      double[] doubleArray5 = MathArrays.scale((-722.82492989), doubleArray4);
      assertArrayEquals(new double[] {924741.0628916846, 522475.87927048345, 522475.87927048345, 522475.87927048345}, doubleArray5, 0.01);
      
      double[] doubleArray6 = MathArrays.ebeDivide(doubleArray2, doubleArray3);
      MathArrays.checkOrder(doubleArray6);
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-1279.343067252);
      doubleArray7[1] = (-722.82492989);
      doubleArray7[2] = (-1279.343067252);
      doubleArray7[3] = (-2692.557);
      doubleArray7[4] = (-1279.343067252);
      doubleArray7[5] = (-722.82492989);
      doubleArray7[6] = (-722.82492989);
      doubleArray7[7] = 1869.5316737989738;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray4, doubleArray7);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray6, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 94;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      MathArrays.checkOrder(doubleArray3);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray4 = new double[0];
      try { 
        MathArrays.convolve(doubleArray2, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1579.8837764;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1370.426001639);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 1579.8837764);
      assertArrayEquals(new double[] {1579.8837764, Double.POSITIVE_INFINITY, Double.NaN, (-1370.426001639)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {11811.401276360028, Double.NaN, Double.NaN, (-10231.517499960028)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1580.8837764, Double.NaN, Double.NaN, (-1369.426001639)}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-688.1127925835208);
      doubleArray0[2] = (double) (-3.4028235E38F);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.44888888888888883E18;
      doubleArray0[5] = (double) (-3.4028235E38F);
      doubleArray0[6] = (double) (-3.4028235E38F);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1579.8837764;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1370.426001639);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(2015.22042405, (-594.47110678812), Double.POSITIVE_INFINITY, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-274);
      intArray0[1] = (-274);
      intArray0[3] = (-274);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) (-274);
      doubleArray0[3] = (double) (-274);
      doubleArray0[4] = (double) (-274);
      doubleArray0[5] = 1.801439877791744E16;
      doubleArray0[6] = (double) (-274);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-274);
      doubleArray2[1] = (double) (-274);
      doubleArray2[2] = (double) (-274);
      doubleArray2[3] = (-1581.7107787);
      doubleArray2[4] = 1.34217729E8;
      doubleArray2[5] = (double) (-274);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = (-4206.06);
      doubleArray2[2] = 1869.5316737989738;
      MathArrays.safeNorm(doubleArray2);
      double[][] doubleArray3 = new double[2][7];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1579.8837764;
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1370.426001639);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-785.2F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = 235.0F;
      floatArray0[3] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-3.4028235E38F);
      doubleArray2[1] = (double) 0.0F;
      doubleArray2[2] = (double) 235.0F;
      doubleArray2[3] = 1579.8837764;
      doubleArray2[4] = (double) (-3.4028235E38F);
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 235.0F;
      doubleArray2[7] = 1579.8837764;
      doubleArray2[8] = (double) 235.0F;
      MathArrays.equals(doubleArray1, doubleArray2);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2155), (-2155));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1362.096F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 781;
      intArray0[1] = (-1436);
      intArray0[2] = 3575;
      intArray0[3] = 168;
      intArray0[4] = 1201;
      intArray0[5] = 243;
      intArray0[6] = 246;
      intArray0[7] = (-1073741823);
      intArray0[8] = 746;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.scale((-1153.0227203166219), doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-3.4028235E38F);
      doubleArray1[1] = (double) (-3.4028235E38F);
      doubleArray1[2] = (double) (-3.4028235E38F);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = (-274);
      int[] intArray0 = new int[5];
      intArray0[0] = (-274);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(5.074, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 5.074);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[25];
      long long0 = 1L;
      longArray0[0] = 1L;
      double double0 = 1489.3149257497;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      double double1 = (-1279.343067252);
      double double2 = 5.0614674548127384E-8;
      // Undeclared exception!
      try { 
        MathArrays.scale(5.0614674548127384E-8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[25];
      longArray0[0] = 1L;
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = null;
      MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      MathArrays.scale(0.0, doubleArray1);
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) 15;
      doubleArray3[1] = 1489.3149257497;
      doubleArray3[2] = (double) 15;
      doubleArray3[3] = (-3070.0);
      doubleArray3[4] = 1577.32;
      doubleArray3[5] = 1489.3149257497;
      doubleArray3[6] = (double) 15;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.scale((-1279.343067252), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8333333333333334;
      double double0 = 1489.3149257497;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3.5997360512765566E-9);
      doubleArray1[1] = (-1279.343067252);
      double double1 = 1181.75;
      doubleArray1[2] = 1181.75;
      doubleArray1[3] = 0.8333333333333334;
      doubleArray1[4] = (-1279.343067252);
      doubleArray1[5] = (-1279.343067252);
      doubleArray1[6] = (-1279.343067252);
      doubleArray1[7] = (-1279.343067252);
      doubleArray1[8] = (-1279.343067252);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      MathArrays.normalizeArray(doubleArray1, (-1279.343067252));
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1489.3149257497;
      doubleArray2[1] = (-3.5997360512765566E-9);
      doubleArray2[2] = (-2293.784873);
      doubleArray2[3] = 0.8333333333333334;
      doubleArray2[4] = 1181.75;
      double double2 = 1447.8242923767916;
      doubleArray2[5] = 1447.8242923767916;
      doubleArray2[6] = (-3.5997360512765566E-9);
      MathArrays.equals(doubleArray0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2023;
      intArray0[1] = 1;
      intArray0[2] = 1119;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 2023;
      intArray1[2] = 2023;
      intArray1[3] = 1;
      intArray1[4] = 2023;
      intArray1[5] = 1119;
      intArray1[6] = 2023;
      intArray1[7] = 2023;
      MathArrays.distance1(intArray0, intArray1);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8333333333333334;
      doubleArray0[1] = 1489.3149257497;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][7];
      doubleArray2[0] = null;
      doubleArray2[1] = doubleArray2[0];
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = null;
      doubleArray2[4] = null;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 939.3514859044;
      doubleArray3[1] = 1489.3149257497;
      doubleArray3[2] = 0.8333333333333334;
      doubleArray3[3] = 1.0;
      doubleArray3[4] = 939.3514859044;
      doubleArray3[5] = 1489.3149257497;
      doubleArray3[6] = 575.77234;
      doubleArray3[7] = 1489.3149257497;
      doubleArray3[8] = 1489.3151588919247;
      doubleArray2[7] = doubleArray3;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.scale((-1279.343067252), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(632.02, 632.02, (-3.356118100840571E-7), 296.4767212986897);
      assertEquals(399449.2803004989, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2992;
      intArray0[4] = 213;
      int[] intArray1 = new int[5];
      intArray1[0] = 8;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 213;
      double double2 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2992.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[25];
      longArray0[0] = 1L;
      longArray0[1] = 2278L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.3040000000000002E19;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.3040000000000002E19}, doubleArray2, 0.01);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.3040000000000002E19}, doubleArray3, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-3196.2637F);
      floatArray0[6] = 1.0F;
      floatArray0[7] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 3976;
      intArray0[1] = (-2146484551);
      intArray0[2] = (-2613);
      intArray0[3] = 0;
      intArray0[4] = (-2147105539);
      intArray0[5] = 1582;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 0.0F;
      doubleArray4[1] = 3.834E-20;
      doubleArray4[2] = (double) (-3.4028235E38F);
      doubleArray4[3] = 0.3936265707015991;
      doubleArray4[4] = (double) 0.0F;
      doubleArray4[5] = 1102.676;
      doubleArray4[6] = (double) 0.0F;
      doubleArray4[7] = (double) 0;
      double[] doubleArray5 = MathArrays.scale(Float.POSITIVE_INFINITY, doubleArray4);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN}, doubleArray5, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1191);
      assertEquals(1191, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2368);
      floatArray0[1] = (float) (-2368);
      floatArray0[2] = (float) (-2368);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-2368);
      floatArray1[1] = (float) (-2368);
      floatArray1[2] = (-3.4028235E38F);
      floatArray1[3] = (float) (-2368);
      floatArray1[4] = Float.POSITIVE_INFINITY;
      floatArray1[5] = (-3196.2637F);
      floatArray1[6] = 1.0F;
      floatArray1[7] = (float) (-2368);
      floatArray1[8] = (-3.4028235E38F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1294;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 1294;
      doubleArray0[3] = (double) 1294;
      doubleArray0[4] = (double) 1294;
      MathArrays.scaleInPlace(1294, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 1294;
      integerArray0[1] = (Integer) 1294;
      integerArray0[2] = (Integer) 1294;
      integerArray0[3] = (Integer) 1294;
      integerArray0[4] = (Integer) 1294;
      integerArray0[5] = (Integer) 1294;
      integerArray0[6] = (Integer) 1294;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.scaleInPlace((double) integerArray0[5], doubleArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.166720184E9, 0.0, 2.166720184E9, 2.166720184E9}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      MathArrays.checkRectangular(longArray0);
      MathArrays.copyOf(doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = 0.0F;
      MathArrays.equals((float[]) null, floatArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = (-4.813899778443457E-9);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = (double) 1.0F;
      doubleArray1[5] = (double) 0L;
      doubleArray1[6] = (double) 1.0F;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray1);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-476.367693046);
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = 5.074;
      doubleArray3[4] = (double) 217;
      doubleArray3[5] = 5.074;
      doubleArray3[6] = (-1.0);
      doubleArray3[7] = 5.074;
      doubleArray3[8] = (-1.0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bad value for maximum iterations number: {0}";
      stringArray0[1] = "bad value for maximum iterations number: {0}";
      stringArray0[2] = "@VAVJ hYxg";
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1048.45609, 1048.45609, 1048.45609, 0.0);
      assertEquals(1099260.172658088, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1456.99824226122;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1456.99824226122;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1456.99824226122;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"`e\",b";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-2368);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-3070);
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = 413.70928179;
      doubleArray2[6] = (-654.248445);
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, false);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, (-2368.0));
      assertArrayEquals(new double[] {(-987.4765038743169), 0.0, 0.0, (-1280.216582303274), 0.0, 172.52035270369248, (-272.8272665261014)}, doubleArray3, 0.01);
      
      boolean boolean2 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(boolean2);
      
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) (-2368);
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray4, mathArrays_OrderDirection2, false);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[25];
      longArray0[0] = 1L;
      longArray0[1] = 2278L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = new long[7];
      longArray0[1] = 1L;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=kq{3";
      stringArray0[1] = "\"`e\",b";
      stringArray0[2] = "";
      stringArray0[3] = "\"`e\",b";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double double0 = 506.261;
      try { 
        MathArrays.normalizeArray(doubleArray0, 914.48218);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[][] longArray0 = new long[0][7];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-830.3);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-359.5460671118547);
      doubleArray0[3] = 2741.210811469;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1033.2);
      doubleArray0[6] = 56.8942163058;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2189.58239849;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 114);
      assertEquals(114, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1191.0937), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GQ{t(SK*x tv0";
      stringArray0[1] = "GQ{t(SK*x tv0";
      stringArray0[2] = "P?8m/4";
      stringArray0[3] = "@VAVJ hYxg";
      stringArray0[4] = "@VAVJ hYxg";
      stringArray0[5] = "GQ{t(SK*x tv0";
      stringArray0[6] = "bad value for maximum iterations number: {0}";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-962));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@VAVJ hYxg";
      stringArray0[1] = "bad value for maximum iterations number: {0}";
      stringArray0[2] = "GQ{t(SK*x tv0";
      stringArray0[3] = "GQ{t(SK*x tv0";
      stringArray0[4] = "bad value for maximum iterations number: {0}";
      stringArray0[5] = "cannot discard a negative number of elements ({0})";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-3070);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3070);
      doubleArray0[3] = (double) (-3070);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-3,070 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[][] longArray0 = new long[1][2];
      long[] longArray1 = new long[1];
      longArray1[0] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.linearCombination(19.0, 394.987193, Double.NEGATIVE_INFINITY, (-713.242308409763), 1.0, (double) 1L, 1.0, (-4286.78699693586));
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 2.0, 3.0, 2.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[7];
      longArray1[0] = 1L;
      longArray1[1] = 2278L;
      longArray1[2] = 0L;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.copyOf(doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.linearCombination((-1.9841269659586505E-4), 0.19999999999923582, 800.6702944114446, 1089.55, 800.6702944114446, 0.375, 5.669184079525E-24, (-1.9841269659586505E-4));
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 592L;
      longArray2[1] = 2760L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = 2760L;
      longArray3[1] = 2760L;
      longArray3[2] = 2760L;
      longArray3[3] = 562L;
      longArray3[4] = 2760L;
      longArray3[5] = 2760L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 592L;
      longArray4[1] = 592L;
      longArray4[2] = 2760L;
      longArray4[3] = 592L;
      longArray4[4] = 562L;
      longArray4[5] = 562L;
      longArray4[6] = 562L;
      longArray4[7] = 592L;
      longArray4[8] = 562L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 592L;
      longArray5[1] = 2760L;
      longArray5[2] = 562L;
      longArray5[3] = 2760L;
      longArray5[4] = 592L;
      longArray5[5] = 2760L;
      longArray5[6] = 2760L;
      longArray5[7] = 592L;
      longArray5[8] = 2760L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = 562L;
      longArray6[1] = 1674L;
      longArray6[2] = 562L;
      longArray6[3] = (-1L);
      longArray6[4] = 2760L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      longArray7[0] = 592L;
      longArray7[1] = 2760L;
      longArray7[2] = (-1L);
      longArray7[3] = (-1L);
      longArray7[4] = (-1L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      longArray8[0] = (-1L);
      longArray8[1] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      longArray9[0] = (-1L);
      longArray9[1] = 562L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[][] doubleArray1 = new double[5][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1294;
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.8333333333333334;
      doubleArray0[1] = 1489.3149257497;
      doubleArray0[2] = 939.3514859044;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 914.48218;
      doubleArray0[6] = 800.6702944114446;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.700416E38, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-16);
      intArray0[1] = 15;
      intArray0[2] = (-1455);
      intArray0[3] = 182;
      intArray0[4] = (-453);
      intArray0[5] = 134217729;
      intArray0[6] = 0;
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 997.3905716233251;
      doubleArray0[1] = 1671.4;
      doubleArray0[2] = (-1969.79);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1166.5246044726);
      doubleArray0[7] = (-1436.090488);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1671.4;
      doubleArray1[2] = 1671.4;
      doubleArray1[3] = (-1969.79);
      doubleArray1[4] = 997.3905716233251;
      doubleArray1[5] = 1671.4;
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2368);
      intArray0[2] = (-3070);
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2368));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 5.074;
      doubleArray0[1] = 0.0;
      float[] floatArray0 = new float[10];
      floatArray0[0] = 1930.0F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 1930.0F;
      floatArray1[1] = (float) (-274);
      floatArray1[2] = (-102.99F);
      floatArray1[3] = 1930.0F;
      floatArray1[4] = 1202.2F;
      floatArray1[5] = 1930.0F;
      floatArray1[6] = 1930.0F;
      floatArray1[7] = (float) (-274);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[7] = (-2741.210811469);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1001;
      intArray0[1] = (-1679);
      intArray0[2] = (-704);
      intArray0[3] = (-1508);
      intArray0[4] = 1628967263;
      intArray0[5] = 7385;
      intArray0[6] = 1093;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1001, (-1679), (-704), (-1508), 1628967263, 7385, 1093}, intArray1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-274);
      intArray0[1] = (-274);
      intArray0[2] = (-274);
      intArray0[3] = (-274);
      intArray0[4] = (-274);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1294;
      intArray0[0] = 1294;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 539;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-22), 539);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[3] = (double) 0;
      doubleArray0[7] = (double) (-3124);
      MathArrays.safeNorm(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-94));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-274);
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 5.074;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1191.0937));
      assertArrayEquals(new double[] {(-1209.070907582078), (-4.412667545919993), 0.0, 0.0, 22.389875127998042}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 5.074;
      doubleArray2[1] = (-1191.0937);
      MathArrays.scaleInPlace((-1474.88431675), doubleArray2);
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 4.438921624363781E-8);
      assertArrayEquals(new double[] {(-1.8990484156394556E-10), 4.4579121085201754E-8}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-7483.563023189499), 1756725.4179097293}, doubleArray2, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 997.3905716233251;
      doubleArray0[1] = 1671.4;
      doubleArray0[2] = (-1969.79);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1166.5246044726);
      doubleArray0[7] = (-1436.090488);
      doubleArray0[8] = 4794.66;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1436.090488);
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1671.4;
      doubleArray1[3] = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = Double.NEGATIVE_INFINITY;
      doubleArray1[5] = 2.0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      MathArrays.equals(doubleArray0, doubleArray1);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,436.09 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.248445);
      doubleArray0[1] = (-2.0795028497754178);
      doubleArray0[2] = 1456.99824226122;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2793577.9600000004);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.equals(doubleArray0, doubleArray1);
      int[] intArray0 = new int[4];
      intArray0[0] = 237;
      intArray0[1] = (-1210);
      intArray0[2] = (-814);
      intArray0[3] = 701;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(5572535.959660375, double1, 0.01);
      assertArrayEquals(new double[] {(-2282704.9399400665), (-7255.487520190886), 5083538.387460258, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[15] = (-1.0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 1259, (-666));
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.248445);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1456.99824226122;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[25];
      stringArray0[0] = "=kq{3";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[2] = "";
      stringArray0[3] = "DECREASING";
      stringArray0[4] = "\"`e\",b";
      stringArray0[5] = "";
      stringArray0[6] = "orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian";
      stringArray0[7] = "'a&~^7*q!}bt+h3e";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(11, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5.074;
      doubleArray0[2] = (-1097.8950121802);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale(5.074, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1097.9067370437988;
      doubleArray2[1] = 1097.9067370437988;
      doubleArray2[2] = (-1097.8950121802);
      doubleArray2[3] = (-1097.8950121802);
      doubleArray2[4] = 5.074;
      doubleArray2[5] = 5.074;
      doubleArray2[6] = (-1097.8950121802);
      doubleArray2[7] = (-1097.8950121802);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, (-793.417), 0.0, (-1006.503161233729));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1863.03F;
      floatArray0[2] = 1045.7134F;
      floatArray0[3] = 2931.1616F;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.scale(1045.7134F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1463;
      intArray0[1] = 0;
      intArray0[2] = (-3435);
      intArray0[3] = 0;
      MathArrays.copyOf(intArray0, 2752);
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-3435);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1463;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 1463;
      doubleArray1[5] = (double) 1463;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (1,463 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-540.6528336691);
      doubleArray0[2] = (-921.847);
      doubleArray0[3] = (-413.70928179);
      doubleArray0[4] = (-921.847);
      doubleArray0[5] = (-1979.3108);
      doubleArray0[6] = (-1.0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.scaleInPlace(411.63773907, doubleArray0);
      Double[] doubleArray1 = new Double[4];
      doubleArray0[2] = (-411.63773907);
      doubleArray1[1] = (Double) (-411.63773907);
      Double double0 = new Double((-921.847));
      doubleArray1[2] = double0;
      Double double1 = new Double((-814759.022628833));
      doubleArray1[3] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2356.3286539126;
      doubleArray0[1] = 291.1;
      doubleArray0[2] = 413.70928179;
      MathArrays.checkPositive(doubleArray0);
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2147482454);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 34);
      assertEquals(34, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) (-274);
      doubleArray0[2] = (double) (-274);
      doubleArray0[3] = (double) (-274);
      doubleArray0[4] = (double) (-274);
      doubleArray0[5] = (double) (-274);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -274 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.248445);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1456.99824226122;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2793577.9600000004);
      assertArrayEquals(new double[] {(-2276791.6510871802), 0.0, 5070369.611087181, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MathArrays.linearCombination(819.786, 819.786, 819.786, 819.786);
      MathArrays.linearCombination(540.6528336691, 577.0971565732008, (-1951.3605383514678), 0.0, 1.0, Double.POSITIVE_INFINITY);
      int[] intArray0 = new int[6];
      intArray0[0] = 143;
      intArray0[1] = (-1428);
      intArray0[2] = (-2141186041);
      intArray0[3] = 1675;
      intArray0[4] = 720;
      intArray0[5] = (-2189);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 4.116164446561962E-8;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.scaleInPlace(0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1223.9199464), doubleArray0);
      int int1 = (-340);
      int int2 = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-340);
      MathArrays.normalizeArray(doubleArray2, 40.19140625);
      MathArrays.linearCombination((double) 0, (double) 0, 40.19140625, 0.0, (-1969.913), 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-340.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 217;
      intArray0[1] = (-340);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1));
      MathArrays.linearCombination(1.0, (double) (-1), (double) (-1), (-1.0), (double) 0, (double) 0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-340);
      doubleArray2[4] = (double) 217;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      MathArrays.scaleInPlace((-7.44321345601866E-11), doubleArray0);
      MathArrays.normalizeArray(doubleArray1, (-340));
      assertArrayEquals(new double[] {(-7.44321345601866E-11)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = 1930.0F;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-340);
      floatArray0[5] = (float) 217;
      floatArray0[6] = (float) 217;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MathArrays.linearCombination(577.0971565732008, 0.0, 577.0971565732008, 577.0971565732008);
      int[] intArray0 = new int[5];
      intArray0[0] = (-538);
      intArray0[1] = 0;
      intArray0[2] = 86;
      intArray0[3] = 424;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-538);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = (-538);
      intArray1[2] = (-538);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2368);
      intArray0[2] = (-3070);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2368);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2368);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-3070);
      doubleArray0[6] = (double) (-3070);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-510.75867458079);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2938.4738638034432);
      doubleArray1[1] = (-510.75867458079);
      doubleArray1[2] = (-510.75867458079);
      doubleArray1[3] = (-510.75867458079);
      doubleArray1[4] = (-510.75867458079);
      doubleArray1[5] = (-510.75867458079);
      doubleArray1[6] = (-510.75867458079);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      MathArrays.linearCombination(102.91362, 0.0, (-510.75867458079), (-3689.647281959), 2061.312844356, 3.834E-20, (-2938.4738638034432), 93.0);
      MathArrays.ebeAdd(doubleArray1, doubleArray1);
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection.values();
      MathArrays.normalizeArray(doubleArray1, (-1.0));
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1185.0F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3532.367372206;
      doubleArray0[1] = 1934.026353;
      doubleArray0[2] = (-538.0);
      doubleArray0[3] = 3.189921895578533E7;
      doubleArray0[4] = 1966.43417867;
      doubleArray0[5] = 0.19999998807907104;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.19999998807907104, (-538.0), Double.NaN, 3.189921895578533E7, (-538.0), 1934.026353);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-274);
      int[] intArray0 = new int[5];
      intArray0[0] = (-274);
      intArray0[1] = (-274);
      intArray0[2] = (-274);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-274);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2356.3286539126;
      doubleArray0[1] = 750.5478482519084;
      doubleArray0[2] = 3880072.6440999997;
      doubleArray0[3] = (-1601.9);
      doubleArray0[4] = (-0.7853981633974483);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2356.3286539126;
      doubleArray0[7] = 3.189921895578533E7;
      doubleArray0[8] = 413.70928179;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3.189921895578533E7;
      doubleArray1[1] = 702.475976116182;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 375.08609;
      doubleArray0[1] = 210.075510769;
      doubleArray0[2] = 3880072.6440999997;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 375.08609;
      doubleArray1[1] = (Double) 375.08609;
      doubleArray1[2] = (Double) 210.075510769;
      Double double1 = new Double(375.08609);
      doubleArray1[3] = double1;
      doubleArray1[4] = (Double) 3880072.6440999997;
      doubleArray1[5] = (Double) 210.075510769;
      doubleArray1[6] = (Double) 210.075510769;
      Double double2 = new Double(4425274.689219522);
      doubleArray1[7] = double2;
      doubleArray1[8] = (Double) 210.075510769;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2356.3286539126;
      doubleArray0[1] = 291.1;
      doubleArray0[2] = 413.70928179;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (291.1 <= 413.709)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.scaleInPlace((-806.89772761), doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2351);
      intArray0[2] = 196;
      intArray0[3] = (-340);
      MathArrays.copyOf(intArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 196;
      doubleArray1[1] = (double) 196;
      doubleArray1[2] = (double) 196;
      doubleArray1[3] = (double) (-2351);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 2.893485277253286E-8);
      MathArrays.linearCombination((-2351.0), (double) 0, (-1655.6499314719), 1.304E19, 9.219544613762692E-9, 5.074);
      MathArrays.scaleInPlace((-1), doubleArray2);
      MathArrays.normalizeArray(doubleArray2, (-1));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) (-1);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 196, 261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1294;
      intArray0[0] = 1294;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 539;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-22), 539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1294;
      intArray0[1] = 597;
      intArray0[2] = (-1453);
      intArray0[3] = 11;
      intArray0[4] = 1415;
      intArray0[5] = (-293);
      intArray0[6] = 0;
      intArray0[7] = (-389);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1453);
      doubleArray0[1] = (double) 1415;
      doubleArray0[2] = (double) (-389);
      doubleArray0[3] = (double) 1294;
      doubleArray0[4] = (double) 1294;
      doubleArray0[5] = (double) 1415;
      doubleArray0[6] = (double) 1415;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,453 <= 1,415)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 997.3905716233251;
      doubleArray0[1] = 1671.4;
      doubleArray0[2] = (-1969.79);
      doubleArray0[3] = 5647.93935482538;
      doubleArray0[4] = 0.0;
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1166.5246044726);
      double double1 = (-1436.090488);
      doubleArray0[7] = (-1436.090488);
      doubleArray0[8] = 4794.66;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1671.4;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination(761.887194578033, 0.0, (-155.495517835), 806.6437093, 0.0, 1.0, 905.9722785637, (-155.495517835));
      long[] longArray0 = new long[2];
      longArray0[0] = 1984L;
      longArray0[1] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2368);
      intArray0[2] = (-3070);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2368);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2368);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-3070);
      doubleArray0[6] = (double) (-3070);
      doubleArray0[7] = (double) (-3070);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@VAVJ hYxg";
      stringArray0[1] = "6.jyj9(tl xp.Bl$";
      stringArray0[2] = "";
      stringArray0[3] = "bad value for maximum iterations number: {0}";
      stringArray0[4] = "";
      stringArray0[5] = "P?8m/4";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-2368.0), 0.0, (-2368.0), (-3070.0), (-3070.0), (-3070.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MathArrays.linearCombination((-1578.665718648515), (-1578.665718648515), (-2478.45246), (-703.014886366825), (-2478.45246), (-1578.665718648515), (-1473.6), (-703.014886366825));
      int[] intArray0 = new int[5];
      intArray0[0] = 90;
      intArray0[1] = 90;
      intArray0[2] = 90;
      intArray0[3] = 1917;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0, 90);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 90;
      floatArray0[1] = (float) 93;
      MathArrays.equals((float[]) null, floatArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1294;
      intArray0[1] = 597;
      intArray0[2] = (-1453);
      intArray0[3] = 11;
      intArray0[4] = 1415;
      intArray0[5] = (-293);
      intArray0[6] = 0;
      intArray0[7] = (-389);
      MathArrays.distance1(intArray0, intArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1984L;
      longArray0[1] = 3605L;
      longArray0[2] = 1247L;
      longArray0[3] = 0L;
      longArray0[4] = 1685L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-340.0);
      doubleArray0[2] = (double) 1247L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][7];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-340.0);
      doubleArray2[1] = (double) 0L;
      doubleArray2[2] = (double) 1685L;
      double double0 = MathArrays.distance1(doubleArray2, doubleArray0);
      assertEquals(2932.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-479L);
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[7];
      longArray1[0] = 1L;
      longArray1[1] = 2278L;
      longArray1[2] = 0L;
      MathArrays.checkRectangular(longArray0);
      MathArrays.copyOf(doubleArray0);
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(0.375, (double) 1L, (double) 1L, 1089.55, 1089.55, (double) 0L, (-1345.72244), 19.0);
      assertEquals((-24478.80136), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1821;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2146401792;
      intArray0[4] = 1821;
      intArray0[5] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1821;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1821;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 2146401792;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,821 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 997.3905716233251;
      doubleArray1[1] = 1671.4;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = (-1436.090488);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      double[] doubleArray1 = new double[7];
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Q[R";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "qY";
      stringArray0[5] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 1191);
      assertEquals(1191, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-2368);
      floatArray0[1] = (float) (-2368);
      floatArray0[2] = (float) 93;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double double0 = MathArrays.linearCombination((double) 93, (double) (-2368.0F), 0.5039018405998233, (-1.0));
      assertEquals((-220224.5039018406), double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[8];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 4.116164446561962E-8;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      MathArrays.scaleInPlace(0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1223.9199464), doubleArray0);
      MathArrays.copyOf(intArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-340);
      MathArrays.normalizeArray(doubleArray2, 40.19140625);
      double double0 = MathArrays.linearCombination((double) 0, (double) 0, 40.19140625, 0.0, (-1969.913), 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5422.38;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-540.6528336691);
      doubleArray0[2] = (-921.847);
      doubleArray0[3] = (-413.70928179);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-1979.3108);
      doubleArray0[6] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2287.1258951801638, double0, 0.01);
      
      MathArrays.scaleInPlace(411.63773907, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-222553.1100733371), (-379467.0148484623), (-170298.35338830913), (-1293.198097002624), (-814759.022628833), (-411.63773907)}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) (-411.63773907);
      doubleArray1[1] = (Double) (-411.63773907);
      Double double1 = new Double((-921.847));
      doubleArray1[2] = double1;
      Double double2 = new Double((-814759.022628833));
      doubleArray1[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination(0.0, 0.0, 116.7368496, 0.0, 116.7368496, (-793.417), 0.0, (-1006.503161233729));
      assertEquals((-92621.0009990832), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 997.3905716233251;
      doubleArray0[1] = 1671.4;
      doubleArray0[2] = (-1969.79);
      doubleArray0[3] = 5647.93935482538;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1166.5246044726);
      doubleArray0[7] = (-1436.090488);
      doubleArray0[8] = 4794.66;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.248445);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1456.99824226122;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2534.82;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3575.7967, (-3794.948762567348), 436.13766779628423, 3575.7967);
      assertEquals((-1.2010425628605755E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MathArrays.linearCombination((-1578.665718648515), (-1578.665718648515), (-2478.45246), (-703.014886366825), (-2478.45246), (-1578.665718648515), (-1473.6), (-703.014886366825));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-703.014886366825);
      doubleArray0[2] = 9183185.096220743;
      doubleArray0[3] = (-1473.6);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.linearCombination(577.0971565732008, 0.0, 577.0971565732008, 577.0971565732008);
      int[] intArray0 = new int[5];
      intArray0[0] = (-538);
      intArray0[1] = 0;
      intArray0[2] = 86;
      intArray0[3] = 424;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-538);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-538);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 424;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 333041.1281248734;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -538 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-654.248445);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1456.99824226122;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2534.82;
      doubleArray0[5] = (-2408.9165);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -654.248 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[0][0];
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5.074;
      doubleArray0[2] = (-1097.8950121802);
      doubleArray0[3] = (-2633.583458365953);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.linearCombination(482.371598274727, (-1097.8950121802), 0.0, (-791.5), 806.6437093, (-1017.9281455), (-2633.583458365953), 5.074);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1984L;
      longArray0[1] = 3605L;
      longArray0[2] = 1247L;
      longArray0[3] = 0L;
      longArray0[4] = 1685L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3605L;
      doubleArray0[1] = (double) 1984L;
      doubleArray0[2] = (double) 1984L;
      doubleArray0[3] = (double) 1247L;
      doubleArray0[4] = (double) 3605L;
      doubleArray0[5] = (double) 1247L;
      doubleArray0[6] = (double) 0L;
      MathArrays.scaleInPlace(1984L, doubleArray0);
      assertArrayEquals(new double[] {7152320.0, 3936256.0, 3936256.0, 2474048.0, 7152320.0, 2474048.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 371.7;
      MathArrays.distance1(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "xd\"H_r\fHz$M";
      stringArray0[3] = "ax[cIoiW]DOQnpS{";
      stringArray0[4] = "@W=\".D.jTfB?\\f#";
      stringArray0[5] = "!(G_b,";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "function";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[4][0];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = (-400L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 3226L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = 3226L;
      longArray4[1] = 0L;
      longArray4[2] = (-400L);
      longArray4[3] = 0L;
      longArray4[4] = (-400L);
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = (-1333L);
      longArray4[8] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -400 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray1);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2368);
      intArray0[2] = (-3070);
      intArray0[3] = (-1660);
      intArray0[4] = 90;
      intArray0[5] = (-438);
      intArray0[6] = 93;
      intArray0[7] = 1917;
      MathArrays.copyOf(intArray0, 0);
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-438);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 93;
      doubleArray0[3] = (double) (-2368);
      doubleArray0[4] = (double) 93;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (93 >= -2,368)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1190.1998055236);
      doubleArray0[1] = (-457.6434);
      doubleArray0[2] = (-20.0);
      doubleArray0[3] = 20.0;
      doubleArray0[4] = 377.7604873;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2751.2196172380795;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 377.7604873;
      doubleArray1[1] = 20.0;
      doubleArray1[2] = 1028.8;
      doubleArray1[3] = 290.729;
      doubleArray1[4] = -0.0;
      doubleArray1[5] = (-20.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = MathArrays.linearCombination(577.074, 0.0, 577.074, 577.074);
      assertEquals(333014.40147599997, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-538);
      intArray0[1] = 0;
      intArray0[2] = 86;
      intArray0[3] = 424;
      intArray0[4] = 284;
      double double1 = MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 333014.40147599997;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      MathArrays.linearCombination((-1814.4680885674084), (-1814.4680885674084), (-1814.4680885674084), (-1814.4680885674084));
      double double0 = 0.0;
      MathArrays.linearCombination(6584588.888858929, 6584588.888858929, Double.POSITIVE_INFINITY, 0.0, Double.POSITIVE_INFINITY, 1.304E19);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1814.4680885674084);
      doubleArray0[7] = (double) 0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 4 and 5 are not strictly increasing (\u221E >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2.0, 2.0, (-2011.73), 682.5913, (-2011.73), Double.POSITIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2037);
      intArray0[1] = (-1209);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1525;
      intArray0[6] = (-1519);
      intArray0[7] = 0;
      intArray0[8] = (-1702);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1702));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 5422.38;
      doubleArray0[2] = 2233.744;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2294.7694);
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 577.84549;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 577.84549;
      doubleArray0[3] = 577.84549;
      doubleArray0[4] = 577.84549;
      MathArrays.scaleInPlace(577.84549, doubleArray0);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1648));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = (-274);
      int int1 = (-643);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-274), (-643));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 397;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 397;
      doubleArray0[2] = (double) 397;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 397;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 397;
      doubleArray2[3] = (-142.38482);
      doubleArray2[4] = (-1614.2834979);
      doubleArray2[5] = (double) 397;
      doubleArray2[6] = (double) 397;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-763.2689228258066);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-239.09795255046);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1501.3632780750297;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 997.3905716233251;
      doubleArray0[1] = 1671.4;
      doubleArray0[2] = (-1969.79);
      doubleArray0[3] = 5647.93935482538;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = (-1166.5246044726);
      doubleArray0[7] = (-1436.090488);
      doubleArray0[8] = 4794.66;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {994787.9523631032, 2793577.9600000004, 3880072.6440999997, 3.189921895578533E7, 0.0, Double.POSITIVE_INFINITY, 1360779.6528399559, 2062355.8897240784, 2.29887645156E7}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = (-819.786);
      doubleArray0[2] = 218.0;
      doubleArray0[3] = (-696.128062);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-549.2407662667);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.scaleInPlace((-1.0), doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 217;
      intArray0[1] = (-340);
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = (-1);
      MathArrays.copyOf(intArray0);
      MathArrays.normalizeArray(doubleArray0, (-1));
      MathArrays.linearCombination(1.0, (double) (-1), (double) (-1), (-1.0), (double) 0, (double) 0);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-340);
      doubleArray2[4] = (double) 217;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray2[7] = 506.579684979866;
      doubleArray2[8] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[8][5];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray1;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) (-340);
      doubleArray4[4] = (double) (-1);
      doubleArray4[5] = (double) (-1);
      doubleArray4[6] = (double) (-1);
      doubleArray4[7] = (-1391.0395391576);
      doubleArray3[5] = doubleArray4;
      doubleArray3[6] = doubleArray0;
      doubleArray3[7] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 102.91362;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2155.11444);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (102.914 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1463;
      intArray0[1] = 0;
      intArray0[2] = (-3435);
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2752);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-3435);
      MathArrays.scale(0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[7];
      longArray1[0] = 1L;
      longArray1[1] = 2278L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = 592L;
      longArray1[6] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 592L;
      longArray2[1] = 2278L;
      longArray2[2] = 2278L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = 2278L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      double[] doubleArray1 = MathArrays.scale(1.0, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-579.1405F);
      floatArray0[1] = 3448.101F;
      floatArray0[2] = 1797.0F;
      floatArray0[3] = 538.9F;
      floatArray0[4] = (-832.204F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 597.066F;
      floatArray0[7] = 3322.638F;
      floatArray0[8] = (-367.7459F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2292;
      intArray0[2] = (-4115);
      intArray0[3] = (-2520);
      intArray0[4] = 10;
      intArray0[5] = 0;
      intArray0[6] = 1864;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1423;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1821;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[][] longArray0 = new long[5][5];
      long[] longArray1 = new long[4];
      longArray1[0] = (-479L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-779L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = (-779L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 0L;
      longArray4[1] = (-479L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1863.03F;
      floatArray0[2] = 1045.7134F;
      floatArray0[3] = 2931.1616F;
      MathArrays.equals(floatArray0, floatArray0);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1894.690370696609;
      doubleArray0[5] = 2.0;
      doubleArray0[6] = (-1113.3);
      doubleArray0[7] = (-5037.92);
      doubleArray0[8] = 2033.27948207;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1894.690370696609, 2.0, (-5037.92), 0.0, 0.0, (-1113.3), 3.834E-20, 0.0, 2033.27948207}, doubleArray0, 0.01);
  }
}
