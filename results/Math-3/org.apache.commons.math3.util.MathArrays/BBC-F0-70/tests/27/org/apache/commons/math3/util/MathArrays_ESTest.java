/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 16:07:47 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      doubleArray0[1] = 2216.8142;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-449.7), 2216.8142}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-11), (-202));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = Float.POSITIVE_INFINITY;
      floatArray1[4] = 2851.6F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, Float.POSITIVE_INFINITY, 2851.6F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.34217729E8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long[][] longArray0 = new long[11][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(11, longArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 62;
      intArray0[1] = 10;
      intArray0[2] = 2407;
      intArray0[3] = 2222;
      intArray0[4] = (-1);
      intArray0[5] = (-1115);
      intArray0[6] = 2147078462;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10;
      intArray1[1] = 10;
      intArray1[2] = (-1);
      intArray1[3] = (-1115);
      intArray1[4] = 10;
      intArray1[5] = 2147078462;
      intArray1[6] = 2222;
      intArray1[7] = (-1);
      intArray1[8] = 2407;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {62, 10, 2407, 2222, (-1), (-1115), 2147078462}, intArray0);
      assertArrayEquals(new int[] {10, 10, (-1), (-1115), 10, 2147078462, 2222, (-1), 2407}, intArray1);
      assertEquals((-805671), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2359.249109654;
      doubleArray0[1] = (-3979.340653);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1366.094805140636;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3979.340653));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2359.249109654, (-3979.340653), Double.NaN, 1366.094805140636}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {36962.11202920855, (-62343.918841254075), Double.NaN, 21402.46615904552}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2359.249109654, (-3979.340653), Double.NaN, 1366.094805140636}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2016.562613;
      doubleArray0[1] = (-2958.0737847245546);
      doubleArray0[2] = (-3280.0);
      doubleArray0[3] = 195.963;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2016.562613, (-2958.0737847245546), (-3280.0), 195.963}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4066524.772149388, 8750200.51587465, 1.07584E7, 38401.497369}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2016.562613, (-2958.0737847245546), (-3280.0), 195.963}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4066524.772149388, 8750200.51587465, 1.07584E7, 38401.497369}, doubleArray1, 0.01);
      assertEquals((-5.296336366410835E10), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      double double1 = new Double(0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 2.7112852367682463E-15, 0.0, 0.0, 2.0217439756338078E-10, 3168.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2615.4074832);
      doubleArray0[1] = 1.0531229166855719E65;
      doubleArray0[2] = 8.497745490533466E34;
      doubleArray0[3] = 1402.6840688517955;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-2615.4074832), 1.0531229166855719E65, 8.497745490533466E34, 1402.6840688517955}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-945.125F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 3090.0F;
      floatArray0[3] = (-1217.3436F);
      floatArray0[4] = (-1402.77F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.4E-45F;
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-945.125F), Float.NaN, 3090.0F, (-1217.3436F), (-1402.77F), 0.0F, 1.4E-45F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2615.4074832), 1.0531229166855719E65, 8.497745490533466E34, 1402.6840688517955}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long[][] longArray0 = new long[8][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 841.8684874610044;
      doubleArray0[1] = 841.8684874610044;
      doubleArray0[2] = 841.8684874610044;
      double[] doubleArray1 = MathArrays.scale(841.8684874610044, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {841.8684874610044, 841.8684874610044, 841.8684874610044}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {708742.5501798793, 708742.5501798793, 708742.5501798793}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-16.274F);
      floatArray0[4] = (-612.6985F);
      floatArray0[5] = 3663.9888F;
      floatArray0[6] = (-896.128F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-896.128F);
      floatArray1[1] = (-896.128F);
      floatArray1[2] = (-896.128F);
      floatArray1[3] = 3.4028235E38F;
      floatArray1[4] = (-896.128F);
      floatArray1[5] = (-612.6985F);
      floatArray1[6] = (-3012.69F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertArrayEquals(new float[] {Float.NaN, 3.4028235E38F, 0.0F, (-16.274F), (-612.6985F), 3663.9888F, (-896.128F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-896.128F), (-896.128F), (-896.128F), 3.4028235E38F, (-896.128F), (-612.6985F), (-3012.69F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3663.9888F;
      doubleArray0[1] = (double) (-896.128F);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3663.98876953125, (-896.1279907226562)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-16.274F);
      doubleArray1[1] = (double) (-16.274F);
      doubleArray1[2] = (double) (-612.6985F);
      doubleArray1[3] = (double) 3663.9888F;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-16.27400016784668), (-16.27400016784668), (-612.698486328125), 3663.98876953125}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {264.84308146307376, 264.84308146307376, 375399.4351487756, 1.3424813703251123E7}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-16.274F);
      doubleArray3[1] = (double) 3663.9888F;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 3663.9888F;
      doubleArray3[4] = (double) (-612.6985F);
      doubleArray3[5] = (double) (-896.128F);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {3663.98876953125, (-896.1279907226562)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-16.27400016784668), 3663.98876953125, 0.0, 3663.98876953125, (-612.698486328125), (-896.1279907226562)}, doubleArray3, 0.01);
      assertEquals(8240.379529953003, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 538.3046;
      doubleArray0[1] = 2808.294;
      doubleArray0[2] = 1.3040000000000004E19;
      doubleArray0[3] = (-1561.85);
      doubleArray0[4] = 3.4439717236742845E-8;
      doubleArray0[5] = (-2264.0);
      doubleArray0[6] = 4.9E-324;
      doubleArray0[7] = 1.0625;
      doubleArray0[8] = (-342.552);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {538.3046, 2808.294, 1.3040000000000004E19, (-1561.85), 3.4439717236742845E-8, (-2264.0), 4.9E-324, 1.0625, (-342.552)}, doubleArray0, 0.01);
      assertEquals(1.3040000000000004E19, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {538.3046, 2808.294, 1.3040000000000004E19, (-1561.85), 3.4439717236742845E-8, (-2264.0), 4.9E-324, 1.0625, (-342.552)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1766L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-2289L);
      longArray1[4] = 1953L;
      longArray1[5] = (-178L);
      longArray1[6] = (-4035746434778044925L);
      longArray1[7] = (-5034868814120038111L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-4035746434778044925L);
      longArray2[1] = 483L;
      longArray2[2] = 1953L;
      longArray2[3] = (-2289L);
      longArray2[4] = (-178L);
      longArray2[5] = (-5034868814120038111L);
      longArray2[6] = 1953L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 9.755392680573412E-9;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1236.2443F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1108.941F);
      floatArray0[4] = 2184.2834F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 394.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1236.2443F), 0.0F, (-1108.941F), 2184.2834F, 0.0F, 0.0F, 394.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) (-1236.2443F), (double) (-1236.2443F), (double) 0.0F, (double) 0.0F, 0.7853981633974483);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1.304E19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.3040000000000004E19;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 1.0F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1787.0106F;
      floatArray0[2] = 38.6F;
      floatArray0[2] = 0.0F;
      floatArray0[4] = 1.4E-45F;
      floatArray0[5] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1787.0106F, 0.0F, 0.0F, 1.4E-45F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1780.133952877;
      doubleArray0[2] = 3.4439717236742845E-8;
      double double0 = 3.2451855365842673E32;
      doubleArray0[3] = 3.2451855365842673E32;
      doubleArray0[4] = (-3274.620089152534);
      doubleArray0[5] = (-0.2499999997677497);
      doubleArray0[6] = 261.857;
      doubleArray0[7] = 3.2451855365842673E32;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 1780.133952877, 3.4439717236742845E-8, 3.2451855365842673E32, (-3274.620089152534), (-0.2499999997677497), 261.857, 3.2451855365842673E32}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace(3.2451855365842673E32, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {4.2317219397058845E51, 5.77686495705902E35, 1.1176327226072977E25, 1.0531229166855719E65, (-1.0626749751126087E36), (-8.112963833923715E31), 8.497745490533466E34, 1.0531229166855719E65}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {4.2317219397058845E51, 5.77686495705902E35, 1.1176327226072977E25, 1.0531229166855719E65, (-1.0626749751126087E36), (-8.112963833923715E31), 8.497745490533466E34, 1.0531229166855719E65}, doubleArray0, 0.01);
      assertEquals(1.4893407116226469E65, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 767;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 767, 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1502.0;
      doubleArray0[1] = 2132.2354727;
      doubleArray0[2] = 2520.8627989262227;
      doubleArray0[3] = (-455.089295409);
      doubleArray0[4] = 2570.0606138808107;
      doubleArray0[5] = (-2639.65443608);
      doubleArray0[6] = 2183.296965846;
      doubleArray0[7] = (-537.1226221256717);
      doubleArray0[8] = (-1921.76989);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1502.0;
      doubleArray1[1] = (-537.1226221256717);
      doubleArray1[2] = 2520.8627989262227;
      doubleArray1[3] = 2520.8627989262227;
      doubleArray1[4] = 2132.2354727;
      doubleArray1[5] = 2183.296965846;
      doubleArray1[6] = (-2639.65443608);
      doubleArray1[7] = 2132.2354727;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-603.1120984538045);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3866.7598552396194);
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2827.7202333366226);
      doubleArray0[1] = (-2827.7202333366226);
      doubleArray0[2] = (-2827.7202333366226);
      doubleArray0[3] = (-2827.7202333366226);
      doubleArray0[4] = (-2827.7202333366226);
      doubleArray0[5] = (-2827.7202333366226);
      doubleArray0[6] = (-2827.7202333366226);
      doubleArray0[7] = (-2827.7202333366226);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2827.7202333366226);
      doubleArray1[1] = (-2827.7202333366226);
      doubleArray1[2] = (-2827.7202333366226);
      doubleArray1[3] = (-2827.7202333366226);
      doubleArray1[4] = (-2827.7202333366226);
      doubleArray1[5] = (-2827.7202333366226);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(1440.4608518, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4073220.295964166), (-4073220.295964166), (-4073220.295964166), (-4073220.295964166), (-4073220.295964166), (-4073220.295964166), (-4073220.295964166), (-4073220.295964166)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2827.7202333366226);
      doubleArray3[1] = (-3795.697231191);
      doubleArray3[2] = 2264.03912;
      doubleArray3[3] = 1440.4608518;
      doubleArray3[4] = (-3795.697231191);
      doubleArray3[5] = 1440.4608518;
      doubleArray3[6] = (-3795.697231191);
      doubleArray3[7] = (-3795.697231191);
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(8, doubleArray3.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(13, doubleArray4.length);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-3795.697231191), 2264.03912, 1440.4608518, (-3795.697231191), 1440.4608518, (-3795.697231191), (-3795.697231191)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226), (-2827.7202333366226)}, doubleArray1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 154.2F;
      floatArray0[1] = 154.2F;
      floatArray0[2] = 154.2F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 154.2F;
      floatArray0[5] = 154.2F;
      floatArray0[6] = 154.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {154.2F, 154.2F, 154.2F, Float.NaN, 154.2F, 154.2F, 154.2F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) 154.2F;
      doubleArray0[2] = (double) 154.2F;
      doubleArray0[3] = (double) 154.2F;
      doubleArray0[4] = (double) 154.2F;
      doubleArray0[5] = (double) 154.2F;
      doubleArray0[6] = (double) Float.NaN;
      doubleArray0[7] = (double) 154.2F;
      doubleArray0[8] = (double) 154.2F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 154.1999969482422, 154.1999969482422, 154.1999969482422, 154.1999969482422, 154.1999969482422, Double.NaN, 154.1999969482422, 154.1999969482422}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 154.1999969482422, 154.1999969482422, 154.1999969482422, 154.1999969482422, 154.1999969482422, Double.NaN, 154.1999969482422, 154.1999969482422}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {154.2F, 154.2F, 154.2F, Float.NaN, 154.2F, 154.2F, 154.2F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 887, 1453);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-741);
      intArray0[1] = 0;
      intArray0[2] = 185;
      intArray0[3] = 583;
      intArray0[4] = 144;
      intArray0[5] = 2144814688;
      intArray0[6] = 4967;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 185;
      intArray1[1] = 185;
      intArray1[2] = (-741);
      intArray1[3] = 144;
      intArray1[4] = (-741);
      intArray1[5] = 185;
      intArray1[6] = 583;
      intArray1[7] = (-741);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {(-741), 0, 185, 583, 144, 2144814688, 4967}, intArray0);
      assertArrayEquals(new int[] {185, 185, (-741), 144, (-741), 185, 583, (-741)}, intArray1);
      assertEquals(2144822248, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance(intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray1.length);
      assertArrayEquals(new int[] {185, 185, (-741), 144, (-741), 185, 583, (-741)}, intArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.7853981633974483;
      doubleArray0[1] = (-803.61444240123);
      doubleArray0[2] = 1.86285714285714278E18;
      doubleArray0[3] = 0.5000000000042687;
      doubleArray0[4] = (-0.16624879837036133);
      doubleArray0[5] = 3556.656529337938;
      doubleArray0[6] = 0.9387911672757241;
      doubleArray0[7] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.7853981633974483, (-803.61444240123), 1.86285714285714278E18, 0.5000000000042687, (-0.16624879837036133), 3556.656529337938, 0.9387911672757241, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = MathArrays.scale(1.86285714285714278E18, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.7853981633974483, (-803.61444240123), 1.86285714285714278E18, 0.5000000000042687, (-0.16624879837036133), 3556.656529337938, 0.9387911672757241, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.46308457867181798E18, (-1.4970189041302912E21), 3.4702367346938774E36, 9.3142857143652339E17, (-3.0969776153564454E17), 6.625543020366673E21, 1.74883383161077734E18, 0.07142194285714284}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int int0 = (-4304);
      int int1 = 1819;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-4304), 1819);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination(2.0217439756338078E-10, 1284.0088544587556, (-1780.133952877), 2287.548913530835, 4957.0, 2606.27, 1198.924658615, 1851.08291659107);
      assertEquals(1.1066445853999134E7, double0, 0.01);
      
      Double double1 = new Double((-3599.6));
      assertNotNull(double1);
      assertEquals((-3599.6), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.400832E38;
      doubleArray0[3] = 3.400832E38;
      double double0 = MathArrays.linearCombination(0.0, 2.0, 13.32812121744692, 3.400832E38, (-624.1986173), 0.0, 2286.53587, 13.32812121744692);
      assertEquals(4.532670113617244E39, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      intArray0[1] = 947;
      intArray0[2] = 253;
      intArray0[3] = 1018;
      intArray0[4] = (-2270);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2444, 947, 253, 1018, (-2270)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 3.400832E38, 3.400832E38}, doubleArray0, 0.01);
      assertEquals(4.809502737752418E38, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 253);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3.400832E38, 3.400832E38}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 126.5, 126.5}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 253;
      integerArray0[1] = (Integer) 253;
      intArray0[2] = 253;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = MathArrays.linearCombination(756.593933, 4.23719669792332E-8, 2.0217439756338078E-10, 0.0, 1284.0088544587556, 4.23719669792332E-8, 1284.0088544587556, 4.23719669792332E-8);
      assertEquals(1.4087033471010306E-4, double0, 0.01);
      
      Double double1 = new Double(2.0217439756338078E-10);
      assertNotNull(double1);
      assertEquals(2.0217439756338078E-10, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 756.593933;
      doubleArray0[1] = 1284.0088544587556;
      doubleArray0[2] = 1.4087033471010306E-4;
      doubleArray0[3] = 1.86285714285714278E18;
      doubleArray0[4] = 4.23719669792332E-8;
      doubleArray0[5] = (double) (-2655);
      doubleArray0[6] = 1.1565658292224E77;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {756.593933, 1284.0088544587556, 1.4087033471010306E-4, 1.86285714285714278E18, 4.23719669792332E-8, (-2655.0), 1.1565658292224E77}, doubleArray0, 0.01);
      assertEquals(1.1565658292224E77, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.4087033471010306E-4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {756.593933, 1284.0088544587556, 1.4087033471010306E-4, 1.86285714285714278E18, 4.23719669792332E-8, (-2655.0), 1.1565658292224E77}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.215354447485439E-79, 1.5639296313980855E-78, 1.7158081883396635E-85, 2.268969933236114E-63, 5.160928171899348E-89, (-3.2338041571467167E-78), 1.4087033471010306E-4}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Double double3 = new Double(0.19999999999923582);
      assertNotNull(double3);
      assertEquals(0.19999999999923582, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-9.007199254740992E15);
      doubleArray1[1] = (-9.007199254740992E15);
      doubleArray1[2] = 0.99;
      doubleArray1[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), 0.99, (-2158.5173189995135)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.6225927682921336E32, 8.112963841460666E31, 3.88665569195515E19, 3.888439117407588E19, (-4273.8642916190365), 4659197.016420848}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-9.007199254740992E15);
      doubleArray0[2] = 0.99;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][0];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.99;
      doubleArray2[1] = (-9.007199254740992E15);
      doubleArray2[2] = (-9.007199254740992E15);
      doubleArray2[3] = (-9.007199254740992E15);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.99;
      doubleArray3[1] = (-9.007199254740992E15);
      doubleArray1[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination((-765.6638), (-1380.4), 448.56, (-756.593933));
      assertEquals(717544.5349335201, double0, 0.01);
      
      int int0 = 1018;
      Double double1 = new Double(1.0);
      assertNotNull(double1);
      assertEquals(1.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-765.6638);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-756.593933);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 861.17813807392);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-765.6638), 0.0, 0.0, (-756.593933)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {433.1545909608477, -0.0, -0.0, 428.02354711307237}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 448.56;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (-1380.4);
      doubleArray3[3] = (double) 1018;
      doubleArray3[4] = 861.17813807392;
      doubleArray3[5] = 717544.5349335201;
      double double3 = MathArrays.distanceInf(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray3.length);
      assertArrayEquals(new double[] {448.56, 1.0, (-1380.4), 1018.0, 861.17813807392, 717544.5349335201}, doubleArray3, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-756.593933);
      doubleArray4[1] = (-756.593933);
      doubleArray4[2] = (-756.593933);
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 432.4343672;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination((-742.81), 0.0, 2.0217439756338078E-10, 0.0, (-742.81), 3741311.269719788, (-772.7409546360221), (-772.7409546360221));
      assertEquals((-2.7784862956775837E9), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Double double2 = new Double((-742.81));
      assertNotNull(double2);
      assertEquals((-742.81), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147483483;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2, 2147483483);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2147473029;
      intArray0[2] = (-21);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = 255;
      intArray0[6] = 1370;
      intArray0[7] = 1;
      intArray0[8] = 294;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[][] longArray1 = new long[3][9];
      longArray1[0] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-236.7760209086876);
      doubleArray0[1] = (-2288.912377107);
      doubleArray0[2] = (-3317.826157);
      doubleArray0[3] = (-985.32918);
      doubleArray0[4] = (-1209.5283446371213);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-236.7760209086876), (-2288.912377107), (-3317.826157), (-985.32918), (-1209.5283446371213)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(0.0, (-2223.9859436033), 0.0, 0.0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-2119.306737), 117.867, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1030.99F);
      floatArray0[1] = 497.0F;
      floatArray0[2] = 2065.23F;
      floatArray0[3] = 4226.1387F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-1030.99F), 497.0F, 2065.23F, 4226.1387F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-2082);
      intArray0[1] = 123;
      intArray0[2] = 1527;
      intArray0[3] = (-153);
      intArray0[4] = 93;
      intArray0[5] = (-332);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2082);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.304E19, 1.304E19, 1.304E19, 1.304E19);
      assertEquals(3.400832E38, double0, 0.01);
      
      Double double1 = new Double(861.17813807392);
      assertNotNull(double1);
      assertEquals(861.17813807392, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1018;
      doubleArray0[1] = 3.400832E38;
      doubleArray0[2] = (double) (-2655);
      doubleArray0[3] = 861.17813807392;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (double) 1018;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1018.0, 3.400832E38, (-2655.0), 861.17813807392, 1.304E19, 1018.0}, doubleArray0, 0.01);
      assertEquals(3.400832E38, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1018.0, 3.400832E38, (-2655.0), 861.17813807392, 1.304E19, 1018.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {1018.0, 3.400832E38, (-2655.0), 861.17813807392, 1.304E19, 1018.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-2655));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-679.44523), doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[][] longArray0 = new long[8][3];
      long[] longArray1 = new long[5];
      longArray1[0] = 2166L;
      longArray1[1] = (-4267615245585081135L);
      longArray1[2] = (-1L);
      longArray1[3] = 255L;
      longArray1[4] = (-862L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 255L;
      longArray2[2] = (-1L);
      longArray2[3] = (-862L);
      longArray2[4] = 714L;
      longArray2[5] = 255L;
      longArray2[6] = (-862L);
      longArray2[7] = 2166L;
      longArray2[8] = (-2531L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-2531L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-862L);
      longArray4[1] = 2166L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (-4267615245585081135L);
      longArray6[1] = (-4267615245585081135L);
      longArray6[2] = (-4267615245585081135L);
      longArray6[3] = 2166L;
      longArray6[4] = 2166L;
      longArray6[5] = 255L;
      longArray6[6] = (-2531L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 714L;
      longArray7[1] = (-862L);
      longArray7[2] = 255L;
      longArray7[3] = (-3906L);
      longArray7[4] = 714L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,267,615,245,585,081,135 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-9.007199254740992E15);
      doubleArray0[2] = 0.99;
      doubleArray0[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), 0.99, (-2158.5173189995135)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-2158.5173189995135), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 4;
      floatArray1[1] = 154.2F;
      floatArray1[2] = (float) 4;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 154.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {4.0F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4.0F, 154.2F, 4.0F, (-1.0F), 154.2F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1712.2241F;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 1712.2241F;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[7];
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray1 = new long[3][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 154.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 154.2F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 154.2F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 154.2F;
      doubleArray0[1] = (double) 154.2F;
      doubleArray0[2] = (double) 154.2F;
      doubleArray0[3] = (double) 154.2F;
      doubleArray0[4] = (double) 154.2F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 154.2F;
      doubleArray2[1] = (double) 154.2F;
      doubleArray2[2] = (double) 154.2F;
      doubleArray2[3] = (double) 154.2F;
      doubleArray2[4] = (double) 154.2F;
      doubleArray2[5] = (double) 154.2F;
      doubleArray1[4] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-756.593933);
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      doubleArray0[2] = 687.914;
      double double1 = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-1780.133952877);
      doubleArray1[2] = 687.914;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      double double0 = (-974.1083222017107);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2180.8);
      doubleArray1[1] = (-2180.8);
      doubleArray1[2] = (-974.1083222017107);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1712.2241F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1712.2241F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1133;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {1133}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (double) 2546L;
      doubleArray0[2] = (-9.007199254740992E15);
      doubleArray0[3] = (double) 2546L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), 2546.0, (-9.007199254740992E15), 2546.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-9.007199254740992E15), 2546.0, (-9.007199254740992E15), 2546.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-9.007199254740992E15);
      doubleArray2[2] = (-9.007199254740992E15);
      doubleArray2[3] = 0.99;
      doubleArray2[4] = 0.99;
      doubleArray2[5] = (double) 2546L;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2254);
      intArray0[1] = (-2260);
      intArray0[2] = (-1476);
      intArray0[3] = 227;
      intArray0[4] = (-368);
      intArray0[5] = (-1445);
      intArray0[6] = 599;
      intArray0[7] = 268;
      intArray0[8] = 2145376205;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2254), (-2260), (-1476), 227, (-368), (-1445), 599, 268, 2145376205}, intArray0);
      assertArrayEquals(new int[] {(-2254), (-2260), (-1476), 227, (-368), (-1445), 599, 268, 2145376205}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-9.007199254740992E15);
      double double0 = (-7.800414592973399E-9);
      doubleArray1[1] = (-7.800414592973399E-9);
      double double1 = 0.99;
      doubleArray1[2] = 0.99;
      doubleArray1[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-9.007199254740992E15);
      doubleArray0[2] = 0.99;
      doubleArray0[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), 0.99, (-2158.5173189995135)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8.112963841460668E31, 1.6225927682921336E32, 8.112963841460666E31, 3.88665569195515E19, 3.888439117407588E19, (-4273.8642916190365), 4659197.016420848}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-2158.5173189995135), (-9.007199254740992E15), 0.99, 0.99, (-9.007199254740992E15), 0.99, (-2158.5173189995135), 0.99);
      assertEquals(1.9433278459775746E19, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), 0.99, (-2158.5173189995135)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-9.007199254740992E15);
      doubleArray0[2] = 0.99;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-9.007199254740992E15), 0.99, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 4;
      Integer integer0 = Integer.valueOf(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(4);
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) int0;
      doubleArray0[8] = (double) int0;
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.linearCombination((-1320.6842), 0.0, (-1072.70491858), 2.579791804E7, 1.9868161777724352E-8, 2286.53587, 5366280.655439315, 2.0);
      assertEquals((-2.7662821009320786E10), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[2] = (-2270);
      intArray0[3] = 947;
      intArray0[4] = (-2651);
      intArray0[5] = 947;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-2270), 947, (-2651), 947}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2580);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2580.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1018);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1018, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2580.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2580.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.751937984496124E-4, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2270));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      doubleArray0[2] = 687.914;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2180.8);
      doubleArray0[6] = (-974.1083222017107);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), (-974.1083222017107)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), (-974.1083222017107)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1787);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(1787, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), (-974.1083222017107)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1,787
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 154.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 154.2F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-449.7);
      doubleArray0[1] = (-449.7);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-449.7), (-449.7), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 5366280.655439315;
      doubleArray1[1] = (-449.7);
      doubleArray1[2] = (double) 154.2F;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      doubleArray0[2] = 687.914;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2180.8);
      int[] intArray0 = new int[5];
      intArray0[0] = 2670;
      intArray0[1] = (-2270);
      intArray0[2] = 13;
      intArray0[3] = (-2270);
      intArray0[4] = 1018;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2670, (-2270), 13, (-2270), 1018}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), 0.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2609.13897426783);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.5138487103411685E-13), (-3.5618227575681246E-13), 1.3764288560923928E-13, 2609.1389742678307, (-2.00087344652441E-16), (-4.3635048121804336E-13), 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 1L;
      double double0 = 2235.753;
      double double1 = (-2625.47122);
      double double2 = 2286.53587;
      double double3 = 0.0;
      double double4 = 1888.69461508;
      double double5 = MathArrays.linearCombination(2.0217439756338078E-10, 5187.515232, 0.0, 0.0, 1.0, (double) 1L, 1067.0, 1888.69461508);
      assertEquals(2015238.1542914088, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      int int0 = 1018;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2546L;
      doubleArray0[1] = (double) 2546L;
      doubleArray0[2] = (-3463.0);
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) 1L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2546.0, 2546.0, (-3463.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(281.64817, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2546.0, 2546.0, (-3463.0), 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {717076.24082, 717076.24082, (-975347.61271), 281.64817, 281.64817}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 268, 1787);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-7.800414592973399E-9);
      doubleArray0[2] = 0.99;
      doubleArray0[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-7.800414592973399E-9), 0.99, (-2158.5173189995135)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = 1437L;
      longArray1[2] = 9007199254740990L;
      longArray1[3] = 1088L;
      longArray1[4] = (-2555L);
      longArray0[0] = longArray1;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 2.0, 2.0217439756338078E-10, 0.0, (-624.1986173), 0.0, 2286.53587, 2.0217439756338078E-10);
      assertEquals(4.622790120243108E-7, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      intArray0[1] = 947;
      intArray0[2] = (-2651);
      intArray0[3] = 1018;
      intArray0[4] = (-2270);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 947;
      floatArray0[1] = (float) 1018;
      floatArray0[2] = 4595.5586F;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2444;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {2444.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {947.0F, 1018.0F, 4595.5586F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "q{[L}xMw,qBTPsTDTlv";
      stringArray0[1] = "?uC";
      stringArray0[2] = "X5qh92ye/";
      stringArray0[3] = "FTQU,j";
      stringArray0[4] = "";
      stringArray0[5] = "H\u0000w86p=";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1513.187866), (-3560.267905754), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-1780.133952877);
      doubleArray3[1] = 687.914;
      doubleArray3[2] = 687.914;
      doubleArray3[3] = 687.914;
      doubleArray3[4] = (-756.593933);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1812);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1812), 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1812), 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-1812), 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-9.007199254740992E15);
      doubleArray0[1] = (-7.800414592973399E-9);
      doubleArray0[2] = 0.99;
      doubleArray0[3] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-9.007199254740992E15), (-7.800414592973399E-9), 0.99, (-2158.5173189995135)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      long[][] longArray0 = new long[9][7];
      long[] longArray1 = new long[5];
      longArray1[0] = 1L;
      longArray1[1] = 1437L;
      longArray1[2] = 9007199254740990L;
      longArray1[3] = 1088L;
      longArray1[4] = (-2531L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1596L;
      longArray2[1] = (-2531L);
      longArray2[2] = 1088L;
      longArray2[3] = (-2531L);
      longArray2[4] = 1L;
      longArray2[5] = 1088L;
      longArray2[6] = (-2531L);
      longArray2[7] = 1088L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1596L;
      longArray3[1] = (-2531L);
      longArray3[2] = 1L;
      longArray3[3] = 1437L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 1L;
      longArray4[2] = (-2531L);
      longArray4[3] = 1596L;
      longArray4[4] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 1088L;
      longArray6[1] = 1L;
      longArray6[2] = 1437L;
      longArray6[3] = 1437L;
      longArray6[4] = 1L;
      longArray6[5] = 1L;
      longArray6[6] = 2546L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = 1088L;
      longArray7[1] = (-2531L);
      longArray7[2] = 9007199254740990L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = (-2531L);
      longArray8[1] = 9007199254740990L;
      longArray8[2] = 1088L;
      longArray8[3] = 1088L;
      longArray8[4] = 1L;
      longArray8[5] = 9007199254740990L;
      longArray8[6] = 2546L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray8));
      
      longArray9[0] = 1L;
      longArray9[1] = 1L;
      longArray9[2] = 2546L;
      longArray9[3] = 1L;
      longArray9[4] = 1L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Double double0 = new Double(1411.7096);
      assertNotNull(double0);
      assertEquals(1411.7096, (double)double0, 0.01);
      
      Double double1 = new Double(2546L);
      assertNotNull(double1);
      assertEquals(2546.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2546L;
      doubleArray0[1] = 1411.7096;
      doubleArray0[2] = 1411.7096;
      doubleArray0[4] = 1411.7096;
      doubleArray0[5] = 1411.7096;
      doubleArray0[6] = (double) 2546L;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {2546.0, 1411.7096, 1411.7096, 0.0, 1411.7096, 1411.7096, 2546.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 2.0, 2.0217439756338078E-10, 0.0, (-624.1986173), 0.0, 2286.53587, 2.0217439756338078E-10);
      assertEquals(4.622790120243108E-7, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      intArray0[1] = 947;
      intArray0[2] = (-2651);
      intArray0[3] = 1018;
      intArray0[4] = (-2270);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2444, 947, (-2651), 1018, (-2270)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2651));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2651.0), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) (-2651);
      integerArray0[1] = (Integer) (-2651);
      integerArray0[2] = (Integer) (-2651);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "^>PlQu?/D*R3@";
      stringArray0[1] = "^>PlQu?/D*R3@";
      stringArray0[4] = "^>PlQu?/D*R3@";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2258.2;
      doubleArray0[1] = 2739.27275270565;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2258.2, 2739.27275270565}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-2540.91198749), 2739.27275270565, 1577.967001579, 2258.2, 2258.2, (-1.0902938113007961E-8), 2258.2, 2739.27275270565);
      assertEquals(2788939.838746459, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {2258.2, 2739.27275270565}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1812);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2145693965;
      intArray1[1] = 2145693965;
      intArray1[2] = 2145693965;
      intArray1[3] = (-1812);
      intArray1[4] = 2145693965;
      intArray1[5] = 2145693965;
      intArray1[6] = 2145693965;
      intArray1[7] = 0;
      intArray1[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {(-1812), 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2145693965, 2145693965, 2145693965, (-1812), 2145693965, 2145693965, 2145693965, 0, 0}, intArray1);
      assertEquals(2145695777, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -449.7 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 2.0, 2.0217439756338078E-10, 0.0, (-624.1986173), 0.0, 2286.53587, 2.0217439756338078E-10);
      assertEquals(4.622790120243108E-7, double0, 0.01);
      
      Integer integer0 = new Integer((-2098));
      assertNotNull(integer0);
      assertEquals((-2098), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4526L;
      longArray0[3] = 1339L;
      Double double0 = new Double(2354.221718395);
      assertNotNull(double0);
      assertEquals(2354.221718395, (double)double0, 0.01);
      
      Double double1 = new Double(4526L);
      assertNotNull(double1);
      assertEquals(4526.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      long[][] longArray1 = new long[0][6];
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
      
      double double2 = MathArrays.linearCombination(2.7947712894978043E7, (-656.59408), (-1785.74), 235.26756192, (double) 683L, 2354.221718395);
      assertEquals((-1.8349115029644604E10), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1712.2241F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1712.2241F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double((-0.05417713522911072));
      assertNotNull(double0);
      assertEquals((-0.05417713522911072), (double)double0, 0.01);
      
      Pair<Double, Double> pair0 = new Pair<Double, Double>(double0, double0);
      assertNotNull(pair0);
      
      Pair<Object, Object> pair1 = new Pair<Object, Object>(pair0);
      assertNotNull(pair1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      int int0 = 1108;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1108;
      doubleArray0[1] = (double) 1108;
      doubleArray0[2] = (double) 1108;
      doubleArray0[3] = (double) 1108;
      doubleArray0[4] = (double) 1108;
      doubleArray0[5] = (double) 1108;
      doubleArray0[6] = (double) 1108;
      doubleArray0[7] = (double) 1108;
      doubleArray0[8] = (double) 1108;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1108);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 861;
      intArray0[1] = (-679);
      intArray0[2] = (-679);
      intArray0[3] = (-679);
      intArray0[4] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {861, (-679), (-679), (-679), 1}, intArray0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "/";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "qN\"WIw=5x_$Ez[";
      stringArray0[4] = "TANGENT_TABLE_A";
      stringArray0[5] = "$VALUES";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.375;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 861;
      doubleArray1[4] = (double) 861;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = 3935.6775515975955;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2176.6F);
      floatArray0[6] = (-2507.55F);
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-2176.6F), (-2507.55F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2176.6F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-2176.60009765625), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination((double) (-2176.6F), (-479.015567735605), 0.0, (double) (-2176.6F), (double) 0.0F, 978.087782216);
      assertEquals(1042625.3315121818, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-2.5857668567479893E-8), (double) 0.0F, (double) 0.0F, (-505.588719217187));
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (-1466.9643171076);
      doubleArray1[3] = (double) (-2176.6F);
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 0.0, (-1466.9643171076), (-2176.60009765625)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2176.60009765625), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 2.0, 2.0217439756338078E-10, 0.0, (-624.1986173), 0.0, 2286.53587, 2.0217439756338078E-10);
      assertEquals(4.622790120243108E-7, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      intArray0[1] = 947;
      intArray0[2] = (-2651);
      intArray0[3] = 1018;
      intArray0[4] = (-2270);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2444, 947, (-2651), 1018, (-2270)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1543.1, (double) (-2270), (double) (-2270), (-825.7343189305772), (-944.24761054));
      assertEquals(5932597.657591072, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(16.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {32.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = 2937.066099;
      double double1 = 1.304E19;
      double double2 = MathArrays.linearCombination((-1.0902938113007961E-8), 0.0, 1.304E19, 2594.6);
      assertEquals(3.3833584E22, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[13];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = ")[3";
      stringArray0[6] = "";
      stringArray0[7] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(13, stringArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.linearCombination(1116.94258591713, 0.0, 1116.94258591713, 8.0E298, (-2112.43765249), (-2518.0));
      assertEquals(8.93554068733704E301, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 2453;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1, 2453, 1, 1, 0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 2453, 1, 1, 0, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4526L;
      longArray0[1] = 1339L;
      longArray0[2] = 1L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 4526L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 4526L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = new Double(2053.380177002);
      assertNotNull(double0);
      assertEquals(2053.380177002, (double)double0, 0.01);
      
      Double double1 = new Double((-2579.446916321971));
      assertNotNull(double1);
      assertEquals((-2579.446916321971), (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(2053.380177002);
      assertNotNull(double2);
      assertEquals(2053.380177002, (double)double2, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(2354.221718395);
      assertNotNull(double3);
      assertEquals(2354.221718395, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(235.26756192);
      assertNotNull(double4);
      assertEquals(235.26756192, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[8];
      longArray1[0] = 1196L;
      longArray1[1] = (-1249L);
      longArray1[2] = 1196L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray1[5] = (-1249L);
      longArray1[6] = 698L;
      longArray1[7] = 1196L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double5 = MathArrays.linearCombination(5.101248E38, (double) 0L, (double) 0L, Double.NaN, (-1603.2), (double) 4368491638549381120L);
      assertEquals(Double.NaN, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      float float1 = 0.0F;
      floatArray0[4] = 0.0F;
      float float2 = (-2176.6F);
      floatArray0[5] = (-2176.6F);
      floatArray0[6] = (-2507.55F);
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, 0.0F, (-2176.6F), (-2507.55F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = (-3460L);
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[3];
      longArray1[0] = (-2098L);
      longArray1[1] = (-1249L);
      longArray1[2] = (-3460L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1494L);
      longArray2[1] = (-2098L);
      longArray2[2] = (-2098L);
      longArray2[3] = (-2098L);
      longArray2[4] = (-3460L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-2098L);
      longArray3[1] = (-1494L);
      longArray3[2] = (-1494L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-825.7343189305772);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1989.90144;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = -0.0;
      doubleArray2[1] = (-825.7343189305772);
      doubleArray2[2] = -0.0;
      doubleArray2[3] = 0.0;
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-825.7343189305772);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-3038.1956889449);
      doubleArray3[6] = (-3950.0);
      doubleArray3[7] = 2.0;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-825.7343189305772), 0.0, 0.0, 0.0, 0.0, (-3038.1956889449), (-3950.0), 2.0}, doubleArray3, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {202230.09, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(4797.32211318861, (-449.7), 3456.59, 0.0);
      assertEquals((-2157355.754300918), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-449.7), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {202230.09, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(202230.09, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace((-449.7), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {202230.09, -0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      Double double0 = new Double(2.0);
      assertNotNull(double0);
      assertEquals(2.0, (double)double0, 0.01);
      
      Double double1 = new Double(3086.8486848031);
      assertNotNull(double1);
      assertEquals(3086.8486848031, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      Double double3 = new Double(3.834E-20);
      assertNotNull(double3);
      assertEquals(3.834E-20, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      Double double4 = new Double(613.812443619437);
      assertNotNull(double4);
      assertEquals(613.812443619437, (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      
      long[][] longArray0 = new long[2][3];
      long[] longArray1 = new long[8];
      longArray1[0] = 4368491638549381120L;
      longArray1[1] = (-1249L);
      longArray1[2] = (-1249L);
      longArray1[3] = (-1249L);
      longArray1[4] = (-1249L);
      longArray1[5] = (-1249L);
      longArray1[6] = (-1249L);
      longArray1[7] = (-1249L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4368491638549381120L;
      longArray2[1] = (-1249L);
      longArray2[2] = 4368491638549381120L;
      longArray2[3] = (-1249L);
      longArray2[4] = 1196L;
      longArray2[5] = (-1249L);
      longArray2[6] = 4368491638549381120L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double double5 = MathArrays.linearCombination(452.724456, (double) (-1249L), (double) (-1249L), (double) (-1249L), (-1603.2), 40.26885);
      assertEquals(929989.1341360001, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(0.0, 2.0, (-4.900559512994992), 0.0, (-624.1986173), 0.0, 2286.53587, (-4.900559512994992));
      assertEquals((-11205.305109532781), double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      int int0 = 947;
      intArray0[1] = 947;
      intArray0[2] = (-2651);
      intArray0[4] = (-2270);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2444, 947, (-2651), 0, (-2270)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2651));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      Double double0 = new Double((-51.0));
      assertNotNull(double0);
      assertEquals((-51.0), (double)double0, 0.01);
      
      Double double1 = new Double(1.5707963267948966);
      assertNotNull(double1);
      assertEquals(1.5707963267948966, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2827.7202333366226);
      doubleArray0[1] = (-2827.7202333366226);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2827.7202333366226);
      doubleArray0[4] = 0.0;
      doubleArray0[6] = 1989.90144;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-2827.7202333366226), (-0.25), 0.0, 1.0);
      assertEquals(706.9300583341557, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), 0.0, 0.0, 1989.90144}, doubleArray1, 0.01);
      assertEquals(5286.559646403135, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double((-2827.7202333366226));
      assertNotNull(double0);
      assertEquals((-2827.7202333366226), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2827.7202333366226);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, (-2827.7202333366226)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.scaleInPlace(1950.298, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1950.298, 0.0, 0.0, (-5514897.115635948)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      doubleArray0[1] = 2216.8142;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible";
      stringArray0[1] = "Ec8Y=&- k";
      stringArray0[2] = ".5P(@!g!wkd,#<";
      stringArray0[3] = ">ye~7?Wa)iXU/u^=}.";
      stringArray0[4] = "NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      doubleArray0[2] = 687.914;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2180.8);
      doubleArray0[6] = (-974.1083222017107);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), (-974.1083222017107)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1787, 268);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-825.7343189305772);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1989.90144;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 0.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = -0.0;
      doubleArray2[1] = (-825.7343189305772);
      doubleArray2[2] = -0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-3038.1956889449);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (-3038.1956889449);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 1989.90144;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection1, true, false);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {1989.90144, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(boolean1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4224.757717276555;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4224.757717276555, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4224.757717276555, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1328.0066;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1328.0066}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[2];
      longArray1[0] = (-2098L);
      longArray1[1] = 2166L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2098L);
      longArray2[1] = (-2098L);
      longArray2[2] = 2166L;
      longArray2[3] = 2166L;
      longArray2[4] = 2166L;
      longArray2[5] = (-2098L);
      longArray2[6] = 2166L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-2098L);
      longArray3[1] = 2166L;
      longArray3[2] = 2890L;
      longArray3[3] = (-2098L);
      longArray3[4] = (-2098L);
      longArray3[5] = 1L;
      longArray3[6] = 2166L;
      longArray3[7] = (-2098L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1L;
      longArray4[1] = 2890L;
      longArray4[2] = 2890L;
      longArray4[3] = 2166L;
      longArray4[4] = 2890L;
      longArray4[5] = 2890L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,098 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination(3.26E18, 2937.066099, 1.304E19, (-2601.6240595335485));
      assertEquals((-2.435034225357747E22), double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.linearCombination(Double.NaN, (-3933.46), 328.0, Double.NaN, (-3933.46), 899.22637433861, 2315.973000224276, (-2601.6240595335485));
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4526L;
      longArray0[1] = 1339L;
      longArray0[2] = 1L;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray1 = new long[2][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 404.053042;
      doubleArray0[1] = (double) 4526L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 1339L;
      doubleArray0[7] = (double) 2546L;
      doubleArray0[8] = (double) 4526L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {404.053042, 4526.0, 1.0, 1.34217729E8, 1.0, 1.0, 1339.0, 2546.0, 4526.0}, doubleArray0, 0.01);
      assertEquals(1.8014398827325092E16, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {404.053042, 4526.0, 1.0, 1.34217729E8, 1.0, 1.0, 1339.0, 2546.0, 4526.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4224.757717276555;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4526L;
      longArray0[1] = 1339L;
      longArray0[2] = 1L;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1812);
      intArray0[1] = (-1812);
      intArray0[2] = 0;
      int int0 = new Integer((-1812));
      assertEquals((-1812), int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      
      int[] intArray0 = new int[5];
      intArray0[0] = 861;
      intArray0[1] = (-679);
      intArray0[2] = (-679);
      intArray0[3] = (-679);
      intArray0[4] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {861, (-679), (-679), (-679), 1}, intArray0);
      assertEquals(0, int0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-756.593933);
      doubleArray0[1] = (-1780.133952877);
      doubleArray0[2] = 687.914;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2180.8);
      doubleArray0[6] = (-974.1083222017107);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-756.593933), (-1780.133952877), 687.914, 1.304E19, (-1.0), (-2180.8), (-974.1083222017107)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1787, 268);
      assertEquals(1787, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-449.7);
      doubleArray0[1] = 2216.8142;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-449.7), 2216.8142}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1, (-202));
      assertEquals(1, objectArray0.length);
      assertNotNull(objectArray0);
      
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, (-3917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.016253198597040663, (-624.1986173), 0.0, 2.0217439756338078E-10, 0.016253198597040663, (-1780.133952877), 0.016253198597040663, 6.52E18);
      assertEquals(1.05970854852705088E17, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1018;
      intArray0[1] = 2444;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1018, 2444}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 3315.667389044782);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-2997.428583));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 1;
      intArray0[2] = (-679);
      intArray0[3] = 831;
      intArray0[4] = 156;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 1, (-679), 831, 156, 0}, intArray0);
      assertEquals(0, int0);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-288.65956060942));
      assertNotNull(double2);
      assertEquals((-288.65956060942), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray2.length);
      assertTrue(boolean0);
      
      double double3 = MathArrays.linearCombination(316.02129265358974, (-288.65956060942), 0.7316888570785522, 1.0, 3.834E-20, (double) 1);
      assertEquals((-91221.83579174906), double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1812);
      intArray0[2] = (-1812);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Double double0 = new Double((-2827.7202333366226));
      assertNotNull(double0);
      assertEquals((-2827.7202333366226), (double)double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(912.2834922);
      assertNotNull(double2);
      assertEquals(912.2834922, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(912.2834922);
      assertNotNull(double3);
      assertEquals(912.2834922, (double)double3, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-20.0));
      assertNotNull(double4);
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2828.302219));
      assertNotNull(double5);
      assertEquals((-2828.302219), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[2]);
      assertEquals(8, doubleArray0.length);
      assertNotNull(double6);
      assertEquals(912.2834922, (double)double6, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-20.0);
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) doubleArray0[1];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 1522.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = 1522.0F;
      floatArray1[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.4E-45F, 1522.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 1522.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2865);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2865));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1108;
      doubleArray0[1] = (double) 1108;
      doubleArray0[2] = (double) 1108;
      doubleArray0[3] = (double) 1108;
      doubleArray0[4] = (double) 1108;
      doubleArray0[5] = (double) 1108;
      doubleArray0[6] = (double) 1108;
      doubleArray0[7] = (double) 1108;
      doubleArray0[8] = (double) 1108;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0, 1108.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 1108);
      assertEquals(1108, objectArray0.length);
      assertNotNull(objectArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1108;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1108.0}, doubleArray2, 0.01);
      assertEquals(1108.0, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[6][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray3.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1108.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1108.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1108.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1108;
      intArray0[1] = 1108;
      intArray0[2] = 1108;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1108, 1108, 1108}, intArray0);
      assertEquals(0, int0);
      
      double double2 = MathArrays.linearCombination(2378.482, (-47.58200364121), (double) 1108, 1.304E19, 1108.0, 1108.0);
      assertEquals(1.4448320000000002E22, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-825.7343189305772);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1989.90144;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4.0, 4.0, 681837.1654597442, 0.0, 3959707.740914074}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 2.0, (-825.7343189305772), 0.0, 1989.90144}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3296.69546664829;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-479.4988415);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3296.69546664829, (-3.141592653589793), 0.0, (-479.4988415)}, doubleArray0, 0.01);
      assertEquals(1.1098130008423632E7, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2699);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2699)}, intArray0);
      assertEquals(0, int0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3296.69546664829, (-3.141592653589793), 0.0, (-479.4988415)}, doubleArray0, 0.01);
      assertEquals(1.1098130008423632E7, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1084);
      intArray0[1] = 1;
      intArray0[2] = (-679);
      intArray0[3] = 831;
      intArray0[4] = 156;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1084), 1, (-679), 831, 156, 0}, intArray0);
      assertEquals(0, int0);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double((-288.65956060942));
      assertNotNull(double2);
      assertEquals((-288.65956060942), (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = (Double) (-1.0);
      doubleArray2[1] = (Double) 0.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray2.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1236.5456913038786;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1198.924658615;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = -0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1236.5456913038786, 0.0, 1198.924658615, (-1.0), (-1.0), -0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2473.091382607757, 0.0, 2397.84931723, (-2.0), (-2.0), -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1236.5456913038786, 0.0, 1198.924658615, (-1.0), (-1.0), -0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1198.924658615;
      doubleArray2[1] = 1236.5456913038786;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1236.5456913038786;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1.0);
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 1706.7186;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1084);
      intArray0[1] = 1;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2827.7202333366226);
      doubleArray0[1] = (-2827.7202333366226);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2827.7202333366226);
      doubleArray0[4] = (-2827.7202333366226);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2827.7202333366226);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), (-2827.7202333366226), 0.0, 0.0, (-2827.7202333366226)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1712.2241F;
      floatArray0[2] = 1712.2241F;
      floatArray0[3] = 1712.2241F;
      floatArray0[4] = 1712.2241F;
      floatArray0[5] = 1712.2241F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1712.2241F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1712.2241F;
      floatArray1[4] = 1712.2241F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(5, floatArray1.length);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1712.2241F, 1.0F, 1712.2241F, 1712.2241F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1712.2241F, 1712.2241F, 1712.2241F, 1712.2241F, 1712.2241F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-2827.7202333366226), (-2827.7202333366226), 0.0, (-2827.7202333366226), (-2827.7202333366226), 0.0, 0.0, (-2827.7202333366226)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.4E-45F;
      floatArray0[3] = 1522.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NaN;
      floatArray1[1] = 1522.0F;
      floatArray1[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.4E-45F, 1522.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NaN, 1522.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2865));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1712.2241F;
      floatArray0[1] = 1712.2241F;
      floatArray0[2] = 1712.2241F;
      floatArray0[3] = 1712.2241F;
      floatArray0[4] = 1712.2241F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1712.2241F, 1712.2241F, 1712.2241F, 1712.2241F, 1712.2241F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1712.2241F;
      doubleArray1[1] = (double) 1712.2241F;
      doubleArray1[2] = (double) 1712.2241F;
      doubleArray1[3] = (double) 1712.2241F;
      doubleArray1[4] = (double) 1712.2241F;
      doubleArray1[5] = (double) 1712.2241F;
      doubleArray1[6] = (-1336.03932847);
      doubleArray1[7] = (double) 1712.2241F;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1712.22412109375, 1712.22412109375, 1712.22412109375, 1712.22412109375, 1712.22412109375, 1712.22412109375, (-1336.03932847), 1712.22412109375}, doubleArray1, 0.01);
      assertEquals(1712.22412109375, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.0, 2.0, 2.0217439756338078E-10, 0.0, (-624.1986173), 0.0, 2286.53587, 2.0217439756338078E-10);
      assertEquals(4.622790120243108E-7, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2444;
      intArray0[1] = 947;
      intArray0[2] = (-2651);
      intArray0[3] = 1018;
      intArray0[4] = (-2270);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {2444, 947, (-2651), 1018, (-2270)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 0;
      Pair<Object, Object>[] pairArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, pairArray0.length);
      assertNotNull(pairArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4846.901692;
      doubleArray0[3] = 2.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 4846.901692, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.0, 9693.803384, 4.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 4846.901692, 2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 4846.901692, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.0), 0.0, 9693.803384, 4.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4.698492202382493E7, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 0.0, 4846.901692, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double2 = MathArrays.linearCombination(0.0, (-3422.7279768684), 4846.901692, (-3422.7279768684), (-3592.5372240717193), 507.3758773189537);
      assertEquals((-1.8412392748203576E7), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1236.5456913038786;
      doubleArray0[0] = 1236.5456913038786;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,236.546 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4223.53074034627;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1951);
      intArray0[1] = 0;
      intArray0[2] = 2791;
      intArray0[3] = 209;
      intArray0[4] = 1596;
      intArray0[5] = 6;
      intArray0[6] = 1;
      intArray0[7] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1951), 0, 2791, 209, 1596, 6, 1, 0}, intArray0);
      assertArrayEquals(new int[] {(-1951), 0, 2791, 209, 1596, 6, 1, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray0 = new long[1][8];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1596;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4223.53074034627, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.7838211914649915E7, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3296.69546664829;
      doubleArray0[1] = (-8.56684806921697);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-479.4988415);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3296.69546664829, (-8.56684806921697), 0.0, (-479.4988415)}, doubleArray0, 0.01);
      assertEquals(1.1098193529705072E7, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2699);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-2699)}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3296.69546664829, (-8.56684806921697), 0.0, (-479.4988415)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ". y#lS=qO(,'J]JJ";
      stringArray0[1] = "RytSrknmt-";
      stringArray0[2] = "";
      stringArray0[3] = ")[3";
      stringArray0[4] = "LmB=-Z]R";
      stringArray0[5] = "";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[4];
      long[][] longArray1 = new long[3][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2158.5173189995135);
      doubleArray0[1] = (-2158.5173189995135);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2158.5173189995135), (-2158.5173189995135)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2158.5173189995135), (-2158.5173189995135)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2855.79;
      doubleArray0[1] = (-1420.1585);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-491.0);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[7] = (-2040.0023775);
      doubleArray0[8] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2855.79, (-1420.1585), 0.0, 0.0, 0.0, (-491.0), Double.NEGATIVE_INFINITY, (-2040.0023775), 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2855.79, (-1420.1585), 0.0, 0.0, 0.0, (-491.0), Double.NEGATIVE_INFINITY, (-2040.0023775), 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {2855.79, (-1420.1585), 0.0, 0.0, 0.0, (-491.0), Double.NEGATIVE_INFINITY, (-2040.0023775), 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1400;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = 164;
      intArray0[4] = (-641);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {1400, (-1), 0, 164, (-641)}, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2364);
      intArray1[2] = (-1);
      double double3 = MathArrays.distance(intArray1, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(3, intArray1.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, (-2364), (-1)}, intArray1);
      assertArrayEquals(new int[] {1400, (-1), 0, 164, (-641)}, intArray0);
      assertEquals(2746.5924342719654, double3, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathArrays.linearCombination(3.834E-20, 3.834E-20, 0.0, (-299.2749051088528), 0.0, (-299.2749051088528));
      assertEquals(1.4699556E-39, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 131.302203706794;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2975.46078);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-1296.478341);
      doubleArray0[5] = (-1112.2049010966);
      doubleArray0[6] = (-452.99152);
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {131.302203706794, 0.0, (-2975.46078), 3.834E-20, (-1296.478341), (-1112.2049010966), (-452.99152), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {131.302203706794, 0.0, (-2975.46078), 3.834E-20, (-1296.478341), (-1112.2049010966), (-452.99152), (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {131.302203706794, 0.0, (-2975.46078), 3.834E-20, (-1296.478341), (-1112.2049010966), (-452.99152), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {131.302203706794, 0.0, (-2975.46078), 3.834E-20, (-1296.478341), (-1112.2049010966), (-452.99152), (-1.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {262.604407413588, 0.0, (-5950.92156), 7.668E-20, (-2592.956682), (-2224.4098021932), (-905.98304), (-2.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 4526L;
      longArray0[1] = 1339L;
      longArray0[2] = 1L;
      longArray0[3] = 2546L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {4526L, 1339L, 1L, 2546L}, longArray0);
      
      double double0 = MathArrays.linearCombination((double) 1339L, (double) 1L, 613.0481, (double) 2546L, 0.0, 0.0);
      assertEquals(1562159.4626, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[3];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 935;
      intArray0[1] = 935;
      int int2 = (-149);
      intArray0[2] = (-149);
      int int3 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 935, (-149)}, intArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-149);
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = (double) (-149);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-149.0), 3.141592653589793, (-149.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-149);
      doubleArray2[4] = (double) 935;
      doubleArray2[5] = (double) (-149);
      doubleArray2[6] = (double) 935;
      doubleArray2[7] = (double) 0;
      doubleArray2[8] = (double) 935;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = (-2827.7202333366226);
      Double double1 = new Double((-2827.7202333366226));
      assertNotNull(double1);
      assertEquals((-2827.7202333366226), (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.016253198597040663;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0.016 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      
      MathArrays.scaleInPlace(1029.13172, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1.34198776288E22, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 43;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 43, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(912.2834922);
      assertNotNull(double2);
      assertEquals(912.2834922, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(912.2834922);
      assertNotNull(double3);
      assertEquals(912.2834922, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-20.0));
      assertNotNull(double4);
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2828.302219));
      assertNotNull(double5);
      assertEquals((-2828.302219), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((double) doubleArray0[1]);
      assertEquals(8, doubleArray0.length);
      assertNotNull(double6);
      assertEquals(0.0, (double)double6, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertEquals((double)double6, (double)double1, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(0.0);
      assertNotNull(double7);
      assertEquals(0.0, (double)double7, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double1, 0.01);
      
      doubleArray0[7] = double7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 123.7442934;
      doubleArray0[1] = (-2792.462967440098);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-630.5);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (123.744 >= -2,792.463)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1187.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 220.031F;
      floatArray0[4] = 4309.35F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1187.0F, (-1.0F), 0.0F, 220.031F, 4309.35F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(912.2834922);
      assertNotNull(double2);
      assertEquals(912.2834922, (double)double2, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(912.2834922);
      assertNotNull(double3);
      assertEquals(912.2834922, (double)double3, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = new Double((-20.0));
      assertNotNull(double4);
      assertEquals((-20.0), (double)double4, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((-2828.302219));
      assertNotNull(double5);
      assertEquals((-2828.302219), (double)double5, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      
      doubleArray0[5] = double5;
      double double6 = new Double((double) doubleArray0[2]);
      assertEquals(8, doubleArray0.length);
      assertEquals(912.2834922, double6, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 809.391;
      doubleArray0[0] = 809.391;
      double double1 = (-4846.3);
      doubleArray0[1] = (-4846.3);
      double double2 = 2375.8719978889962;
      doubleArray0[2] = 2375.8719978889962;
      double double3 = (-903.004719782367);
      doubleArray0[3] = (-903.004719782367);
      doubleArray0[4] = (-1120.5);
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-903.004719782367), 809.391, (-1120.5), 2375.8719978889962, (-4846.3), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 40.26885;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1140.603;
      doubleArray0[4] = (-51.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {(-51.0), 3.834E-20, 40.26885, 1140.603, 1.7976931348623157E308}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-51.0), 3.834E-20, 40.26885, 1140.603, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1420.364327940737;
      doubleArray0[1] = (-3087.342607342002);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 4272.232;
      int int0 = (-1058);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1058));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1108;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2139.86988;
      doubleArray0[1] = (-3299.572);
      doubleArray0[2] = (-463.3322666903039);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2139.86988, (-3299.572), (-463.3322666903039), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4579043.103331216, 1.0887175383184E7, 214676.7893563749, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-91);
      intArray0[1] = 120;
      intArray0[2] = 0;
      intArray0[3] = 155;
      intArray0[4] = 1750;
      intArray0[5] = (-167);
      intArray0[6] = (-3000);
      intArray0[7] = 4866;
      intArray0[8] = (-2333);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-91), 120, 0, 155, 1750, (-167), (-3000), 4866, (-2333)}, intArray1);
      assertArrayEquals(new int[] {(-91), 120, 0, 155, 1750, (-167), (-3000), 4866, (-2333)}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.linearCombination(3940.13838, 100.0, 3439.695733592, (double) (-167), (-4344.083325159081), (-2650.288875));
      assertEquals(1.1332660359232258E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[6][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-51.0);
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-51.0);
      doubleArray0[3] = doubleArray1;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 94;
      int int1 = 2144366446;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 94, 2144366446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 455.4979;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 455.4979, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1812);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-1812)}, intArray0);
      assertEquals(0, int0);
      
      MathArrays.checkPositive(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 455.4979, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 455.4979, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 274;
      intArray0[1] = 328;
      intArray0[2] = 43;
      intArray0[3] = (-1);
      intArray0[4] = 250;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {274, 328, 43, (-1), 250, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 328;
      doubleArray0[1] = (double) 328;
      doubleArray0[2] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1234.9;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = (-2030.4501);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1382.0461740119;
      doubleArray0[6] = (-1077.0770613121565);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {1234.9, 20.0, (-2030.4501), 0.0, 0.0, 1382.0461740119, (-1077.0770613121565), 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1617.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1382.0461740119;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 20.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(14, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1234.9, 20.0, (-2030.4501), 0.0, 0.0, 1382.0461740119, (-1077.0770613121565), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1617.0, 0.0, 1382.0461740119, 0.0, 0.0, 20.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1084);
      intArray0[1] = 1;
      intArray0[2] = (-679);
      intArray0[3] = 831;
      intArray0[4] = 156;
      intArray0[5] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-1084), 1, (-679), 831, 156, 0}, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-679);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 831;
      doubleArray2[4] = (double) (-1084);
      doubleArray2[5] = (double) 156;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-679.0), (-1.0), 831.0, (-1084.0), 156.0}, doubleArray2, 0.01);
      assertEquals(678.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1084);
      floatArray0[1] = (-1168.1442F);
      floatArray0[2] = (float) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1084.0F), (-1168.1442F), 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4846.901692;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 4846.901692, 2.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0, 2.3492456011912465E7, 4.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(4846.901692, 2286.53587, 0.0, 2.0, 0.0, (-1.0), (-624.1986173), (-624.1986173));
      assertEquals(1.1472238490960926E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2446.411595071719);
      doubleArray0[2] = (-780.125629);
      doubleArray0[3] = (-366.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1282.41011));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2446.411595071719), (-780.125629), (-366.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-873.2833557630989), (-278.47755814366394), (-130.64919609323718)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-780.125629);
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, (-2446.411595071719), (-780.125629), (-366.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-873.2833557630989), (-278.47755814366394), (-130.64919609323718)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-780.125629)}, doubleArray2, 0.01);
      assertEquals(780.125629, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      
      double double1 = MathArrays.linearCombination((-1282.41011), (-2601.6240595335485), (-1282.41011), (-780.125629));
      assertEquals(4336789.990064774, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -780.126 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 2739.27275270565;
      doubleArray0[0] = 2739.27275270565;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 189;
      MathArrays.copyOf(intArray0, 189);
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0, (-2396));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 925;
      int int1 = (-349);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 925, (-349));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1236.5456913038786;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1198.924658615;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = -0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3038.1956889449);
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (0 <= 1,198.925)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2031.9203);
      doubleArray0[1] = 1650.0;
      doubleArray0[2] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-20.0);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 713.8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-825.7343189305772);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1989.90144;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 2581L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 0L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 2166L;
      longArray0[3] = 0L;
      longArray0[4] = (-1915L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,915 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.scaleInPlace(100.0, doubleArray0);
      MathArrays.scale(0.0, doubleArray0);
      MathArrays.scale(1.0E-5, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray3[2] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 0;
      longArray6[2] = (long) 0;
      longArray6[3] = (long) 0;
      longArray6[4] = (long) 0;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = (long) 0;
      longArray7[1] = (long) 0;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      longArray8[0] = (long) 0;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      longArray9[0] = (long) 0;
      longArray9[1] = (long) 0;
      longArray9[2] = (long) 0;
      longArray9[3] = 0L;
      longArray9[4] = (long) 0;
      longArray9[5] = (-1296L);
      longArray9[6] = (long) 0;
      longArray9[7] = 1L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,296 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 229;
      intArray0[1] = 0;
      intArray0[2] = 1347;
      intArray0[3] = (-2640);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-2812);
      intArray0[7] = 3209;
      intArray0[8] = 1325;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 3.32;
      doubleArray0[3] = (-920.63751798825);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 9.869604401089358, 11.0224, 847573.4395275654, Double.NaN, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1260.758485340589;
      doubleArray0[2] = (-1964.680260881);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2235.753;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-2625.47122);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-5388.980283);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1661.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1661.0), (-5388.980283)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 265.95;
      doubleArray0[1] = 3050.38332;
      doubleArray0[2] = 787.2853525;
      doubleArray0[3] = (-1591.9844);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1489.99582072447);
      doubleArray0[6] = 2775.62267761;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 265.95;
      doubleArray1[1] = 2775.62267761;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3050.38332;
      doubleArray1[4] = (-1591.9844);
      doubleArray1[5] = (-1591.9844);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-1489.99582072447);
      doubleArray1[8] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1054.7153F);
      floatArray0[1] = (-609.41F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1193.2211F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 140.1F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }
}
