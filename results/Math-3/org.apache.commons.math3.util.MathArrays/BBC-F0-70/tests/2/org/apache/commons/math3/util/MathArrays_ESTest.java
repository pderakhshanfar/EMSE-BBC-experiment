/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:25:38 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 837;
      intArray0[1] = 0;
      intArray0[2] = 134217729;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {837, 0, 134217729, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 134217729;
      intArray2[1] = 134217729;
      intArray2[2] = 134217729;
      intArray2[3] = (-922);
      intArray2[4] = 837;
      intArray2[5] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray2);
      assertArrayEquals(new int[] {837, 0, 134217729, 0}, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, (-922), 837, 134217729}, intArray2);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray2.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(134217729, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = 7;
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(7, (int)integer0);
      
      FieldElement<Object> fieldElement0 = (FieldElement<Object>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<Object, FieldElement<Object>> pair0 = new Pair<Object, FieldElement<Object>>(integer0, fieldElement0);
      assertNotNull(pair0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer1 = new Integer(7);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(7, (int)integer1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int1 = 2147483609;
      int int2 = (-2060);
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483609, (-2060));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = (-1811.4896841);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1811.4896841);
      doubleArray0[1] = (-1811.4896841);
      doubleArray0[2] = (-1811.4896841);
      doubleArray0[3] = (-1811.4896841);
      doubleArray0[4] = (-1811.4896841);
      doubleArray0[5] = (-1811.4896841);
      doubleArray0[6] = (-1811.4896841);
      doubleArray0[7] = (-1811.4896841);
      doubleArray0[8] = (-1811.4896841);
      double[] doubleArray1 = MathArrays.scale((-1811.4896841), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175, 3281494.8756007175}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.349954704019941E10), double1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841), (-1811.4896841)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 4.9E-324;
      doubleArray3[2] = 4.9E-324;
      doubleArray3[3] = (-1115.806175881706);
      doubleArray3[4] = 793.18279156709;
      doubleArray3[5] = (-849.10433904608);
      doubleArray3[6] = (-2197.6830965840477);
      doubleArray3[7] = 2.608E18;
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertArrayEquals(new double[] {2.0, 4.9E-324, 4.9E-324, (-1115.806175881706), 793.18279156709, (-849.10433904608), (-2197.6830965840477), 2.608E18}, doubleArray3, 0.01);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(2.608E18, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1602.4261F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1602.4261F, 1.0F, 0.0F, 0.5F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-110L);
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray2[2] = (-1L);
      longArray2[3] = (-110L);
      longArray2[4] = (-110L);
      longArray2[5] = (-110L);
      longArray2[6] = (-110L);
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-110L);
      longArray3[1] = 1L;
      longArray3[2] = (-1L);
      longArray3[3] = 911L;
      longArray3[4] = 1L;
      longArray3[5] = (-110L);
      longArray3[6] = (-110L);
      longArray3[7] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 1L;
      longArray5[1] = (-1L);
      longArray5[2] = 1L;
      longArray5[3] = 1L;
      longArray5[4] = (-1L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -110 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1545.77050744049);
      doubleArray0[1] = 2039.0;
      doubleArray0[2] = (-1083.30343878251);
      doubleArray0[3] = 1879.217;
      doubleArray0[4] = 762.0;
      doubleArray0[5] = (-1865.595919);
      doubleArray0[6] = 1566.818;
      doubleArray0[7] = 2650.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1510);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1545.77050744049), 2039.0, (-1083.30343878251), 1879.217, 762.0, (-1865.595919), 1566.818, 2650.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(1510, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1545.77050744049);
      doubleArray2[1] = 2039.0;
      doubleArray2[2] = (-1083.30343878251);
      doubleArray2[3] = (-1083.30343878251);
      doubleArray2[4] = 1879.217;
      doubleArray2[5] = 1879.217;
      doubleArray2[6] = (-1865.595919);
      doubleArray2[7] = 772.425412254618;
      doubleArray2[8] = 1879.217;
      // Undeclared exception!
      MathArrays.convolve(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float float0 = 2592.7F;
      floatArray0[2] = 2592.7F;
      float float1 = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.5F;
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = Float.NEGATIVE_INFINITY;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1013.94F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2592.7F, 0.0F, 0.5F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 1013.94F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2592.7F;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.5F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) 0.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Double double1 = new Double(0.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathArrays.linearCombination(0.0, 0.0, 0.0, 2.7553817452272217E-6, (-1.0), 0.0, 0.0, 2.7553817452272217E-6);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1402);
      intArray0[1] = (-513);
      intArray0[2] = 950247199;
      intArray0[3] = (-373);
      intArray0[4] = 0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 950247199;
      intArray1[1] = (-513);
      intArray1[2] = 2147482871;
      intArray1[3] = 0;
      intArray1[4] = (-513);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1402), (-513), 950247199, (-373), 0}, intArray0);
      assertArrayEquals(new int[] {950247199, (-513), 2147482871, 0, (-513)}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2147482137), int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.4311765432357788;
      doubleArray0[1] = 2119.135497111;
      doubleArray0[2] = 3.26E18;
      doubleArray0[3] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.4311765432357788, 2119.135497111, 3.26E18, (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(3.26E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2.0;
      doubleArray3[1] = 4.9E-324;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-1115.806175881706);
      doubleArray3[4] = 793.18279156709;
      doubleArray3[5] = (-849.10433904608);
      doubleArray3[6] = (-2197.6830965840477);
      doubleArray3[7] = 2.608E18;
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertArrayEquals(new double[] {2.0, 4.9E-324, 1.0, (-1115.806175881706), 793.18279156709, (-849.10433904608), (-2197.6830965840477), 2.608E18}, doubleArray3, 0.01);
      assertEquals(8, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertEquals(2.608E18, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1602.4261F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1602.4261F, 1.0F, 0.0F, 0.5F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1644;
      intArray0[1] = 921;
      intArray0[2] = (-1186);
      intArray0[3] = 3;
      intArray0[4] = (-2839);
      intArray0[5] = (-1);
      intArray0[6] = 1061;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1644, 921, (-1186), 3, (-2839), (-1), 1061}, intArray0);
      assertArrayEquals(new int[] {1644, 921, (-1186), 3, (-2839), (-1), 1061}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3243.9483833997;
      doubleArray0[1] = 3243.9483833997;
      doubleArray0[2] = 3.834E-20;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3243.9483833997, 3243.9483833997, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3243.9483833997, 3243.9483833997, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(4587.635799442132, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      double double1 = MathArrays.linearCombination(Double.NaN, (double) 0.0F, 9.313225746154785E-10, (double) 0L);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 3.834E-20;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (double) 0L;
      doubleArray2[5] = (double) 0.0F;
      doubleArray2[6] = (double) 0L;
      doubleArray2[7] = (double) 0L;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 3.834E-20, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray3.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 2441.88;
      try { 
        MathArrays.normalizeArray(doubleArray4, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2744.0F;
      floatArray0[2] = (-459.31857F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2744.0F, (-459.31857F), 0.0F, (-1.0F), 3.4028235E38F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2744.0F;
      doubleArray0[1] = (-481.60631016709);
      doubleArray0[2] = (double) 2744.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2744.0, (-481.60631016709), 2744.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3910.3729538232997, double0, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "YpFhctEW8";
      stringArray0[2] = "";
      stringArray0[3] = "m63GAh65|M56CY%pN";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 9;
      intArray0[1] = 1481;
      intArray0[2] = 257;
      intArray0[3] = 1232;
      intArray0[4] = 2139178392;
      intArray0[5] = (-1622);
      intArray0[6] = (-1249);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1622);
      intArray1[1] = 9;
      intArray1[2] = 1481;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 2146159036;
      intArray0[2] = 0;
      intArray0[3] = (-1838);
      intArray0[4] = (-217);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-217);
      intArray1[1] = 2146159036;
      intArray1[2] = 0;
      intArray1[3] = 2146159036;
      intArray1[4] = 14;
      intArray1[5] = 2146159036;
      intArray1[6] = (-2137354007);
      intArray1[7] = 3;
      intArray1[8] = 0;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {3, 2146159036, 0, (-1838), (-217)}, intArray0);
      assertArrayEquals(new int[] {(-217), 2146159036, 0, 2146159036, 14, 2146159036, (-2137354007), 3, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2.1461608740000238E9, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 43.0F;
      floatArray0[2] = 2475.9028F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 2475.9028F;
      floatArray1[4] = 43.0F;
      floatArray1[5] = 43.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 43.0F, 2475.9028F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2475.9028F, 43.0F, 43.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = (-977.4475508);
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {1.0, (-977.4475508)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(955404.7145649187, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 422.269;
      doubleArray0[1] = 727.1075;
      doubleArray0[2] = (-1366.84);
      doubleArray0[3] = 2585.3064;
      doubleArray0[4] = (-156.2);
      doubleArray0[5] = 1093.756;
      doubleArray0[6] = (-1160.52169044);
      doubleArray0[7] = 9586207.564428864;
      doubleArray0[8] = (-675.67010909);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {422.269, 727.1075, (-1366.84), 2585.3064, (-156.2), 1093.756, (-1160.52169044), 9586207.564428864, (-675.67010909)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {422.269, 727.1075, (-1366.84), 2585.3064, (-156.2), 1093.756, (-1160.52169044), 9586207.564428864, (-675.67010909)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {422.269, 727.1075, (-1366.84), 2585.3064, (-156.2), 1093.756, (-1160.52169044), 9586207.564428864, (-675.67010909)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 526.8540108736;
      doubleArray3[1] = (-156.2);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {526.8540108736, (-156.2)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(5.47526423288433E12, 0.0, 0.0, 0.0, 0.0, (-0.16624882440418567));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(3522);
      assertNotNull(integer0);
      assertEquals(3522, (int)integer0);
      
      Integer integer1 = new Integer(175);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(175, (int)integer1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3522;
      doubleArray0[1] = (double) 169;
      doubleArray0[2] = (double) 175;
      doubleArray0[3] = (double) 169;
      doubleArray0[4] = (double) 3522;
      doubleArray0[5] = (double) 3522;
      doubleArray0[6] = (double) 169;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3522);
      assertNotNull(integer0);
      assertEquals(3522, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1356));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1356), (int)integer1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3522;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {3522.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((-1428.7155549693168), (double) integerArray0[0], (-2321.20095), (-1064.0), 1891.683873009, 1891.683873009, (-2173.6276098), (-4265.700383238611));
      assertEquals(4, integerArray0.length);
      assertEquals(1.0288333629742282E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      int int0 = 3522;
      Integer integer0 = new Integer(3522);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3522, (int)integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(2012.106811418, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 132.49832;
      doubleArray0[1] = 3893.27232854886;
      doubleArray0[2] = 1.073741824E9;
      doubleArray0[3] = 1.4997669872327188E19;
      doubleArray0[4] = 1024.4174490549624;
      doubleArray0[5] = (-2361.64988007582);
      doubleArray0[6] = (-2440.09);
      doubleArray0[7] = 1093.104303508;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {132.49832, 3893.27232854886, 1.073741824E9, 1.4997669872327188E19, 1024.4174490549624, (-2361.64988007582), (-2440.09), 1093.104303508}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {132.49832, 3893.27232854886, 1.073741824E9, 1.4997669872327188E19, 1024.4174490549624, (-2361.64988007582), (-2440.09), 1093.104303508}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(9.313225746154785E-10, 1024.4174490549624, (-93.0), 2.5468154529831085E9);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2.3685383712742908E11), double1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {132.49832, 3893.27232854886, 1.073741824E9, 1.4997669872327188E19, 1024.4174490549624, (-2361.64988007582), (-2440.09), 1093.104303508}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {132.49832, 3893.27232854886, 1.073741824E9, 1.4997669872327188E19, 1024.4174490549624, (-2361.64988007582), (-2440.09), 1093.104303508}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4.241981627753633E19, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0.0, double1, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3510);
      assertNotNull(integer0);
      assertEquals(3510, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3510, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3510);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(3510, (int)integer2);
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (int) integerArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(979.8977, (-1938.8), 2593.1892, 1.34217729E8, (-5763.312976712114), (-2022.86), (-5763.312976712114), 3.834E-20);
      assertEquals(3.480617238409541E11, double0, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      floatArray0[7] = 1696.7455F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F), (-1.0F), (-3.4028235E38F), (-3.4028235E38F), 1696.7455F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1.0F);
      doubleArray1[1] = 2523.0;
      doubleArray1[2] = (double) (-3.4028235E38F);
      doubleArray1[3] = (-1938.8);
      doubleArray1[4] = 857.93;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2523.0, (-3.4028234663852886E38), (-1938.8), 857.93}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(69.0, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2523.0, (-3.4028234663852886E38), (-1938.8), 857.93}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1.0), 2523.0, (-3.4028234663852886E38), (-1938.8), 857.93}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1095.852679;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1095.852679, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1200893.0940714772, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1095.852679, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(1095.852679, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3510);
      assertNotNull(integer0);
      assertEquals(3510, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3510, (int)integer1);
      
      integerArray0[1] = integer1;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1478.7642777;
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 1195.0147656289594);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {1478.7642777}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1195.0147656289594}, doubleArray3, 0.01);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      
      double[][] doubleArray2 = new double[7][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[1] = 0.0F;
      floatArray0[3] = 435.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 435.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0L;
      doubleArray3[1] = (double) 435.0F;
      doubleArray3[2] = (double) 0.0F;
      doubleArray3[3] = (double) 435.0F;
      doubleArray3[4] = (double) 0.0F;
      doubleArray3[5] = (double) 0.0F;
      doubleArray3[6] = (double) 0.0F;
      doubleArray3[7] = (double) 0.0F;
      doubleArray3[8] = (double) 0L;
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.scale(2143258774, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 0L, 1577.5, (-1019.5), (double) 0L, 3.834E-20, (-1471.23));
      assertEquals((-5.64069582E-17), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2.8514065452797928E16;
      doubleArray0[1] = 1.3351899525058677;
      doubleArray0[2] = 1.3351899525058677;
      doubleArray0[3] = 1.3351899525058677;
      doubleArray0[4] = 1.3351899525058677;
      doubleArray0[5] = 1.3351899525058677;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 569.6F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      Integer integer0 = new Integer((-1890));
      assertNotNull(integer0);
      assertEquals((-1890), (int)integer0);
      
      Integer integer1 = new Integer((-1890));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1890), (int)integer1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 569.6F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 569.6F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {569.5999755859375, Double.POSITIVE_INFINITY, 569.5999755859375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {324444.1321875006, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 324444.1321875006}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1890);
      floatArray1[1] = (float) (-1890);
      floatArray1[2] = (float) (-1890);
      floatArray1[3] = 569.6F;
      floatArray1[4] = (float) (-1890);
      floatArray1[5] = (float) (-1890);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1890.0F), (-1890.0F), (-1890.0F), 569.6F, (-1890.0F), (-1890.0F)}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 57.2957763671875;
      doubleArray0[1] = 6145441.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(57.2957763671875, doubleArray0);
      assertEquals(17, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double0 = new Double(3282.8059895187616);
      assertEquals(3282.8059895187616, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1478.7642777);
      assertNotNull(doubleArray2);
      assertEquals(17, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertEquals(17, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 569.6F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(857.93, 979.8977, 679.63977426, 2593.1892, 380.605523510981, 857.93, 979.8977, (-2022.86));
      assertEquals(947455.1916262457, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2022.86);
      doubleArray0[1] = (double) (-3.4028235E38F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2022.86), (-3.4028234663852886E38), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4091962.5796, 1.3766870954424289E42, 1.1579207543382391E77, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-2022.86), (-3.4028234663852886E38), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4091962.5796, 1.3766870954424289E42, 1.1579207543382391E77, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1579207543382391E77, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 407;
      intArray0[0] = 407;
      int int1 = (-952);
      intArray0[1] = (-952);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Integer integer0 = new Integer((-987));
      assertNotNull(integer0);
      assertEquals((-987), (int)integer0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-987);
      floatArray0[1] = (float) (-987);
      floatArray0[2] = (float) (-987);
      floatArray0[3] = (float) (-987);
      floatArray0[4] = (float) (-987);
      floatArray0[5] = (-1.0F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-987.0F), (-987.0F), (-987.0F), (-987.0F), (-987.0F), (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1565), 1773);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int0 = 49;
      int int1 = (-1565);
      int int2 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 49);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      double double0 = MathArrays.linearCombination(2593.1892, 679.63977426, 261.66098564, 1.44888888888888883E18, 1.44888888888888883E18, 1.44888888888888883E18, 979.8977, 261.66098564);
      assertEquals(2.0992790123456793E36, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-352.2F);
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1.0F, (-352.2F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 1.0F, 1.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0.0F;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 63.8;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = 1669.27956479792;
      doubleArray1[3] = (double) 1.0F;
      doubleArray1[4] = 261.66098564;
      doubleArray1[5] = (double) 0.0F;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 569.6F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      double double0 = MathArrays.linearCombination(857.93, 979.8977, 679.63977426, 2593.1892, 380.605523510981, 857.93, 979.8977, (-2022.86));
      assertEquals(947455.1916262457, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2022.86);
      doubleArray0[1] = (double) (-3.4028235E38F);
      doubleArray0[2] = 1.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2022.86), (-3.4028234663852886E38), 1.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.4028234663852886E38, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2479.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-2998.1275), (-2479.0), (-4306.612523825), (-2479.0));
      assertEquals(1.8108450519062173E7, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2147483177;
      intArray0[1] = (-1296);
      intArray0[2] = (-1);
      intArray0[3] = 2147483390;
      intArray0[4] = 67;
      intArray0[5] = 469;
      intArray0[6] = (-1157);
      intArray0[7] = 1437;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483390;
      intArray1[1] = 1196;
      intArray1[2] = 2147483177;
      intArray1[3] = (-1);
      intArray1[4] = 2147483177;
      intArray1[5] = (-1296);
      intArray1[6] = 2147483177;
      intArray1[7] = (-1296);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {2147483177, (-1296), (-1), 2147483390, 67, 469, (-1157), 1437}, intArray0);
      assertArrayEquals(new int[] {2147483390, 1196, 2147483177, (-1), 2147483177, (-1296), 2147483177, (-1296)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5252, int0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 569.6F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(857.93, 979.8977, 679.63977426, 2593.1892, 380.605523510981, 857.93, 979.8977, (-2022.86));
      assertEquals(947455.1916262457, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2593.1892;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (-2.957007209750105E-8);
      doubleArray0[3] = 2593.1892;
      doubleArray0[4] = 1.0;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2593.1892, Double.POSITIVE_INFINITY, (-2.957007209750105E-8), 2593.1892, 1.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1939.725));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 1355;
      Integer integer0 = new Integer(1355);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1355, (int)integer0);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 3552;
      longArray1[1] = (long) 1355;
      longArray1[2] = (long) 1355;
      longArray1[3] = (long) 3552;
      longArray1[4] = (-554L);
      longArray1[5] = (long) 1355;
      longArray1[6] = (long) 3552;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1355;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2488.4530932561265;
      doubleArray0[1] = 2488.4530932561265;
      doubleArray0[2] = 634.15;
      doubleArray0[3] = 0.25534194707870483;
      doubleArray0[4] = (-3317.7);
      doubleArray0[5] = (-1746.1);
      doubleArray0[6] = 72.580508628;
      doubleArray0[7] = 1384.25427718279;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {2488.4530932561265, 2488.4530932561265, 634.15, 0.25534194707870483, (-3317.7), (-1746.1), 72.580508628, 1384.25427718279}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 147;
      Integer integer0 = new Integer(147);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(147, (int)integer0);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.23201E7;
      doubleArray1[1] = 1.2246467991473532E-16;
      doubleArray1[2] = 2105.187657;
      doubleArray1[3] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.23201E7, 1.2246467991473532E-16, 2105.187657, 1.304E19}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2362.1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.23201E7, 1.2246467991473532E-16, 2105.187657, 1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.2316954148751917E-9), (-2.2183575186067708E-32), (-3.813392457511503E-13), (-2362.0999999977676)}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Integer integer0 = new Integer((-987));
      assertNotNull(integer0);
      assertEquals((-987), (int)integer0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-987);
      floatArray0[2] = (float) (-987);
      floatArray0[3] = (float) (-987);
      floatArray0[4] = (float) (-987);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-987);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-987.0F), (-987.0F), (-987.0F), (-987.0F), 0.0F, (-987.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2232.946;
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2232.946;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2232.946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[1][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2479.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      Integer integer0 = new Integer((-2146274595));
      assertNotNull(integer0);
      assertEquals((-2146274595), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2524.19618, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 689;
      intArray0[1] = (-1221);
      intArray0[2] = 708;
      intArray0[3] = 33;
      intArray0[4] = 12;
      intArray0[5] = 2146868675;
      intArray0[6] = 134217729;
      intArray0[7] = (-1478);
      intArray0[8] = 313;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {689, (-1221), 708, 33, 12, 2146868675, 134217729, (-1478), 313}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = 958.0F;
      floatArray0[6] = (float) 0L;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 958.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(269);
      assertNotNull(integer0);
      assertEquals(269, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-987);
      doubleArray0[1] = (double) (-987);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-987.0), (-987.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1974.0), (-1974.0)}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-6888.827), (-1.0), (-485.427915392166), 2586.671715);
      assertEquals((-1248753.831416329), double0, 0.01);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, 434.470812101203, 1.304E19, 3.141592653589793, (double) 0.0F, 1.01, 434.470812101203);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, 1.01, 1.304E19, (-92.966901), (-92.966901), (-3496.6326673288117));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.2122883890399997E21), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[19];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 1172;
      intArray0[4] = 851;
      intArray0[5] = (-17);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(19, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3510);
      assertNotNull(integer0);
      assertEquals(3510, (int)integer0);
      
      integerArray0[0] = integer0;
      double double0 = MathArrays.linearCombination(1378.6, 4032.7013, Double.NaN, 1378.6);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2.6033824355191673E-8);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1378.6;
      doubleArray0[3] = (-2.6033824355191673E-8);
      doubleArray0[4] = 1378.6;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2.6033824355191673E-8), Double.NaN, 1378.6, (-2.6033824355191673E-8), 1378.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.777600105569711E-16, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 3801075.9199999995, (-7.178046051213448E-5), 1900537.9599999997}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-2.6033824355191673E-8), Double.NaN, 1378.6, (-2.6033824355191673E-8), 1378.6}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.777600105569711E-16, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 3801075.9199999995, (-7.178046051213448E-5), 1900537.9599999997}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 3510;
      doubleArray2[1] = (double) 3510;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = (double) (int)integerArray0[0];
      doubleArray2[4] = (-1566.3677865770344);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 19.38724180557928;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 19.38724180557928;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {19.38724180557928, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.38724180557928}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {375.8651448280009, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {19.38724180557928, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {19.38724180557928}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {375.8651448280009, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      MathArrays.scaleInPlace(0.14285714285714285, doubleArray1);
      assertArrayEquals(new double[] {2.769605972225611}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2.769605972225611}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertTrue(boolean0);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {19.38724180557928, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.769605972225611}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {53.69502068971441, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(5, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      
      doubleArray2[3] = 19.38724180557928;
      double[] doubleArray6 = MathArrays.copyOf(doubleArray5);
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {0.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray6, 0.01);
      assertEquals(1, doubleArray5.length);
      assertEquals(1, doubleArray6.length);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3552);
      assertNotNull(integer0);
      assertEquals(3552, (int)integer0);
      
      integerArray0[0] = integer0;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1718.42;
      doubleArray0[1] = 2162.9342804035796;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-654.31049);
      doubleArray0[4] = (-98.7474803068074);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1718.42, 2162.9342804035796, 0.0, (-654.31049), (-98.7474803068074)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(8069125.279935935, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2162.9342804035796;
      doubleArray1[1] = 8069125.279935935;
      doubleArray1[2] = (-654.31049);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-98.7474803068074);
      doubleArray1[5] = (-654.31049);
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2837438.6797009287;
      doubleArray2[1] = (-98.7474803068074);
      doubleArray2[2] = 8069125.279935935;
      doubleArray2[3] = 2162.9342804035796;
      doubleArray2[4] = (-98.7474803068074);
      doubleArray2[5] = (-98.7474803068074);
      doubleArray2[6] = 1718.42;
      doubleArray2[7] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2837438.6797009287, (-98.7474803068074), 8069125.279935935, 2162.9342804035796, (-98.7474803068074), (-98.7474803068074), 1718.42, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2162.9342804035796, 8069125.279935935, (-654.31049), 0.0, (-98.7474803068074), (-654.31049), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(16, doubleArray3.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Integer integer0 = new Integer((-2010));
      assertNotNull(integer0);
      assertEquals((-2010), (int)integer0);
      
      Integer integer1 = new Integer((-2010));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2010), (int)integer1);
      
      Integer integer2 = new Integer(994);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(994, (int)integer2);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1172;
      doubleArray2[1] = (-718.1477);
      MathArrays.scaleInPlace((-952), doubleArray2);
      assertArrayEquals(new double[] {(-1115744.0), 683676.6104}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-775);
      intArray0[1] = (-775);
      intArray0[2] = 2;
      intArray0[3] = 7;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-775), 2, 7}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = (-718.0960921433634);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-718.0960921433634));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      Integer integer0 = new Integer((-2010));
      assertNotNull(integer0);
      assertEquals((-2010), (int)integer0);
      
      Integer integer1 = new Integer((-2010));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-2010), (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      Integer integer2 = new Integer((int) integerArray0[2]);
      assertNotNull(integer2);
      assertEquals(9, integerArray0.length);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals((-2010), (int)integer2);
      
      integerArray0[2] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer1;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) integerArray0[6];
      intArray0[1] = (int) integerArray0[5];
      intArray0[2] = (int) integerArray0[1];
      intArray0[3] = (int) integerArray0[1];
      intArray0[4] = (int) integerArray0[6];
      intArray0[5] = (int) integerArray0[2];
      intArray0[6] = (int) integerArray0[3];
      intArray0[7] = (int) integerArray0[2];
      intArray0[8] = (int) integerArray0[6];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.141592653589793);
      long long0 = 0L;
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = (double) 0L;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 4503599627370496L;
      doubleArray0[2] = (double) (-734L);
      doubleArray0[6] = (double) 4503599627370496L;
      doubleArray0[7] = (double) (-734L);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, (-734.0), (-1.0), 4.503599627370496E15, 0.0, 4.503599627370496E15, (-734.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, (-734.0), (-1.0), 4.503599627370496E15, 0.0, 4.503599627370496E15, (-734.0), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 17 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2479.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1746.7158, (-2479.0), 1746.7158, (-2479.0), 0.0, 1746.7158);
      assertEquals((-8660216.9364), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2232.946;
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2232.946;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2232.946}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1718.42;
      doubleArray0[1] = 2162.9342804035796;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-654.31049);
      doubleArray0[4] = (-98.7474803068074);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1718.42, 2162.9342804035796, 0.0, (-654.31049), (-98.7474803068074)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(8069125.279935935, double0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2162.9342804035796;
      doubleArray1[1] = 8069125.279935935;
      doubleArray1[2] = (-654.31049);
      doubleArray1[3] = 0.0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2479.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(1746.7158, (-2479.0), 1746.7158, (-2479.0), 0.0, 1746.7158);
      assertEquals((-8660216.9364), double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2479.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6145441.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6147920.0, double1, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3552);
      assertNotNull(integer0);
      assertEquals(3552, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3552, (int)integer1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3552;
      intArray0[1] = 3522;
      intArray0[2] = 3522;
      intArray0[3] = 3552;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {3552, 3522, 3522, 3552}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 150.82067;
      doubleArray0[3] = (-2428.23353);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "e";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-3.141592653589793);
      doubleArray1[2] = (-2428.23353);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, (-3.141592653589793), (-2428.23353)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray1;
      doubleArray2[7] = doubleArray1;
      doubleArray2[8] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      Integer integer0 = new Integer(407);
      assertNotNull(integer0);
      assertEquals(407, (int)integer0);
      
      Integer integer1 = new Integer(2147483561);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2147483561, (int)integer1);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 407;
      intArray1[1] = 407;
      intArray1[2] = 2147483561;
      intArray1[3] = 407;
      intArray1[4] = 134217729;
      intArray1[5] = 407;
      intArray1[6] = 407;
      intArray1[7] = 407;
      intArray1[8] = 407;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>((Integer) null, object0);
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 49, (-1565));
      assertNotNull(objectArray0);
      assertEquals(49, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 840;
      intArray0[1] = 49;
      intArray0[2] = 49;
      intArray0[3] = (-1565);
      intArray0[4] = 49;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 840;
      intArray1[1] = 49;
      intArray1[2] = 840;
      intArray1[3] = 49;
      intArray1[4] = 840;
      intArray1[5] = 62;
      intArray1[6] = (-1565);
      intArray1[7] = 840;
      intArray1[8] = 840;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 62;
      intArray2[1] = 62;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("").when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 49, (-1565));
      assertNotNull(objectArray0);
      assertEquals(49, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 840;
      intArray0[1] = 49;
      intArray0[2] = 49;
      intArray0[3] = (-1565);
      intArray0[4] = 49;
      intArray0[5] = (-1565);
      intArray0[6] = (-1565);
      intArray0[7] = 49;
      intArray0[8] = 49;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {840, 49, 49, (-1565), 49, (-1565), (-1565), 49, 49}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 840;
      doubleArray0[1] = (double) (-1565);
      doubleArray0[2] = (double) (-1565);
      doubleArray0[3] = (double) (-1565);
      doubleArray0[4] = (double) 49;
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = (-1417.00749);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {840.0, (-1565.0), (-1565.0), (-1565.0), 49.0, (-1.7976931348623157E308), (-1417.00749)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,565 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-67619.2018);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 6097.862112780685;
      doubleArray0[3] = Double.NaN;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-67619.2018), 1.34217729E8, 6097.862112780685, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-607L);
      longArray2[1] = (-246L);
      longArray2[2] = 426L;
      longArray2[3] = (-322L);
      longArray2[4] = 4577762542105553359L;
      longArray2[5] = 3731L;
      longArray2[6] = (-887L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-887L);
      longArray3[1] = 4577762542105553359L;
      longArray3[2] = (-322L);
      longArray3[3] = (-887L);
      longArray3[4] = (-887L);
      longArray3[5] = (-9223372036854775808L);
      longArray3[6] = (-887L);
      longArray3[7] = (-607L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.626267977502169E7, 0.3333333134651184, 0.3333333134651184, 20.0, 20.0, 1.626267977502169E7, (-3219.3627949), (-3476.03));
      assertEquals(3.418650967582865E8, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3.418650967582865E8;
      doubleArray0[2] = 606.8828988006067;
      doubleArray0[3] = 0.3333333134651184;
      doubleArray0[4] = (-3476.03);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {20.0, 3.418650967582865E8, 606.8828988006067, 0.3333333134651184, (-3476.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 1.16871744381552576E17, 368306.8528566274, 0.11111109786563489, 1.20827845609E7}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {20.0, 3.418650967582865E8, 606.8828988006067, 0.3333333134651184, (-3476.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {400.0, 1.16871744381552576E17, 368306.8528566274, 0.11111109786563489, 1.20827845609E7}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.05, 2.925130437363846E-9, 0.0016477643413190875, 3.000000178813945, (-2.876845136549454E-4)}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[][] longArray0 = new long[7][0];
      long[] longArray1 = new long[6];
      longArray1[0] = (-1L);
      longArray1[1] = 100L;
      longArray1[2] = (-2694L);
      longArray1[3] = (-1925L);
      longArray1[4] = 1L;
      longArray1[5] = 4503599627370495L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray2[2] = (-1925L);
      longArray2[3] = 1L;
      longArray2[4] = (-1925L);
      longArray2[5] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 100L;
      longArray3[1] = (-2694L);
      longArray3[2] = (-1925L);
      longArray3[3] = 100L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1L);
      longArray4[1] = (-2694L);
      longArray4[2] = 1L;
      longArray4[3] = 4503599627370495L;
      longArray4[4] = 4503599627370495L;
      longArray4[5] = (-1925L);
      longArray4[6] = (-1925L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-1L);
      longArray6[1] = (-2694L);
      longArray6[2] = (-2684L);
      longArray6[3] = (-1925L);
      longArray6[4] = 1L;
      longArray6[5] = (-1925L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[8];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (-1L);
      longArray7[1] = (-2684L);
      longArray7[2] = (-2684L);
      longArray7[3] = (-1L);
      longArray7[4] = (-1925L);
      longArray7[5] = (-2694L);
      longArray7[6] = 100L;
      longArray7[7] = (-1925L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((-1304.9964), (double) 0, 0.24740394949913025, 612.113084, (-110.35159543951914), (double) (-952));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(105206.15805294392, double1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[7][0];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 851;
      doubleArray4[1] = (double) 1172;
      doubleArray3[1] = doubleArray4;
      doubleArray3[2] = doubleArray2;
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = (-1526.813);
      doubleArray5[1] = 105206.15805294392;
      doubleArray5[2] = (double) 407;
      doubleArray5[3] = 105206.15805294392;
      doubleArray5[4] = (double) 407;
      doubleArray5[5] = (-110.35159543951914);
      doubleArray5[6] = 105206.15805294392;
      doubleArray5[7] = (double) 0;
      doubleArray3[3] = doubleArray5;
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      
      doubleArray6[0] = (double) 1172;
      doubleArray6[1] = (double) 407;
      doubleArray6[2] = 3079.6895733564143;
      doubleArray6[3] = (double) (-952);
      doubleArray6[4] = 105206.15805294392;
      doubleArray3[4] = doubleArray6;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 569.6F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1152.3384F);
      floatArray0[4] = 717.8016F;
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, (-1152.3384F), 717.8016F, (-3.4028235E38F), (-3.4028235E38F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((-2022.86), 122.8081, 3.141592653589793, 1.0, 2401796.0577473557, (double) 717.8016F, (double) 569.6F, 3288.8767);
      assertEquals(1.7256379160126436E9, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {569.6F, Float.POSITIVE_INFINITY, 0.0F, (-1152.3384F), 717.8016F, (-3.4028235E38F), (-3.4028235E38F)}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3.4028235E38F);
      doubleArray0[1] = 150.82067;
      doubleArray0[2] = (double) (-3.4028235E38F);
      doubleArray0[3] = (double) (-3.4028235E38F);
      doubleArray0[4] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3.4028234663852886E38), 150.82067, (-3.4028234663852886E38), (-3.4028234663852886E38), 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.8938631329669654E38, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 4503599627370496L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "!|=e\"wC/AY\"~z~I";
      stringArray0[2] = "e";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "e";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 407);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Integer integer0 = new Integer((-987));
      assertNotNull(integer0);
      assertEquals((-987), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "e";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "Cumulative probability function returned NaN for argument {0} p = {1}";
      stringArray0[5] = "e";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[0] = "Od6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2232.946;
      doubleArray1[1] = 2232.946;
      doubleArray1[2] = 2232.946;
      doubleArray1[3] = 1095.852679;
      doubleArray1[4] = 2232.946;
      doubleArray1[5] = 2232.946;
      doubleArray1[6] = 1095.852679;
      doubleArray1[7] = 3.141592653589793;
      doubleArray1[8] = 3.141592653589793;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2232.946, 2232.946, 2232.946, 1095.852679, 2232.946, 2232.946, 1095.852679, 3.141592653589793, 3.141592653589793}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2232.946, double0, 0.01);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      stringArray0[1] = "e";
      stringArray0[2] = "e";
      stringArray0[3] = "e";
      stringArray0[4] = "e";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(665.39, 1.626267977502169E7, 0.0, 4.503599627370496E15, 0.0, 0.0);
      assertEquals(1.0821024495501682E10, double0, 0.01);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/#t~age~$'py";
      stringArray0[3] = "x5nGTV0S*";
      stringArray0[4] = ":',58kH,h*b$.9";
      stringArray0[5] = "TCv<yCS9;dE0";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, 1.01, (double) 0.0F, (double) 0.0F, 4190.514580114443, Double.NaN, 481.286, (-4317.335182074866));
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = (float) 0;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray1, floatArray2);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray2, 0.01F);
      assertEquals(2, floatArray1.length);
      assertEquals(1, floatArray2.length);
      assertNotSame(floatArray1, floatArray2);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = 0.24740394949913025;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 3.141592653589793;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.24740394949913025, 0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.151319265849959, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3522);
      assertNotNull(integer0);
      assertEquals(3522, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3522, (int)integer1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][0];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 2232.946;
      long[] longArray0 = new long[2];
      doubleArray0[4] = (double) 0L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-949), (-949));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3510);
      assertNotNull(integer0);
      assertEquals(3510, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3510, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(3510);
      assertNotNull(integer0);
      assertEquals(3510, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(4, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3510, (int)integer1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2685.54435;
      doubleArray0[1] = (double) (int)integerArray0[0];
      doubleArray0[2] = (double) (int)integerArray0[0];
      MathArrays.scaleInPlace(2685.54435, doubleArray0);
      assertArrayEquals(new double[] {7212148.455816923, 9426260.6685, 9426260.6685}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Integer[] integerArray1 = new Integer[4];
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      integerArray1[0] = integer0;
      integerArray1[1] = integer0;
      integerArray1[2] = integer1;
      integerArray1[3] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray1, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray1.length);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {7212148.455816923, 9426260.6685, 9426260.6685}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.0, Double.NEGATIVE_INFINITY, 4032.7013, 1095.852679);
      assertEquals(Double.NaN, double0, 0.01);
      
      Integer integer0 = new Integer(23);
      assertNotNull(integer0);
      assertEquals(23, (int)integer0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 483.9322;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {483.9322, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3130.16118923);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3130.16118923);
      doubleArray1[1] = 4577.707904883348;
      doubleArray1[2] = (-3130.16118923);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3130.16118923);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-3130.16118923), 4577.707904883348, (-3130.16118923), 0.0, 0.0, (-3130.16118923), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3130.16118923), 4577.707904883348, (-3130.16118923), 0.0, 0.0, (-3130.16118923), 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9797909.070561768, 2.0955409662431497E7, 9797909.070561768, 0.0, 0.0, 9797909.070561768, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 4577.707904883348);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {-0.0, 4577.707904883348, -0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, (-3130.16118923), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray3.length);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {0.0, (-3130.16118923), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.valueOf("INCREASING");
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertEquals(MathArrays.OrderDirection.INCREASING, mathArrays_OrderDirection2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Integer integer0 = new Integer((-987));
      assertNotNull(integer0);
      assertEquals((-987), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "e";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "Cumulative probability function returned NaN for argument {0} p = {1}";
      stringArray0[5] = "e";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[0] = "Od6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2428.23353);
      doubleArray0[1] = 2787.20798744205;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 150.82067;
      doubleArray0[5] = (-2428.23353);
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2428.23353), 2787.20798744205, 0.0, 1.0, 150.82067, (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "e";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 407;
      floatArray0[1] = (float) 407;
      floatArray0[2] = (float) 407;
      floatArray0[3] = (float) 407;
      floatArray0[4] = (float) 407;
      floatArray0[5] = (float) 407;
      floatArray0[6] = (float) 407;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {407.0F, 407.0F, 407.0F, 407.0F, 407.0F, 407.0F, 407.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 407);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      Integer integer0 = new Integer(223);
      assertNotNull(integer0);
      assertEquals(223, (int)integer0);
      
      Integer integer1 = new Integer(2147483478);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2147483478, (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2147483478;
      doubleArray1[1] = (-1699.26682387);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2147483478;
      double[] doubleArray2 = MathArrays.scale(3.141592653589793, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {6.746518318190258E9, (-5338.404170358853), 0.0, 6.746518318190258E9}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.147483478E9, (-1699.26682387), 0.0, 2.147483478E9}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (int) integerArray0[0];
      intArray0[2] = 0;
      intArray0[3] = (int) integerArray0[3];
      intArray0[4] = 2147483478;
      intArray0[5] = (int) integerArray0[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {223, 223, 0, 2147483478, 2147483478, 223}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2232.946;
      doubleArray0[1] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2232.946;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2232.946}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray4, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {2232.946, 3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4986047.838916, 14030.013498925427, 9.869604401089358}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double[] doubleArray5 = new double[7];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 3.141592653589793;
      doubleArray5[1] = 2232.946;
      doubleArray5[2] = 2232.946;
      doubleArray5[3] = 3.141592653589793;
      doubleArray5[4] = 2232.946;
      doubleArray5[5] = 2232.946;
      doubleArray5[6] = 3.141592653589793;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-734L);
      longArray0[1] = 4503599627370496L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4503599627370496L;
      doubleArray0[1] = (double) (-734L);
      doubleArray0[2] = (double) (-734L);
      doubleArray0[3] = (-3130.16118923);
      doubleArray0[4] = (double) (-734L);
      doubleArray0[5] = (double) (-734L);
      doubleArray0[6] = (double) 4503599627370496L;
      doubleArray0[7] = (double) (-734L);
      doubleArray0[8] = (double) (-734L);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {4.503599627370496E15, (-734.0), (-734.0), (-3130.16118923), (-734.0), (-734.0), 4.503599627370496E15, (-734.0), (-734.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, 434.470812101203, 1.304E19, 3.141592653589793, (double) 0.0F, 1.01, 434.470812101203);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 3.141592653589793;
      doubleArray0[4] = 3.141592653589793;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 3.141592653589793, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, (-778.4442), (-665.39), 434.470812101203, (double) 0.0F, 150.82067, (double) 0, (double) 0.0F);
      assertEquals((-289092.5336640195), double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 1893.0876F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 1893.0876F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1893.0876F;
      doubleArray0[1] = (double) 1893.0876F;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[6] = (double) 1893.0876F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1893.087646484375, 1893.087646484375, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1893.087646484375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1893.087646484375, 1893.087646484375, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1893.087646484375}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0.0F;
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1893.087646484375, 1893.087646484375, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 1893.087646484375}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 49;
      intArray0[1] = 0;
      intArray0[2] = 106;
      intArray0[3] = 2411;
      intArray0[4] = 1966;
      intArray0[5] = 0;
      intArray0[6] = (-1073741823);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer((-30));
      assertNotNull(integer0);
      assertEquals((-30), (int)integer0);
      
      Integer integer1 = new Integer((-30));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-30), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SINE_TABLE_B";
      stringArray0[1] = "|";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "Od6";
      stringArray0[4] = "e";
      stringArray0[5] = "Od6";
      stringArray0[6] = "Od6";
      stringArray0[7] = "Od6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (-1.0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2257.0F);
      floatArray0[1] = (float) (-734L);
      floatArray0[2] = 1965.9717F;
      floatArray0[3] = 1607.0F;
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = 1965.9717F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2257.0F), (-734.0F), 1965.9717F, 1607.0F, 3.4028235E38F, 1965.9717F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, (-1.0));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.304E19, 434.470812101203, 1.304E19, 3.141592653589793, (double) 0.0F, 1.01, 434.470812101203);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 2.2860509143963117E-8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 20.0, 1.7976931348623157E308, 926.3118490853, 926.3118490853);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.26E18);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.26E18}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1945.868F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4032.7013, double1, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-981L);
      double double2 = MathArrays.linearCombination(3663.903, 926.3118490853, 1623.88503, Double.POSITIVE_INFINITY, 1.304E19, 4032.7013);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2232.946;
      long long0 = 0L;
      long[] longArray0 = new long[2];
      longArray0[0] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Integer integer0 = new Integer((-987));
      assertNotNull(integer0);
      assertEquals((-987), (int)integer0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[1] = "e";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "Cumulative probability function returned NaN for argument {0} p = {1}";
      stringArray0[4] = "";
      stringArray0[5] = "e";
      stringArray0[6] = "e";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[8] = "Od6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = (-3.141592653589793);
      doubleArray0[0] = (-3.141592653589793);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1644;
      intArray0[0] = 1644;
      int int1 = (-1326);
      intArray0[1] = (-1326);
      int int2 = 1432;
      intArray0[2] = 1432;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1326));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X+}z0OK";
      stringArray0[1] = "l";
      stringArray0[2] = "X+}z0OK";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.09090909090909091;
      doubleArray0[1] = 2269.09;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.09090909090909091, 2269.09}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.008264462809917356, 412.56181818181824, 5148769.428100001}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 407);
      assertNotNull(objectArray0);
      assertEquals(407, objectArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
      
      long[][] longArray1 = new long[1][2];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 4503599627370496L;
      doubleArray0[5] = (double) (-734L);
      doubleArray0[6] = (double) 4503599627370496L;
      doubleArray0[7] = (double) (-734L);
      doubleArray0[8] = (double) (-734L);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, 4.503599627370496E15, (-1.0), 4.503599627370496E15, (-734.0), 4.503599627370496E15, (-734.0), (-734.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, 4.503599627370496E15, (-1.0), 4.503599627370496E15, (-734.0), 4.503599627370496E15, (-734.0), (-734.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 4.503599627370496E15, 4.503599627370496E15, (-1.0), 4.503599627370496E15, (-734.0), 4.503599627370496E15, (-734.0), (-734.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2479.0);
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.linearCombination(1746.7158, (-2479.0), 1746.7158, (-2479.0), 0.0, 1746.7158);
      assertEquals((-8660216.9364), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4217L;
      longArray2[1] = 1432L;
      longArray2[2] = 518L;
      longArray2[3] = (-1148L);
      longArray2[4] = 2404L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,148 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.3351899525058677;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][3];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.3351899525058677, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[4];
      longArray1[0] = 876L;
      longArray1[1] = (-928L);
      longArray1[2] = 3673L;
      longArray1[3] = (-1119L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-928L);
      longArray3[1] = (-1119L);
      longArray3[2] = (-928L);
      longArray3[3] = 876L;
      longArray3[4] = (-928L);
      longArray3[5] = 3673L;
      longArray3[6] = 3673L;
      longArray3[7] = (-928L);
      longArray3[8] = 1238L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 876L;
      longArray4[1] = 3673L;
      longArray4[2] = 3673L;
      longArray4[3] = 1238L;
      longArray4[4] = (-928L);
      longArray4[5] = 1238L;
      longArray4[6] = (-928L);
      longArray4[7] = 1238L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-1119L);
      longArray5[1] = 876L;
      longArray5[2] = 3673L;
      longArray5[3] = (-1119L);
      longArray5[4] = 4607182418800017408L;
      longArray5[5] = 3673L;
      longArray5[6] = 876L;
      longArray5[7] = (-928L);
      longArray5[8] = (-928L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-1119L);
      longArray6[1] = 1238L;
      longArray6[2] = (-1119L);
      longArray6[3] = (-1119L);
      longArray6[4] = 4607182418800017408L;
      longArray6[5] = 876L;
      longArray6[6] = 1238L;
      longArray6[7] = 4607182418800017408L;
      longArray6[8] = (-928L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = (-928L);
      longArray7[1] = (-928L);
      longArray7[2] = 1238L;
      longArray7[3] = 1238L;
      longArray7[4] = 3184L;
      longArray7[5] = 1238L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -928 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 904.1251489897799;
      doubleArray0[1] = 2586.671715;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = (-1L);
      longArray2[4] = (-1L);
      longArray2[5] = (-1L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray3[1] = (-1L);
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = (-1L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3491);
      assertNotNull(integer0);
      assertEquals(3491, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertNotNull(integer1);
      assertEquals(3, integerArray0.length);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3491, (int)integer1);
      
      integerArray0[1] = integer1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "e";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[4] = "Od6";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3130.16118923);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, (-3130.16118923), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1939;
      intArray0[1] = 509;
      intArray0[2] = 713;
      intArray0[3] = (-991);
      intArray0[4] = 670;
      intArray0[5] = (-1995);
      intArray0[6] = (-739);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 713;
      intArray1[1] = 713;
      intArray1[2] = (-1995);
      intArray1[3] = (-739);
      intArray1[4] = 3907;
      intArray1[5] = 1939;
      intArray1[6] = 713;
      intArray1[7] = 1939;
      intArray1[8] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {1939, 509, 713, (-991), 670, (-1995), (-739)}, intArray0);
      assertArrayEquals(new int[] {713, 713, (-1995), (-739), 3907, 1939, 713, 1939, 1}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3934, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 150.82067;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358, 0.0, (-947.634217762981), 0.0, 22746.8744992489, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(0.0, Double.NEGATIVE_INFINITY, 4032.7013, 1095.852679);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(150.85338611927142, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 2232.946;
      doubleArray0[3] = 1095.852679;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 1095.852679, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = 926.3118490853;
      double double1 = 2290.2069036864;
      double double2 = (-262.1675503973);
      double double3 = MathArrays.linearCombination(20.0, 20.0, 926.3118490853, 0.0, 3294198.0, 2290.2069036864, (-262.1675503973), 1.23201E7);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(4.314464964060156E9, double3, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4032.7013;
      doubleArray0[1] = 926.3118490853;
      doubleArray0[2] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (4,032.701 >= 926.312)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = 3.141592653589793;
      doubleArray0[8] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1.304E19, 0.0, 3.834E-20, 0.0, 1.7976931348623157E308, 3.141592653589793, 3.141592653589793, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(2041.36843847432, 1.304E19, 1.304E19, 1624.0);
      assertEquals(4.779640443770513E22, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1935.74;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1935.74}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3747089.3476, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2179;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = (-2469);
      intArray0[5] = 0;
      intArray0[6] = 422;
      intArray0[7] = 134217729;
      intArray0[8] = 5024;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2179, 0, 0, 10, (-2469), 0, 422, 134217729, 5024}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 10;
      intArray1[1] = (-2723);
      intArray1[2] = 134217729;
      intArray1[3] = 0;
      intArray1[4] = 134217729;
      intArray1[5] = (-2469);
      int[] intArray2 = MathArrays.copyOf(intArray1, 422);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {10, (-2723), 134217729, 0, 134217729, (-2469)}, intArray1);
      assertEquals(422, intArray2.length);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = MathArrays.distanceInf(intArray1, intArray1);
      assertArrayEquals(new int[] {10, (-2723), 134217729, 0, 134217729, (-2469)}, intArray1);
      assertEquals(6, intArray1.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int1);
      
      double double1 = MathArrays.linearCombination((double) 5024, (-2.957007209750105E-8), (double) 0, 3.6725170580355583E-9, 1789.52154661, 1.23201E7, (double) 2179, (double) 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.2047084406389713E10, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4699556E-39}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 1.4699556E-39}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-4264.32420039515);
      doubleArray0[1] = (-4264.32420039515);
      double double1 = (-1706.3583566);
      doubleArray0[2] = (-1706.3583566);
      doubleArray0[3] = 1.0;
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(4593.05135255577, double3, 0.01);
      
      double double4 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 837;
      intArray0[0] = 837;
      intArray0[1] = 0;
      int int1 = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {837, 0, 134217729, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int2 = (-922);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-922));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1172;
      longArray0[5] = (long) 851;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1172L, 851L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1095.852679;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1095.852679, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1200893.0940714772, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(4032.7013, 2837438.6797009287, (-2.6033824355191673E-8), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (-2.6033824355191673E-8);
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, Double.NaN, (-2.6033824355191673E-8)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1095.852679, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1095.852679, double1, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 837;
      longArray0[1] = (-981L);
      longArray0[2] = (-981L);
      longArray0[3] = (long) 837;
      longArray0[4] = (-981L);
      longArray0[5] = (long) 837;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -981 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4587;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 1740;
      int int0 = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {4587, (-1), 0, (-1), 1740, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4587;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 4587;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 184;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 184;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4587.0, 0.0, (-1.0), 4587.0, 0.0, 184.0, 1.0, 184.0}, doubleArray0, 0.01);
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-1);
      doubleArray2[1] = (double) 1740;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) (-1);
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 1740.0, 0.0, (-1.0)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4587.0, 0.0, (-1.0), 4587.0, 0.0, 184.0, 1.0, 184.0}, doubleArray0, 0.01);
      assertEquals(15, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(4.2081139E7, double0, 0.01);
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = (-3978);
      intArray0[0] = (-3978);
      intArray0[1] = (-4681);
      intArray0[2] = 1969;
      intArray0[3] = 0;
      int int1 = 3105;
      int int2 = 2394;
      int int3 = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3978), (-4681), 1969, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3978), (-4681), 1969, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3130.16118923);
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 20.0, 1.7976931348623157E308, 926.3118490853, 926.3118490853);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.26E18);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.26E18}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1945.868F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 359.26538F;
      floatArray0[4] = (-1.0F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 359.26538F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1945.868F), 0.0F, 0.0F, 359.26538F, (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F), 359.26538F}, floatArray1, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 20.0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.26E18}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2105.187657;
      doubleArray0[1] = 1665.1184958472386;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-583.16386441001);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2105.187657, 1665.1184958472386, 0.0, (-583.16386441001), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1665.1184958472386;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-583.16386441001);
      doubleArray2[4] = 442743.85209999996;
      doubleArray2[5] = (-583.16386441001);
      doubleArray2[6] = 3.834E-20;
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, -0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(2401796.0577473557, (-583.16386441001), (-1409.613869951214), 0.0, 1390.9557134, 2401796.0577473557);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.9401512783846052E9, double1, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2146225866;
      intArray0[1] = 3348;
      intArray0[2] = (-1453);
      intArray0[3] = (-882);
      intArray0[4] = (-1);
      intArray0[5] = (-1569);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2146225866, 3348, (-1453), (-882), (-1), (-1569)}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 49, (-1565));
      assertNotNull(objectArray0);
      assertEquals(49, objectArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 840;
      intArray0[1] = 49;
      intArray0[2] = 49;
      intArray0[3] = (-1565);
      intArray0[4] = 49;
      intArray0[5] = (-1565);
      intArray0[6] = (-1565);
      intArray0[7] = 49;
      intArray0[8] = 49;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {840, 49, 49, (-1565), 49, (-1565), (-1565), 49, 49}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = (-24);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 670;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-24), 670);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 651.8765F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = (-2249.79F);
      floatArray0[4] = 1946.2F;
      floatArray0[5] = (-2763.4438F);
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1946.2F;
      floatArray1[4] = (-2763.4438F);
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {651.8765F, 1.0F, Float.POSITIVE_INFINITY, (-2249.79F), 1946.2F, (-2763.4438F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 1946.2F, (-2763.4438F), 1.0F, 1.0F}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 4503599627370496L;
      doubleArray0[2] = (double) 4503599627370496L;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 4503599627370496L;
      doubleArray0[5] = (double) (-734L);
      doubleArray0[6] = (double) 4503599627370496L;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "IS2v";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "f*g2e,[!/<)?mH|%M ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-734L);
      floatArray0[1] = (float) (-734L);
      floatArray0[2] = (float) (-734L);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-734L);
      floatArray1[1] = (float) 4503599627370496L;
      floatArray1[2] = (float) 4503599627370496L;
      floatArray1[3] = (float) 4503599627370496L;
      floatArray1[4] = (float) 4503599627370496L;
      floatArray1[5] = (float) (-734L);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-734.0F), (-734.0F), (-734.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-734.0F), 4.5035996E15F, 4.5035996E15F, 4.5035996E15F, 4.5035996E15F, (-734.0F)}, floatArray1, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = 20.0;
      doubleArray1[2] = 20.0;
      doubleArray1[3] = 4032.7013;
      doubleArray1[4] = 926.3118490853;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = (double) 0.0F;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Integer integer0 = new Integer(7);
      assertNotNull(integer0);
      assertEquals(7, (int)integer0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1996.722230116;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1095.852679;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1996.722230116, 0.0, 1095.852679, 0.0, 7.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3993.444460232, 0.0, 2191.705358, 0.0, 14.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1996.722230116, 0.0, 1095.852679, 0.0, 7.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3993.444460232, 0.0, 2191.705358, 0.0, 14.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1996.722230116, 0.0, 1095.852679, 0.0, 7.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(2277.6834192466017, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {4032.7013}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = 20.0;
      doubleArray1[2] = 20.0;
      doubleArray1[3] = 4032.7013;
      doubleArray1[4] = 926.3118490853;
      doubleArray1[5] = 20.0;
      doubleArray1[6] = (double) 0.0F;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[][] doubleArray3 = new double[9][5];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray0;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 19.38724180557928;
      doubleArray0[1] = 19.38724180557928;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {19.38724180557928, 19.38724180557928, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {375.8651448280009, 751.7302896560018, 375.8651448280009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3130.16118923);
      doubleArray0[2] = 6.283185307179586;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -3,130.161)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1039.847557805064);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, (-1039.847557805064)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19, (-1039.847557805064)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 0;
      longArray3[1] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 0;
      longArray4[4] = (long) 0;
      longArray4[5] = (long) 0;
      longArray4[6] = 100L;
      longArray4[7] = (long) 0;
      longArray4[8] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 100L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 786.97948;
      doubleArray0[1] = 1121.2403687714;
      doubleArray0[2] = 6128.520779732773;
      doubleArray0[3] = (-1976.099);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {786.97948, 1121.2403687714, 6128.520779732773, (-1976.099)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {619336.7019410704, 1764786.3247414492, 1.090322015736921E7, 1.0632791071284484E7, 3.3127403004638806E7, (-2.4221127568618305E7), 3904967.2578009996}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2754.5112F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2754.5112F)}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[2] = 2232.946;
      doubleArray0[3] = 1095.852679;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 1095.852679, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(2526.2, 2232.946, 1043.0, 0.0);
      assertEquals(5640868.185199999, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 3.141592653589793, 2232.946, 1095.852679, 0.0, Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 1095.852679;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 1095.852679;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1095.852679, 3.141592653589793, 1095.852679}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1549.7729052178438, double1, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-981L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -981 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-44.7015);
      doubleArray0[1] = 1097.1779435008943;
      doubleArray0[2] = 3133.578250541752;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 5265.0;
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-44.7015), 0.0, 1097.1779435008943, 3133.578250541752, 5265.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-56.493F);
      floatArray0[1] = 4658.894F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-56.493F), 4658.894F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination(2409.22, 2409.22, (-259.8961692370235), 0.0, (-2672.2329), 1097.1779435008943);
      assertEquals(2872426.010622568, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-70.439055891185);
      doubleArray0[2] = (-1089.9);
      doubleArray0[3] = (-2199.0);
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 837;
      intArray0[0] = 837;
      intArray0[1] = 0;
      int int1 = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {837, 0, 134217729, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int2 = (-922);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-922));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 150.82067;
      doubleArray0[3] = (-2428.23353);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 150.82067, (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {150.82067, 0.0, (-3.141592653589793), (-2428.23353), Double.NEGATIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-746.6545845107), 2.0, (-20.0), 621.245289469);
      assertEquals((-13918.2149584014), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-746.6545845107);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (-13918.2149584014);
      doubleArray0[6] = 2.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6062.740686862;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      double double0 = 1524.9527714750925;
      doubleArray0[3] = 1524.9527714750925;
      doubleArray0[4] = (-1914.3351);
      doubleArray0[5] = (-4704.0213789746);
      double double1 = 2672.890407027175;
      doubleArray0[6] = 2672.890407027175;
      doubleArray0[7] = 1.304E19;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2672.890407027175;
      doubleArray1[1] = 6.283185307179586;
      doubleArray1[2] = (-4704.0213789746);
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = (-472.57511);
      doubleArray0[2] = (-1524.94234);
      doubleArray0[3] = 392.0;
      doubleArray0[4] = 3662.22762474;
      doubleArray0[5] = (-445.504);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, (-472.57511), (-1524.94234), 392.0, 3662.22762474, (-445.504)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2379);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 951;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2379), 0, 0, 951}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 299.80469178;
      doubleArray0[1] = 4381.786378330606;
      doubleArray0[2] = 315.553;
      doubleArray0[3] = (-2357.523222172702);
      double double0 = (-4312.772780009);
      doubleArray0[4] = (-4312.772780009);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {299.80469178, 4381.786378330606, 315.553, (-2357.523222172702), (-4312.772780009)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = (-1682);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-1682), (-1682));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 49;
      int int1 = (-1565);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 49, (-1565));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = 9007199254740990L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      long long0 = 0L;
      longArray0[6] = 0L;
      long long1 = 1L;
      longArray0[7] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {9007199254740990L, 0L, 0L, 0L, 0L, 0L, 0L, 1L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-665.39);
      doubleArray0[1] = (-4264.32420039515);
      doubleArray0[2] = (-1706.3583566);
      doubleArray0[3] = 1.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-665.39), (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-665.39), (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4640.9982309105, double1, 0.01);
      
      int int0 = 184;
      int[] intArray0 = new int[6];
      intArray0[0] = 184;
      intArray0[1] = (-1);
      intArray0[2] = 184;
      intArray0[3] = 1;
      intArray0[4] = 184;
      intArray0[5] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 181);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {184, (-1), 184, 1, 184, 1}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(181, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {442743.85209999996, 5674877.3594018575, 2.045524845987188E7, 1.4551599689191755E7, 2903130.1927378625, (-3412.7167132), 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-665.39), (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-665.39), (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-665.39), (-4264.32420039515), (-1706.3583566), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3978);
      intArray0[1] = (-4681);
      intArray0[2] = 1969;
      intArray0[3] = 0;
      intArray0[4] = 3105;
      intArray0[5] = 676;
      intArray0[6] = 1;
      int[] intArray1 = MathArrays.copyOf(intArray0, 184);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-3978), (-4681), 1969, 0, 3105, 676, 1}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(184, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-9.40206047742282);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 676;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-9.40206047742282), 0.0, 1.0, 676.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-9.40206047742282), 0.0, 1.0, 676.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(11, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 184;
      doubleArray2[1] = (double) 3105;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1095.852679;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1095.852679, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1200893.0940714772, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(4032.7013, 2837438.6797009287, (-2.6033824355191673E-8), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 407;
      intArray0[1] = (-952);
      intArray0[2] = 1172;
      intArray0[3] = 0;
      intArray0[4] = 851;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {407, (-952), 1172, 0, 851, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 1172;
      longArray0[5] = (long) 851;
      longArray0[6] = (long) 0;
      longArray0[7] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1172L, 851L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("JoJ3K{>`xn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.JoJ3K{>`xn
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 171.3066977018;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {171.3066977018}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-2684L);
      longArray0[2] = (-170L);
      longArray0[3] = (-2674L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,684 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 4503599627370495L;
      longArray0[1] = 0L;
      longArray0[2] = (-1926L);
      longArray0[3] = (-735L);
      longArray0[4] = 1716L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = 1L;
      longArray0[8] = (-3059L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,926 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      int int0 = 1;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[2][4];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 659.87804279;
      double double0 = 1905.599590948;
      doubleArray0[1] = 1905.599590948;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 786.2511953;
      doubleArray0[5] = 0.0;
      double double1 = 2436.0;
      doubleArray0[6] = 2436.0;
      doubleArray0[7] = 186.230469;
      doubleArray0[8] = 0.0;
      int int0 = (-195);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-195));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-948.1468F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3111.64F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-578.997F);
      floatArray0[5] = 184.01083F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3235.5F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-665.39);
      double double0 = (-4264.32420039515);
      doubleArray0[1] = (-4264.32420039515);
      double double1 = (-1706.3583566);
      doubleArray0[2] = (-1706.3583566);
      doubleArray0[3] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-665.39), doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      MathArrays.OrderDirection.values();
      try { 
        MathArrays.checkPositive(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -665.39 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 4587;
      intArray0[1] = (-1);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      int int1 = 1740;
      intArray0[4] = 1740;
      intArray0[5] = 0;
      intArray0[6] = 2394;
      intArray0[7] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2394;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-4855.8997928);
      doubleArray0[2] = (-1569.0);
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = 238;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 238);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1095.852679;
      doubleArray0[1] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(4032.7013, 2837438.6797009287, (-2.6033824355191673E-8), Double.NaN);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (-2.6033824355191673E-8);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      MathArrays.safeNorm(doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 837;
      longArray0[1] = (-981L);
      longArray0[2] = (-981L);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 170.056561885;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1373.3720777;
      doubleArray0[3] = (-310.382);
      doubleArray0[4] = 1885.0;
      doubleArray0[5] = 2.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[][] doubleArray2 = new double[6][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = 1373.3720777;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 1373.3720777;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-310.382);
      doubleArray3[5] = 2.0;
      doubleArray3[6] = 1373.3720777;
      doubleArray2[4] = doubleArray3;
      doubleArray2[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1718.42;
      doubleArray0[1] = 2162.9342804035796;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-654.31049);
      doubleArray0[4] = (-98.7474803068074);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 2162.9342804035796;
      doubleArray1[1] = 8069125.279935935;
      doubleArray1[2] = (-654.31049);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-98.7474803068074);
      doubleArray1[5] = (-654.31049);
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (-654.31049);
      doubleArray1[8] = 2162.9342804035796;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(3510);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3510);
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[][] longArray0 = new long[6][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-734L);
      longArray1[1] = 4503599627370496L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      longArray2[0] = (-734L);
      longArray2[1] = 4503599627370496L;
      longArray2[2] = 4503599627370496L;
      longArray2[3] = (-734L);
      longArray2[4] = 4503599627370496L;
      longArray2[5] = 4503599627370496L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-734L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (-1L);
      longArray5[1] = 4503599627370496L;
      longArray5[2] = 4503599627370496L;
      longArray5[3] = 4503599627370496L;
      longArray5[4] = 4503599627370496L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = 4503599627370496L;
      longArray6[1] = 4503599627370496L;
      longArray6[2] = (-1L);
      longArray6[3] = 0L;
      longArray6[4] = 4503599627370496L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -734 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      MathArrays.linearCombination(1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 20.0, 1.7976931348623157E308, 926.3118490853, 926.3118490853);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4032.7013;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 904.1251489897799;
      doubleArray0[1] = 2586.671715;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3.834E-20;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      long[][] longArray0 = new long[6][0];
      long[] longArray1 = new long[9];
      longArray1[0] = 0L;
      longArray1[1] = 2165L;
      longArray1[2] = 1L;
      longArray1[3] = 2033L;
      longArray1[4] = (-2239L);
      longArray1[5] = (-613L);
      longArray1[6] = 0L;
      longArray1[7] = 4225L;
      longArray1[8] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 2164L;
      longArray3[1] = 2033L;
      longArray3[2] = (-2239L);
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = (-613L);
      longArray3[6] = 2165L;
      longArray3[7] = 1L;
      longArray3[8] = (-1623L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = 1L;
      longArray4[1] = 2164L;
      longArray4[2] = 1L;
      longArray4[3] = (-1591L);
      longArray4[4] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = (-1591L);
      longArray5[3] = (-1L);
      longArray5[4] = 2164L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 2164L;
      longArray6[1] = 862L;
      longArray6[2] = 2164L;
      longArray6[3] = 2165L;
      longArray6[4] = 2164L;
      longArray6[5] = (-1591L);
      longArray6[6] = 0L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.linearCombination((-2479.0), 182.5678, 2720.66, 182.5678, 1746.7158, 2730.5163618113343);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2170.0F);
      floatArray0[1] = 2603.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.3040000000012323E19;
      doubleArray1[1] = 1950.91317680364;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      long[] longArray0 = new long[1];
      longArray0[0] = 3510L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {3510L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2105.187657;
      doubleArray0[1] = 1664.3124566298;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-583.16386441001);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly decreasing (-583.164 <= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1935.74;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 2179;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 10;
      intArray0[4] = (-2469);
      intArray0[5] = 0;
      intArray0[6] = 422;
      intArray0[7] = 134217729;
      intArray0[8] = 5024;
      MathArrays.distanceInf(intArray0, intArray0);
      int[] intArray1 = new int[6];
      intArray1[0] = 10;
      intArray1[1] = (-2723);
      intArray1[2] = 134217729;
      intArray1[3] = 0;
      intArray1[4] = 134217729;
      intArray1[5] = (-2469);
      int[] intArray2 = MathArrays.copyOf(intArray1, 422);
      assertEquals(422, intArray2.length);
  }
}
