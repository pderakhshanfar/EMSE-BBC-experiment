/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:26:23 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(1075);
      assertEquals(1075, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1075);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1075, (int)integer1);
      assertNotNull(integer1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer0).when(field0).getZero();
      int[] intArray0 = new int[5];
      intArray0[0] = 38;
      intArray0[1] = 1772;
      intArray0[2] = 1772;
      intArray0[3] = 38;
      intArray0[4] = 38;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {38, 1772, 1772, 38, 38}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {38, 1772, 1772, 38, 38}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 534.320557128196;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 699.04602919859;
      int int0 = 312;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 312);
      assertArrayEquals(new double[] {534.320557128196, 1.34217729E8, 699.04602919859}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(312, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(312);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(312, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(629);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(629, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      int int1 = 1972060916;
      Integer integer2 = new Integer(1972060916);
      assertTrue(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertEquals(1972060916, (int)integer2);
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1972060916);
      assertTrue(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(1972060916, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {534.320557128196, 1.34217729E8, 699.04602919859}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(QSu2+ Vy-H=q'\"q.bw";
      stringArray0[1] = "";
      stringArray0[2] = "UyDY";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {534.320557128196, 1.34217729E8, 699.04602919859}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(312, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 420.0;
      doubleArray0[1] = (-2376.25724043);
      doubleArray0[2] = (-0.16624882440418567);
      doubleArray0[3] = 4.6071824188000174E18;
      doubleArray0[4] = 0.003;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {420.0, (-2376.25724043), (-0.16624882440418567), 4.6071824188000174E18, 0.003}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {176400.0, (-1996056.0819611999), 5646458.823683498, 3.8700332317920146E21, (-2.1895701161310683E22), (-1.53187732188227098E18), 2.122612984009998E37, 2.7643094512800104E16, 9.0E-6}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {420.0, (-2376.25724043), (-0.16624882440418567), 4.6071824188000174E18, 0.003}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {176400.0, (-1996056.0819611999), 5646458.823683498, 3.8700332317920146E21, (-2.1895701161310683E22), (-1.53187732188227098E18), 2.122612984009998E37, 2.7643094512800104E16, 9.0E-6}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.122612984009998E37, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(284.4926, doubleArray0);
      assertArrayEquals(new double[] {420.0, (-2376.25724043), (-0.16624882440418567), 4.6071824188000174E18, 0.003}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {119486.89199999999, (-676027.6005987558), (-47.29656030169023), 1.3107093049987058E21, 0.8534778}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 3350.0819377405846;
      doubleArray0[3] = 2291.7991774;
      doubleArray0[4] = (-15.632140896613402);
      doubleArray0[5] = 1.304E19;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.902267575263977;
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1326.9692F;
      floatArray0[1] = 2595.799F;
      floatArray0[2] = (-3271.521F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = (-5734.6F);
      floatArray0[5] = (-680.1F);
      floatArray0[6] = 902.2828F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {1326.9692F, 2595.799F, (-3271.521F), 1.4E-45F, (-5734.6F), (-680.1F), 902.2828F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2627.7633889393173);
      doubleArray0[1] = (double) 1326.9692F;
      doubleArray0[2] = (double) 2595.799F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 2595.799F;
      doubleArray0[5] = (double) (-680.1F);
      doubleArray0[6] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2627.7633889393173), 1326.96923828125, 2595.799072265625, 1.401298464324817E-45, 2595.799072265625, (-680.0999755859375), 1.401298464324817E-45}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(4754.457846225658, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2757);
      intArray0[1] = 1412;
      intArray0[2] = (-2147483530);
      intArray0[3] = (-12);
      intArray0[4] = 2;
      intArray0[5] = (-1);
      intArray0[6] = (-460);
      intArray0[7] = 16;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2757), 1412, (-2147483530), (-12), 2, (-1), (-460), 16}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-12);
      intArray1[1] = 2;
      intArray1[2] = (-1461);
      intArray1[3] = (-12);
      intArray1[4] = 16;
      intArray1[5] = 505;
      intArray1[6] = (-2757);
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2757), 1412, (-2147483530), (-12), 2, (-1), (-460), 16}, intArray0);
      assertArrayEquals(new int[] {(-12), 2, (-1461), (-12), 16, 505, (-2757)}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-2147478255), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 230.1822207404589;
      doubleArray0[1] = (-1054.8888393091);
      doubleArray0[2] = 1008.900115219;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 1416.902;
      doubleArray0[5] = (-15.47);
      try { 
        MathArrays.normalizeArray(doubleArray0, 2.2860509143963117E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 260.47666217, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0, 0.0, 260.47666217, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1761.73F);
      floatArray0[1] = (-4609.0F);
      floatArray0[2] = 13.11F;
      floatArray0[3] = (-800.35406F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1761.73F), (-4609.0F), 13.11F, (-800.35406F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 1170;
      longArray1[1] = (long) 1170;
      longArray1[2] = (long) 1170;
      longArray1[3] = (long) 1170;
      longArray1[4] = (long) 1170;
      longArray1[5] = (long) 1170;
      longArray1[6] = (long) 1170;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-737));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, (double) 0L, (double) 0L, (double) 0L, (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[7];
      longArray1[0] = 0L;
      longArray1[1] = (-342L);
      longArray1[2] = (-459L);
      longArray1[3] = 2520L;
      longArray1[4] = 3988L;
      longArray1[5] = (-2722L);
      longArray1[6] = 2833L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-459L);
      longArray2[1] = 2833L;
      longArray2[2] = (-2722L);
      longArray2[3] = 2833L;
      longArray2[4] = (-2722L);
      longArray2[5] = (-342L);
      longArray2[6] = 3988L;
      longArray2[7] = (-342L);
      longArray2[8] = 2833L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-517.7);
      doubleArray0[2] = 812.86697;
      doubleArray0[3] = (-1286.4877239510192);
      doubleArray0[4] = 57.2957763671875;
      doubleArray0[5] = (-255.63);
      doubleArray0[6] = 2.17333333333333325E18;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 204.39;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-517.7), 812.86697, (-1286.4877239510192), 57.2957763671875, (-255.63), 2.17333333333333325E18, 1.304E19, 204.39}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(1.856896813982343E19, double0, 0.01);
      
      long[][] longArray0 = new long[7][7];
      long[] longArray1 = new long[9];
      longArray1[0] = 3319L;
      longArray1[1] = 0L;
      longArray1[2] = (-504L);
      longArray1[3] = 0L;
      longArray1[4] = (-480L);
      longArray1[5] = (-504L);
      longArray1[6] = (-370L);
      longArray1[7] = 759L;
      longArray1[8] = (-1476L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-370L);
      longArray3[1] = 3319L;
      longArray3[2] = 759L;
      longArray3[3] = 759L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-480L);
      longArray4[1] = 0L;
      longArray4[2] = (-370L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = (-370L);
      longArray6[1] = (-480L);
      longArray6[2] = 9154082963658192752L;
      longArray6[3] = 0L;
      longArray6[4] = 0L;
      longArray6[5] = 3319L;
      longArray6[6] = 759L;
      longArray6[7] = (-480L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray7[0] = 0L;
      longArray7[1] = 3319L;
      longArray7[2] = 0L;
      longArray7[3] = 0L;
      longArray7[4] = (-504L);
      longArray7[5] = (-370L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1637.0;
      doubleArray0[1] = 2.147267236E9;
      doubleArray0[2] = 2.147267236E9;
      doubleArray0[3] = 1637.0;
      MathArrays.scaleInPlace(2.147267236E9, doubleArray0);
      assertArrayEquals(new double[] {3.515076465332E12, 4.6107565827990799E18, 4.6107565827990799E18, 3.515076465332E12}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.515076465332E12, 4.6107565827990799E18, 4.6107565827990799E18, 3.515076465332E12}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(6.5205944921973801E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 4419.071F;
      floatArray0[2] = (-236.3F);
      floatArray0[3] = (-2970.7415F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 4419.071F, (-236.3F), (-2970.7415F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2681);
      assertEquals(2681, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 115;
      Integer integer1 = new Integer(115);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(115, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 139;
      doubleArray3[1] = (double) (-2970.7415F);
      doubleArray3[2] = (double) 139;
      doubleArray3[3] = (double) (int)integerArray0[2];
      doubleArray3[4] = (double) int0;
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertArrayEquals(new double[] {139.0, (-2970.741455078125), 139.0, 2681.0, 115.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {19321.0, 8825304.792919695, 19321.0, 7187761.0, 13225.0}, doubleArray4, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotNull(doubleArray4);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 6420);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.scaleInPlace((-2711.0298872821995), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(3.1660099222737955E-7);
      assertEquals(3.1660099222737955E-7, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Pair<Object, Integer> pair0 = new Pair<Object, Integer>(double0, integer0);
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 0, 38);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4008.104252;
      doubleArray0[1] = (-101.57094691);
      doubleArray0[2] = (-4296.4343);
      doubleArray0[3] = (-4.503599627370496E15);
      doubleArray0[4] = (-6657.4081884498);
      doubleArray0[5] = 1.44888888888888883E18;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (-2671.66873716209);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 4419.071F;
      floatArray0[2] = (-236.3F);
      floatArray0[3] = (-2970.7415F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 4419.071F, (-236.3F), (-2970.7415F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2690);
      assertEquals(2690, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 115;
      Integer integer1 = new Integer(115);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(115, (int)integer1);
      assertNotNull(integer1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 139;
      doubleArray3[1] = (double) (-2970.7415F);
      doubleArray3[2] = (double) 139;
      doubleArray3[3] = (double) (int)integerArray0[2];
      doubleArray3[4] = (double) int0;
      double[] doubleArray4 = MathArrays.ebeMultiply(doubleArray3, doubleArray3);
      assertArrayEquals(new double[] {139.0, (-2970.741455078125), 139.0, 2690.0, 115.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {19321.0, 8825304.792919695, 19321.0, 7236100.0, 13225.0}, doubleArray4, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 6420);
      assertEquals(6420, objectArray0.length);
      assertNotNull(objectArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertTrue(boolean1);
      
      try { 
        MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (19,321 <= 8,825,304.793)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1967.633F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-3.4028235E38F);
      floatArray0[3] = 1551.4569F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {1967.633F, 0.0F, (-3.4028235E38F), 1551.4569F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1364);
      intArray0[1] = 2;
      intArray0[2] = 4779;
      intArray0[3] = (-2517);
      intArray0[4] = (-527);
      intArray0[5] = (-1);
      intArray0[6] = 1211;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = 2;
      intArray1[2] = (-1);
      intArray1[3] = 2;
      intArray1[4] = 1211;
      intArray1[5] = 2;
      intArray1[6] = (-2517);
      intArray1[7] = (-1346);
      intArray1[8] = 2;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1364), 2, 4779, (-2517), (-527), (-1), 1211}, intArray0);
      assertArrayEquals(new int[] {(-1), 2, (-1), 2, 1211, 2, (-2517), (-1346), 2}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6926.049884313569, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      long[][] longArray0 = new long[19][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(19, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3036.4752;
      doubleArray0[2] = (-4.068233003401932E-9);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3036.4752);
      assertArrayEquals(new double[] {Double.NaN, 3036.4752, (-4.068233003401932E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 3036.475200004068, (-4.068233003407382E-9)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][3];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, 3036.4752, (-4.068233003401932E-9)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      long[][] longArray0 = new long[9][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 0;
      longArray4[2] = 1172L;
      longArray4[3] = (long) 0;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 0;
      longArray5[1] = 1172L;
      longArray5[2] = (-1836L);
      longArray5[3] = 1172L;
      longArray5[4] = 1172L;
      longArray5[5] = (long) 0;
      longArray5[6] = 1172L;
      longArray5[7] = (long) 0;
      longArray5[8] = (long) 0;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = (long) 0;
      longArray6[1] = 1172L;
      longArray6[2] = (-1836L);
      longArray6[3] = (-2573L);
      longArray6[4] = 1172L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = 897L;
      longArray7[1] = 969L;
      longArray7[2] = (long) 0;
      longArray7[3] = (-1836L);
      longArray7[4] = 1172L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = 969L;
      longArray8[1] = (long) 0;
      longArray8[2] = 969L;
      longArray8[3] = 969L;
      longArray8[4] = (long) 0;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray6));
      
      longArray9[0] = 969L;
      longArray9[1] = 1172L;
      longArray9[2] = (-1836L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1290.6F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, (-1290.6F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), (-1.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2074.247F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 369.0F;
      floatArray0[4] = 12.0F;
      floatArray0[5] = (-941.77F);
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2074.247F), 1.0F, 369.0F, 12.0F, (-941.77F), 0.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1901);
      intArray0[1] = 1761;
      intArray0[2] = (-575);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1901), 1761, (-575)}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, (-2074.247F), 1.0F, 369.0F, 12.0F, (-941.77F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1493L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1493L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[6];
      int int0 = 2298;
      intArray0[0] = 2298;
      int int1 = (-664);
      intArray0[1] = (-664);
      int int2 = 1768;
      intArray0[2] = 1768;
      int int3 = (-1653);
      intArray0[3] = (-1653);
      intArray0[4] = 65;
      int int4 = (-616);
      intArray0[5] = (-616);
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 65;
      intArray1[1] = 2298;
      intArray1[2] = (-1653);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 326;
      intArray1[1] = (-1821);
      intArray1[2] = (-1153);
      intArray1[3] = 120;
      intArray1[4] = 1752;
      intArray1[5] = 624;
      intArray1[6] = (-880);
      intArray1[7] = 1747;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {326, (-1821), (-1153), 120, 1752, 624, (-880), 1747}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.7660544920645118E7;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 229, (-3165));
      assertEquals(229, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2055.290116948708;
      doubleArray0[1] = (-1134.9822);
      doubleArray0[2] = 1988.87270503;
      doubleArray0[3] = 1032.38854614788;
      doubleArray0[4] = 9248.0;
      doubleArray0[5] = 0.07490822288864472;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {2055.290116948708, (-1134.9822), 1988.87270503, 1032.38854614788, 9248.0, 0.07490822288864472}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = 1032.38854614788;
      doubleArray2[2] = 1988.87270503;
      doubleArray2[3] = 9248.0;
      doubleArray2[4] = 2055.290116948708;
      doubleArray2[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (9,248 >= 2,055.29)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      int[] intArray0 = new int[2];
      intArray0[0] = 17;
      intArray0[1] = 153;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {17, 153}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3.5179459458593E12);
      doubleArray0[1] = (-3.5179459458593E12);
      doubleArray0[2] = (-3.5179459458593E12);
      doubleArray0[3] = (-516.571);
      doubleArray0[4] = (-3.5179459458593E12);
      doubleArray0[5] = (-3.5179459458593E12);
      doubleArray0[6] = (-3.5179459458593E12);
      doubleArray0[7] = (-3.5179459458593E12);
      doubleArray0[8] = (-3.5179459458593E12);
      double[] doubleArray1 = MathArrays.scale((-3.5179459458593E12), doubleArray0);
      assertArrayEquals(new double[] {(-3.5179459458593E12), (-3.5179459458593E12), (-3.5179459458593E12), (-516.571), (-3.5179459458593E12), (-3.5179459458593E12), (-3.5179459458593E12), (-3.5179459458593E12), (-3.5179459458593E12)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2375943677987883E25, 1.2375943677987883E25, 1.2375943677987883E25, 1.8172688551984845E15, 1.2375943677987883E25, 1.2375943677987883E25, 1.2375943677987883E25, 1.2375943677987883E25, 1.2375943677987883E25}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Integer integer0 = new Integer(1370);
      assertEquals(1370, (int)integer0);
      assertNotNull(integer0);
      
      Double double1 = new Double(1370);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1370.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Pair<Integer, Double> pair0 = new Pair<Integer, Double>(integer0, double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(pair0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(1772, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "9R~;()y*zkRWkM";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1492.5568F);
      floatArray0[2] = 927.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2453.1F;
      floatArray0[5] = (-719.68F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1492.5568F), 927.0F, 0.0F, 2453.1F, (-719.68F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[8][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1531.5338495444;
      doubleArray0[4] = doubleArray1;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Double double0 = new Double(2139.5827663568843);
      assertEquals(2139.5827663568843, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1772, 38);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2285.392466926753);
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 92;
      intArray0[1] = 0;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {92, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1772, 38);
      assertEquals(1772, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 92;
      intArray0[1] = 92;
      intArray0[2] = 92;
      intArray0[3] = 92;
      intArray0[4] = 92;
      intArray0[5] = 92;
      intArray0[6] = 92;
      intArray0[7] = 92;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 92;
      intArray1[2] = 92;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4077.8104);
      doubleArray1[1] = 844.1;
      doubleArray1[2] = 2629.0;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = (-292.1402873359085);
      doubleArray1[5] = 1930.97;
      doubleArray1[6] = (-2254.037006079351);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(2965.509968979, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[9];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-601.76F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-601.76F), Float.POSITIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-601.76F);
      doubleArray0[1] = (-2054.79350698784);
      boolean boolean2 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-601.760009765625), (-2054.79350698784)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 6;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 6;
      floatArray0[5] = (float) 6;
      floatArray0[6] = (float) 6;
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 6;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 6;
      floatArray1[1] = (float) 6;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 0.0F, 6.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {6.0F, 6.0F}, floatArray1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = null;
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.46F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2497.8015F, 2497.8015F, 0.0F, 2554.46F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2554.46F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2554.4599609375}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination((double) 0.0F, 2.2860509143963117E-8, Double.NaN, (-3847.480608), (double) 2497.8015F, 2658.2997124);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[][] longArray0 = new long[9][0];
      long[] longArray1 = new long[9];
      longArray1[0] = 1476L;
      longArray1[1] = 3027L;
      longArray1[2] = 0L;
      longArray1[3] = (-2184L);
      longArray1[4] = 521L;
      longArray1[5] = 4499201580859392L;
      longArray1[6] = 418L;
      longArray1[7] = 4398046511103L;
      longArray1[8] = 4294967295L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2184L);
      longArray2[1] = 1476L;
      longArray2[2] = 4294967295L;
      longArray2[3] = 521L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 4499201580859392L;
      longArray3[1] = 4499201580859392L;
      longArray3[2] = 4499201580859392L;
      longArray3[3] = 521L;
      longArray3[4] = 521L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1476L;
      longArray4[1] = 0L;
      longArray4[2] = (-2184L);
      longArray4[3] = 4398046511103L;
      longArray4[4] = 113236205062349959L;
      longArray4[5] = 4398046511103L;
      longArray4[6] = 1476L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 4398046511103L;
      longArray5[1] = 521L;
      longArray5[2] = 113236205062349959L;
      longArray5[3] = 418L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 4398046511103L;
      longArray6[1] = 4499201580859392L;
      longArray6[2] = (-2184L);
      longArray6[3] = 521L;
      longArray6[4] = 4499201580859392L;
      longArray6[5] = (-2184L);
      longArray6[6] = (-2184L);
      longArray6[7] = 418L;
      longArray6[8] = 4398046511103L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (-3512299194304650054L);
      longArray7[1] = 4499201580859392L;
      longArray7[2] = 4294967295L;
      longArray7[3] = 4294967295L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-136L);
      longArray8[1] = (-2184L);
      longArray8[2] = 4398046511103L;
      longArray8[3] = 4499201580859392L;
      longArray8[4] = 4499201580859392L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray6));
      
      longArray9[0] = 4294967295L;
      longArray9[1] = 1476L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,184 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 2554.46F;
      floatArray1[4] = 2554.46F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2554.46F, 2554.46F}, floatArray1, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination((-443.026479653773), (double) 0.0F, (double) 2554.46F, 3.834E-20);
      assertEquals(9.793799490234374E-17, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.scaleInPlace(819.234706051, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = MathArrays.scale(3979.1424888637134, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      Double double2 = new Double(950.7);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(950.7, (double)double2, 0.01);
      assertNotNull(double2);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-35.7799478603164), 497374.23014277057, (-35.7799478603164), 497374.23014277057, (-35.7799478603164), (-1648.94));
      assertEquals((-3.553304905592189E7), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1648.94);
      doubleArray0[1] = (double) 2666;
      doubleArray0[2] = (double) 2666;
      doubleArray0[3] = (-3.553304905592189E7);
      doubleArray0[4] = 118.22640595008;
      doubleArray0[5] = 497374.23014277057;
      doubleArray0[6] = (-1648.94);
      doubleArray0[7] = (-3.553304905592189E7);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[10][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 4398046511103L;
      doubleArray0[2] = (double) 48L;
      doubleArray0[3] = (double) 48L;
      doubleArray0[4] = (double) 4398046511103L;
      doubleArray0[5] = (double) 48L;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 48L;
      doubleArray1[1] = (double) 48L;
      doubleArray1[2] = (double) 48L;
      doubleArray1[3] = (double) 48L;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[2];
      int int0 = 6;
      intArray0[0] = 6;
      int int1 = Integer.MIN_VALUE;
      intArray0[1] = Integer.MIN_VALUE;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6;
      intArray1[1] = Integer.MIN_VALUE;
      intArray1[2] = 6;
      intArray1[3] = Integer.MIN_VALUE;
      intArray1[4] = Integer.MIN_VALUE;
      intArray1[5] = Integer.MIN_VALUE;
      intArray1[6] = 6;
      intArray1[7] = Integer.MIN_VALUE;
      intArray1[8] = Integer.MIN_VALUE;
      int int2 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {6, Integer.MIN_VALUE}, intArray0);
      assertArrayEquals(new int[] {6, Integer.MIN_VALUE, 6, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, 6, Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-35.7799478603164), 497374.23014277057, (-35.7799478603164), 497374.23014277057, (-35.7799478603164), (-1648.94));
      assertEquals((-3.553304905592189E7), double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3.553304905592189E7), 1.5962941701259417, (-35.7799478603164), (-35.7799478603164));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.671991885009832E7), double1, 0.01);
      
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      
      try { 
        MathArrays.normalizeArray(doubleArray2, 2180.3985123671096);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 48L;
      doubleArray0[1] = (double) 48L;
      doubleArray0[2] = (double) 4398046511103L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {48.0, 48.0, 4.398046511103E12, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {48.0, 48.0, 4.398046511103E12, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2304.0, 2304.0, 1.934281311382527E25, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1444.4);
      assertArrayEquals(new double[] {48.0, 48.0, 4.398046511103E12, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2304.0, 2304.0, 1.934281311382527E25, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.7204827345518766E-19, 1.7204827345518766E-19, 1444.4, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {48.0, 48.0, 4.398046511103E12, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2304.0, 2304.0, 1.934281311382527E25, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {48.0, 48.0, 4.398046511103E12, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2304.0, 2304.0, 1.934281311382527E25, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.9342813113820873E25, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double2 = 950.675164453776;
      double double3 = 1.0;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3075.887702244;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3075.887702244, 0.0, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3075.887702244;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[4] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 2497.8015F, (-3242.457264), 3021.838, (double) 2554.464F, (double) 2497.8015F, 1944.51733910572, Double.NaN, (-982.4931925339));
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 6;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = 6;
      intArray0[3] = 6;
      intArray0[4] = 6;
      intArray0[5] = 3466;
      intArray0[6] = 6;
      intArray0[7] = 3014;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = Integer.MIN_VALUE;
      intArray1[1] = Integer.MIN_VALUE;
      intArray1[2] = 3014;
      intArray1[3] = Integer.MIN_VALUE;
      intArray1[4] = 3014;
      intArray1[5] = 3014;
      intArray1[6] = Integer.MIN_VALUE;
      intArray1[7] = Integer.MIN_VALUE;
      intArray1[8] = 6;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {6, Integer.MIN_VALUE, 6, 6, 6, 3466, 6, 3014}, intArray0);
      assertArrayEquals(new int[] {Integer.MIN_VALUE, Integer.MIN_VALUE, 3014, Integer.MIN_VALUE, 3014, 3014, Integer.MIN_VALUE, Integer.MIN_VALUE, 6}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3436, int0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 3466);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 4398046511103L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3344.6);
      doubleArray0[1] = (-3816.74908886853);
      doubleArray0[2] = (-0.09088450866185192);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-3344.6), (-3816.74908886853), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3344.6), (-3816.74908886853), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3344.6), (-3816.74908886853), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6689.2), (-7633.49817773706), (-0.18176901732370385)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-3344.6), (-3816.74908886853), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6689.2), (-7633.49817773706), (-0.18176901732370385)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10149.664580790588, double1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {(-3344.6), (-3816.74908886853), (-0.09088450866185192)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6689.2), (-7633.49817773706), (-0.18176901732370385)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      
      double double2 = MathArrays.linearCombination(520.2411918281463, (-3816.74908886853), (-0.09088450866185192), (-1.0), (-2728.553418), (-0.7853981633974483), 1022.117522871735, (-3242.457264));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-5297659.389871362), double2, 0.01);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "NON_CONVERGENT_CONTINUED_FRACTION";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-106);
      intArray0[1] = (-106);
      intArray0[2] = (-106);
      intArray0[3] = 2997;
      intArray0[4] = (-106);
      intArray0[5] = (-106);
      intArray0[6] = (-1396);
      int[] intArray1 = MathArrays.copyOf(intArray0, 736);
      assertArrayEquals(new int[] {(-106), (-106), (-106), 2997, (-106), (-106), (-1396)}, intArray0);
      assertEquals(736, intArray1.length);
      assertEquals(7, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-106);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      float[] floatArray0 = new float[4];
      floatArray0[0] = 312.0F;
      floatArray0[1] = 312.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {312.0F, 312.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {312.0F, 312.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.scale(0.25534194707870483, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[5];
      intArray0[0] = 184;
      intArray0[1] = (-2901);
      intArray0[2] = (-548);
      intArray0[3] = (-2077);
      intArray0[4] = 5302;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {184, (-2901), (-548), (-2077), 5302}, intArray1);
      assertArrayEquals(new int[] {184, (-2901), (-548), (-2077), 5302}, intArray0);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 5302;
      double double0 = MathArrays.distance1(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {5302.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertEquals(10, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "I]P5M03qq})s8f01r";
      stringArray0[1] = ";{{WNE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "I]P5M03qq})s8f01r";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2077);
      intArray0[1] = 184;
      intArray0[2] = (-2077);
      intArray0[3] = (-2901);
      intArray0[4] = 184;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ";{{WNE";
      stringArray0[2] = ";{{WNE";
      stringArray0[0] = "I]P5M03qq})s8f01r";
      stringArray0[4] = "I]P5M03qq})s8f01r";
      stringArray0[5] = "I]P5M03qq})s8f01r";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double2 = MathArrays.linearCombination(0.0, (-3242.457264), 3021.838, 1260.3051423921704, 1944.51733910572, (-3242.457264), 1944.51733910572, (-3242.457264));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-8801590.771438515), double2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = Integer.MIN_VALUE;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6;
      intArray1[1] = Integer.MIN_VALUE;
      intArray1[2] = 6;
      intArray1[3] = Integer.MIN_VALUE;
      intArray1[4] = Integer.MIN_VALUE;
      intArray1[5] = Integer.MIN_VALUE;
      intArray1[6] = 6;
      intArray1[7] = Integer.MIN_VALUE;
      intArray1[8] = Integer.MIN_VALUE;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {6, Integer.MIN_VALUE}, intArray0);
      assertArrayEquals(new int[] {6, Integer.MIN_VALUE, 6, Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE, 6, Integer.MIN_VALUE, Integer.MIN_VALUE}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 260.47666217;
      doubleArray2[1] = 260.47666217;
      doubleArray2[2] = 260.47666217;
      doubleArray2[3] = 260.47666217;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 260.47666217;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = new Double((-2001.3));
      assertEquals((-2001.3), (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2001.3);
      doubleArray0[1] = (-1841.154);
      doubleArray0[2] = 3551.587551796317;
      doubleArray0[3] = 4004.8175011;
      doubleArray0[4] = (-688.77);
      doubleArray0[5] = 3551.587551796317;
      doubleArray0[6] = (-2001.3);
      doubleArray0[7] = (-688.77);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2001.3), (-1841.154), 3551.587551796317, 4004.8175011, (-688.77), 3551.587551796317, (-2001.3), (-688.77)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.scale(3551.587551796317, doubleArray1);
      assertArrayEquals(new double[] {(-2001.3), (-1841.154), 3551.587551796317, 4004.8175011, (-688.77), 3551.587551796317, (-2001.3), (-688.77)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3551.587551796317, 3551.587551796317, 3551.587551796317, 3551.587551796317, 3551.587551796317, 3551.587551796317, 3551.587551796317, 3551.587551796317}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2001.3), (-1841.154), 3551.587551796317, 4004.8175011, (-688.77), 3551.587551796317, (-2001.3), (-688.77)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2001.3), (-1841.154), 3551.587551796317, 4004.8175011, (-688.77), 3551.587551796317, (-2001.3), (-688.77)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double double1 = MathArrays.distance(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2001.3), (-1841.154), 3551.587551796317, 4004.8175011, (-688.77), 3551.587551796317, (-2001.3), (-688.77)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(7321.707844046537, double1, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(0.3936265707015991, (-73.4205087), 489.5751159170295, 255.0, Double.NaN, (-688.77), Double.NaN, 3551.587551796317);
      assertEquals(Double.NaN, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Double double0 = new Double((-2001.3));
      assertEquals((-2001.3), (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((double) double0, (-688.77), (-688.77), (-1946.800486), (-1946.800486), (-1946.800486), 3551.587551796317, (-1.0));
      assertEquals(6505813.71648026, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2323);
      intArray0[1] = 86;
      intArray0[2] = 2126221433;
      intArray0[3] = 1431655765;
      intArray0[4] = 9;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1431655765;
      intArray1[1] = 2126221433;
      intArray1[2] = 2126221433;
      intArray1[3] = 1431655765;
      intArray1[4] = 2126221433;
      intArray1[5] = (-2323);
      intArray1[6] = 9;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-2323), 86, 2126221433, 1431655765, 9}, intArray0);
      assertArrayEquals(new int[] {1431655765, 2126221433, 2126221433, 1431655765, 2126221433, (-2323), 9}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1389133563, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, 2500.666986491296, Double.NaN, (-111.945992716), (-2501.147), Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1347.922922, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1243.135;
      doubleArray0[1] = (-1895.9459);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double double0 = MathArrays.linearCombination(551.299906, 224.18437072, (-3435.5368), (-2753.12), 1551.3065685941, (-660.001107971), (-3435.5368), (-5841.313));
      assertEquals(2.8626219615064207E7, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 166;
      floatArray0[1] = (float) 166;
      floatArray0[2] = (float) 1431655765;
      floatArray0[3] = (float) 1431655765;
      floatArray0[4] = (float) 1431655765;
      floatArray0[5] = (float) 1431655765;
      floatArray0[6] = (float) 166;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {166.0F, 166.0F, 1.43165581E9F, 1.43165581E9F, 1.43165581E9F, 1.43165581E9F, 166.0F}, floatArray0, 0.01F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 166, 1431655765);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-2.6437112632041807E-8);
      doubleArray0[2] = (double) 2497.8015F;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-2.6437112632041807E-8);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.scale(1.34217729E8, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, (-2.6437112632041807E-8), 2497.801513671875, 1.34217729E8, (-2.6437112632041807E-8), 1.34217729E8, 1.34217729E8}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.801439877791744E16, (-3.548329218789864), 3.352492466578015E11, 1.801439877791744E16, (-3.548329218789864), 1.801439877791744E16, 1.801439877791744E16}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1023L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 0L;
      int[] intArray0 = new int[1];
      intArray0[0] = 2143610643;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2143610643}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2143610643;
      doubleArray2[1] = (double) 1023L;
      doubleArray2[2] = (double) 1L;
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 981L;
      doubleArray1[1] = (double) (-2004L);
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {981.0, (-2004.0), 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (981 >= -2,004)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3075.887702244;
      doubleArray0[1] = 1.5962941701259417;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3075.887702244, 1.5962941701259417, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3075.887702244, 1.5962941701259417, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9461085.156815875, 2.548155077578069, 1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(1.5962941701259417, (-1751.1829), 3075.887702244, 312.0, (-742.017705072), 1944.51733910572, 3.145894820876798E-6, 1.5962941701259417);
      assertEquals((-485984.73338488286), double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-2640.49F);
      floatArray0[3] = (-200.088F);
      floatArray0[4] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-2640.49F), (-200.088F), 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2497.8015F, 2497.8015F, 0.0F, 2554.464F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2554.464F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2554.464111328125}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination(4238.14407183346, (double) 0.0F, (-404.354344726), 1638.17123978023);
      assertEquals((-662401.658210314), double0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {2554.464111328125}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {2554.464111328125}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-404.354344726);
      doubleArray1[1] = (double) 0.0F;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {(-404.354344726), 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-2146851662);
      intArray0[3] = 2143610643;
      intArray0[4] = 2;
      intArray0[5] = 2120640102;
      intArray0[6] = 874;
      intArray0[7] = (-1);
      intArray0[8] = 2034;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3075.887702244;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 3.145894820876798E-6;
      doubleArray0[4] = (-1050.2456759231);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3075.887702244, 3.834E-20, 1.304E19, 3.145894820876798E-6, (-1050.2456759231)}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1.304E19, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (0 < 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Double double0 = new Double(4.9E-324);
      assertEquals(4.9E-324, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = (-698.817472527209);
      double double2 = Double.NaN;
      double double3 = MathArrays.linearCombination(3551.587551796317, (-960.31322712075), (-698.817472527209), Double.NaN, Double.NaN, Double.NaN, 1291.4342570614974, 1.304E19);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long[][] longArray0 = new long[2][5];
      long[] longArray1 = new long[2];
      longArray1[0] = 4398046511103L;
      longArray1[1] = 48L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4398046511103L;
      doubleArray0[1] = (double) 48L;
      doubleArray0[2] = (double) 4398046511103L;
      doubleArray0[3] = (double) 48L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4.398046511103E12, 48.0, 4.398046511103E12, 48.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4.398046511103E12, 48.0, 4.398046511103E12, 48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.934281311382527E25, 2304.0, 1.934281311382527E25, 2304.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1444.4);
      assertArrayEquals(new double[] {4.398046511103E12, 48.0, 4.398046511103E12, 48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.934281311382527E25, 2304.0, 1.934281311382527E25, 2304.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {722.2, 8.602413672759383E-20, 722.2, 8.602413672759383E-20}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {1.934281311382527E25, 2304.0, 1.934281311382527E25, 2304.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {4.398046511103E12, 48.0, 4.398046511103E12, 48.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.934281311382527E25, 2304.0, 1.934281311382527E25, 2304.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = new double[9];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 48L;
      doubleArray4[1] = (double) 4398046511103L;
      doubleArray4[2] = (double) 48L;
      doubleArray4[3] = (double) 48L;
      doubleArray4[4] = (double) 48L;
      doubleArray4[5] = 1444.4;
      doubleArray4[6] = (double) 4398046511103L;
      doubleArray4[7] = (double) 48L;
      doubleArray4[8] = 1444.4;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray4, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2285.392466926753);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1841.154), 3551.587551796317, (-2001.3), (-2001.3));
      assertEquals((-2533817.937339996), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((-2533817.937339996), (-688.77), (-688.77), (-1946.800486), (-1946.800486), (-1946.800486), 3551.587551796317, (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7503451590171492E9, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1483.394468);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-688.77);
      doubleArray0[5] = 2184.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2497.8015F, 2497.8015F, 0.0F, 2554.464F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "X B)gB) VFzN";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 10;
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((double) 10, 0.0, 4.3466666666666665E18, (double) 0, 0.0, (double) (-3848));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 10;
      longArray1[1] = (long) (-3848);
      longArray1[2] = (long) (-3848);
      longArray1[3] = (long) (-3848);
      longArray1[4] = (long) (-3848);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 10;
      longArray2[1] = (long) 10;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 10;
      longArray3[1] = (long) (-3848);
      longArray3[2] = (long) 10;
      longArray3[3] = (long) 10;
      longArray3[4] = (long) 10;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[4];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) (-3848);
      longArray4[1] = (long) 0;
      longArray4[2] = (long) 0;
      longArray4[3] = (long) 10;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 10;
      longArray5[2] = (long) (-3848);
      longArray5[3] = (long) 10;
      longArray5[4] = (-214L);
      longArray5[5] = (long) (-3848);
      longArray5[6] = (long) 0;
      longArray5[7] = (-3180L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) 10;
      longArray6[1] = (long) 10;
      longArray6[2] = (long) 10;
      longArray6[3] = (-214L);
      longArray6[4] = (-214L);
      longArray6[5] = (long) 10;
      longArray6[6] = (-214L);
      longArray6[7] = (long) 10;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) 10;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[7];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (long) 10;
      longArray8[1] = (-214L);
      longArray8[2] = (-3180L);
      longArray8[3] = (long) (-3848);
      longArray8[4] = (long) (-3848);
      longArray8[5] = (long) 10;
      longArray8[6] = (-3180L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 4582.613399;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2129);
      intArray0[1] = (-2129);
      intArray0[2] = (-2129);
      intArray0[3] = (-2129);
      intArray0[4] = (-2129);
      intArray0[5] = (-2129);
      intArray0[6] = (-2129);
      intArray0[7] = (-2129);
      intArray0[8] = (-2129);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2129), (-2129), (-2129), (-2129), (-2129), (-2129), (-2129), (-2129), (-2129)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(0, int0);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-2129);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) (-2129);
      doubleArray2[3] = 4582.613399;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-2129.0), 0.0, (-2129.0), 4582.613399}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4582.613399}, doubleArray1, 0.01);
      assertEquals(4, doubleArray2.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7041.19275532465, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-2129.0), 0.0, (-2129.0), 4582.613399}, doubleArray2, 0.01);
      assertEquals(4, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double double0 = MathArrays.linearCombination((-3344.6), 0.0, 1638.17123978023, 425.0189);
      assertEquals(696253.7383430296, double0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 696253.7383430296;
      doubleArray1[1] = (-404.354344726);
      doubleArray1[2] = 1638.17123978023;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (696,253.738 >= -404.354)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean0);
      
      float float0 = (-1761.73F);
      float float1 = (-4609.0F);
      float float2 = 13.11F;
      float float3 = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray0 = null;
      int int0 = 1170;
      int int1 = 11;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(2658.2997124, 0.0, 2658.2997124, (-3847.480608), 0.0, 2658.2997124);
      assertEquals((-1.0227756593710976E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2129);
      intArray0[1] = 1;
      intArray0[2] = 10;
      intArray0[3] = 10;
      intArray0[4] = (-2129);
      intArray0[5] = 10;
      intArray0[6] = 76;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2129), 1, 10, 10, (-2129), 10, 76}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(0, int0);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {67848.0915352243, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1761.73F);
      floatArray0[1] = (-4609.0F);
      floatArray0[2] = 13.11F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1761.73F), (-4609.0F), 13.11F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 1170;
      longArray1[1] = (long) 1170;
      longArray1[2] = (long) 1170;
      longArray1[3] = (long) 1170;
      longArray1[4] = (long) 1170;
      longArray1[5] = (long) 1170;
      longArray1[6] = (long) 1170;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-737));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(0.0, (-688.77), 0.14285714285714285, 0.0, 1332.523, 8.0);
      assertEquals(10660.184, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-4520.72), 0.0, 0.07692307692307693);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1381);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1381)}, intArray0);
      assertArrayEquals(new int[] {(-1381)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[3] = "F9/J}!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.scale((-2900.85), doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2094), (-1644));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1895.9459);
      doubleArray0[1] = (-2728.553418);
      doubleArray0[2] = (-2285.392466926753);
      doubleArray0[3] = 4486.580427821808;
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = 2812.0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1395.7289F);
      floatArray0[1] = (-1395.7289F);
      floatArray0[2] = (-1395.7289F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1395.7289F), (-1395.7289F), (-1395.7289F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1895.9459), (-2728.553418), (-2285.392466926753), 4486.580427821808, 4.3466666666666665E18, 2812.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double0 = MathArrays.linearCombination((double) (-1395.7289F), (-2728.553418), (-0.010714690733195933), (-1895.9459));
      assertEquals(3808341.1256087306, double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-0.1666666567325592);
      doubleArray1[1] = 957.432;
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {(-0.1666666567325592), 957.432}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,895.946 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-742.74749);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(742.74749, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-742.2F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-742.2F);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-742.74749), Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination(0.0, 7868211.079475855, (-2285.392466926753), 0.0, 0.0, (double) (-742.2F));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[3] = ";G`tQ9";
      stringArray0[4] = "F9/J!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1.0;
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray3, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-742.74749);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-742.74749);
      doubleArray1[1] = (-742.74749);
      doubleArray1[2] = (-742.74749);
      doubleArray1[3] = (-742.74749);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-742.74749);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-742.74749), (-742.74749), (-742.74749), (-742.74749), 0.0, (-742.74749)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      long[][] longArray0 = new long[0][5];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = (-1841.154);
      double double1 = (-2001.3);
      double double2 = MathArrays.linearCombination((-1841.154), 3551.587551796317, (-2001.3), (-2001.3));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-2533817.937339996), double2, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double3 = (-688.77);
      double double4 = MathArrays.linearCombination((-2533817.937339996), (-688.77), (-688.77), (-1946.800486), (-1946.800486), (-1946.800486), 3551.587551796317, (-1.0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.7503451590171492E9, double4, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2533817.937339996);
      doubleArray0[1] = (-688.77);
      doubleArray0[2] = (-1841.154);
      doubleArray0[3] = (-688.77);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-688.77);
      doubleArray0[6] = (-2001.3);
      doubleArray0[7] = (-2533817.937339996);
      doubleArray0[8] = 3551.587551796317;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-2533817.937339996), (-688.77), (-1841.154), (-688.77), 0.0, (-688.77), (-2001.3), (-2533817.937339996), 3551.587551796317}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      double double5 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2533817.937339996), (-688.77), (-1841.154), (-688.77), 0.0, (-688.77), (-2001.3), (-2533817.937339996), 3551.587551796317}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-180.52934903414);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 745.86667;
      doubleArray0[3] = (-589.2427);
      doubleArray0[4] = (-3009.1);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertArrayEquals(new double[] {(-180.52934903414), 1.34217729E8, 745.86667, (-589.2427), (-3009.1)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-180.52934903414)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2812.0;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1834.511;
      doubleArray0[6] = (-129.08256);
      doubleArray0[7] = (-1653.1225571098646);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, Double.NaN, 1.304E19, 2812.0, 1.34217729E8, 1834.511, (-129.08256), (-1653.1225571098646)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2812.0;
      doubleArray1[1] = (-1653.1225571098646);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.34217729E8);
      assertArrayEquals(new double[] {2812.0, (-1653.1225571098646)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.256774530072378E8, (-1.9145972400723782E8)}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1895.9459);
      doubleArray0[1] = (-2728.553418);
      doubleArray0[2] = (-2285.392466926753);
      doubleArray0[3] = 4486.580427821808;
      doubleArray0[4] = 4.3466666666666665E18;
      doubleArray0[5] = 2812.0;
      doubleArray0[6] = 1435.41671;
      doubleArray0[7] = (-4.503599627370496E15);
      doubleArray0[8] = 7868211.079475855;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1895.9459), (-2728.553418), (-2285.392466926753), 4486.580427821808, 4.3466666666666665E18, 2812.0, 1435.41671, (-4.503599627370496E15), 7868211.079475855}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1895.9459), (-2728.553418), (-2285.392466926753), 4486.580427821808, 4.3466666666666665E18, 2812.0, 1435.41671, (-4.503599627370496E15), 7868211.079475855}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3594610.8557268097, 7445003.754879482, 5223018.72788555, 2.012940393531372E7, 1.889351111111111E37, 7907344.0, 2060421.131347224, 2.028240960365167E31, 6.190874559118661E13}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination(2127.6380746514806, 4486.580427821808, 1435.41671, 472.38, 472.38, 1.1795268640216787E-8);
      assertEquals(1.022388148869518E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 616.1107799987084;
      doubleArray0[0] = 616.1107799987084;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 616.1107799987084;
      doubleArray1[1] = 1243.135;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 616.1107799987084;
      doubleArray1[4] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {616.1107799987084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {616.1107799987084, 1243.135, 0.0, 616.1107799987084, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(260.47666217, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 634;
      intArray0[1] = 0;
      intArray0[2] = (-3912);
      intArray0[3] = 22;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 634;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2285.392466926753);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean2);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2285.392466926753);
      doubleArray3[2] = (-2285.392466926753);
      doubleArray3[3] = (-0.7853981633974483);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 3347.0;
      doubleArray3[7] = (-2285.392466926753);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1515.391734);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-4071.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1515.391734), 3.834E-20, (-4071.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1515.391734), 3.834E-20, (-4071.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1515.391734), 3.834E-20, (-4071.0)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-2631.4377F);
      floatArray0[2] = Float.NEGATIVE_INFINITY;
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-2631.4377F), Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int0 = 2231;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 2231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      float[] floatArray0 = new float[4];
      float float0 = (-1761.73F);
      floatArray0[0] = (-1761.73F);
      floatArray0[1] = (-4609.0F);
      floatArray0[2] = 13.11F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1761.73F), (-4609.0F), 13.11F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 11;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 260.47666217;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 260.47666217, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      float[] floatArray0 = new float[4];
      float float0 = (-1761.73F);
      floatArray0[0] = (-1761.73F);
      floatArray0[1] = (-4609.0F);
      floatArray0[2] = 13.11F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1761.73F), (-4609.0F), 13.11F, 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2235L;
      longArray0[1] = (-3397L);
      longArray0[2] = (-1073741824L);
      long[] longArray1 = new long[8];
      assertFalse(longArray1.equals((Object)longArray0));
      
      longArray1[0] = 2235L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-3397L);
      longArray1[4] = (-3397L);
      longArray1[5] = 0L;
      longArray1[6] = (-3397L);
      longArray1[7] = 4227L;
      double double0 = MathArrays.linearCombination(1662.5575423656537, (double) 0L, (double) 0L, (-169.4197));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1243.135;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1243.135, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1243.135;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1243.135;
      doubleArray1[7] = 1.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1243.135, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1243.135, 1.0, 1.0, 1.0, 1.0, 1.0, 1243.135, 1.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2.23606797749979, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F9/J}!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.scale((-2900.85), doubleArray0);
      assertArrayEquals(new double[] {1243.135, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3606148.16475), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      int int0 = (-2094);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1644), (-1644));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "|$CT79_d`E_kl2Ro ";
      stringArray0[1] = "S7e!Qck4qfc+t";
      stringArray0[2] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[3] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-1048.1790647734033);
      double double1 = MathArrays.linearCombination(1.0, 424.65835, 1.0, 1.0, (-1048.1790647734033), 424.65835);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-444692.33380121656), double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-444692.33380121656);
      doubleArray0[2] = (-444692.33380121656);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, (-444692.33380121656), (-444692.33380121656)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.977512717415726E11, 1.977512717415726E11}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = null;
      int[] intArray1 = new int[2];
      int int0 = 123;
      intArray1[0] = 123;
      intArray1[1] = (-1169);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1841.154);
      doubleArray0[1] = 1059.903233917;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[3] = "F9/J}!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.scale((-2900.85), doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-1.9682003717995542E8), double1, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2900.85);
      doubleArray2[1] = (-713.1644280997893);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = (-713.1644280997893);
      doubleArray2[4] = 260.47666217;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1.9682003717995542E8);
      doubleArray2[7] = 0.7937005259840998;
      doubleArray2[8] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[2];
      longArray1[0] = 1L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1L;
      longArray2[1] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 1L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = 1L;
      longArray3[7] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1L;
      longArray4[1] = 0L;
      longArray4[2] = 1L;
      longArray4[3] = 1L;
      longArray4[4] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 1L;
      longArray5[1] = 1L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3068.07023);
      doubleArray0[1] = 4548.54187206497;
      doubleArray0[2] = (-667.2665);
      doubleArray0[3] = (-3044.949);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1926.7274933612077);
      doubleArray1[1] = (-3044.949);
      doubleArray1[2] = 4548.54187206497;
      doubleArray1[3] = (-3068.07023);
      doubleArray1[4] = 1809.67912962;
      doubleArray1[5] = 422.02144091326477;
      doubleArray1[6] = (-3068.07023);
      doubleArray1[7] = (-3044.949);
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2285.392466926753);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2285.392466926753);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2285.392466926753);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.06666666666666667;
      doubleArray1[1] = (-2285.392466926753);
      doubleArray1[2] = (-2285.392466926753);
      doubleArray1[3] = (-2285.392466926753);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-2285.392466926753);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-2285.392466926753);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2285.392466926753), 0.0, 0.0, (-2285.392466926753), 0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.06666666666666667, (-2285.392466926753), (-2285.392466926753), (-2285.392466926753), 0.0, 0.0, (-2285.392466926753), 0.0, (-2285.392466926753)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S7e!Qck4qfc+t";
      stringArray0[1] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.06666666666666667, (-2285.392466926753), (-2285.392466926753), (-2285.392466926753), 0.0, 0.0, (-2285.392466926753), 0.0, (-2285.392466926753)}, doubleArray1, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = (-4388.0);
      doubleArray0[2] = (-4388.0);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-4388.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-8776.0)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 1104L;
      longArray1[2] = 10000L;
      longArray1[3] = 1944L;
      longArray1[4] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1104L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 1023L;
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-540L);
      longArray1[5] = 981L;
      longArray1[6] = (-889L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1023L;
      MathArrays.checkNonNegative(longArray2);
      assertArrayEquals(new long[] {1023L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray2);
      assertEquals(8, longArray2.length);
      assertFalse(longArray2.equals((Object)longArray1));
      assertNotSame(longArray2, longArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 6414.88F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      floatArray0[4] = 312.0F;
      floatArray0[5] = (-742.2F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2497.8015F;
      doubleArray0[1] = (double) 2554.464F;
      doubleArray0[2] = (double) 6414.88F;
      doubleArray0[3] = (double) 2497.8015F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 2554.464F;
      doubleArray0[6] = (double) (-742.2F);
      doubleArray0[7] = (double) 312.0F;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (6,414.88 > 2,497.802)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J}!Sc3fM)*xW%u'n";
      stringArray0[3] = "F9/J}!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.scale((-2900.85), doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2094), (-1644));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DECREASING";
      stringArray0[1] = "{f-! O?'ax8!";
      stringArray0[2] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.scale((-60.73776), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-60.73776);
      doubleArray2[1] = (-60.73776);
      doubleArray2[2] = (-60.73776);
      doubleArray2[3] = (-60.73776);
      doubleArray2[4] = (-60.73776);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J!Sc3fM)*xW%u'n";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray1[1] = "F9/J!Sc3fM)*xW%u'n";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      double double0 = MathArrays.linearCombination((double) 2497.8015F, (double) 6414.88F, (double) 2497.8015F, (-1670.44));
      assertEquals(1.1850669120814275E7, double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((-2900.85), (-1.0), (-688.77), 1.34217729E8, (-880.01099), (double) 6414.88F, (-3.141592653589793), (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-9.245078746413481E10), double1, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1670.44);
      doubleArray0[1] = 2184.0;
      doubleArray0[2] = (-9.245078746413481E10);
      doubleArray0[3] = (-2900.85);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2900.85);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1483.394468);
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1670.44), 2184.0, (-9.245078746413481E10), (-2900.85), 0.0, (-2900.85), 0.0, (-1483.394468)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(8.547148102738653E21, double2, 0.01);
      
      MathArrays.scaleInPlace(1050.2456759231, doubleArray0);
      assertArrayEquals(new double[] {(-1754372.3868889832), 2293736.5562160504, (-9.709603976989312E13), (-3046605.1690015243), 0.0, (-3046605.1690015243), 0.0, (-1557928.6257052473)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2285.392466926753);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2285.392466926753);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2285.392466926753);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.06666666666666667;
      doubleArray1[1] = (-2285.392466926753);
      doubleArray1[2] = (-2285.392466926753);
      doubleArray1[3] = (-2285.392466926753);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-2285.392466926753);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-2285.392466926753);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2285.392466926753), 0.0, 0.0, (-2285.392466926753), 0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.06666666666666667, (-2285.392466926753), (-2285.392466926753), (-2285.392466926753), 0.0, 0.0, (-2285.392466926753), 0.0, (-2285.392466926753)}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 616.1107799987084;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {616.1107799987084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {616.1107799987084, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 0.0;
      double double0 = MathArrays.distance(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 75;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-3912);
      intArray0[4] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {75, 0, 0, (-3912), 0}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(0, int0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(Double.NaN, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray2.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2285.392466926753);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-2285.392466926753)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-811);
      intArray0[1] = 1103;
      int[] intArray1 = MathArrays.copyOf(intArray0, 6);
      assertArrayEquals(new int[] {(-811), 1103, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-811), 1103}, intArray0);
      assertEquals(6, intArray1.length);
      assertEquals(2, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3088.193);
      doubleArray0[3] = (-2753.12);
      doubleArray0[4] = 1.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3088.193));
      assertArrayEquals(new double[] {(-1.0), 1.0, (-3088.193), (-2753.12), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.5287718312357574), 0.5287718312357574, (-1632.9494678194476), (-1455.7723040117883), 0.5287718312357574}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 383.127321;
      doubleArray0[1] = (-202.241114133708);
      doubleArray0[2] = 2812.0;
      doubleArray0[3] = (-4355.5111);
      doubleArray0[4] = (-671.516453);
      doubleArray0[5] = (-2.957007209750105E-8);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (383.127 >= -202.241)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1841.154), 3551.587551796317, (-2001.3), (-2001.3));
      assertEquals((-2533817.937339996), double0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double1 = MathArrays.linearCombination((-2533817.937339996), (-688.77), (-688.77), (-1946.800486), (-1946.800486), (-1946.800486), 3551.587551796317, (-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.7503451590171492E9, double1, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1483.394468);
      doubleArray0[1] = (-688.77);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2001.3);
      doubleArray0[4] = 4160.56428;
      doubleArray0[5] = 2184.0;
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1483.394468), (-688.77), 0.0, (-2001.3), 4160.56428, 2184.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(2.8760216078604918E7, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3856.6597;
      doubleArray0[4] = 488.23;
      doubleArray0[5] = (-292.3675155);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2107.06904);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 7713.3194, 976.46, (-584.735031), 0.0, (-4214.13808)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.scaleInPlace((-2874), doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1497219.85415316), -0.0, (-5748.0), (-2.21680799556E7), (-2806346.04), 1680528.479094, -0.0, 1.211143284192E7}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1497219.85415316), -0.0, (-5748.0), (-2.21680799556E7), (-2806346.04), 1680528.479094, -0.0, 1.211143284192E7}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1420.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1420.0F), 0.0F, Float.NaN}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 3350.0819377405846;
      doubleArray0[3] = 2291.7991774;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(16, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-280.01233F);
      floatArray0[2] = 0.5F;
      floatArray0[3] = (-3444.1233F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, (-280.01233F), 0.5F, (-3444.1233F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      floatArray0[4] = 312.0F;
      floatArray0[5] = (-742.2F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2497.8015F, 2497.8015F, 0.0F, 2554.464F, 312.0F, (-742.2F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      
      int int0 = 88;
      int[] intArray0 = new int[4];
      intArray0[0] = 88;
      intArray0[1] = (-548);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2497.8015F, 2497.8015F, 0.0F, 2554.464F, 312.0F, (-742.2F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      intArray0[2] = 88;
      intArray0[3] = (-548);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-548));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[2] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[3] = "F9/J!Sc3fM)*xW%u'n";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray1 = MathArrays.scale((-2900.85), doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-755603.7254558444), -0.0, (-2900.85), -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-278.0);
      doubleArray0[2] = (-4392.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4160.56428;
      doubleArray0[6] = 3.32;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, (-3.141592653589793), 0.0, 0.0, 4160.56428, 0.0, 3.32, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 281;
      intArray0[1] = 1;
      int int0 = (-827);
      intArray0[2] = (-827);
      intArray0[3] = 3059;
      intArray0[4] = 0;
      int int1 = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int2 = 795;
      intArray0[7] = 795;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {281, 1, (-827), 3059, 0, 0, 0, 795}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1379.8232);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 499.719623273;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-309.0);
      doubleArray0[5] = (-2542.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-278.0);
      doubleArray0[2] = (-4392.0);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -278 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-742.74749);
      doubleArray0[2] = (-2704.909840563);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2805.0331690509215, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.scaleInPlace((-2704.909840563), doubleArray1);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2009064.9947544686, 7316537.245574555}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale((-742.74749), doubleArray1);
      assertArrayEquals(new double[] {0.0, (-742.74749), (-2704.909840563)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2009064.9947544686, 7316537.245574555}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.4922279821007447E9), (-5.4343396746420145E9)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2704.909840563);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2812.0;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1834.511;
      doubleArray0[6] = (-129.08256);
      doubleArray0[7] = (-1653.1225571098646);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, Double.NaN, 1.304E19, 2812.0, 1.34217729E8, 1834.511, (-129.08256), (-1653.1225571098646)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2711);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      int int0 = (-2146743608);
      intArray0[2] = (-2146743608);
      intArray0[3] = 302;
      intArray0[4] = (-308);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1, (-2146743608), 302, (-308)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertArrayEquals(new int[] {0, 1, (-2146743608), 302, (-308)}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[9][3];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1012.85366040513);
      doubleArray2[1] = (-1286.57);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1.0);
      doubleArray2[4] = 2366.516;
      doubleArray2[5] = (-46.014939);
      doubleArray1[2] = doubleArray2;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3856.6597;
      doubleArray0[4] = 488.23;
      doubleArray0[5] = (-292.3675155);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2107.06904);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 7713.3194, 976.46, (-584.735031), 0.0, (-4214.13808)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {135696.1830704486, 0.0, 2.0, 2.974764808320818E7, 476737.06580000004, 170957.52823928552, 0.0, 8879479.878653042}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {260.47666217, 0.0, 1.0, 3856.6597, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {520.95332434, 0.0, 2.0, 7713.3194, 976.46, (-584.735031), 0.0, (-4214.13808)}, doubleArray1, 0.01);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      
      double[][] doubleArray3 = new double[3][7];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {1.0, 0.0, 3856.6597, 260.47666217, 488.23, (-292.3675155), 0.0, (-2107.06904)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      int[] intArray3 = MathArrays.copyOf(intArray2, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertEquals(8, intArray2.length);
      assertEquals(0, intArray3.length);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2447.01391);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = 3350.0819377405846;
      doubleArray0[3] = 2291.7991774;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 2291.7991774, 3350.0819377405846, 1.304E19}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.7976931348623157E308, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 57;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 57, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2812.0;
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 1834.511;
      doubleArray0[6] = (-129.08256);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, 1.304E19, 2812.0, 1.34217729E8, 1834.511, (-129.08256), 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2430.2369;
      doubleArray0[1] = 2430.2369;
      double[] doubleArray1 = MathArrays.scale(2430.2369, doubleArray0);
      assertArrayEquals(new double[] {2430.2369, 2430.2369}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5906051.390121609, 5906051.390121609}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[2];
      int int0 = 139;
      intArray0[0] = 139;
      intArray0[1] = 1909;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {139, 1909}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {2430.2369, 2430.2369}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5906051.390121609, 5906051.390121609}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.488144302275739E13, 6.976288604551478E13, 3.488144302275739E13}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1387));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = (-1048.1790647734033);
      double double1 = MathArrays.linearCombination(0.0, 424.65835, 0.0, 0.0, (-1048.1790647734033), 424.65835);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-445117.99215121655), double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-445117.99215121655);
      doubleArray0[2] = (-445117.99215121655);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-445117.99215121655), (-445117.99215121655)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.9813002693673047E11, 1.9813002693673047E11}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = null;
      int[] intArray1 = new int[2];
      int int0 = 123;
      intArray1[0] = 123;
      int int1 = (-1169);
      intArray1[1] = (-1169);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 2235L;
      longArray0[1] = (-3397L);
      longArray0[2] = (-1073741824L);
      longArray0[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,397 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-2401L);
      longArray0[2] = 0L;
      longArray0[3] = 1576L;
      longArray0[4] = 0L;
      longArray0[5] = 1L;
      longArray0[6] = 505L;
      longArray0[7] = (-202L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,401 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = 3551.587551796317;
      MathArrays.linearCombination((-1841.154), 3551.587551796317, (-2001.3), (-499.14315));
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination((-5540084.441244996), (-688.77), (-688.77), (-1946.800486), (-1946.800486), (-1946.800486), 3551.587551796317, (-1.0));
      double[] doubleArray0 = new double[0];
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1873.332996466674, Double.NEGATIVE_INFINITY, 2919.9, Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1809.67912962);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 2365.9137901;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 950.675164453776;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4160.56428;
      doubleArray0[5] = 2184.0;
      doubleArray0[6] = 3.32;
      doubleArray0[7] = (-1483.394468);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2.428063116770932E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 187;
      int int0 = (-1672);
      intArray0[2] = (-1672);
      intArray0[3] = 1209;
      int int1 = (-1648);
      intArray0[4] = (-1648);
      intArray0[5] = 468;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 187;
      doubleArray0[1] = (double) 187;
      doubleArray0[2] = (double) (-1672);
      doubleArray0[3] = 2073.1262914462673;
      doubleArray0[4] = (double) 187;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      MathArrays.distanceInf(doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1243.135;
      doubleArray0[1] = (-1895.9459);
      doubleArray0[2] = (-275.09378975631466);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1372.7962133);
      doubleArray0[5] = 2194.3708;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1,243.135 > -1,895.946)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2972;
      intArray0[1] = (-205);
      intArray0[2] = 2;
      intArray0[3] = 212;
      intArray0[4] = 291;
      int[] intArray1 = new int[6];
      intArray1[0] = (-205);
      intArray1[1] = 212;
      intArray1[2] = 2;
      intArray1[3] = 291;
      intArray1[4] = 212;
      intArray1[5] = 212;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(3177, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2285.392466926753);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F9/J!Sc3fM)*xW%u'n";
      stringArray0[1] = "S7e!Qck4qfc+t";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2123.28514);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 616.1107799987084;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-705.2476374599);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 131.74;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 837.701053400411;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = 75;
      intArray0[1] = 0;
      intArray0[2] = (-3848);
      intArray0[3] = (-3912);
      intArray0[4] = 0;
      intArray0[5] = 634;
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distance(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-4388.0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[6][1];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 1104L;
      longArray1[2] = 10000L;
      longArray1[3] = 1944L;
      longArray1[4] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 1104L;
      longArray2[1] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = 622L;
      longArray3[2] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = 1104L;
      longArray5[2] = 622L;
      longArray5[3] = 1944L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = 10000L;
      longArray6[1] = 1104L;
      longArray6[2] = 1944L;
      longArray6[3] = 1L;
      longArray6[4] = 1944L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray1, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray1);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-586);
      intArray0[1] = (-2995);
      intArray0[2] = 1329;
      intArray0[3] = 619;
      intArray0[4] = (-1031);
      intArray0[5] = (-1226);
      intArray0[6] = 1;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-918.15);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 229.94;
      doubleArray0[6] = (-1545.019687447532);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 187.93F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 187.93F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 0.0F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 187.93F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1.0F);
      int int0 = (-1883);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1883));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3088.193);
      doubleArray0[1] = 1654.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,088.193 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-336.518175842);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1124.132224915;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-124.39362245);
      doubleArray0[1] = (-124.39362245);
      MathArrays.scaleInPlace((-124.39362245), doubleArray0);
      int[] intArray0 = new int[1];
      int int0 = 0;
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-967));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      int int0 = 1154;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1154, 1154);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.46F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2554.46F;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(4238.14407183346, (double) 0.0F, (-404.354344726), 1638.17123978023);
      assertEquals((-662401.658210314), double0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray1 = new float[6];
      floatArray1[0] = 2497.8015F;
      floatArray1[1] = 2497.8015F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 2554.46F;
      floatArray1[4] = 2497.8015F;
      floatArray1[5] = 2497.8015F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      
      MathArrays.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6525265.692032814}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 260.47666217;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(1.1795268640216787E-8, 4.3466666666666665E18, 260.47666217, 0.0, (-1648.94), 4.3466666666666665E18);
      int int0 = (-748);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-748), (-748));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 0.0F, 2980.77, 2980.77, (-1841.154));
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 6414.88F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      floatArray0[4] = 312.0F;
      floatArray0[5] = (-742.2F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 88;
      int int1 = (-548);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 88, (-548));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2497.8015F;
      floatArray0[1] = 2497.8015F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2554.464F;
      floatArray0[4] = 312.0F;
      floatArray0[5] = (-742.2F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2497.8015F;
      doubleArray0[1] = (double) 312.0F;
      doubleArray0[2] = (double) 2497.8015F;
      doubleArray0[3] = (double) 2497.8015F;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.34217729E8, 100.0, 0.0, (double) (-742.2F));
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,497.802 >= 312)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          double double0 = MathArrays.linearCombination((-2237.0028874), 2865.3866574829535, (-1.0), 1310.73047532132);
          assertEquals((-6411188.956782123), double0, 0.01);
          
          double[] doubleArray0 = new double[3];
          doubleArray0[0] = 1310.73047532132;
          doubleArray0[1] = Double.NEGATIVE_INFINITY;
          doubleArray0[2] = 1310.73047532132;
          double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
          assertEquals(Double.NaN, double1, 0.01);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2900.85);
      doubleArray0[2] = 1151.8556;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 6.283185307179586;
      doubleArray0[7] = 71.153315411;
      doubleArray0[8] = 1.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,900.85)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      MathArrays.scale(0.0, doubleArray0);
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[7];
      longArray1[0] = 1023L;
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = 0L;
      longArray1[4] = (-540L);
      longArray1[5] = 981L;
      longArray1[6] = (-889L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = 1023L;
      longArray2[1] = (-889L);
      longArray2[2] = 981L;
      longArray2[3] = (-889L);
      longArray2[4] = (-540L);
      longArray2[5] = 1L;
      longArray2[6] = (-540L);
      longArray2[7] = 1023L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 981L;
      longArray3[1] = (-889L);
      longArray3[2] = (-540L);
      longArray3[3] = 1L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -540 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
