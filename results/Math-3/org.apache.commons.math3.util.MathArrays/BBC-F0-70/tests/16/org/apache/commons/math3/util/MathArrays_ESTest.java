/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:51:11 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 28, (-4562));
      assertNotNull(objectArray0);
      assertEquals(28, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.04168701738764507;
      doubleArray0[1] = 0.9974949359893799;
      doubleArray0[2] = 1759.528635;
      doubleArray0[3] = 1867.08699867602;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1078.40417852345);
      doubleArray0[0] = (-1078.40417852345);
      doubleArray0[1] = 2313.99;
      double double1 = (-2034.0);
      doubleArray0[2] = (-2034.0);
      doubleArray0[3] = (-1861.0027038483393);
      doubleArray0[4] = (-492.2825197941);
      double double2 = 1.0;
      doubleArray0[5] = 1.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1078.40417852345), 2313.99, (-2034.0), (-1861.0027038483393), (-492.2825197941), 1.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1078.40417852345), 2313.99, (-2034.0), (-1861.0027038483393), (-492.2825197941), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.4632599600834212E18, (-9.577057582598058E18), 8.4182451622541373E18, 7.7022502500556298E18, 2.0374409738047977E18, (-4.1387635999282875E15)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-2362);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), (-2362)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2362)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double double3 = MathArrays.safeNorm(doubleArray1);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1078.40417852345), 2313.99, (-2034.0), (-1861.0027038483393), (-492.2825197941), 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.4632599600834212E18, (-9.577057582598058E18), 8.4182451622541373E18, 7.7022502500556298E18, 2.0374409738047977E18, (-4.1387635999282875E15)}, doubleArray1, 0.01);
      assertEquals(1.568385841523325E19, double3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), (-2362)}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2362)}, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,078.404 <= 2,313.99)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[IODx&";
      stringArray0[1] = "f]L4-?;/s";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ".)c((Nmv";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(mathArrays_OrderDirection0).when(field0).getZero();
      int int0 = 3055;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3055);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2143000383;
      intArray0[1] = 134217729;
      intArray0[2] = 1733;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 127;
      intArray1[1] = 134217729;
      intArray1[2] = 2143000383;
      intArray1[3] = 2143000383;
      intArray1[4] = 134217729;
      intArray1[5] = 134217729;
      intArray1[6] = 1733;
      intArray1[7] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2143000383, 134217729, 1733}, intArray0);
      assertArrayEquals(new int[] {127, 134217729, 2143000383, 2143000383, 134217729, 134217729, 1733, 134217729}, intArray1);
      assertEquals((-8968390), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 127;
      doubleArray0[1] = (double) 1733;
      doubleArray0[2] = (double) 2143000383;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {127.0, 1733.0, 2.143000383E9}, doubleArray0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1163.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-2080.8418F);
      floatArray0[5] = -0.0F;
      floatArray0[6] = 1.4E-45F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1163.0F), 0.0F, (-2080.8418F), -0.0F, 1.4E-45F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 0.041666663879186654;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (-2080.8418F);
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (-3106.22);
      doubleArray0[6] = (double) 1.4E-45F;
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.041666663879186654, 0.0, (-2080.841796875), 1.401298464324817E-45, (-3106.22), 1.401298464324817E-45, 0.0}, doubleArray0, 0.01);
      assertEquals(3738.7839298036583, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 202.0;
      doubleArray0[1] = 512.9429;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2655.94932842032));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {202.0, 512.9429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-750.4120459702511), (-1905.5372824500687)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {202.0, 512.9429}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-750.4120459702511), (-1905.5372824500687)}, doubleArray1, 0.01);
      assertEquals((-1129015.053004048), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 825;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 825);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1810.0;
      doubleArray1[1] = 804.0984725;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = (-990.5069F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-3.4028235E38F);
      floatArray0[4] = 789.3953F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1134.1444F;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1134.1444F;
      floatArray1[2] = (-3.4028235E38F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-3.4028235E38F), (-990.5069F), 0.0F, (-3.4028235E38F), 789.3953F, 0.0F, 1134.1444F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1134.1444F, (-3.4028235E38F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2065;
      intArray0[1] = 2;
      intArray0[2] = 2144198725;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2065, 2, 2144198725}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2065;
      doubleArray0[1] = (double) 2144198725;
      doubleArray0[2] = (double) 2144198725;
      doubleArray0[3] = (double) 2144198725;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.144198725E9);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2065.0, 2.144198725E9, 2.144198725E9, 2.144198725E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {688.3331123637842, 7.147326788889625E8, 7.147326788889625E8, 7.147326788889625E8}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[2][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.144198725E9, 2.144198725E9, 2.144198725E9, 2065.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7.147326788889625E8, 7.147326788889625E8, 688.3331123637842, 7.147326788889625E8}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1428.63F);
      floatArray1[2] = 465.564F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 2551.3503F;
      floatArray1[5] = (-2914.6F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1428.63F), 465.564F, 0.0F, 2551.3503F, (-2914.6F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = 2.925681159240093E-8;
      doubleArray0[2] = (double) 2551.3503F;
      doubleArray0[3] = (double) 2551.3503F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-2914.6F);
      doubleArray0[6] = (double) 2551.3503F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 2.925681159240093E-8, 2551.350341796875, 2551.350341796875, 0.0, (-2914.60009765625), 2551.350341796875}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "|9+";
      stringArray0[2] = "lQoC`KG=hH]?";
      stringArray0[1] = "";
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1024.499F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2104.3F;
      floatArray0[4] = (-2987.4558F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 1152.0F;
      floatArray0[7] = 2044.227F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1024.499F), 0.0F, 2104.3F, 0.0F, (-2987.4558F), Float.NaN, 1152.0F, 2044.227F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 2044.227F;
      doubleArray0[2] = (double) 1152.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 4178864.2351458073, 4709899.125, 1327104.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 2044.22705078125, 1152.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 1.4699556E-39;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.4699556E-39, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0F, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.4699556E-39, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[1];
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 1.304E19);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cannot discard a negative number of elements ({0})";
      stringArray0[1] = "some outline boundary loops cross each other";
      stringArray0[2] = "unable to solve: singular problem";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "DECREASING";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection1, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3542;
      intArray0[1] = 2211;
      intArray0[2] = 1;
      intArray0[3] = (-2177);
      intArray0[4] = 3809;
      intArray0[5] = 2;
      intArray0[6] = (-1694);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2177);
      intArray1[1] = 2;
      intArray1[2] = (-1694);
      intArray1[3] = (-2177);
      intArray1[4] = 4;
      intArray1[5] = 3542;
      intArray1[6] = 3809;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3542, 2211, 1, (-2177), 3809, 2, (-1694)}, intArray0);
      assertArrayEquals(new int[] {(-2177), 2, (-1694), (-2177), 4, 3542, 3809}, intArray1);
      assertEquals(5719, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1681;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1681}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double((-4922.1283801));
      assertNotNull(double0);
      assertEquals((-4922.1283801), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4922.1283801);
      doubleArray0[1] = (-4922.1283801);
      doubleArray0[2] = (-4922.1283801);
      doubleArray0[3] = (-4922.1283801);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-4922.1283801);
      doubleArray0[6] = (-4922.1283801);
      doubleArray0[7] = (-4922.1283801);
      doubleArray0[8] = (-4922.1283801);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801), Double.NaN, (-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801), Double.NaN, (-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801), Double.NaN, (-4922.1283801), (-4922.1283801), (-4922.1283801), (-4922.1283801)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(240.10129659, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.608E19}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 1.700416E38;
      doubleArray3[2] = 1.304E19;
      doubleArray3[3] = 1.304E19;
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 1.700416E38, 1.304E19, 1.304E19}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[7];
      longArray0[0] = longArray1;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(6331140.332577668, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double double1 = MathArrays.linearCombination(0.0, 2152.5026697, 504.925518385, 0.0, 0.0, (-2451.0879094281054));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10;
      int int0 = 18;
      intArray0[1] = 18;
      intArray0[2] = (-2173);
      intArray0[3] = 2147026833;
      intArray0[4] = 103;
      intArray0[5] = 2;
      intArray0[6] = 1900;
      int[] intArray1 = MathArrays.copyOf(intArray0, 10);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {10, 18, (-2173), 2147026833, 103, 2, 1900}, intArray0);
      assertArrayEquals(new int[] {10, 18, (-2173), 2147026833, 103, 2, 1900, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(10, intArray1.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "index ({0})";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      int[] intArray0 = new int[4];
      intArray0[0] = 4038;
      intArray0[1] = 4038;
      intArray0[2] = 4038;
      intArray0[3] = 4038;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4038;
      intArray1[1] = 4038;
      intArray1[2] = 165;
      intArray1[3] = 4038;
      intArray1[4] = 4038;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {4038, 4038, 4038, 4038}, intArray0);
      assertArrayEquals(new int[] {4038, 4038, 165, 4038, 4038}, intArray1);
      assertEquals(3873, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[7] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = ".)c((Nmv";
      stringArray0[5] = "";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[7] = ".)c((Nmv";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = new Double((-839.244036));
      assertNotNull(double0);
      assertEquals((-839.244036), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 490.2603F;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (-839.244036);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {490.26031494140625, 1.304E19, (-839.244036)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {240355.17640644684, 1.2785989013671875E22, 1.700416E38, (-2.188748445888E22), 704330.5519615693}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {490.26031494140625, 1.304E19, (-839.244036)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {240355.17640644684, 1.2785989013671875E22, 1.700416E38, (-2.188748445888E22), 704330.5519615693}, doubleArray1, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -21,887,484,458,880,000,000,000 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[IODx&";
      stringArray0[1] = "f]L4-?;/s";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = ".)c((Nmv";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 3055;
      Object[] objectArray0 = MathArrays.buildArray(field0, 3055);
      assertNotNull(objectArray0);
      assertEquals(3055, objectArray0.length);
      
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 3055;
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3055L;
      doubleArray0[1] = (double) 3055;
      doubleArray0[2] = (double) 3055;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3055.0, 3055.0, 3055.0}, doubleArray0, 0.01);
      assertEquals(5291.41521712292, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 3055L;
      doubleArray1[1] = (double) 3055;
      doubleArray1[2] = (double) 3055L;
      doubleArray1[3] = (double) 3055L;
      doubleArray1[4] = (double) 3055;
      doubleArray1[5] = (double) 3055;
      doubleArray1[6] = 5291.41521712292;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-4700.0);
      doubleArray0[2] = (-4700.0);
      doubleArray0[3] = (-4700.0);
      doubleArray0[4] = 1.86285714285714278E18;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-4700.0), (-4700.0), (-4700.0), 1.86285714285714278E18, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(2.6146445967563047E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, (-4700.0), (-4700.0), (-4700.0), 1.86285714285714278E18, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E19, (-9400.0), (-9400.0), (-9400.0), 3.7257142857142856E18, 2.608E19, 2.608E19, 2.608E19}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, (-4700.0), (-4700.0), (-4700.0), 1.86285714285714278E18, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.608E19, (-9400.0), (-9400.0), (-9400.0), 3.7257142857142856E18, 2.608E19, 2.608E19, 2.608E19}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "N8`(";
      double double0 = 1.304E19;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1.304E19, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 5, 2143000383);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3414;
      intArray0[1] = (-404);
      intArray0[2] = 3;
      intArray0[3] = 90;
      intArray0[4] = 467;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3;
      intArray1[1] = 90;
      intArray1[2] = 467;
      intArray1[3] = 467;
      intArray1[4] = 3414;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3414, (-404), 3, 90, 467}, intArray0);
      assertArrayEquals(new int[] {3, 90, 467, 467, 3414}, intArray1);
      assertEquals(4573.968845543222, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double double1 = MathArrays.linearCombination(3173.422935814, (double) 3, 1329.792205244, 3173.422935814, (double) 467, (double) 3414);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5823851.3527954295, double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$OrderDirection");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$OrderDirection
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "N8`(";
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      int int0 = 5;
      double double0 = 1917.826428;
      MathArrays.scaleInPlace(5, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[7];
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertEquals(7, longArray1.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray2 = new long[2][0];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = longArray1;
      longArray2[1] = longArray1;
      MathArrays.checkRectangular(longArray2);
      assertFalse(longArray2.equals((Object)longArray0));
      assertNotSame(longArray2, longArray0);
      assertEquals(2, longArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-420), (-420));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.008333333333329196;
      doubleArray0[1] = (-1252.4971448446);
      doubleArray0[2] = (-915.2261148518418);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2.209E7;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.008333333333329196, (-1252.4971448446), (-915.2261148518418), 0.0, 2.209E7, 1.304E19, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.016666666666658392, (-2504.9942896892), (-1830.4522297036835), 0.0, 4.418E7, 2.608E19, 4.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.008333333333329196, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.008333333333329196, (-1252.4971448446), (-915.2261148518418), 0.0, 2.209E7, 1.304E19, 2.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.3888888888875098E-4, (-20.8749524140663), (-15.253768580856455), 0.0, 368166.66666648386, 2.1733333333322544E17, 0.033333333333316784}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      int int0 = 134217729;
      intArray0[0] = 134217729;
      int int1 = (-1781);
      intArray0[1] = (-1781);
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2897.206995;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[3] = (-260.14);
      doubleArray1[4] = (-1638.1748);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2897.206995, 0.0, 0.0, (-260.14), (-1638.1748)}, doubleArray1, 0.01);
      assertEquals(3157.346995, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray1, (float[]) null);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1584L);
      longArray1[1] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1584L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray0[2] = longArray3;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1584L);
      doubleArray1[1] = (double) (-1584L);
      doubleArray1[2] = (double) (-1584L);
      doubleArray1[3] = (double) (-1L);
      doubleArray1[4] = (double) (-1L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1584.0), (-1584.0), (-1584.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1584.0), (-1584.0), (-1584.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1584.0), (-1584.0), (-1584.0), (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "s<j .0M<<kCB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 1624L;
      longArray0[1] = 1372L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-968L);
      longArray0[5] = 0L;
      longArray0[6] = 4033L;
      longArray0[7] = 421L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      doubleArray1[8] = 1.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 244, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale(1987L, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Double double0 = new Double(244);
      assertNotNull(double0);
      assertEquals(244.0, (double)double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double double1 = 1389.681388333359;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1389.681388333359);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-2147483632), 3161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), 1.0, 978.134, 978.134, (-1.0), 0.0, (-2628.4309848139546));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 6055, 2242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1505.114943;
      doubleArray0[1] = 1.304E19;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 2087.8767F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 757.89374F;
      floatArray0[5] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 2087.8767F, Float.NaN, 0.0F, 757.89374F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 26, (-380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 2780.51F;
      floatArray1[1] = 759.35F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-2735.0F);
      floatArray1[4] = (-2649.7373F);
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2780.51F, 759.35F, 1.0F, (-2735.0F), (-2649.7373F), 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-655);
      intArray0[2] = 2147483453;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-655), 2147483453}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(1541.8190051747538, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-2194.02F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 2829.317F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3067.0896F;
      floatArray0[7] = 1.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {3.4028235E38F, (-2194.02F), 0.0F, 0.0F, 2829.317F, 0.0F, 3067.0896F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1341.722623347), (-1341.722623347), (-1341.722623347), (-1341.722623347));
      assertEquals(3600439.1960023115, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), (-1341.722623347), 978.1340518601, 978.1340518601, (-1.0), 0.0, (-2638.112962043));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1313362.7200986242), double1, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2810.2F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-2810.2F), (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}k2eOhu4*g::";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 90;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2326.295933082167;
      doubleArray1[1] = 96176.70000000001;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {90.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2326.295933082167, 96176.70000000001}, doubleArray1, 0.01);
      assertEquals(98412.99593308217, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {90.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2326.295933082167, 96176.70000000001}, doubleArray1, 0.01);
      assertEquals(98412.99593308217, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection2, true);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertArrayEquals(new double[] {2326.295933082167, 96176.70000000001}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1505.114943;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1505.114943;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1505.114943;
      doubleArray1[1] = 1505.114943;
      doubleArray1[2] = 1.304E19;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1.0, 1.0, 1.0, 1.0);
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), 1.0, 978.134, 978.134, (-1.0), 0.0, (-2628.4309848139546));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double2, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 504;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {504}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1341.722623347), (-1341.722623347), (-1341.722623347), (-1341.722623347));
      assertEquals(3600439.1960023115, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), (-1341.722623347), 978.1340518601, 978.1340518601, (-1.0), 0.0, (-2638.112962043));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1313362.7200986242), double1, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244}, intArray0);
      assertArrayEquals(new int[] {(-475), 244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1987L;
      doubleArray0[1] = (double) (-475);
      doubleArray0[2] = (double) 1987L;
      doubleArray0[3] = (double) 244;
      doubleArray0[4] = (double) 244;
      doubleArray0[5] = (double) 244;
      doubleArray0[6] = (double) 1987L;
      doubleArray0[7] = (double) (-475);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1987.0, (-475.0), 1987.0, 244.0, 244.0, 244.0, 1987.0, (-475.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1987.0, (-475.0), 1987.0, 244.0, 244.0, 244.0, 1987.0, (-475.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 244;
      doubleArray2[1] = (double) (-475);
      doubleArray2[2] = (double) 1987L;
      doubleArray2[3] = (double) 1987L;
      double double0 = MathArrays.distance(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {244.0, (-475.0), 1987.0, 1987.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1987.0, (-475.0), 1987.0, 244.0, 244.0, 244.0, 1987.0, (-475.0)}, doubleArray0, 0.01);
      assertEquals(2464.974239216305, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1505.114943;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1505.114943;
      doubleArray0[3] = 1505.114943;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-139.982361472571);
      doubleArray0[6] = 1505.114943;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 1505.114943, 1505.114943, 1.304E19, (-139.982361472571), 1505.114943}, doubleArray0, 0.01);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 1505.114943, 1505.114943, 1.304E19, (-139.982361472571), 1505.114943}, doubleArray0, 0.01);
      assertEquals(3.400832E38, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double double2 = MathArrays.linearCombination(1.304E19, Double.NaN, 3.834E-20, 1505.114943, 1505.114943, 1505.114943, 1.304E19, (-0.063170295));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      doubleArray0[1] = 1635.0;
      doubleArray0[2] = 1894.164938578925;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1505.114943;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1505.114943;
      doubleArray1[3] = 1505.114943;
      doubleArray1[4] = 1505.114943;
      doubleArray1[5] = 1505.114943;
      doubleArray1[6] = 1505.114943;
      doubleArray1[7] = 1505.114943;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1505.114943, 1.0, 1505.114943, 1505.114943, 1505.114943, 1505.114943, 1505.114943, 1505.114943}, doubleArray1, 0.01);
      assertEquals(3982.159959305158, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 40500.0;
      doubleArray2[1] = (double) (-1.0F);
      try { 
        MathArrays.normalizeArray(doubleArray2, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-723.900434), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {524031.83834538836, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 244;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {244.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {244.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 4.116164446561962E-8);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {244.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.116164446561962E-8, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {244.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {244.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.116164446561962E-8, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.686952642033591E-10, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 4.116164446561962E-8;
      doubleArray4[1] = 16200.0;
      MathArrays.scaleInPlace(244, doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1.0043441249611189E-5, 3952800.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(2, doubleArray4.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1.0F;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = (double) 1.0F;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      
      double double0 = MathArrays.distance(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(5, doubleArray3.length);
      
      double[][] doubleArray4 = new double[6][5];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray0;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray3;
      doubleArray4[5] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z:4u!'W";
      stringArray0[2] = "Z:4u!'W";
      stringArray0[0] = "Z:4u!'W";
      stringArray0[3] = "Z:4u!'W";
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      double double2 = MathArrays.linearCombination((-1526.9811156608), 1332.5359498060236, (double) 0.0F, 1332.5359498060236, Double.NaN, 1.44888888888888883E18, 1505.114943, 1.304E19);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "standard deviation must be positive ({0})";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "S.Qq)+ZRwK^4gPNH";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "}k2eOhu4*g::";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-481);
      intArray0[1] = 1741;
      intArray0[2] = (-895);
      intArray0[3] = 2;
      intArray0[4] = 1383;
      intArray0[5] = 1987;
      intArray0[6] = 74;
      intArray0[7] = 134217729;
      intArray0[8] = 2147483604;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1383;
      intArray1[1] = (-1314);
      intArray1[2] = 1383;
      intArray1[3] = 1741;
      intArray1[4] = 1383;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      int[] intArray0 = new int[3];
      intArray0[0] = (-392);
      intArray0[1] = 1140;
      intArray0[2] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-392), 1140, 2}, intArray0);
      assertArrayEquals(new int[] {(-392), 1140, 2}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 1140;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1140;
      doubleArray1[3] = (double) (-392);
      doubleArray1[4] = (double) 2;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) (-392);
      double[][] doubleArray2 = new double[1][6];
      doubleArray2[0] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-66.0778);
      doubleArray1[1] = (-2421.029);
      doubleArray1[2] = (-2421.029);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 530.33944154;
      double[] doubleArray2 = MathArrays.scale((-2421.029), doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), 0.0, 530.33944154, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {159976.27005619998, 5861381.418841, 5861381.418841, -0.0, (-1283967.1678121448), -0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-66.0778);
      doubleArray1[1] = (-2421.029);
      doubleArray1[2] = (-2421.029);
      doubleArray1[3] = (-66.0778);
      doubleArray1[4] = 530.33944154;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2561.729391;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), (-66.0778), 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), (-66.0778), 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray3 = null;
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), (-66.0778), 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      int int0 = (-569);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-2131);
      intArray0[0] = (-2131);
      int int1 = 0;
      intArray0[1] = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-2131);
      doubleArray0[5] = (double) (-2131);
      doubleArray0[6] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1073741824;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1073741824}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 74;
      intArray0[1] = 74;
      intArray0[2] = 1537;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1446);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(1446, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,446 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[1] = integer0;
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) int0;
      longArray1[1] = (long) 90;
      longArray1[2] = (long) 90;
      longArray1[3] = (long) 90;
      longArray1[4] = (long) int0;
      longArray1[5] = (long) 90;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z:4u!'W";
      stringArray0[2] = "Z:4u!'W";
      stringArray0[0] = "Z:4u!'W";
      stringArray0[3] = "Z:4u!'W";
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      double double2 = MathArrays.linearCombination(3.0, (double) (-1.0F), 761.72143, (double) 0.0F, 490.26031494140625, 1.304E19, (double) 0.0F, 1428.63);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6.392994506835937E21, double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244}, intArray0);
      assertArrayEquals(new int[] {(-475), 244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      longArray0[1] = (long) 244;
      longArray0[2] = (long) 244;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1987L, 244L, 244L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 244;
      doubleArray0[1] = (double) 244;
      doubleArray0[2] = (double) (-475);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -475 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 74;
      intArray0[2] = 1537;
      intArray0[3] = (-1);
      Integer integer0 = new Integer(74);
      assertNotNull(integer0);
      assertEquals(74, (int)integer0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {74, 0, 1537, (-1)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {74, 0, 1537, (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {7.668E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.4699556E-39;
      doubleArray3[1] = (double) 1537;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1537.0}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(2.092571258544922, 0.0, 0.0, 1588.5708770354959);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 490.2603F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[15];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(15, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.834E-20), (-3.834E-20), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray2, 3.834E-20);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3.834E-20), (-3.834E-20), 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.917E-20, 1.917E-20, -0.0, -0.0, -0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1732;
      intArray0[1] = (-423);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-993));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      long[] longArray0 = new long[3];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 96356.70000000001;
      doubleArray0[1] = (double) 244;
      doubleArray0[2] = (-3.43338934259355E-8);
      doubleArray0[3] = (double) 244;
      doubleArray0[4] = (double) 244;
      doubleArray0[5] = (double) (-475);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {96356.70000000001, 244.0, (-3.43338934259355E-8), 244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {96356.70000000001, 244.0, (-3.43338934259355E-8), 244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {96356.70000000001, 244.0, (-3.43338934259355E-8), 244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace((-2702.728028413), doubleArray0);
      assertArrayEquals(new double[] {(-2.6042595381538296E8), (-659465.6389327721), 9.279517608682071E-5, (-659465.6389327721), (-659465.6389327721), 1283795.813496175}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.scaleInPlace(4.3489492893300934E11, doubleArray0);
      assertArrayEquals(new double[] {(-1.1325792667685215E20), (-2.86798262177429504E17), 4.035615150960398E7, (-2.86798262177429504E17), (-2.86798262177429504E17), 5.5831628907491392E17}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 96356.70000000001);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {96100.38364013904, 243.35094091219315, (-3.424256258352608E-8), 243.35094091219315, 243.35094091219315, (-473.7364628413596)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.1325792667685215E20), (-2.86798262177429504E17), 4.035615150960398E7, (-2.86798262177429504E17), (-2.86798262177429504E17), 5.5831628907491392E17}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1505.114943;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.0E-5;
      doubleArray1[3] = (-985.826015078075);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 1.0E-5, (-985.826015078075)}, doubleArray1, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1537;
      intArray0[1] = 74;
      intArray0[2] = 74;
      intArray0[3] = 1537;
      intArray0[4] = 1537;
      intArray0[5] = 1537;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {1537, 74, 74, 1537, 1537, 1537}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {1537, 74, 74, 1537, 1537, 1537}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {1537, 74, 74, 1537, 1537, 1537}, intArray0);
      assertEquals(0, int1);
      assertEquals(6, intArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1505.114943, 1.304E19, 1.0E-5, (-985.826015078075)}, doubleArray1, 0.01);
      assertEquals(2.6080000000000004E19, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      Integer integer0 = new Integer(324);
      assertNotNull(integer0);
      assertEquals(324, (int)integer0);
      
      Integer integer1 = new Integer(324);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(324, (int)integer1);
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer integer2 = new Integer(324);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      assertEquals(324, (int)integer2);
      
      integerArray0[4] = integer2;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer1;
      Integer integer3 = Integer.valueOf((int) integerArray0[2]);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      assertEquals(324, (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[8] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double double0 = MathArrays.linearCombination((double) integerArray0[7], (double) integerArray0[2], (double) integerArray0[6], (-654.0));
      assertEquals((-106920.0), double0, 0.01);
      assertEquals(9, integerArray0.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2115.3248506700525));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2115.3248506700525), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2115.3248506700525), -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-8.11015547746898E-17), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      doubleArray0[4] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.scaleInPlace(1416.985373707058, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 490.2603F;
      floatArray0[1] = 48.93461F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 48.93461F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[15];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(29, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 48.93461F;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 15 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244}, intArray0);
      assertArrayEquals(new int[] {(-475), 244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 244;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 1987L;
      doubleArray1[3] = (double) 1987L;
      doubleArray1[4] = (double) 244;
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-66.0778);
      doubleArray1[1] = (-2421.029);
      doubleArray1[2] = (-2421.029);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 530.33944154;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 2561.729391;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), 0.0, 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), 0.0, 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-66.0778), (-2421.029), (-2421.029), 0.0, 530.33944154, 0.0, 2561.729391}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-569), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2631.064871643);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2622.7209619);
      doubleArray0[6] = 2240.091513126953;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}k2eOhu4*g::";
      stringArray0[1] = "}k2eOhu4*g::";
      stringArray0[2] = "}k2eOhu4*g::";
      stringArray0[3] = "}k2eOhu4*g::";
      stringArray0[4] = "}k2eOhu4*g::";
      stringArray0[5] = "}k2eOhu4*g::";
      stringArray0[6] = "}k2eOhu4*g::";
      stringArray0[7] = "}k2eOhu4*g::";
      stringArray0[8] = "}k2eOhu4*g::";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1.0F;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][1];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z:4u!'W";
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1505.114943;
      doubleArray1[1] = 1505.114943;
      doubleArray1[2] = 1.304E19;
      MathArrays.scaleInPlace(1.304E19, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.962669885672E22, 1.962669885672E22, 1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.scaleInPlace((-1.0902938113007961E-8), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1.421743129936238E11), -0.0, -0.0, (-1.6410175076492505E-5), -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double[][] doubleArray2 = new double[4][9];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, (-1.6410175076492505E-5), (-1.421743129936238E11)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2138718408;
      intArray0[1] = 2146057804;
      intArray0[2] = 788;
      intArray0[3] = 47;
      intArray0[4] = (-2394);
      intArray0[5] = 153;
      intArray0[6] = (-569);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2138718408, 2146057804, 788, 47, (-2394), 153, (-569)}, intArray0);
      assertArrayEquals(new int[] {2138718408, 2146057804, 788, 47, (-2394), 153, (-569)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}k2eOhu4*g::";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(4, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection2, false);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      doubleArray0[4] = (-1.0);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0E-5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 744.603488974;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 348.7395276776648;
      doubleArray0[5] = 960.9134909726455;
      doubleArray0[6] = (-558.381891);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 744.603488974;
      doubleArray1[1] = 960.9134909726455;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 960.9134909726455;
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = (-558.381891);
      doubleArray1[7] = 348.7395276776648;
      doubleArray1[8] = (-558.381891);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 744.603488974, 0.0, 1.34217729E8, 348.7395276776648, 960.9134909726455, (-558.381891)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {744.603488974, 960.9134909726455, 0.0, Double.NaN, 960.9134909726455, 1.34217729E8, (-558.381891), 348.7395276776648, (-558.381891)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "}k2eOhu4*g::";
      stringArray0[1] = "";
      stringArray0[2] = "N8`(";
      stringArray0[3] = "";
      stringArray0[4] = "OPV";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "}k2eOhu4*g::";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertEquals(96176.70000000001, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "}k2eOhu4*g::";
      stringArray0[3] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale((-135.2313), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.184768042E-18), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "}k2eOhu4*g::";
      stringArray0[1] = "OPV";
      stringArray0[2] = "ZERO_NOT_ALLOWED";
      stringArray0[3] = "}k2eOhu4*g::";
      stringArray0[4] = "";
      stringArray0[5] = "}k2eOhu4*g::";
      stringArray0[6] = "";
      stringArray0[7] = "}k2eOhu4*g::";
      stringArray0[8] = "}k2eOhu4*g::";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "fM.Q.Fbrg/0EO2piw%x";
      stringArray0[2] = "[{|d^Cu/c";
      stringArray0[3] = "$VALUES";
      stringArray0[4] = "wB:,AiCe.C9";
      stringArray0[5] = "";
      stringArray0[6] = "HOLE_BETWEEN_MODELS_TIME_RANGES";
      stringArray0[7] = " ";
      stringArray0[8] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("H0mw3] ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.H0mw3] 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2505.0406);
      doubleArray1[1] = (-1961.717943);
      doubleArray1[2] = (-2505.0406);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2505.0406), (-1961.717943), (-2505.0406), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.scaleInPlace(1616.466522849127, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1635.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1635.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N8`(";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double double0 = new Double(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[3] = 1505.114943;
      float[] floatArray0 = new float[0];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Z:4u!'W";
      stringArray0[2] = "Z:4u!'W";
      stringArray0[0] = "Z:4u!'W";
      stringArray0[3] = "Z:4u!'W";
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, 0.0}, doubleArray0, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N8`(";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z:4u!'W";
      stringArray0[4] = "";
      stringArray0[5] = "OPV";
      stringArray0[6] = "";
      stringArray0[7] = "}k2eOhu4*g::";
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-262.9398822800038));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      doubleArray0[1] = 1635.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 788.73523;
      doubleArray1[1] = 1635.0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {788.73523, 1635.0, (-1.0), (-1.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      doubleArray0[1] = 1635.0;
      doubleArray0[2] = 1894.164938578925;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.scaleInPlace(3587860.814541703, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3233;
      intArray0[1] = 0;
      intArray0[2] = 3116;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {3233, 0, 3116}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3233, 0, 3116}, intArray0);
      assertArrayEquals(new int[] {3233, 0, 3116}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.8801532983716711E12, (-8.493020582545146E12), (-2.480957037630713E11), 2.2222920521258004E13, 1.2872745224523854E13}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(5, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 48.934608459472656;
      doubleArray0[3] = 3492.1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 48.934608459472656, 3492.1}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1073741823);
      intArray0[1] = 10;
      intArray0[2] = 559;
      intArray0[3] = (-2360);
      intArray0[4] = 1685;
      intArray0[5] = 1;
      intArray0[6] = (-1281);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1073741823), 10, 559, (-2360), 1685, 1, (-1281)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 48.934608459472656, 3492.1}, doubleArray0, 0.01);
      assertEquals(1.219715700590508E7, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 48.934608459472656, 3492.1}, doubleArray0, 0.01);
      assertEquals(1.219715700590508E7, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((-25.90321635606663), 3492.1, 6.123233995736766E-17, (double) (-1281), 3.834E-20, (double) 10, 1320.9518978729, 3.834E-20);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-90456.62183702027), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.7976931348623157E308;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1745));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 490.2603F;
      floatArray0[0] = 490.2603F;
      float float1 = 48.93461F;
      floatArray0[1] = 48.93461F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 48.93461F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = (double) 490.2603F;
      doubleArray0[1] = (double) 48.93461F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(15, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.scale((-135.2313), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.184768042E-18), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5.184768042E-18), -0.0, -0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("@L{M E>ck!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.@L{M E>ck!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 691.7;
      doubleArray0[2] = (double) (-2131);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OPV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2131);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 691.7;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1960.1067261508717);
      doubleArray0[3] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-533.038272855);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1960.1067261508717), 0.0, 0.0, (-533.038272855), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 900.8823F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2059.4417F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 900.8823F, 0.0F, 0.0F, 0.0F, (-2059.4417F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      int[] intArray0 = new int[5];
      int int0 = 5680;
      intArray0[0] = 5680;
      intArray0[1] = (-588);
      intArray0[2] = (-1818);
      intArray0[3] = 646;
      intArray0[4] = 1283;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1818));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1526.9811156608);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2631.064871643);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1526.9811156608), 0.0, 0.0, (-2631.064871643), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-1,526.981 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(90);
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[1] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 490.2603F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z:4u!'W";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 74;
      intArray0[1] = 74;
      intArray0[2] = 1537;
      intArray0[3] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {74, 74, 1537, (-1)}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {74, 74, 1537, (-1)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {74, 74, 1537, (-1)}, intArray0);
      assertEquals(0, int1);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = 0.0;
      double double2 = MathArrays.distanceInf(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0}, doubleArray2, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2631.064871643);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2622.7209619);
      doubleArray0[6] = 2240.091513126953;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 900.8823F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 900.8823F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-2886.26));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, (-962.0866666666667), Double.NaN, (-962.0866666666667), (-962.0866666666667)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.4699556E-39, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3.834E-20, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double2 = new Double(1.4699556E-39);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.4699556E-39, double2, 0.01);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-897.75525F);
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-1.0F);
      floatArray0[7] = (-1.0F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), 0.0F, (-897.75525F), (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(8, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      doubleArray0[1] = 2518.76143392937;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.549540393E9), (-3.5966369175530024E9), 1.5979423425562286E10, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(2522.4481, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 107.122, 0.0, 0.0, (-1657.0), 1691.955971273);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2803571.0443993607), double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1718);
      floatArray0[1] = (float) (-1718);
      floatArray0[2] = (float) (-1718);
      floatArray0[3] = (float) (-1718);
      floatArray0[4] = (float) (-1718);
      floatArray0[5] = (float) (-1718);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-1718);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {(-1718.0F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1718.0F), (-1718.0F), (-1718.0F), (-1718.0F), (-1718.0F), (-1718.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(1, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer((-357));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals((-357), (int)integer1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer1;
      integerArray0[4] = integer1;
      integerArray0[5] = integer1;
      integerArray0[6] = integer0;
      integerArray0[7] = integer1;
      integerArray0[8] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
      
      double double0 = MathArrays.linearCombination(1068.63, 1.7976931348623157E308, 1332.5359498060236, 2376.85);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (int)integerArray0[1];
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-357.0F)}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-393.6));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      double double0 = 1.0E-5;
      doubleArray0[3] = 1505.114943;
      doubleArray0[4] = (-1.0);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1526.9811156608);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2631.064871643);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2622.7209619);
      doubleArray0[6] = 2240.091513126953;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1526.9811156608), 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 900.8823F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 900.8823F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-7));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 490.2603F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(2.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      double double1 = MathArrays.linearCombination(1247.745088814, 1610.8559529482, 2.0, (-1786.05184), 0.0, 0.0, 0.0, 1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2006365.5003979122, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 3984.8402184959127;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1505.114943;
      double double0 = (-1.0);
      doubleArray0[4] = (-1.0);
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 3984.8402184959127, 1.0E-5, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 3984.8402184959127, 1.0E-5, 1505.114943, (-1.0)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      doubleArray0[1] = 1635.0;
      doubleArray0[2] = 1894.164938578925;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 691.7;
      doubleArray0[2] = (double) (-2131);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3882.612590826129;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) (-2131);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 691.7, (-2131.0), 0.0, 3882.612590826129, 0.0, 0.0, 0.0, (-2131.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 244, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      longArray0[1] = (long) 244;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 244);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(244, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1987L;
      doubleArray2[1] = (double) 244L;
      doubleArray2[2] = (double) 1987L;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) 244L;
      doubleArray2[6] = (double) 0;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1987.0, 244.0, 1987.0, 0.0, 0.0, 244.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(244, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2131);
      intArray0[1] = 0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      doubleArray0[1] = 2518.76143392937;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.549540393E9), (-3.5966369175530024E9), 1.5979423425562286E10, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(2522.4481, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 107.122, 0.0, 0.0, (-1657.0), 1691.955971273);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2803571.0443993607), double2, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1718));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764));
      assertEquals(8732014.782214355, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1462);
      intArray0[1] = 1516;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1193.9734747843;
      doubleArray0[2] = 8732014.782214355;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 1516;
      doubleArray0[5] = (-1706.0690472754764);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-922.61885);
      doubleArray0[8] = (double) 1516;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1706.0690472754764);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Field<Pair<Object, Object>> field0 = (Field<Pair<Object, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1193.875734683544;
      doubleArray0[1] = (-2792.42783522);
      doubleArray0[2] = (-2792.42783522);
      doubleArray0[3] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[4][6];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2792.42783522);
      doubleArray2[1] = (-2792.42783522);
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2792.42783522);
      doubleArray3[1] = (-1851.6227345262);
      doubleArray3[2] = (-3246.625343537923);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 1193.875734683544;
      doubleArray3[5] = (-1851.6227345262);
      doubleArray2[1] = (-1190.923260962958);
      doubleArray1[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      longArray0[1] = (long) 244;
      longArray0[2] = (long) 244;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1987L, 244L, 244L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 244;
      doubleArray0[1] = (double) 244;
      doubleArray0[2] = (double) (-475);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray1);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = new int[0];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray0));
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray3.length);
      
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertTrue(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-475), 244, 0, 0, 0}, intArray1);
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {59536.0, 119072.0, (-172264.0), (-231800.0), 225625.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1610.8559529482;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4767.0F);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-374.0);
      doubleArray0[1] = 3.32;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-374.0), 3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139876.0, 11.0224, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-285.3912121458);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (-374.0);
      doubleArray2[3] = (-285.3912121458);
      doubleArray2[4] = (-374.0);
      doubleArray2[5] = (-285.3912121458);
      doubleArray2[6] = 3.32;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {(-374.0), 3.32, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {139876.0, 11.0224, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-285.3912121458), Double.NaN, (-374.0), (-285.3912121458), (-374.0), (-285.3912121458), 3.32}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      
      double double0 = MathArrays.linearCombination(1068.63, 3.32, 2796.29049, 0.0);
      assertEquals(3547.8516000000004, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3.940510424527919E-20), Double.NaN, 1610.8559529482, 1610.8559529482, (-374.0), (-374.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1718));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2131);
      intArray0[1] = 0;
      intArray0[2] = 1061;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2131), 0, 1061, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-1220.6287513100585), (double) (-2131), 2186.25916, (double) 1061, (-1.0));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3442.960181672216;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 474.198289122;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3442.960181672216;
      doubleArray1[5] = 2518.76143392937;
      doubleArray1[6] = 2992.883535632404;
      doubleArray1[7] = 1445.2977;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 490.2603F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {490.2603F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1163, (-380));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244}, intArray0);
      assertArrayEquals(new int[] {(-475), 244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      longArray0[1] = (long) 244;
      longArray0[2] = (long) 244;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1987L, 244L, 244L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 244;
      doubleArray0[1] = (double) 244;
      doubleArray0[2] = (double) (-475);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(3.32, 244.0, (double) 244L, (-2255.97640885), 0.0, 2.0, -0.0, (double) (-475));
      assertEquals((-549648.1637594), double0, 0.01);
      
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 788.73523;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2796.29049;
      doubleArray0[4] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not strictly increasing (2,796.29 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1526.9811156608);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2631.064871643);
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2622.7209619);
      doubleArray0[6] = 2240.091513126953;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1526.9811156608), 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 900.8823F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 900.8823F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1526.9811156608), 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1526.9811156608), Double.NaN, Double.NaN, (-2631.064871643), Double.NaN, (-2622.7209619), 2240.091513126953}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale((-2622.7209619), doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {4004845.3804690284, Double.NaN, Double.NaN, 6900548.990976829, Double.NaN, 6878665.243989661, (-5875134.968052349)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-1526.9811156608), 0.0, 0.0, (-2631.064871643), Double.NEGATIVE_INFINITY, (-2622.7209619), 2240.091513126953}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1526.9811156608), Double.NaN, Double.NaN, (-2631.064871643), Double.NaN, (-2622.7209619), 2240.091513126953}, doubleArray2, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764), (-1706.0690472754764));
      assertEquals(8732014.782214355, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1462);
      intArray0[1] = 1516;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1462), 1516}, intArray0);
      assertArrayEquals(new int[] {(-1462)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-1706.0690472754764);
      doubleArray0[2] = 8732014.782214355;
      doubleArray0[3] = (double) 1516;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale(1.0E-5, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, (-1706.0690472754764), 8732014.782214355, 1516.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0000000000000002E-10, (-0.017060690472754766), 87.32014782214355, 0.015160000000000002, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-2792.42783522);
      doubleArray0[2] = (-1851.6227345262);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1193.9734747843;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1851.6227345262), (-1.0), (-2792.42783522), (-1.0), 0.0, 0.0, 0.0, 1.0, 1193.9734747843}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1589.910752177499);
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1557.24945477864;
      doubleArray0[4] = (-2616.9);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1589.910752177499), 0.0, 1557.24945477864, (-2616.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 352.1;
      doubleArray0[1] = 352.1;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0E-5;
      double double3 = (-1466.9175627176737);
      doubleArray0[5] = (-1466.9175627176737);
      double double4 = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.834E-20;
      double double5 = 1.304E19;
      doubleArray0[8] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (352.1 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2088.34;
      doubleArray0[1] = (-2656.76);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = 3.141592653589793;
      try { 
        MathArrays.normalizeArray(doubleArray0, 3692.95660884523);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1961.717943);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-533.038272855);
      doubleArray0[5] = 2376.85;
      doubleArray0[6] = 1306.4;
      doubleArray0[7] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1961.717943), 0.0, 0.0, (-533.038272855), 2376.85, 1306.4, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1961.717943);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-2505.0406);
      doubleArray1[5] = 2376.85;
      doubleArray1[6] = 2376.85;
      doubleArray1[7] = (-21.54455083698086);
      doubleArray1[8] = 2376.85;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = 1987.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-723.900434);
      doubleArray0[1] = 1635.0;
      doubleArray0[2] = 1894.164938578925;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.scaleInPlace(3587860.814541703, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2.597254000778332E9), 5.866152431775684E9, 6.796000159406117E9}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-723.900434), 1635.0, 1894.164938578925}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[3];
      longArray1[0] = 0L;
      longArray1[1] = (-1357L);
      longArray1[2] = 3710L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2868.317062);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3033.25871891383;
      doubleArray0[3] = 1407.85984373409;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2868.317062), 0.0, 3033.25871891383, 1407.85984373409, 0.0, (-3.141592653589793), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1610.8559529482;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray0, 0.0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 1610.8559529482}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-4767.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 72.28693F;
      floatArray0[5] = (-2829.188F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-2064.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-4767.0F), 0.0F, 0.0F, 72.28693F, (-2829.188F), 0.0F, (-2064.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = 0.0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N8`(";
      stringArray0[1] = "";
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 788.73523;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2796.29049;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 788.73523, Double.NaN, 2796.29049, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2421.029);
      doubleArray0[4] = (-66.0778);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2421.029), (-66.0778)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2421.029), (-66.0778)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N8`(";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z:4u!'W";
      stringArray0[4] = "";
      stringArray0[5] = "OPV";
      stringArray0[6] = "";
      stringArray0[7] = "}k2eOhu4*g::";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-2421.029), (-66.0778)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination((-402.637610403), 0.041666666666621166, 1.5574076175689697, 1472.2346921963488, 228.3085199857106, (-1441.74963367));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-326887.63209576235), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      doubleArray0[1] = 2518.76143392937;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2745649.0, 6344159.161049936, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4.549540393E9), (-3.5966369175530024E9), 1.5979423425562286E10, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(2522.4481, 0.0, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.0, 107.122, 0.0, 0.0, (-1657.0), 1691.955971273);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2803571.0443993607), double2, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1718));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[1];
      longArray1[0] = (-3735L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-3735L);
      longArray2[1] = (-3735L);
      longArray2[2] = (-3735L);
      longArray2[3] = (-3735L);
      longArray2[4] = (-3735L);
      longArray2[5] = (-3735L);
      longArray2[6] = (-9223372036854775808L);
      longArray2[7] = (-3735L);
      longArray2[8] = (-3735L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1L;
      longArray3[1] = (-3735L);
      longArray3[2] = (-9223372036854775808L);
      longArray3[3] = (-3735L);
      longArray3[4] = (-9223372036854775808L);
      longArray3[5] = (-9223372036854775808L);
      longArray3[6] = (-9223372036854775808L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-9223372036854775808L);
      longArray4[1] = 950L;
      longArray4[2] = (-1105L);
      longArray4[3] = (-3735L);
      longArray4[4] = (-3735L);
      longArray4[5] = (-3735L);
      longArray4[6] = 1L;
      longArray4[7] = (-3735L);
      longArray4[8] = (-9223372036854775808L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (-3735L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 950L;
      longArray6[1] = (-9223372036854775808L);
      longArray6[2] = 1L;
      longArray6[3] = (-1105L);
      longArray6[4] = (-1105L);
      longArray6[5] = 1L;
      longArray6[6] = 2067L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray7[0] = (-9223372036854775808L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[2];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-9223372036854775808L);
      longArray8[1] = 2067L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[6];
      longArray1[0] = 0L;
      longArray1[1] = (-316L);
      longArray1[2] = 3245L;
      longArray1[3] = 1L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = (-804L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 1L;
      doubleArray0[4] = (double) (-316L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Integer[] integerArray0 = new Integer[2];
      int int0 = 90;
      Integer integer0 = new Integer(90);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(90, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(90);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      assertEquals(90, (int)integer1);
      
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, integerArray0.length);
      
      double double0 = 0.0;
      double double1 = MathArrays.linearCombination(0.0, 1068.63, 1068.63, (double) int0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(96176.70000000001, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1068.63;
      doubleArray0[1] = (double) 90;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,068.63 >= 90)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1341.722623347), (-1341.722623347), (-1341.722623347), (-1341.722623347));
      assertEquals(3600439.1960023115, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, (-1.0), (-1341.722623347), 978.1340518601, 978.1340518601, (-1.0), 0.0, (-2638.112962043));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1313362.7200986242), double1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-475);
      intArray0[1] = 244;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-475), 244}, intArray0);
      assertArrayEquals(new int[] {(-475), 244}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 1987L;
      longArray0[1] = (long) 244;
      longArray0[2] = (long) 244;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1987L, 244L, 244L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 244;
      doubleArray0[1] = (double) 244;
      doubleArray0[2] = (double) (-475);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {244.0, 244.0, (-475.0)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(3, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(3.32, 244.0, (double) 244L, (-2255.97640885), 0.0, 2.0, -0.0, (double) (-475));
      assertEquals((-549648.1637594), double0, 0.01);
      
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = 1L;
      longArray0[0] = 1L;
      long long1 = (-1L);
      longArray0[1] = (-1L);
      long long2 = 1220L;
      longArray0[2] = 1220L;
      long long3 = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      longArray0[6] = 0L;
      longArray0[7] = (-2933L);
      long long4 = 185L;
      longArray0[8] = 185L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-493.271977056746);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2114.102985075359;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 3.32;
      doubleArray0[8] = (-2035.996384063002);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-493.271977056746), 0.0, 1.0, 0.0, 2114.102985075359, Double.NaN, 0.0, 3.32, (-2035.996384063002)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {243317.24334947093, 0.0, 1.0, 0.0, 4469431.431504543, Double.NaN, 0.0, 11.0224, 4145281.2759176195}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 861L;
      longArray0[1] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {861L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1657.0), 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1657.0);
      doubleArray0[1] = 2518.76143392937;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-4.549540393E9), (-3.5966369175530024E9), 1.5979423425562286E10, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination(2522.4481, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 1887;
      intArray0[2] = 450;
      intArray0[3] = 3262;
      intArray0[4] = 2863;
      intArray0[5] = (-1425);
      intArray0[6] = 2141401847;
      intArray0[7] = (-2517);
      intArray0[8] = (-2580);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-1657.0), 2518.76143392937, 0.0, 0.0}, doubleArray3, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double2, double0, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1961.717943);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = (-533.038272855);
      doubleArray0[5] = 2376.85;
      doubleArray0[6] = 1306.4;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-2141));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1570);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2421.029);
      doubleArray0[4] = (-66.0778);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.equals((double[]) null, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2421.029);
      doubleArray0[4] = (-66.0778);
      MathArrays.equals(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "N8`(";
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 12, (-2028));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3882.612590826129;
      MathArrays.equals(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 3033, 3033);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1352.0002036603607;
      doubleArray0[1] = 383.89;
      doubleArray0[2] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1975276.082797657, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-374.0);
      doubleArray0[1] = 3.32;
      doubleArray0[2] = (-285.3912121458);
      doubleArray0[3] = 2992.883535632404;
      doubleArray0[4] = 3442.960181672216;
      doubleArray0[5] = 474.198289122;
      doubleArray0[6] = (-1658.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][4];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1658.0), (-374.0), (-285.3912121458), 3.32, 474.198289122, 2992.883535632404, 3442.960181672216}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int int0 = 4368;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 4368, 4368);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-2131);
      intArray0[1] = 0;
      intArray0[2] = 1061;
      intArray0[3] = (-2939);
      intArray0[4] = 128;
      intArray0[5] = 232;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[2][6];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[][] longArray0 = new long[8][9];
      long[] longArray1 = new long[7];
      longArray1[0] = (-2056L);
      longArray1[1] = (-7165L);
      longArray1[2] = 0L;
      longArray1[3] = 1099L;
      longArray1[4] = 4503599627370496L;
      longArray1[5] = 0L;
      longArray1[6] = (-1574L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (-1574L);
      longArray2[1] = 4503599627370496L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 4503599627370496L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 276L;
      longArray4[1] = (-7165L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 1626L;
      longArray5[1] = (-1574L);
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray5[5] = (-2056L);
      longArray5[6] = (-1574L);
      longArray5[7] = 4503599627370496L;
      longArray5[8] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 85L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = (-1574L);
      longArray7[3] = 85L;
      longArray7[4] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double double0 = MathArrays.linearCombination(110.8144898512, -0.0, 1472.3444, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-887.4754966603307);
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (-1653L);
      longArray2[1] = 0L;
      longArray2[2] = 2020L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-1653L);
      longArray3[1] = (-1653L);
      longArray3[2] = 2020L;
      longArray3[3] = (-1653L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = (-1653L);
      longArray4[1] = 2020L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      longArray5[0] = (-1653L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = (-1653L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = (-1653L);
      longArray7[1] = 0L;
      longArray7[2] = (-1653L);
      longArray7[3] = (-1653L);
      longArray7[4] = 0L;
      longArray7[5] = 2020L;
      longArray7[6] = 2797L;
      longArray7[7] = (-1653L);
      longArray7[8] = 0L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,653 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 3984.8402184959127;
      double double0 = 1.0E-5;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = 1505.114943;
      doubleArray0[4] = (-1.0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray1);
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 490.2603F;
      floatArray0[1] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1.0F;
      doubleArray0[1] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2.0, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1537;
      intArray0[2] = 0;
      intArray0[3] = 74;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 187L;
      longArray1[1] = 478L;
      longArray1[2] = 0L;
      longArray1[3] = 2836L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 2836L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 2836L;
      longArray3[1] = 187L;
      longArray3[2] = 2836L;
      longArray3[3] = 2836L;
      longArray3[4] = 478L;
      longArray3[5] = 0L;
      longArray3[6] = 2836L;
      longArray3[7] = 0L;
      longArray3[8] = 417L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      longArray4[0] = 2836L;
      longArray4[1] = 2836L;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 236;
      intArray0[1] = 1154;
      intArray0[2] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {236, 1154, (-1)}, intArray1);
      assertNotSame(intArray1, intArray0);
  }
}
