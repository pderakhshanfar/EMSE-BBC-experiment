/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:54:48 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 7.0;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 1545.686921633384;
      doubleArray0[3] = (-1.9841269659586505E-4);
      doubleArray0[4] = 787.446292582;
      doubleArray0[5] = 4.23719669792332E-8;
      doubleArray0[6] = (-1685.150272761222);
      doubleArray0[7] = 146.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {7.0, Double.NEGATIVE_INFINITY, 1545.686921633384, (-1.9841269659586505E-4), 787.446292582, 4.23719669792332E-8, (-1685.150272761222), 146.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 146.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-903.86F);
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = (-2215.4597F);
      floatArray0[6] = Float.NEGATIVE_INFINITY;
      floatArray0[7] = 6734.48F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.4E-45F, 1.0F, (-903.86F), 1.4E-45F, Float.NEGATIVE_INFINITY, (-2215.4597F), Float.NEGATIVE_INFINITY, 6734.48F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = 498.096;
      doubleArray0[5] = (double) 1.0F;
      double[] doubleArray1 = MathArrays.scale(1.4E-45F, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.9636373861190906E-90, 6.979811598863341E-43, 1.401298464324817E-45}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.401298464324817E-45, 498.096, 1.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.9636373861190906E-90, 6.979811598863341E-43, 1.401298464324817E-45}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 1.401298464324817E-45, 498.096, 1.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-8.0E298);
      doubleArray0[1] = (-8.0E298);
      doubleArray0[2] = (-8.0E298);
      doubleArray0[3] = (-8.0E298);
      doubleArray0[4] = (-8.0E298);
      doubleArray0[5] = (-8.0E298);
      doubleArray0[6] = (-8.0E298);
      doubleArray0[7] = (-8.0E298);
      double[] doubleArray1 = MathArrays.scale((-8.0E298), doubleArray0);
      assertArrayEquals(new double[] {(-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298), (-8.0E298)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1584.096828551;
      doubleArray0[2] = (-2428.00698056);
      doubleArray0[3] = (-791.609388);
      doubleArray0[4] = 3264.897494;
      doubleArray0[5] = (-644.636);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 9999);
      assertArrayEquals(new double[] {1.0, 1584.096828551, (-2428.00698056), (-791.609388), 3264.897494, (-644.636)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(9999, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      intArray0[3] = (-383);
      intArray0[4] = 1600;
      intArray0[5] = 1840151462;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 311;
      doubleArray0[1] = (double) 311;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = (double) 1840151462;
      doubleArray1[2] = (double) (-383);
      doubleArray1[3] = (double) 1600;
      doubleArray1[4] = (double) 311;
      doubleArray1[5] = 3279.161388861835;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 311;
      doubleArray1[8] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {311.0, 311.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.840151462E9, (-383.0), 1600.0, 311.0, 3279.161388861835, 2.0, 311.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(11, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {311.0, 311.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(439.8204178980326, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 1073741824, 0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3917.00274839;
      doubleArray0[1] = 107937.90088948788;
      doubleArray0[2] = 107937.90088948788;
      doubleArray0[3] = (-3.5997360512765566E-9);
      doubleArray0[4] = 1098.9665055;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3023);
      intArray0[1] = (-178);
      intArray0[2] = 719542283;
      intArray0[3] = 396;
      intArray0[4] = (-2146920594);
      intArray0[5] = 978;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3023);
      intArray1[1] = 396;
      intArray1[2] = 978;
      intArray1[3] = (-2146920594);
      intArray1[4] = 2142811226;
      intArray1[5] = 10;
      intArray1[6] = (-2146920594);
      intArray1[7] = (-178);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {(-3023), (-178), 719542283, 396, (-2146920594), 978}, intArray0);
      assertArrayEquals(new int[] {(-3023), 396, 978, (-2146920594), 2142811226, 10, (-2146920594), (-178)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-1423267983), int0);
      assertEquals(6, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.5039018405998233;
      doubleArray0[1] = (-268.744105262);
      doubleArray0[2] = 2.85040095144011776E17;
      doubleArray0[3] = 0.9808930158615112;
      doubleArray0[4] = 1.63E18;
      doubleArray0[5] = 4349.403937086833;
      doubleArray0[6] = (-2418.3991983473297);
      doubleArray0[7] = 21770.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.5039018405998233, (-268.744105262), 2.85040095144011776E17, 0.9808930158615112, 1.63E18, 4349.403937086833, (-2418.3991983473297), 21770.0}, doubleArray0, 0.01);
      assertEquals(1.65473498054513485E18, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2121.964193211689);
      assertArrayEquals(new double[] {0.5039018405998233, (-268.744105262), 2.85040095144011776E17, 0.9808930158615112, 1.63E18, 4349.403937086833, (-2418.3991983473297), 21770.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.583494911451799E-16, (-2.9778246938468707E-13), 315.83927514570075, 1.0868805631315008E-15, 1806.124918065962, 4.8193661530716125E-12, (-2.679712303046539E-12), 2.4122294151101835E-11}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 298);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1648.527);
      doubleArray2[1] = 1.2960614927680547E-5;
      doubleArray2[2] = 992.6789507;
      doubleArray2[3] = 375.1220039;
      doubleArray2[4] = (-862.4551);
      doubleArray2[5] = (-1957.49306);
      doubleArray2[6] = (-962.5803853564681);
      doubleArray2[7] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1648.527), 1.2960614927680547E-5, 992.6789507, 375.1220039, (-862.4551), (-1957.49306), (-962.5803853564681), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 2105.4019541270877;
      double double1 = Double.NaN;
      double double2 = (-1586.096622022);
      double double3 = MathArrays.linearCombination(2105.4019541270877, Double.NaN, (-1586.096622022), (-293.4599169814));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = Float.NaN;
      floatArray0[3] = (-3192.6758F);
      floatArray0[5] = (-99.122F);
      floatArray0[6] = (-2480.7178F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NaN, Float.NaN, Float.NaN, (-3192.6758F), 0.0F, (-99.122F), (-2480.7178F)}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, floatArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2923.0884F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 3586.524F;
      floatArray0[3] = 892.9673F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 778.31F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-2923.0884F), 1.0F, 3586.524F, 892.9673F, 0.0F, 778.31F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 778.31F;
      doubleArray0[1] = (double) 1.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-1.0F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {778.3099975585938, 1.0, 0.0, 1.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3349.5302;
      doubleArray0[1] = 0.1428571343421936;
      doubleArray0[2] = 3599.74870297;
      doubleArray0[3] = 3560.05428;
      doubleArray0[4] = 878.8522600247;
      doubleArray0[5] = (-520.4235431759627);
      doubleArray0[7] = (-406.112);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3349.5302, 0.1428571343421936, 3599.74870297, 3560.05428, 878.8522600247, (-520.4235431759627), 0.0, (-406.112)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3349.5302, 0.1428571343421936, 3599.74870297, 3560.05428, 878.8522600247, (-520.4235431759627), 0.0, (-406.112)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6169.252685535506, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 878.8522600247);
      assertArrayEquals(new double[] {3349.5302, 0.1428571343421936, 3599.74870297, 3560.05428, 878.8522600247, (-520.4235431759627), 0.0, (-406.112)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {281.38028105503486, 0.012000841375284003, 302.4001102510423, 299.06554473746183, 73.82877035460156, (-43.71864533316028), 0.0, (-34.115801881655614)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.3039999999999996E19;
      doubleArray0[1] = (-774.1463);
      doubleArray0[2] = (-1232.529869);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 371.0194069508;
      doubleArray0[6] = (-1.0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.3039999999999996E19, (-774.1463), (-1232.529869), 1.34217729E8, (-1.0), 371.0194069508, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1.3039999999999996E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.3039999999999996E19, (-774.1463), (-1232.529869), 1.34217729E8, (-1.0), 371.0194069508, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {1.3039999999999996E19, (-774.1463), (-1232.529869), 1.34217729E8, (-1.0), 371.0194069508, (-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.700415999999999E38, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3009.7F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2175.2F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1.0F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (-3009.7F);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 2175.2F;
      floatArray1[5] = (-1.0F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-3009.7F), (-1.0F), 2175.2F, (-1.0F), 0.0F, Float.NaN}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3009.7F), 0.0F, 2175.2F, Float.NaN, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(8, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 325L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {325L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 325L;
      doubleArray0[1] = (double) 325L;
      doubleArray0[2] = 928.744277268;
      doubleArray0[3] = (double) 325L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {325.0, 325.0, 325.0, 928.744277268}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1428.6F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 325L;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 325L;
      floatArray0[5] = (float) 325L;
      floatArray0[6] = (float) 325L;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 773.85F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = Float.POSITIVE_INFINITY;
      floatArray1[4] = (float) 325L;
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-1428.6F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {773.85F, 0.0F, 0.0F, Float.POSITIVE_INFINITY, 325.0F, 0.0F, (-1428.6F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-1428.6F), 0.0F, 325.0F, 0.0F, 325.0F, 325.0F, 325.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(7, floatArray1.length);
      assertEquals(7, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertArrayEquals(new double[] {325.0, 325.0, 325.0, 928.744277268}, doubleArray0, 0.01);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 9.428393367601744E12;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(16, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1748.63330794828), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray1 = MathArrays.scale((-1748.63330794828), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.scaleInPlace(517.329, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Object>> field0 = (Field<FieldElement<Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-309), (-309));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 37231.20126578575;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 37231.20126578575}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 37231.20126578575}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 37231.20126578575}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 37231.20126578575}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1048.2));
      assertArrayEquals(new double[] {Double.NaN, 37231.20126578575}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-1048.2)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(Double.NaN, (-1950.4478312459194), (-1950.4478312459194), 290.201284, 3185.1, Double.NaN);
      assertEquals(Double.NaN, double1, 0.01);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2175299.8350876602;
      doubleArray0[1] = (-3257.34438768);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 990928.9175438301;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 694.43667;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2175299.8350876602, (-3257.34438768), 1.34217729E8, 1.0, 990928.9175438301, 3.834E-20, 694.43667}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 1190);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[8];
      intArray0[0] = 743;
      intArray0[1] = (-198);
      intArray0[2] = (-2142450813);
      intArray0[3] = 1280;
      intArray0[4] = (-278);
      intArray0[5] = (-241);
      intArray0[6] = (-1134);
      intArray0[7] = (-1161);
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-241);
      intArray1[1] = (-2142450813);
      intArray1[2] = (-278);
      intArray1[3] = (-1161);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 150;
      intArray0[2] = 0;
      intArray0[3] = 2146415248;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertArrayEquals(new int[] {0, 150, 0, 2146415248}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 150;
      doubleArray0[2] = (double) 2146415248;
      doubleArray0[3] = (double) 150;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.9285714285714286, 0.0, 3198.3263312182876, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertTrue(boolean2);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[2] = 311;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-241.0);
      doubleArray0[1] = (double) 311;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 311;
      doubleArray0[4] = (double) 311;
      doubleArray0[5] = (double) 311;
      doubleArray0[6] = (double) 311;
      doubleArray0[7] = 2.2162756026036223E13;
      doubleArray0[8] = (double) 311;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-241.0), 311.0, 311.0, 311.0, 311.0, 311.0, 311.0, 2.2162756026036223E13, 311.0}, doubleArray0, 0.01);
      assertEquals(4.911877546696049E26, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {(-241.0), 311.0, 311.0, 311.0, 311.0, 311.0, 311.0, 2.2162756026036223E13, 311.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0, 311.0, 311.0, 311.0, 311.0, 311.0, 2.2162756026036223E13, 311.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-241.0), 311.0, 311.0, 311.0, 311.0, 311.0, 311.0, 2.2162756026036223E13, 311.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0, 311.0, 311.0, 311.0, 311.0, 311.0, 2.2162756026036223E13, 311.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-241.0);
      doubleArray2[1] = 311.0;
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 311;
      doubleArray3[1] = (double) 311;
      doubleArray3[2] = 4.911877546696049E26;
      doubleArray3[3] = (double) 311;
      doubleArray3[4] = 4.911877546696049E26;
      doubleArray3[5] = (double) 311;
      doubleArray3[6] = 4.911877546696049E26;
      double[] doubleArray4 = MathArrays.convolve(doubleArray2, doubleArray3);
      assertArrayEquals(new double[] {311.0, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-74951.0), 21770.0, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray5 = new double[3];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 4.911877546696049E26;
      doubleArray5[1] = 3128.0;
      doubleArray5[2] = (double) 311;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray5, doubleArray4);
      assertArrayEquals(new double[] {311.0, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-74951.0), 21770.0, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {4.911877546696049E26, 3128.0, 311.0}, doubleArray5, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0}, doubleArray2, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean1);
      assertEquals(7, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertEquals(3, doubleArray5.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray6 = MathArrays.scale((-3845.8), doubleArray4);
      assertArrayEquals(new double[] {2.882465558E8, (-8.3723066E7), 4.552513779249164E32, (-5.8748206860850205E32), 4.552513779249164E32, (-5.8748206860850205E32), 4.552513779249164E32, (-5.8748206860850205E32)}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {311.0, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-74951.0), 21770.0, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertEquals(8, doubleArray6.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertEquals(2, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray4);
      assertArrayEquals(new double[] {311.0, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26, 311.0, 4.911877546696049E26}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {(-74951.0), 21770.0, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29, (-1.183762488753748E29), 1.5275939170224713E29}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-241.0), 311.0}, doubleArray2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray6));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray5));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray6));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray5));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray6));
      assertNotSame(doubleArray3, doubleArray6);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray5);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray6);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray5);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray6);
      assertEquals(3.347313910483087E29, double1, 0.01);
      assertEquals(7, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace((-1748.63330794828), doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = new Double((-1748.63330794828));
      assertEquals((-1748.63330794828), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.linearCombination(2593.677594995, 2593.677594995, 2547.73707, 1353.508361, Double.NaN, 2593.677594995, 878.3078030212602, (-551.7460136378584));
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[1];
      intArray0[0] = 1500;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1500}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1500}, intArray0);
      assertArrayEquals(new int[] {1500}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.scaleInPlace(332.36683, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = 1.2599210498948732;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.2599210498948732, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = 2081.3398302081;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 2081.3398302081}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 2081.3398302081}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 2081.3398302081}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-162.20252673812);
      doubleArray1[1] = (-162.20252673812);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2081.3398302081;
      doubleArray1[4] = (-162.20252673812);
      doubleArray1[5] = (-162.20252673812);
      doubleArray1[6] = 2081.3398302081;
      doubleArray1[7] = 2081.3398302081;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-162.20252673812), (-162.20252673812), (-162.20252673812), (-162.20252673812), 0.0, 2081.3398302081, 2081.3398302081, 2081.3398302081}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      Double[] doubleArray3 = new Double[5];
      doubleArray3[0] = (Double) (-162.20252673812);
      doubleArray3[1] = (Double) (-162.20252673812);
      doubleArray3[2] = (Double) (-162.20252673812);
      doubleArray3[3] = (Double) (-162.20252673812);
      doubleArray3[4] = (Double) 0.0;
      boolean boolean3 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-162.20252673812), 2081.3398302081}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-162.20252673812), (-162.20252673812), (-162.20252673812), (-162.20252673812), 0.0, 2081.3398302081, 2081.3398302081, 2081.3398302081}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2243.54235694622, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(4.438921624363781E-8, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-648.137528492453);
      doubleArray0[1] = 5.669184079525E-24;
      doubleArray0[2] = (-422.372763);
      doubleArray0[3] = (-2131.79221);
      doubleArray0[5] = 1.2599210498948732;
      doubleArray0[6] = 4.438921624363781E-8;
      doubleArray0[7] = 1.0E-6;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-648.137528492453), 5.669184079525E-24, (-422.372763), (-2131.79221), 0.0, 1.2599210498948732, 4.438921624363781E-8, 1.0E-6}, doubleArray0, 0.01);
      assertEquals(2267.822881263503, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace((-3203.9231990194), doubleArray0);
      assertArrayEquals(new double[] {2076582.8636920676, (-1.816363039190159E-20), 1353249.8940096227, 6830098.517107836, -0.0, (-4036.690280691063), (-1.4221963970927995E-4), (-0.0032039231990193995)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2076582.8636920676, (-1.816363039190159E-20), 1353249.8940096227, 6830098.517107836, -0.0, (-4036.690280691063), (-1.4221963970927995E-4), (-0.0032039231990193995)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      int[] intArray0 = new int[8];
      intArray0[0] = 158;
      intArray0[1] = 0;
      intArray0[2] = (-1377);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {26309.65968023054, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.scaleInPlace(158, doubleArray0);
      assertArrayEquals(new double[] {(-25627.999224622963), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1377);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1377.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {(-25627.999224622963), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {26309.65968023054, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.convolve(doubleArray0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 278.45110143000227;
      doubleArray0[1] = (-3194.98436595);
      doubleArray0[2] = 278.45110143000227;
      doubleArray0[3] = 278.45110143000227;
      doubleArray0[4] = 278.45110143000227;
      doubleArray0[5] = 278.45110143000227;
      doubleArray0[6] = 278.45110143000227;
      doubleArray0[7] = 278.45110143000227;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3194.98436595);
      doubleArray1[1] = (-3194.98436595);
      doubleArray1[2] = (-3194.98436595);
      doubleArray1[3] = (-3194.98436595);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 690.3669;
      doubleArray0[2] = 963.93;
      doubleArray0[3] = 690.3669;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1882374.95813122, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 690.3669;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1882374.95813122;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {690.3669, 0.0, 1882374.95813122}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1380.7338, 478534.31661561, 1332311.465634, 1882373.95813122, 1330930.731834, 476606.45661561}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {690.3669, 0.0, 1882374.95813122}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0, 1380.7338, 478534.31661561, 1332311.465634, 1882373.95813122, 1330930.731834, 476606.45661561}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.scale(1.0, doubleArray3);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 690.3669, 963.93, 690.3669}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1380.7338, 478534.31661561, 1332311.465634, 1882373.95813122, 1330930.731834, 476606.45661561}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, 1380.7338, 478534.31661561, 1332311.465634, 1882373.95813122, 1330930.731834, 476606.45661561}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[7];
      intArray0[0] = 158;
      intArray0[1] = 0;
      intArray0[3] = 158;
      intArray0[4] = 158;
      intArray0[5] = 158;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {158, 0, 0, 158, 158, 158, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double double1 = new Integer(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, double1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {158, 0, 0, 158, 158, 158, 0}, intArray0);
      assertArrayEquals(new int[] {158, 0, 0, 158, 158, 158, 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(1.0, (double) 158, (double) 0, 0.0, (double) 158, 0.0, (double) 158, 0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(158.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2989597.5589150046);
      doubleArray0[1] = 3702040.2529399814;
      doubleArray0[2] = (-3833.4839972);
      doubleArray0[3] = 1790.8;
      doubleArray0[4] = 1.0;
      double double0 = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 3.834E-20;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-2989597.5589150046), 3702040.2529399814, (-3833.4839972), 1790.8, 1.0, (-1.0), 3.834E-20}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2989597.5589150046), 3702040.2529399814, (-3833.4839972), 1790.8, 1.0, (-1.0), 3.834E-20}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      Double double0 = new Double(2856L);
      assertNotNull(double0);
      assertEquals(2856.0, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2372.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = new Double((-743.76715736));
      assertNotNull(double0);
      assertEquals((-743.76715736), (double)double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 68;
      intArray0[1] = 9;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 9;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {9.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      intArray0[2] = 2035;
      intArray0[3] = (-261);
      intArray0[4] = (-7590);
      intArray0[5] = 8;
      intArray0[6] = 134217729;
      intArray0[7] = 239;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 239;
      intArray1[1] = 134217729;
      intArray1[2] = 68;
      intArray1[3] = 2035;
      intArray1[4] = 8;
      intArray1[5] = 9;
      intArray1[6] = 9;
      intArray1[7] = 68;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {68, 9, 2035, (-261), (-7590), 8, 134217729, 239}, intArray0);
      assertArrayEquals(new int[] {239, 134217729, 68, 2035, 8, 9, 9, 68}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(134217720, int0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = (-1210);
      intArray0[2] = 7;
      intArray0[3] = 311;
      intArray0[4] = 311;
      intArray0[5] = (-383);
      intArray0[6] = (-383);
      intArray0[7] = 7;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2907);
      intArray1[1] = (-383);
      intArray1[2] = 7;
      intArray0[0] = 311;
      intArray1[4] = 7;
      intArray1[5] = (-1210);
      intArray1[6] = 311;
      intArray1[7] = 311;
      intArray1[8] = 1840151462;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertArrayEquals(new int[] {311, (-1210), 7, 311, 311, (-383), (-383), 7}, intArray0);
      assertArrayEquals(new int[] {(-2907), (-383), 7, 0, 7, (-1210), 311, 311, 1840151462}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3533.634248192645, double0, 0.01);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = new Double(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 0L;
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-718.9432042429);
      doubleArray1[1] = (-1201.9378330872628);
      doubleArray1[2] = 1752.3038833681;
      doubleArray1[3] = (-718.9432042429);
      doubleArray1[4] = (-2302.2562);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (-718.9432042429);
      double[] doubleArray2 = MathArrays.scale((-718.9432042429), doubleArray1);
      assertArrayEquals(new double[] {(-718.9432042429), (-1201.9378330872628), 1752.3038833681, (-718.9432042429), (-2302.2562), Double.NaN, Double.NaN, (-718.9432042429)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {516879.3309270483, 864125.0370205246, (-1259806.9687159387), 516879.3309270483, 1655191.4494160828, Double.NaN, Double.NaN, 516879.3309270483}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertArrayEquals(new double[] {(-718.9432042429), (-1201.9378330872628), 1752.3038833681, (-718.9432042429), (-2302.2562), Double.NaN, Double.NaN, (-718.9432042429)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {516879.3309270483, 864125.0370205246, (-1259806.9687159387), 516879.3309270483, 1655191.4494160828, Double.NaN, Double.NaN, 516879.3309270483}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 342.81;
      doubleArray0[1] = 342.81;
      doubleArray0[2] = 342.81;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 342.81;
      doubleArray1[1] = 342.81;
      doubleArray1[2] = 342.81;
      doubleArray1[3] = 342.81;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {117518.6961, 235037.3922, 352556.0883, 470074.7844, 352556.0883, 235037.3922, 117518.6961}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray4 = MathArrays.scale((-3243.943), doubleArray0);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1112056.0998300002), (-1112056.0998300002), (-1112056.0998300002), -0.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray4.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(685.62, double0, 0.01);
      assertEquals(4, doubleArray1.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 299);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2856L;
      doubleArray0[1] = (double) 2009L;
      doubleArray0[2] = (double) 2009L;
      doubleArray0[3] = (-1948.6330016);
      doubleArray0[4] = (double) 2856L;
      doubleArray0[5] = (double) 2009L;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (double) 2856L;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.700416E38, double0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0636383744E26, 5.263049623999999E25, 5.263049623999999E25, 4.951510429701711E25, 1.0636383744E26, 5.263049623999999E25, 2.217342464E57, 1.0636383744E26}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0636383744E26, 5.263049623999999E25, 5.263049623999999E25, 4.951510429701711E25, 1.0636383744E26, 5.263049623999999E25, 2.217342464E57, 1.0636383744E26}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(boolean0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2009L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-904.7754));
      assertArrayEquals(new double[] {2009.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-904.7754)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2009L;
      floatArray0[1] = (float) 2856L;
      floatArray0[2] = 3200.731F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {2009.0F, 2856.0F, 3200.731F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2009.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-904.7754)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2913.7754, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {2009.0F, 2856.0F, 3200.731F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double(311);
      assertNotNull(double0);
      assertEquals(311.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1548));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1548.0), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(311);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(311.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 311;
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) (-1548);
      doubleArray1[3] = (double) 311;
      doubleArray1[4] = (double) doubleArray0[0];
      doubleArray1[5] = 3.6725170580355583E-9;
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {96721.0, 96721.0, 2396304.0, 96721.0, 96721.0, 1.3487381541562152E-17}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {311.0, 311.0, (-1548.0), 311.0, 311.0, 3.6725170580355583E-9}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 311;
      doubleArray3[1] = (double) (-1548);
      doubleArray3[2] = 3.6725170580355583E-9;
      doubleArray3[3] = (double) doubleArray0[2];
      doubleArray3[4] = (double) 311;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray4 = new double[3][6];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray3;
      doubleArray4[2] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray3, mathArrays_OrderDirection1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (double) 0L, 1159.507687954, (-3023.58129));
      assertEquals((-3505865.7509088726), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 342.81;
      doubleArray0[1] = 342.81;
      doubleArray0[2] = 342.81;
      doubleArray0[3] = 342.81;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {342.81, 342.81, 342.81, 342.81}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[6];
      doubleArray1[0] = (Double) 342.81;
      doubleArray1[1] = (Double) 342.81;
      doubleArray1[2] = (Double) 342.81;
      doubleArray1[3] = (Double) 342.81;
      doubleArray1[4] = (Double) 342.81;
      doubleArray1[5] = (Double) 342.81;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(878.3078030212602, (-2104.6367), (-3194.98436595), (-886.2907), 690.3669, (-2104.6367), 878.3078030212602, (-886.2907));
      assertEquals((-1248241.457708438), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(18.745235719777934);
      assertNotNull(double0);
      assertEquals(18.745235719777934, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      intArray0[3] = (-383);
      intArray0[4] = 1600;
      intArray0[5] = 1840151462;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 311;
      doubleArray0[1] = (double) 311;
      doubleArray0[2] = (double) (-383);
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-383);
      doubleArray1[1] = (double) 1840151462;
      doubleArray1[2] = (double) (-383);
      doubleArray1[3] = (double) 1600;
      doubleArray1[4] = (double) 311;
      doubleArray1[5] = 3279.161388861835;
      doubleArray1[6] = (double) 2;
      doubleArray1[7] = (double) 311;
      doubleArray1[8] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {311.0, 311.0, (-383.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-383.0), 1.840151462E9, (-383.0), 1600.0, 311.0, 3279.161388861835, 2.0, 311.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray2.length);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {311.0, 311.0, (-383.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(583.2075102397088, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1073741824, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (-1431.3297658422);
      double[] doubleArray2 = MathArrays.scale(2, doubleArray1);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, (-1431.3297658422)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {4.0, 4.0, 4.0, 4.0, (-2862.6595316844)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = 2312.8;
      doubleArray3[1] = 2312.8;
      doubleArray3[2] = 2312.8;
      doubleArray3[3] = (-1431.3297658422);
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (-1431.3297658422);
      try { 
        MathArrays.ebeDivide(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double((-743.76715736));
      assertNotNull(double0);
      assertEquals((-743.76715736), (double)double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-2302.2562), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 311;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(2.0, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[0] = double3;
      doubleArray0[4] = doubleArray0[1];
      Double double4 = new Double(2);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals(2.0, (double)double4, 0.01);
      
      doubleArray0[5] = double4;
      Double double5 = new Double((-947.6399));
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((-947.6399), (double)double5, 0.01);
      
      doubleArray0[6] = double5;
      Double double6 = new Double(2);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals(2.0, (double)double6, 0.01);
      
      doubleArray0[7] = double6;
      Double double7 = new Double(0.0);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertEquals((double)double7, (double)double2, 0.01);
      assertEquals(0.0, (double)double7, 0.01);
      
      doubleArray0[8] = double7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-947.6399);
      doubleArray1[1] = (double) doubleArray0[1];
      doubleArray1[2] = (double) 311;
      doubleArray1[3] = (double) doubleArray0[7];
      doubleArray1[4] = (double) doubleArray0[7];
      doubleArray1[5] = (double) (-383);
      doubleArray1[6] = (double) doubleArray0[8];
      doubleArray1[7] = (double) doubleArray0[4];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertArrayEquals(new double[] {(-947.6399), 2.0, 311.0, 2.0, 2.0, (-383.0), 0.0, 2.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-947.6399), 2.0, 311.0, 2.0, 2.0, (-383.0), 0.0, 2.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) doubleArray0[0];
      double[] doubleArray2 = MathArrays.scale((double) doubleArray0[0], doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double double3 = new Double((double) doubleArray0[1]);
      assertEquals(2.0, double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[1][1];
      doubleArray3[0] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, mathArrays_OrderDirection0, doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray3.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1436.0058;
      Double double0 = new Double((-2302.2562));
      assertNotNull(double0);
      assertEquals((-2302.2562), (double)double0, 0.01);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {1436.0058}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale(3.834E-20, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 311;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.linearCombination(1.304E19, (-2850.0), (-2599.8755955044), 1.34217729E8);
      assertEquals((-3.716400000034895E22), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "1hMq!Px|9&~D;";
      stringArray0[2] = "1hMq!Px|9&~D;";
      stringArray0[3] = "";
      stringArray0[4] = "pG;:&pP#AA>X";
      stringArray0[5] = "";
      stringArray0[6] = "pG;:&pP#AA>X";
      stringArray0[7] = "1hMq!Px|9&~D;";
      stringArray0[8] = "1hMq!Px|9&~D;";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-1548), 311, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 311;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(2.0, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      Double double4 = new Double(2);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(2.0, (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double(2);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals(2.0, (double)double5, 0.01);
      
      doubleArray0[5] = double5;
      Double double6 = new Double((-947.6399));
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertEquals((-947.6399), (double)double6, 0.01);
      
      doubleArray0[6] = double6;
      Double double7 = new Double(2);
      assertNotNull(double7);
      assertEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals(2.0, (double)double7, 0.01);
      
      doubleArray0[7] = double7;
      Double double8 = new Double(0.0);
      assertNotNull(double8);
      assertNotEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertNotEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertEquals((double)double8, (double)double2, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertEquals(0.0, (double)double8, 0.01);
      
      doubleArray0[8] = double8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double double9 = MathArrays.linearCombination((double) doubleArray0[0], (double) (-383), (double) doubleArray0[2], 0.5000000000042687, 1.6106045115954943E7, 0.0, (double) 2, 0.0);
      assertEquals(0.0, double9, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      double double1 = MathArrays.linearCombination(2121.5655102, 0.0, (double) 0L, (-2955.1192), 0.0, (double) 0L, (-793.45), (double) doubleArray1[0]);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-375);
      intArray0[1] = 87;
      intArray0[2] = 2144080345;
      intArray0[3] = 472;
      intArray0[4] = (-399);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-375), 87, 2144080345, 472, (-399)}, intArray0);
      assertArrayEquals(new int[] {(-375), 87, 2144080345, 472, (-399)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 311;
      intArray0[3] = (-383);
      Double[] doubleArray0 = new Double[9];
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(2);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(2.0, (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(0.0);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((double) doubleArray0[1]);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(2.0, (double)double3, 0.01);
      assertEquals(9, doubleArray0.length);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) (-383);
      doubleArray1[2] = (double) doubleArray0[1];
      doubleArray1[3] = (double) doubleArray0[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertArrayEquals(new double[] {2.0, (-383.0), 2.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((double) doubleArray0[3], (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 1;
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1, 1);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      double double0 = 1818.00447;
      doubleArray0[1] = 1818.00447;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1818.0052950802924, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.491474713403641E-4, 0.998352557585979, 5.491474713403641E-4, 5.491474713403641E-4}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale((-1641.7299398035), doubleArray0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1641.7299398035), (-2984672.369095594), (-1641.7299398035), (-1641.7299398035)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1818.0052950802924;
      doubleArray3[1] = 1818.0052950802924;
      doubleArray3[2] = 1818.00447;
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertArrayEquals(new double[] {1818.0052950802924, 1818.0052950802924, 1818.00447}, doubleArray3, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(3148.877063148059, double2, 0.01);
      assertEquals(3, doubleArray3.length);
      
      double double3 = 1.304E19;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray2, 1.304E19);
      assertArrayEquals(new double[] {7.160883026278347E15, 1.3018517350921165E19, 7.160883026278347E15, 7.160883026278347E15}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1641.7299398035), (-2984672.369095594), (-1641.7299398035), (-1641.7299398035)}, doubleArray2, 0.01);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(4, doubleArray4.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (13,018,517,350,921,165,000 > 7,160,883,026,278,347)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 0L;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1766.36723468;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 608;
      intArray0[1] = 1;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 1766.36723468;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 1766.36723468;
      doubleArray1[3] = (Double) 0.0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1766.36723468;
      doubleArray2[1] = (double) doubleArray1[1];
      doubleArray2[2] = 8436180.357399514;
      doubleArray2[3] = (double) doubleArray1[3];
      doubleArray2[4] = (double) doubleArray1[3];
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      double[] doubleArray3 = MathArrays.scale(608, doubleArray2);
      assertArrayEquals(new double[] {1073951.2786854398, 0.0, 5.129197657298904E9, 0.0, 0.0, 608.0, 608.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1766.36723468, 0.0, 8436180.357399514, 0.0, 0.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {608, 1, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";r !I).K*.sANiwLZ&x";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      long long0 = 2009L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long long1 = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-5.7618793749770706E-8));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 2009L;
      longArray0[1] = 2009L;
      longArray0[2] = 2009L;
      longArray0[3] = 2009L;
      longArray0[4] = 859L;
      longArray0[5] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2009L, 2009L, 2009L, 2009L, 859L, 2009L}, longArray0);
      assertEquals(6, longArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 2009L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2009.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 2856L;
      longArray0[0] = 2856L;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2856L;
      doubleArray0[1] = (double) 2856L;
      double double0 = (-3865.046040504754);
      doubleArray0[2] = (-3865.046040504754);
      doubleArray0[3] = (double) 2856L;
      doubleArray0[4] = (double) 2856L;
      doubleArray0[5] = (double) 2856L;
      doubleArray0[6] = (double) 2856L;
      doubleArray0[7] = (double) 2856L;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3229.2375226292);
      doubleArray1[1] = (double) 2856L;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 2009L;
      int[] intArray0 = new int[2];
      intArray0[0] = (-3745);
      intArray0[1] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3745), 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-3745);
      doubleArray0[3] = (double) (-3745);
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3745.0), 0.0, (-3745.0)}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-3745), 0}, intArray0);
      assertArrayEquals(new int[] {(-3745), 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-3745.0), 0.0, (-3745.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-7490.0), 0.0, (-7490.0)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.scaleInPlace(894.3676772774091, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-3745.0), 0.0, (-3745.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6698813.9028077945), 0.0, (-6698813.9028077945)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 894.3676772774091;
      doubleArray2[1] = 0.0;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-5.991202630767823E9), 0.0, (-5.991202630767823E9), 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, (-3745.0), 0.0, (-3745.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-6698813.9028077945), 0.0, (-6698813.9028077945)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {894.3676772774091, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination((-1292.2497998176468), 911.242248, (-1292.2497998176468), 3.6725170580355583E-9);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1177552.6125681284), double2, 0.01);
      
      double double3 = MathArrays.linearCombination(1.34217729E8, 0.3333333333333333, 272.5, 1958.169995546, 894.3676772774091, 1.0, (-1000.6197532573), (-1563.46435252));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(4.683817200610871E7, double3, 0.01);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3745), 0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2856L;
      doubleArray0[1] = (double) 2009L;
      doubleArray0[2] = (double) 2009L;
      doubleArray0[3] = (-1948.6330016);
      doubleArray0[4] = (double) 2856L;
      doubleArray0[5] = (double) 2009L;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = (double) 2856L;
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {3.724224E22, 2.619736E22, 2.619736E22, (-2.5410174340864E22), 3.724224E22, 2.619736E22, 1.700416E38, 3.724224E22}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1.700416E38, double0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(3.834E-20, doubleArray0);
      assertArrayEquals(new double[] {1.0949903999999999E-16, 7.702505999999999E-17, 7.702505999999999E-17, (-7.4710589281344E-17), 1.0949903999999999E-16, 7.702505999999999E-17, 0.4999536, 1.0949903999999999E-16}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2856.0, 2009.0, 2009.0, (-1948.6330016), 2856.0, 2009.0, 1.304E19, 2856.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.scaleInPlace(8156736.0, doubleArray0);
      assertArrayEquals(new double[] {2.3295638016E10, 1.6386882624E10, 1.6386882624E10, (-1.5894484954938778E10), 2.3295638016E10, 1.6386882624E10, 1.0636383744E26, 2.3295638016E10}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      intArray0[3] = (-383);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 311;
      intArray1[1] = 311;
      intArray1[2] = 2;
      intArray1[3] = 134217729;
      intArray1[4] = 1600;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.linearCombination(2595.71, 3.26E18, 3.26E18, 0.0);
      assertEquals(8.4620146E21, double0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2595.71;
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = 8.4620146E21;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2595.71;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 3.26E18;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (2,595.71 < 3,260,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 342.81;
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      double double0 = MathArrays.linearCombination(0.0, 0.15, 0.0875862700108075, 104.057735844);
      assertEquals(9.114028948345867, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      intArray0[3] = (-383);
      intArray0[4] = 1600;
      intArray0[5] = 1840151462;
      double double0 = MathArrays.linearCombination(0.5, 3702040.2529399814, (double) 1840151462, (double) 2);
      assertEquals(3.68215394412647E9, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 1724.608687;
      doubleArray0[2] = (double) 311;
      doubleArray0[3] = (double) 1840151462;
      doubleArray0[4] = (double) 1600;
      doubleArray0[5] = 3702040.2529399814;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {2.0, 1724.608687, 311.0, 1.840151462E9, 1600.0, 3702040.2529399814}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, 1724.608687, 311.0, 1.840151462E9, 1600.0, 3702040.2529399814}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "pG;:&pP#AA>X";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "1hMq!Px|9&~D;";
      stringArray0[5] = "OfWMH";
      stringArray0[6] = "06Fe0\tcA^n}- ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1548);
      intArray0[2] = 311;
      intArray0[3] = (-383);
      intArray0[4] = 1600;
      intArray0[5] = 1840151462;
      intArray0[6] = 7;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2, (-1548), 311, (-383), 1600, 1840151462, 7}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) 0L;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][6];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 154;
      int[] intArray1 = MathArrays.copyOf(intArray0, 154);
      assertArrayEquals(new int[] {154}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(154, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 908.2009411259392;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.0F;
      doubleArray1[4] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, false);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1766.36723468;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 608;
      intArray0[1] = 1;
      Double[] doubleArray1 = new Double[5];
      doubleArray1[0] = (Double) 1766.36723468;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 1766.36723468;
      doubleArray1[3] = (Double) 0.0;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1766.36723468;
      doubleArray2[1] = (double) doubleArray1[1];
      doubleArray2[2] = 8436180.580253853;
      doubleArray2[3] = (double) doubleArray1[3];
      doubleArray2[4] = (double) doubleArray1[3];
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      double[] doubleArray3 = MathArrays.scale(608, doubleArray2);
      assertArrayEquals(new double[] {1073951.2786854398, 0.0, 5.129197792794342E9, 0.0, 0.0, 608.0, 608.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1766.36723468, 0.0, 8436180.580253853, 0.0, 0.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray3.length);
      assertEquals(7, doubleArray2.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {608, 1, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";r !I).K*.sANiwLZ&x";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-528.97F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-528.97F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 1;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(1, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2009L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-904.7754));
      assertArrayEquals(new double[] {2009.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-904.7754)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2009L;
      floatArray0[1] = (float) 2856L;
      floatArray0[2] = 3200.731F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {2009.0F, 2856.0F, 3200.731F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2009.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-904.7754)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2913.7754, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 89;
      int int0 = (-651);
      intArray0[2] = (-651);
      intArray0[3] = 2;
      int int1 = 979;
      intArray0[4] = 979;
      int int2 = 2147442837;
      intArray0[5] = 2147442837;
      intArray0[6] = (-1316);
      int int3 = 2188;
      intArray0[7] = 2188;
      int int4 = 1320;
      intArray0[8] = 1320;
      int int5 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {11, 89, (-651), 2, 979, 2147442837, (-1316), 2188, 1320}, intArray0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(0, int5);
      assertEquals(9, intArray0.length);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 789.107;
      doubleArray0[4] = 1436.0058;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2162.05376314;
      doubleArray0[7] = 3.834E-20;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 789.107, 1436.0058, (-1.0), 2162.05376314, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(7359279.989790474, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 789.107, 1436.0058, (-1.0), 2162.05376314, 3.834E-20}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2856L;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2856L);
      assertArrayEquals(new double[] {2856.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2856.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2856L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2856.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2856L;
      doubleArray2[1] = (double) 2009L;
      doubleArray2[2] = (double) 2856L;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1, 1);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1818.00447;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1818.0052950802924, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.491474713403641E-4, 0.998352557585979, 5.491474713403641E-4, 5.491474713403641E-4}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection...
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = MathArrays.linearCombination(342.81, 342.81, 0.0, 0.0);
      assertEquals(117518.6961, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 3355;
      intArray0[0] = 3355;
      int int1 = (-3940);
      intArray0[1] = (-3940);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {3355, (-3940)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 3355, 574.8230387758493, (-3393.296054), 243.193996, 2856.0, 0.902267575263977);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1105878.9443046367, double1, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.902267575263977;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.902267575263977}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.902267575263977, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.902267575263977}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2856.0;
      doubleArray2[1] = (-3393.296054);
      doubleArray2[2] = (double) 3355;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4268.35);
      doubleArray1[1] = (-4268.35);
      doubleArray1[2] = (-20.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-20.0);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-20.0);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1766.36723468;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 608;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {608, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, 0.087, 1.34217729E8, 1323.3, 2121.5655102, 2121.5655102, 1.9868161777724352E-8, 3.834E-20);
      assertEquals(1.7762649876833707E11, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2134325250;
      intArray0[1] = 2146415248;
      intArray0[2] = (-1133);
      intArray0[3] = 84;
      intArray0[4] = 134217729;
      intArray0[5] = 2146303066;
      intArray0[6] = (-479);
      intArray0[7] = 3239;
      intArray0[8] = (-501);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2134325250, 2146415248, (-1133), 84, 134217729, 2146303066, (-479), 3239, (-501)}, intArray0);
      assertArrayEquals(new int[] {2134325250, 2146415248, (-1133), 84, 134217729, 2146303066, (-479), 3239, (-501)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      doubleArray0[2] = (-2457.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3.141592653589793);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 747;
      intArray0[2] = 2395;
      intArray0[3] = 9;
      intArray0[4] = 747;
      intArray0[5] = 9;
      intArray0[6] = 608;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 608;
      intArray1[2] = 2;
      intArray1[3] = 2395;
      intArray1[4] = 9;
      intArray1[5] = 608;
      intArray1[6] = 2395;
      intArray1[7] = 747;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 747, 2395, 9, 747, 9, 608}, intArray0);
      assertArrayEquals(new int[] {2, 608, 2, 2395, 9, 608, 2395, 747}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8042, int0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2395;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 9;
      floatArray0[5] = (float) 9;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2.0F, 2.0F, 2395.0F, 2.0F, 9.0F, 9.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 284;
      intArray0[1] = 284;
      intArray0[2] = 185;
      intArray0[3] = 2;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, (double) 185, 1443.6638533, (double) 2856L, 1255.6745, 64.43766);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4204016.69152647, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 2856L;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-162.20252673812);
      doubleArray1[1] = (-162.20252673812);
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {(-162.20252673812), (-162.20252673812), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(229.38901316423392, double1, 0.01);
      assertEquals(8, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 908.2009411259392;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 908.2009411259392, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray1 = new long[1][4];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(1, longArray1.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 908.2009411259392}, doubleArray0, 0.01);
      assertEquals(0, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.6725170580355583E-9;
      doubleArray0[1] = 2856.0;
      doubleArray0[2] = 0.9921976327896118;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3.6725170580355583E-9, 2856.0, 0.9921976327896118}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      doubleArray0[2] = (-2457.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (-384.0);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (-20.0);
      int int0 = 1;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), 0.0, (-384.0), 3.141592653589793, (-20.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1623.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(10, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), 0.0, (-384.0), 3.141592653589793, (-20.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1623.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertEquals(10, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection...
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4268.62692273743);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.62692273743)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.62692273743)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.62692273743)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.62692273743)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.62692273743)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 400.0, 0.0, 0.0, 1.8221175805518817E7}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      MathArrays.scaleInPlace((-0.16624879837036133), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 3.3249759674072266, -0.0, -0.0, 709.6540965964708}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 17;
      intArray0[2] = 2;
      intArray0[3] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2, 17, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 17, 2, 2}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.scale(0.0, doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertArrayEquals(new int[] {2, 17, 2, 2}, intArray0);
      assertArrayEquals(new int[] {2, 17, 2, 2}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(1845.913486728, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 2856L, 0.087, 1.34217729E8, (double) 2009L, 2121.5655102, 1.34217729E8, 1845.913486728, (-256.889156323164));
      assertEquals(5.543946483180841E11, double0, 0.01);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray2.length);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      int[] intArray0 = new int[8];
      intArray0[0] = 158;
      intArray0[1] = 0;
      intArray0[2] = (-1377);
      intArray0[3] = 158;
      intArray0[4] = 158;
      intArray0[5] = 158;
      intArray0[6] = (-1377);
      intArray0[7] = (-1377);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {158, 0, (-1377), 158, 158, 158, (-1377), (-1377)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {158, 0, (-1377), 158, 158, 158, (-1377), (-1377)}, intArray0);
      assertArrayEquals(new int[] {158, 0, (-1377), 158, 158, 158, (-1377), (-1377)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-324.40505347624), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.scaleInPlace((-1504.925015553), doubleArray1);
      assertArrayEquals(new double[] {(-162.20252673812), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {488205.2801482024, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination((-162.20252673812), 1746.8257760706, (double) 158, (double) 158, 177.0, (-1.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-258552.55464992876), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-2453.03095);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2453.03095);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      double double0 = new Double(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = new Double((-2453.03095));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2453.03095), double1, 0.01);
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray1.length);
      
      double double3 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-2453.03095)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-3207.9935178670275);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-3207.9935178670275)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 284;
      intArray0[1] = 284;
      intArray0[2] = 185;
      intArray0[3] = 2;
      intArray0[4] = 134217729;
      intArray0[5] = 140;
      intArray0[6] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {284, 284, 185, 2, 134217729, 140, 2}, intArray1);
      assertArrayEquals(new int[] {284, 284, 185, 2, 134217729, 140, 2}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(134217729, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 2856L;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 2856L;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 284;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2856.0F, 2.0F, 2856.0F, 2.0F, 284.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      int int0 = 131;
      intArray0[0] = 131;
      int int1 = 2111;
      intArray0[1] = 2111;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Double double0 = new Double(2499.4579679388);
      assertNotNull(double0);
      assertEquals(2499.4579679388, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 630;
      doubleArray1[1] = 1818.00447;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {630.0, 1818.00447}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1924.0686715759346, double1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 630.0);
      assertArrayEquals(new double[] {630.0, 1818.00447}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {162.13205689121966, 467.86794310878037}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1623.0;
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      double double1 = (-2457.0);
      doubleArray0[2] = (-2457.0);
      doubleArray0[3] = (-1.0);
      double double2 = (-3.141592653589793);
      doubleArray0[4] = (-3.141592653589793);
      double double3 = (-384.0);
      doubleArray0[5] = (-384.0);
      double double4 = 3.141592653589793;
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (-20.0);
      double double5 = 2114.19635823222;
      doubleArray0[8] = 2114.19635823222;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2121.5655102);
      double double6 = 3.32;
      doubleArray3[1] = 3.32;
      doubleArray3[2] = (-2121.5655102);
      double[][] doubleArray4 = new double[0][8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      
      double double7 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4217.786290750323, double7, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-162.20252673812);
      doubleArray1[1] = (-162.20252673812);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-162.20252673812);
      doubleArray1[5] = (-162.20252673812);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      double[][] doubleArray2 = new double[0][0];
      Double[] doubleArray3 = new Double[5];
      doubleArray3[0] = (Double) Double.NaN;
      doubleArray3[1] = (Double) Double.NaN;
      doubleArray3[2] = (Double) (-162.20252673812);
      doubleArray3[3] = (Double) (-162.20252673812);
      doubleArray3[4] = (Double) (-162.20252673812);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 630, (-4517));
      assertNotNull(objectArray0);
      assertEquals(630, objectArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-4517);
      doubleArray0[1] = 1818.00447;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-4517.0), 1818.00447}, doubleArray0, 0.01);
      assertEquals(4869.130235775172, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(0.11113807559013367);
      assertNotNull(double0);
      assertEquals(0.11113807559013367, (double)double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double0).when(field0).getZero();
      int int0 = 1;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // java.lang.Double
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2453.03095);
      doubleArray1[1] = (-2453.03095);
      doubleArray1[2] = (-2453.03095);
      doubleArray1[3] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int int0 = (-1377);
      int int1 = 158;
      int[] intArray0 = new int[5];
      intArray0[0] = 158;
      intArray0[1] = 158;
      int int2 = 4099;
      intArray0[2] = 4099;
      intArray0[3] = 158;
      intArray0[4] = 158;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 294;
      intArray0[1] = 1;
      intArray0[2] = 3494;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-5768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-2453.03095);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2453.03095);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, (-2453.03095)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4906.0619, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 539.2084722);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      double[][] doubleArray1 = new double[4][3];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2856L;
      doubleArray2[1] = (double) 2856L;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-470.0688789867244);
      doubleArray0[3] = (-3624.2774908387314);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      doubleArray0[2] = (-2457.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-384.0);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (-20.0);
      doubleArray0[8] = 2114.19635823222;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2121.5655102);
      doubleArray3[1] = 3.32;
      doubleArray3[2] = (-2121.5655102);
      double[][] doubleArray4 = new double[0][8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4217.786172204723, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray5 = MathArrays.copyOf(doubleArray1, 41);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), 0.0, (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray5);
      assertEquals(9, doubleArray0.length);
      assertEquals(41, doubleArray5.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[][] longArray0 = new long[5][3];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-810.33);
      doubleArray0[1] = (-810.33);
      doubleArray0[2] = 192.0;
      doubleArray0[3] = (-810.33);
      double[] doubleArray1 = MathArrays.scale((-810.33), doubleArray0);
      assertArrayEquals(new double[] {(-810.33), (-810.33), 192.0, (-810.33)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {656634.7089000001, 656634.7089000001, (-155583.36000000002), 656634.7089000001}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Object>>) null, (-3937), (-3937));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-4517);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 630, (-4517));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4268.35);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.35)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.35)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {2, 0, 0, 0, 0, 0}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.35)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.35)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, Double.NaN, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(17, doubleArray2.length);
      
      double[] doubleArray3 = new double[0];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 17
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(470.0688789867244, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-76246.35991260227), Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -162.203 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 789.107;
      doubleArray0[4] = 1436.0058;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2162.05376314;
      doubleArray0[7] = 572.5558315296;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 789.107, 1436.0058, (-1.0), 2162.05376314, 572.5558315296}, doubleArray0, 0.01);
      assertEquals(7687100.170009025, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 0.0, 3.834E-20, 789.107, 1436.0058, (-1.0), 2162.05376314, 572.5558315296}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-579.2667F);
      floatArray0[1] = (-2028.6F);
      floatArray0[2] = 0.5F;
      floatArray0[3] = 721.0F;
      floatArray0[4] = (-2031.0F);
      floatArray0[5] = (-412.7617F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-536.31F);
      floatArray0[8] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-579.2667F), (-2028.6F), 0.5F, 721.0F, (-2031.0F), (-412.7617F), 0.0F, (-536.31F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-2453.03095);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2453.03095);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.0, (-2453.03095)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4907.0619, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, (-2453.03095)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2453.03095), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-2453.03095), 6017360.841657902, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "DAd?F";
      stringArray0[3] = "Rd-yU/~?bM";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "M";
      stringArray0[7] = "g*DFwB)L8";
      stringArray0[8] = "covariance matrix";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2856L;
      doubleArray0[3] = (double) 2856L;
      doubleArray0[5] = (double) 2856L;
      doubleArray0[6] = (double) 2009L;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2856L;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = (Double) 342.81;
      doubleArray0[1] = (Double) 342.81;
      doubleArray0[2] = (Double) 342.81;
      doubleArray0[3] = (Double) 342.81;
      doubleArray0[4] = (Double) 342.81;
      doubleArray0[5] = (Double) 342.81;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 359.7748260066;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 662.1172157695;
      doubleArray0[3] = 2725.5465;
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[8];
      longArray1[0] = (-3491L);
      longArray1[1] = (-3491L);
      longArray1[2] = (-3491L);
      longArray1[3] = (-3491L);
      longArray1[4] = (-3491L);
      longArray1[5] = (-3491L);
      longArray1[6] = (-3491L);
      longArray1[7] = (-3491L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-3491L);
      longArray2[1] = (-3491L);
      longArray2[2] = (-3491L);
      longArray2[3] = (-3491L);
      longArray2[4] = (-3491L);
      longArray2[5] = (-3491L);
      longArray2[6] = (-3491L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[3];
      longArray1[0] = (-619L);
      longArray1[1] = 0L;
      longArray1[2] = 2868L;
      longArray0[0] = longArray1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-619L);
      doubleArray0[1] = 2027.672511727106;
      doubleArray0[2] = (double) 2868L;
      doubleArray0[3] = (double) 2868L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 2868L;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-619.0), 2027.672511727106, 2868.0, 2868.0, 0.0, 0.0, 2868.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-619.0), 2027.672511727106, 2868.0, 2868.0, 0.0, 0.0, 2868.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][3];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2856L;
      doubleArray2[1] = (double) 2856L;
      doubleArray2[2] = (double) 2009L;
      doubleArray2[3] = (double) 2009L;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = (-4346L);
      longArray1[2] = (-969L);
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-4346L);
      longArray2[1] = (-969L);
      longArray2[2] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-969L);
      longArray3[1] = 0L;
      longArray3[2] = (-4346L);
      longArray3[3] = (-1L);
      longArray3[4] = (-969L);
      longArray3[5] = (-1L);
      longArray3[6] = (-969L);
      longArray3[7] = (-4346L);
      longArray0[2] = longArray3;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) (-4346L);
      doubleArray0[4] = (double) (-4346L);
      doubleArray0[5] = (double) (-969L);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2856.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4346.0), (-4346.0), (-969.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 1284.7713487216645, 1284.7713487216645, 286.45730255667115}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4346.0), (-4346.0), (-969.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 1284.7713487216645, 1284.7713487216645, 286.45730255667115}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4346.0), (-4346.0), (-969.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, 1284.7713487216645, 1284.7713487216645, 286.45730255667115}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(11, doubleArray3.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-162.20252673812);
      doubleArray1[1] = (-162.20252673812);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-162.20252673812);
      doubleArray1[5] = (-162.20252673812);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-162.20252673812), (-162.20252673812), (-162.20252673812), (-162.20252673812), Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      Double[] doubleArray3 = new Double[5];
      doubleArray3[1] = (Double) (-162.20252673812);
      doubleArray3[2] = (Double) (-162.20252673812);
      doubleArray3[3] = (Double) (-162.20252673812);
      doubleArray3[4] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Double", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4268.35);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-20.0), 0.0, 0.0, (-4268.35)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[5][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, (-4268.35), (-20.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1, 1);
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1818.00447;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(1818.0052950802924, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {5.491474713403641E-4, 0.998352557585979, 5.491474713403641E-4, 5.491474713403641E-4}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 1;
      doubleArray2[1] = 1818.0052950802924;
      doubleArray2[2] = 1818.00447;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = 1818.00447;
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {1.0, 1818.00447, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1818.0052950802924, 1818.00447, 1.0, 1818.00447}, doubleArray2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1817.0044700001874, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (-656.2567F);
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.0F, 1.0F, (-656.2567F), 1.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[][] longArray0 = new long[6][4];
      long[] longArray1 = new long[3];
      longArray1[0] = (-619L);
      longArray1[1] = 0L;
      longArray1[2] = 2868L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-3491L);
      longArray2[2] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 2868L;
      longArray3[1] = (-619L);
      longArray3[2] = (-3491L);
      longArray3[3] = 2868L;
      longArray3[4] = 0L;
      longArray3[5] = 2868L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = (-3491L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 2868L;
      longArray6[1] = (-619L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1082.812753472;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1082.812753472}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[6][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 131;
      intArray0[1] = 2111;
      intArray0[2] = 910;
      intArray0[3] = (-2859);
      intArray0[4] = 1416;
      intArray0[5] = 142;
      int[] intArray1 = MathArrays.copyOf(intArray0, 910);
      assertArrayEquals(new int[] {131, 2111, 910, (-2859), 1416, 142}, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(910, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1766.36723468;
      doubleArray0[3] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1766.36723468;
      doubleArray2[6] = 1766.36723468;
      doubleArray2[7] = 1766.36723468;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1766.36723468, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 1766.36723468, 1766.36723468, 1766.36723468}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertEquals(11, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = (-470.0688789867244);
      doubleArray0[3] = (-3624.2774908387314);
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.34217729E8, (-470.0688789867244), (-3624.2774908387314), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.342177290497563E8, double0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.6725170580355583E-9;
      doubleArray0[1] = 2856.0;
      doubleArray0[2] = 0.9921976327896118;
      int int0 = 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertArrayEquals(new double[] {3.6725170580355583E-9, 2856.0, 0.9921976327896118}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,856 >= 0.992)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.34217729E8;
      double double0 = (-470.0688789867244);
      doubleArray0[2] = (-470.0688789867244);
      doubleArray0[3] = (-3624.2774908387314);
      doubleArray0[4] = 92.46717;
      doubleArray0[5] = 1845.913486728;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 1.34217729E8, (-470.0688789867244), (-3624.2774908387314), 92.46717, 1845.913486728}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.3421772906248167E8, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (134,217,729 >= -470.069)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2856L;
      long long0 = 2009L;
      longArray0[1] = 2009L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {2856L, 2009L}, longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      long[][] longArray1 = new long[6][3];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 2009L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 907.965837;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 907.965837, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      long[][] longArray1 = new long[1][4];
      longArray1[0] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(1, longArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 894;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-1);
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 894, 0, 0, (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int1);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = 1436.0058;
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1764), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1611;
      int int1 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1611, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      doubleArray0[2] = (-2457.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-384.0);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (-20.0);
      doubleArray0[8] = 2114.19635823222;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2121.5655102);
      doubleArray3[1] = 3.32;
      doubleArray3[2] = (-2121.5655102);
      doubleArray3[3] = (-3.141592653589793);
      doubleArray2[1] = doubleArray3;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (-2121.5655102);
      doubleArray4[1] = 2114.19635823222;
      doubleArray4[2] = (-2121.5655102);
      doubleArray4[3] = 3.834E-20;
      doubleArray4[4] = 2114.19635823222;
      doubleArray4[5] = 1623.0;
      doubleArray2[8] = doubleArray4;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 2016;
      intArray0[1] = 0;
      intArray0[2] = (-1247);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2016, 0, (-1247)}, intArray0);
      assertArrayEquals(new int[] {2016, 0, (-1247)}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2016, 0, (-1247)}, intArray0);
      assertArrayEquals(new int[] {2016, 0, (-1247)}, intArray2);
      assertNotNull(intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray2.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2016;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-815.8898212));
      assertArrayEquals(new double[] {2016.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-815.8898212), -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[][] doubleArray2 = new double[5][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {2016.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1247));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3489.28);
      double double0 = 2027.672511727106;
      doubleArray0[2] = 2027.672511727106;
      doubleArray0[3] = (-461.3349);
      doubleArray0[4] = 749.1;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, (-3489.28), 2027.672511727106, (-461.3349), 749.1, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1507.34);
      double[][] doubleArray1 = new double[8][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1507.34), 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2547;
      intArray0[2] = (-1177);
      intArray0[3] = (-1);
      intArray0[4] = 217;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 945;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 2547, (-1177), (-1), 217, 0, 0, 945}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      long[][] longArray0 = new long[6][6];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) (-1177);
      longArray1[1] = (long) 945;
      longArray1[2] = (long) (-1177);
      longArray1[3] = (long) 2547;
      longArray1[4] = 0L;
      longArray1[5] = (long) (-1177);
      longArray1[6] = (long) 0;
      longArray1[7] = (long) (-1);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-1);
      longArray2[1] = 0L;
      longArray2[2] = (long) 945;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) (-1177);
      longArray2[5] = (-1793L);
      longArray2[6] = (long) 2547;
      longArray2[7] = (long) 217;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 217;
      longArray3[1] = (long) (-1);
      longArray3[2] = (long) 2547;
      longArray3[3] = (long) (-1177);
      longArray3[4] = (long) 0;
      longArray3[5] = (long) 0;
      longArray3[6] = (long) 217;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (long) 2547;
      longArray4[1] = (long) 945;
      longArray4[2] = (long) 2547;
      longArray4[3] = (long) 217;
      longArray4[4] = (long) (-1177);
      longArray4[5] = (long) (-1177);
      longArray4[6] = (long) 2547;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 945;
      longArray5[1] = (long) 217;
      longArray5[2] = (long) 945;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (long) 217;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,177 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 537.0;
      doubleArray0[2] = 515.661897327;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3221.0);
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 537.0, 515.661897327, 1.304E19, 0.0, (-3221.0), 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[][] longArray0 = new long[9][4];
      long[] longArray1 = new long[4];
      longArray1[0] = 1787L;
      longArray1[1] = (-897L);
      longArray1[2] = (-1073741824L);
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1073741824L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1L);
      longArray3[1] = (-1425L);
      longArray3[2] = (-897L);
      longArray3[3] = 1787L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-897L);
      longArray4[1] = (-1425L);
      longArray4[2] = (-897L);
      longArray4[3] = (-1L);
      longArray4[4] = (-1073741824L);
      longArray4[5] = 0L;
      longArray4[6] = (-1073741824L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-2726L);
      longArray5[1] = 1787L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = 0L;
      longArray6[1] = (-2726L);
      longArray6[2] = 1787L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      
      longArray8[0] = (-1073741824L);
      longArray8[1] = (-2726L);
      longArray8[2] = (-1073741824L);
      longArray8[3] = (-1L);
      longArray8[4] = (-2726L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray4));
      
      longArray9[0] = (-2726L);
      longArray9[1] = 0L;
      longArray9[2] = (-1L);
      longArray9[3] = (-2726L);
      longArray9[4] = (-1L);
      longArray9[5] = (-1425L);
      longArray9[6] = (-1425L);
      longArray9[7] = (-2726L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -897 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 9218868437227405312L;
      longArray2[1] = 3236L;
      longArray2[2] = (-1600L);
      longArray2[3] = (-1453L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 0L;
      longArray3[1] = (-1600L);
      longArray3[2] = (-1600L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 4 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 1253;
      intArray0[7] = 1818;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 2, 0, 1253, 1818}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1253;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1818;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1623.0;
      doubleArray0[1] = (-2121.5655102);
      doubleArray0[2] = (-2457.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-384.0);
      doubleArray0[6] = 3.141592653589793;
      doubleArray0[7] = (-20.0);
      doubleArray0[8] = 2114.19635823222;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[9][8];
      doubleArray2[0] = doubleArray1;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2121.5655102);
      doubleArray3[1] = 3.32;
      doubleArray3[2] = (-2121.5655102);
      double[][] doubleArray4 = new double[0][8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(9, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertEquals(4217.786290750323, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertArrayEquals(new double[] {1623.0, (-2121.5655102), (-2457.0), (-1.0), (-3.141592653589793), (-384.0), 3.141592653589793, (-20.0), 2114.19635823222}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 188;
      intArray0[1] = (-4117);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {188, (-4117)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-4117);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-4117.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 188;
      longArray0[1] = (long) (-4117);
      longArray0[2] = (long) 188;
      longArray0[3] = (long) (-4117);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,117 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1682;
      intArray0[2] = (-1377);
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 158;
      intArray0[5] = 0;
      intArray0[6] = 227;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 1682, (-1377), 0, 158, 0, 227}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1682;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1377);
      doubleArray0[3] = (double) 158;
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1682.0, 0.0, (-1377.0), 158.0}, doubleArray0, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {(-1), 1682, (-1377), 0, 158, 0, 227}, intArray0);
      assertArrayEquals(new int[] {(-1), 1682, (-1377), 0, 158, 0, 227}, intArray1);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) (-1377);
      doubleArray1[2] = (double) (-1);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-162.20252673812);
      doubleArray0[1] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-162.20252673812), Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-162.20252673812);
      doubleArray1[1] = (-162.20252673812);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-162.20252673812);
      doubleArray1[5] = (-162.20252673812);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = Double.NaN;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-162.20252673812), (-162.20252673812), (-162.20252673812), (-162.20252673812), Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      
      Double[] doubleArray3 = new Double[5];
      doubleArray3[0] = (Double) (-162.20252673812);
      doubleArray3[1] = (Double) (-162.20252673812);
      doubleArray3[2] = (Double) (-162.20252673812);
      doubleArray3[3] = (Double) (-162.20252673812);
      doubleArray3[4] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(5, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      Field<Integer> field0 = null;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1179.778646;
      doubleArray0[1] = 1179.778646;
      doubleArray0[2] = 1179.778646;
      doubleArray0[3] = 1179.778646;
      doubleArray0[4] = 1179.778646;
      doubleArray0[5] = 1179.778646;
      doubleArray0[6] = 1179.778646;
      doubleArray0[7] = 1179.778646;
      MathArrays.scaleInPlace(1179.778646, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.normalizeArray(doubleArray0, (-1516.1978993));
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      Field<Integer> field0 = null;
      int int0 = (-1236);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, (-1236));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray1);
      double double1 = (-2439.7832);
      MathArrays.scale((-2439.7832), doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4268.35);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.checkPositive(doubleArray1);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-3822);
      intArray0[2] = 2435;
      intArray0[3] = (-904);
      intArray0[4] = 134217729;
      intArray0[5] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {2, (-3822), 2435, (-904), 134217729, 0}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = MathArrays.scale(1.304E19, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 1.304E19, Double.NaN, Double.NaN, 1.304E19}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 359.7748260066;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 662.1172157695;
      doubleArray0[3] = 2725.5465;
      doubleArray0[4] = (-1264.423);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*blC-p!";
      stringArray0[1] = "{`D3br$C<WsFLnrX}X{";
      stringArray0[2] = "xO*eb+2HT;1";
      stringArray0[3] = "zLy+jMnUDiic6xF";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "zero norm for rotation axis";
      stringArray0[7] = "L";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[][] longArray0 = new long[3][8];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      long long0 = (-4346L);
      longArray1[1] = (-4346L);
      longArray1[2] = (-969L);
      long long1 = 0L;
      longArray1[3] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = (-4346L);
      longArray2[1] = (-969L);
      longArray2[2] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      longArray3[0] = (-969L);
      longArray3[1] = 0L;
      longArray3[2] = (-4346L);
      longArray3[3] = (-1L);
      longArray3[4] = (-969L);
      longArray3[5] = (-1L);
      longArray3[6] = (-969L);
      longArray3[7] = (-4346L);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,346 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 115;
      intArray0[2] = 0;
      intArray0[3] = (-123);
      intArray0[4] = 2;
      int int0 = 1329;
      intArray0[5] = 1329;
      intArray0[6] = 3418;
      MathArrays.distance1(intArray0, intArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 3418;
      longArray0[1] = 2226L;
      longArray0[2] = (long) 3418;
      longArray0[3] = (long) (-123);
      longArray0[4] = (long) 3418;
      longArray0[5] = (long) (-123);
      longArray0[6] = (long) 115;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -123 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 558L;
      longArray0[1] = 0L;
      longArray0[2] = 1L;
      longArray0[3] = 2147483647L;
      longArray0[4] = 1794L;
      longArray0[5] = 1021L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {558L, 0L, 1L, 2147483647L, 1794L, 1021L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 865L;
      longArray0[1] = 0L;
      long long0 = (-1L);
      longArray0[2] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-877.404);
      MathArrays.scale((-877.404), doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-877.404);
      doubleArray1[1] = (-877.404);
      doubleArray1[2] = (-877.404);
      doubleArray1[3] = (-877.404);
      doubleArray1[4] = (-877.404);
      doubleArray1[5] = (-877.404);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      MathArrays.convolve(doubleArray0, doubleArray0);
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      MathArrays.OrderDirection.values();
      int[] intArray1 = new int[0];
      int[] intArray2 = new int[9];
      intArray2[0] = 2077;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 455;
      intArray2[5] = 0;
      intArray2[6] = 1613;
      intArray2[7] = 3218;
      intArray2[8] = 0;
      MathArrays.distanceInf(intArray1, intArray2);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
