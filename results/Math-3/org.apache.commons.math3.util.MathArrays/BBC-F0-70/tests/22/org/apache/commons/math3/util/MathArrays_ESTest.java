/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:55:55 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.5F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1947.0F;
      floatArray0[3] = (-1770.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.4E-45F;
      floatArray0[7] = -0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.5F, 0.0F, 1947.0F, (-1770.0F), 0.0F, 0.0F, 1.4E-45F, -0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0.5F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.5, double0, 0.01);
      assertArrayEquals(new double[] {0.5, 1.401298464324817E-45, 1.401298464324817E-45}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      int int0 = 32760;
      int int1 = 0;
      // Undeclared exception!
      MathArrays.buildArray(field0, 32760, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Pair<Integer, Object> pair0 = new Pair<Integer, Object>((Integer) null, class0);
      assertNotNull(pair0);
      
      Field<Pair<Integer, Object>> field0 = (Field<Pair<Integer, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, 134217729);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-2803.0F);
      floatArray0[3] = (-1906.421F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 1.0F, (-2803.0F), (-1906.421F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1906.421F);
      doubleArray0[1] = (double) (-2803.0F);
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[4] = (double) 1.0F;
      doubleArray0[5] = (double) (-1906.421F);
      doubleArray0[6] = (double) (-1906.421F);
      doubleArray0[7] = 961.822376;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {(-1906.4210205078125), (-2803.0), 1.0, Double.NEGATIVE_INFINITY, 1.0, (-1906.4210205078125), (-1906.4210205078125), 961.822376}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1980.22998046875);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1980.22998046875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1647.17F;
      floatArray0[2] = 1.6350651F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.4E-45F);
      floatArray0[5] = (-3.4028235E38F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 1647.17F, 1.6350651F, 0.0F, (-1.4E-45F), (-3.4028235E38F), 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-3.4028235E38F);
      doubleArray0[1] = (-735.7997445512);
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 1647.17F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.4028234663852886E38, double0, 0.01);
      assertArrayEquals(new double[] {(-3.4028234663852886E38), (-735.7997445512), (-1.401298464324817E-45), (-1.0), 1647.1700439453125}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1701.889446);
      doubleArray0[2] = 72.94722220729936;
      doubleArray0[4] = 3568.04497;
      doubleArray0[5] = 2.608E18;
      doubleArray0[6] = (-1711.86318215222);
      doubleArray0[7] = (-2331.227338);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3298242891449983E19, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-1701.889446), 72.94722220729936, 0.0, 3568.04497, 2.608E18, (-1711.86318215222), (-2331.227338), 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3298242891449983E19, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-1701.889446), 72.94722220729936, 0.0, 3568.04497, 2.608E18, (-1711.86318215222), (-2331.227338), 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1292;
      intArray0[1] = 1879048192;
      intArray0[2] = 3228;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1292;
      intArray1[1] = 3228;
      intArray1[2] = 1879048192;
      intArray1[3] = 1292;
      intArray1[4] = 1879048192;
      intArray1[5] = 1292;
      intArray1[6] = 1292;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-536877368), int0);
      assertArrayEquals(new int[] {1292, 1879048192, 3228}, intArray0);
      assertArrayEquals(new int[] {1292, 3228, 1879048192, 1292, 1879048192, 1292, 1292}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.44888888888888883E18;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.44888888888888883E18;
      doubleArray1[1] = (-5398.7506191484235);
      doubleArray1[2] = 1.44888888888888883E18;
      doubleArray1[3] = 1.44888888888888883E18;
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 1.44888888888888883E18;
      doubleArray1[6] = (-1.0);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1505.3997915681);
      doubleArray0[1] = 163.8;
      doubleArray0[2] = (-1526.85989);
      doubleArray0[3] = 372.4;
      doubleArray0[4] = 3097.4748646929;
      doubleArray0[5] = 2.092571258544922;
      doubleArray0[6] = 475345.1423114189;
      doubleArray0[7] = 1.44888888888888883E18;
      doubleArray0[8] = (-2507.2467831);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertArrayEquals(new double[] {(-1505.3997915681), 163.8, (-1526.85989), 372.4, 3097.4748646929, 2.092571258544922, 475345.1423114189, 1.44888888888888883E18, (-2507.2467831)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.875;
      doubleArray0[1] = 606.5283470008583;
      doubleArray0[2] = (-842.09036);
      doubleArray0[3] = 0.9285714285714286;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = (-1818.6520115);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.875, 606.5283470008583, (-842.09036), 0.9285714285714286, 1.304E19, (-1818.6520115)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-4217.0F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1386.7329F);
      floatArray1[2] = (-1386.7329F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.4E-45F), 0.0F, (-4217.0F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1386.7329F), (-1386.7329F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(5, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-4217.0F);
      doubleArray0[1] = 705.7975;
      doubleArray0[2] = (double) (-1.4E-45F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1.4E-45F);
      doubleArray0[5] = 190.6889515;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) (-4217.0F);
      doubleArray0[8] = (double) (-1386.7329F);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3.802371855134084E7, double0, 0.01);
      assertArrayEquals(new double[] {(-4217.0), 705.7975, (-1.401298464324817E-45), 0.0, (-1.401298464324817E-45), 190.6889515, 0.0, (-4217.0), (-1386.73291015625)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.scaleInPlace((-1386.7329F), doubleArray0);
      assertArrayEquals(new double[] {5847852.682128906, (-978752.6211560059), 1.9432266974306376E-42, -0.0, 1.9432266974306376E-42, (-264434.644648239), -0.0, 5847852.682128906, 1923028.1641104221}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-461.06596557549454);
      doubleArray0[1] = (-461.06596557549454);
      double[] doubleArray1 = MathArrays.scale((-461.06596557549454), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-461.06596557549454), (-461.06596557549454)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {212581.82461206312, 212581.82461206312}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertEquals((-1.9602848845712262E8), double0, 0.01);
      assertArrayEquals(new double[] {(-461.06596557549454), (-461.06596557549454)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {212581.82461206312, 212581.82461206312}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][8];
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-461.06596557549454);
      doubleArray3[1] = (-461.06596557549454);
      doubleArray3[2] = (-1.9602848845712262E8);
      doubleArray2[0] = doubleArray3;
      doubleArray2[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(18, doubleArray0.length);
      assertEquals(18, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (-1745.2166F);
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1.0F), (-1745.2166F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      long[][] longArray0 = new long[8][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 656L;
      longArray2[1] = (-288L);
      longArray2[2] = 3266L;
      longArray2[3] = (-2146L);
      longArray2[4] = 895L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 3266L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-2146L);
      longArray4[1] = (-288L);
      longArray4[2] = (-2146L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 895L;
      longArray5[1] = 1036L;
      longArray5[2] = 895L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      
      longArray6[0] = 1036L;
      longArray6[1] = 656L;
      longArray6[2] = 1036L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = 656L;
      longArray7[1] = 895L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[4];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = 895L;
      longArray8[1] = 1036L;
      longArray8[2] = 895L;
      longArray8[3] = (-288L);
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -288 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1277.939;
      doubleArray0[1] = 1277.939;
      doubleArray0[2] = 1177.0;
      doubleArray0[3] = 1177.0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2102.524779958;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-938.9875404461);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2302.6741088244453, double0, 0.01);
      assertArrayEquals(new double[] {2102.524779958, 3.834E-20, (-938.9875404461)}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {2102.524779958, 3.834E-20, (-938.9875404461)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = MathArrays.linearCombination((-9.007199254740992E15), (-1927.9), (-3813.027313), (-3813.027313));
      assertEquals(1.7364979443229698E19, double0, 0.01);
      
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-3813.027313);
      doubleArray1[1] = (-3813.027313);
      doubleArray1[2] = (-9.007199254740992E15);
      doubleArray1[3] = (-3813.027313);
      doubleArray1[4] = 1.7364979443229698E19;
      doubleArray1[5] = (-1927.9);
      doubleArray1[6] = 1332.397;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(13, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2788);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(13, doubleArray0.length);
      assertEquals(2788, doubleArray1.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,788 != 13
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2146372688);
      intArray0[1] = 162;
      intArray0[2] = 267;
      intArray0[3] = 1;
      intArray0[4] = (-604);
      intArray0[5] = 1;
      intArray0[6] = 163;
      intArray0[7] = (-1657);
      intArray0[8] = 2146983168;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 267;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 645.62;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1463046.7168860957;
      doubleArray0[3] = (-7.498968766472032);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Double[] doubleArray0 = new Double[4];
      Double double0 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2162.03801325);
      assertEquals(2162.03801325, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      
      doubleArray0[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathArrays.linearCombination(222551.95204857053, (-3930.531502676908), (-9.007199254740992E15), (-3813.027313));
      assertEquals(3.43446967710859E19, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.43446967710859E19;
      doubleArray0[1] = 222551.95204857053;
      doubleArray0[2] = (-3813.027313);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.43446967710859E19, 222551.95204857053, (-3813.027313), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1795581962978383E39, 4.9529371360629234E10, 1.4539177289684E7, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.checkPositive(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray2.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 815;
      intArray0[2] = 815;
      intArray0[2] = 815;
      intArray0[4] = 815;
      Integer integer0 = new Integer(815);
      assertEquals(815, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(815);
      assertEquals(815, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4289.85136697);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.608E19, double0, 0.01);
      assertArrayEquals(new double[] {(-4289.85136697), 1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scale((-670.8652), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[1];
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 586.288211279;
      MathArrays.checkOrder(doubleArray1);
      assertArrayEquals(new double[] {586.288211279}, doubleArray1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0[0], mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 761.3F;
      floatArray0[1] = (-1.0F);
      floatArray0[3] = 717.11456F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {761.3F, (-1.0F), 0.0F, 717.11456F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination((double) 0L, (-6.032174644509064E-23), 9.313225746154785E-10, (double) 0L, (double) 0L, 9.313225746154785E-10);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = 114.6;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 1L;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 114.6, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.0, 1.0, 114.6, 1.0, 1.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3851.0);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.linearCombination((-1469.818525438908), (-1469.818525438908), 1.304E19, (-787.7642));
      assertEquals((-1.0272445167999998E22), double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 151.0;
      doubleArray0[3] = (double) 0L;
      double[] doubleArray1 = MathArrays.scale(151.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 151.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 22801.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(22650.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 151.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 22801.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.scaleInPlace(151.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 22801.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, (double) (-2738), 0.19999999999923582, 0.19999999999923582, 0.07490822288864472);
      assertEquals((-547.58501835333), double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      float[] floatArray0 = new float[3];
      floatArray0[2] = 272.8413F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 272.8413F;
      floatArray1[1] = 272.8413F;
      floatArray1[2] = 272.8413F;
      floatArray1[3] = 272.8413F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray1);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {272.8413F, 272.8413F, 272.8413F, 272.8413F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[8];
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray2[0] = double0;
      Double double1 = new Double((-2301.05578471));
      assertEquals((-2301.05578471), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray2[1] = double1;
      Double double2 = new Double(0L);
      assertEquals(0.0, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      
      doubleArray2[2] = double2;
      Double double3 = new Double(792.00008498);
      assertEquals(792.00008498, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray2[3] = double3;
      Double double4 = new Double(0.3333333333332802);
      assertEquals(0.3333333333332802, (double)double4, 0.01);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      
      doubleArray2[4] = double4;
      Double double5 = new Double(0.3333333333332802);
      assertEquals(0.3333333333332802, (double)double5, 0.01);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      
      doubleArray2[5] = double5;
      Double double6 = new Double(0.4342944622039795);
      assertEquals(0.4342944622039795, (double)double6, 0.01);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      
      doubleArray2[6] = double6;
      Double double7 = new Double((double) doubleArray2[4]);
      assertEquals(0.3333333333332802, (double)double7, 0.01);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertEquals((double)double7, (double)double4, 0.01);
      assertEquals((double)double7, (double)double5, 0.01);
      assertEquals(8, doubleArray2.length);
      
      doubleArray2[7] = double7;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray2.length);
      
      double double8 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double8, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray3.length);
      
      MathArrays.scaleInPlace(792.00008498, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathArrays.linearCombination(734.24, 734.24, 734.24, 0.0, 734.24, 734.24);
      assertEquals(1078216.7552, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-151.384168), 1305.83637, (-513.748266), 0.0);
      assertEquals((-197682.95241659015), double0, 0.01);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2346.192670191703;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.19999999999923582;
      doubleArray0[3] = (-0.16666666666666666);
      double double1 = 151.0;
      doubleArray0[4] = 151.0;
      double double2 = (-2004.0);
      doubleArray0[5] = (-2004.0);
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2346.192670191703, 1.0, 0.19999999999923582, (-0.16666666666666666), 151.0, (-2004.0)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,346.193 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-4);
      intArray0[1] = 110;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 110;
      intArray1[1] = 110;
      intArray1[2] = 110;
      intArray1[3] = 110;
      intArray1[4] = (-4);
      intArray1[5] = (-4);
      intArray1[6] = 3749;
      intArray1[7] = (-4);
      intArray1[8] = 110;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(114, int0);
      assertArrayEquals(new int[] {(-4), 110, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {110, 110, 110, 110, (-4), (-4), 3749, (-4), 110}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0[0], mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0[0], doubleArray0[0]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3814.519941), 734.24, 831.0, 831.0, 831.0, (double) (-2738));
      assertEquals((-4385490.12147984), double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4731311.067828139);
      doubleArray0[1] = 1645.6128573986857;
      doubleArray0[2] = 150.64;
      doubleArray0[3] = 1390.87236;
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-4731311.067828139), 1645.6128573986857, 150.64, 1390.87236, 1.304E19}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Double double1 = new Double(1645.6128573986857);
      assertEquals(1645.6128573986857, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0L;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) 0L;
      floatArray0[5] = (float) 0L;
      floatArray0[6] = (float) 0L;
      floatArray0[7] = (float) 0L;
      floatArray0[8] = (float) 0L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      Double double0 = new Double(0.0F);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      double[] doubleArray1 = new double[0];
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-151.384168), (-151.384168), (-513.748266), 0.0);
      assertEquals(22917.16632105222, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-327.0F);
      floatArray0[2] = 616.0F;
      floatArray0[3] = (-1783.4625F);
      floatArray0[4] = (-994.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 51.83F;
      floatArray0[8] = (-2986.7F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 51.83F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-2986.7F);
      floatArray1[3] = (-2986.7F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, (-327.0F), 616.0F, (-1783.4625F), (-994.0F), 0.0F, 0.0F, 51.83F, (-2986.7F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {51.83F, 0.0F, (-2986.7F), (-2986.7F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2343.0);
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.linearCombination((-3239.58126155), 1.304E19, 831.0, 335.04888773574, 1.304E19, 559.0618759328784, (-1582.746724278443), 559.0618759328784);
      assertEquals((-3.4953972788447268E22), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-2343.0), 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1033.699106), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 94;
      intArray0[1] = (-2738);
      intArray0[2] = (-2738);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {94, (-2738), (-2738)}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      Double double1 = Double.valueOf((double) 94);
      assertEquals(94.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[2] = double1;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = (Double) 0.0;
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 3848.724674;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 3848.724674}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 3848.724674;
      Double double0 = new Double(1.34217729E8);
      assertEquals(1.34217729E8, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[1] = double0;
      doubleArray1[2] = (Double) 3848.724674;
      doubleArray1[3] = (Double) 3848.724674;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0), 3848.724674}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-7697.449348), 1.4812681616256407E7}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0L;
      doubleArray1[1] = (double) 0L;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[8];
      doubleArray2[0] = (Double) 0.0;
      doubleArray2[1] = (Double) 0.0;
      doubleArray2[2] = (Double) 0.0;
      doubleArray2[3] = (Double) 0.0;
      doubleArray2[4] = (Double) 0.0;
      doubleArray2[5] = (Double) 0.0;
      doubleArray2[6] = (Double) 0.0;
      doubleArray2[7] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(4, doubleArray1.length);
      assertEquals(7, doubleArray3.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.7853981633974483;
      doubleArray0[3] = 79.743;
      double double0 = 396.69;
      double double1 = MathArrays.linearCombination(0.0, 396.69, 0.0, 0.7853981633974483);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 79.743}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 6358.946048999999}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, (double) 0, (-2021.633197), 726.133865);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = (-2738);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2738), (-2738));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-600);
      intArray0[1] = 3;
      intArray0[2] = 1553;
      intArray0[3] = (-600);
      intArray0[4] = 165;
      intArray0[5] = 134217729;
      intArray0[6] = 1579;
      intArray0[7] = 62;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 62;
      intArray1[1] = (-600);
      intArray1[2] = 3;
      intArray1[3] = (-600);
      intArray1[4] = 62;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2343.0);
      doubleArray0[2] = 1.304E19;
      doubleArray0[4] = (-559.0618759328784);
      double double0 = MathArrays.linearCombination(0.09090909090909091, 4088.086, Double.NaN, 2357.372624, (-2343.0), (-367.80807));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-5108.164096673314);
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = 0.140625;
      doubleArray0[3] = (-324.541814);
      doubleArray0[4] = 2.608E18;
      doubleArray0[5] = 0.125;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-5108.164096673314), 3.26E18, 0.140625, (-324.541814), 2.608E18, 0.125}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-5108.164096673314), 3.26E18, 0.140625, (-324.541814), 2.608E18, 0.125}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (3,260,000,000,000,000,000 >= 0.141)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = null;
      long[] longArray0 = new long[9];
      longArray0[0] = (-4092L);
      longArray0[1] = (-266L);
      longArray0[2] = (-305L);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      long[][] longArray1 = new long[7][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1855.9090576171875);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 1855.9090576171875, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = (-2763.2F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, 1.0F, (-2763.2F), (-1.0F), 1.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-3999));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.003, 0.0, 1.0, 1.86285714285714278E18, 0.003, Double.NaN, 1.0, 105.931258266);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      MathArrays.scaleInPlace(720.577645725012, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 32760;
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 32760, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[4];
      longArray1[0] = 1L;
      longArray1[1] = (-3397L);
      longArray1[2] = 683L;
      longArray1[3] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 230L;
      longArray2[1] = (-3397L);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-3397L);
      floatArray0[1] = (float) (-3397L);
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 230L;
      floatArray1[1] = (float) 1L;
      floatArray1[2] = (float) 230L;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {230.0F, 1.0F, 230.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {(-3397.0F), (-3397.0F)}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(2, floatArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.07692307692307693);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = 2126221433L;
      longArray0[2] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 2126221433L, 1L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((double) 2126221433L, (double) 0L, (double) 1L, (double) 0, (double) 2126221433L, (double) 2126221433L, (double) 1L, 1.9987994582857286E-8);
      assertEquals(4.5208175821485737E18, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1L;
      doubleArray2[1] = 1.9987994582857286E-8;
      doubleArray2[2] = 0.140625;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (1 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      long long0 = 0L;
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.9489846229553223, 0.9489846229553223, 0.0036, 0.0036, 0.9489846229553223, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 4842;
      intArray0[2] = 37;
      intArray0[3] = 2;
      intArray0[4] = 254;
      intArray0[5] = 203;
      intArray0[6] = 471;
      intArray0[7] = (-473);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2, 4842, 37, 2, 254, 203, 471, (-473)}, intArray0);
      assertArrayEquals(new int[] {2, 4842, 37, 2, 254, 203, 471, (-473)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = 0;
      doubleArray0[0] = (double) 0;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 2482.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2482.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 94;
      intArray0[1] = (-2738);
      intArray0[2] = (-2738);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {94, (-2738), (-2738)}, intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 2.17333333333333325E18, (double) 94, (double) (-2738), 0.0, (-3.141592653589793));
      assertEquals((-257372.0), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {94, (-2738), (-2738)}, intArray0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-4933.684F);
      floatArray0[1] = 1855.909F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, (float[]) null);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      assertEquals(6, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1855.909F;
      doubleArray0[1] = (double) (-4933.684F);
      doubleArray0[2] = (double) (-4933.684F);
      doubleArray0[3] = (double) (-4933.684F);
      doubleArray0[4] = (double) (-4933.684F);
      doubleArray0[5] = (double) 1855.909F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,933.684 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4933.684F);
      floatArray0[1] = 1855.909F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-4933.684F), 1855.909F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1855.909F;
      doubleArray0[1] = (double) (-4933.684F);
      doubleArray0[2] = (double) (-4933.684F);
      doubleArray0[3] = (double) (-4933.684F);
      doubleArray0[4] = (double) (-4933.684F);
      doubleArray0[5] = (double) 1855.909F;
      doubleArray0[6] = (double) (-4933.684F);
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (double) (-4933.684F);
      doubleArray1[2] = 579.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1855.9090576171875), (-9151535.291181505), 2.542074364973092E7, 2.1489569221874475E7, 2.1489569221874475E7, 2.1482779628734827E7, (-1.2008138374677598E7), 2.541580996564889E7, (-2856603.0834960938)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1855.9090576171875, (-4933.68408203125), (-4933.68408203125), (-4933.68408203125), (-4933.68408203125), 1855.9090576171875, (-4933.68408203125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0), (-4933.68408203125), 579.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray2.length);
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-165.79553F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), (-1.0F), (-165.79553F)}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(1045.8853682268266, (double) (-165.79553F), (double) (-165.79553F), (double) (-1.0F));
      assertEquals((-173237.32574091444), double0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 64;
      intArray0[1] = 2;
      intArray0[2] = 644;
      intArray0[3] = 1036;
      intArray0[4] = (-503);
      intArray0[5] = 119;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {64, 2, 644, 1036, (-503), 119}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1441;
      intArray0[1] = (-1346);
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 150;
      int int1 = 892;
      intArray0[5] = 892;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 150;
      doubleArray0[1] = (double) 150;
      doubleArray0[3] = 2834.2241239;
      doubleArray0[6] = (double) 0;
      doubleArray0[8] = (double) 1441;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {150.0, 150.0, 0.0, 2834.2241239, 0.0, 0.0, 0.0, 0.0, 1441.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1441;
      intArray0[1] = 892;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 150;
      intArray0[5] = 0;
      intArray0[6] = (-1346);
      intArray0[7] = 1441;
      intArray0[8] = 150;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1441, 892, 0, 0, 150, 0, (-1346), 1441, 150}, intArray1);
      assertArrayEquals(new int[] {1441, 892, 0, 0, 150, 0, (-1346), 1441, 150}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-989.9848207), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {150.0, 150.0, 0.0, 2834.2241239, 0.0, 0.0, 0.0, 0.0, 1441.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-148497.723105), (-148497.723105), -0.0, (-2805838.8611227563), -0.0, -0.0, -0.0, -0.0, (-1426568.1266287)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathArrays.linearCombination(675.5114401209, 479.7324552718635, (-589.8), 217.0688352531);
      assertEquals(196037.56270115342, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.6409968137741089, (-1.0), 479.7324552718635, 479.7324552718635, 0.6409968137741089, (-1.0));
      assertEquals(230141.94664754297, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 479.7324552718635;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1.0), 479.7324552718635}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 479.7324552718635}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, (-479.7324552718635)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 57;
      intArray0[2] = 0;
      intArray0[3] = 122;
      intArray0[4] = (-2095);
      intArray0[5] = (-3710);
      intArray0[6] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2900);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1), 57, 0, 122, (-2095), (-3710), 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(2900, intArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1975.567650588947, 1271.354659, (-1.0), (-3448.16), 0.6409968137741089, (-3448.16));
      assertEquals(2512885.0371725587, double0, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-3974.2495F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 301.48F;
      floatArray0[6] = (-1082.1018F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 1.0F, Float.NaN, (-3974.2495F), 0.0F, 301.48F, (-1082.1018F), 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-1082.1018F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) Float.NaN;
      doubleArray0[4] = 0.6409968137741089;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 2512885.0371725587;
      doubleArray0[8] = (double) 1.0F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, (-1082.101806640625), 0.0, Double.NaN, 0.6409968137741089, 0.0, (-1.0), 2512885.0371725587, 1.0}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = MathArrays.linearCombination(675.5114401209, 479.7324552718635, (-577.7481788170967), 217.0688352531);
      assertEquals(198653.63748800487, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1604;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray0[0] = 1604;
      intArray1[2] = 1604;
      intArray1[3] = 1604;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(1604.0, double1, 0.01);
      assertArrayEquals(new int[] {1604}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1604, 1604}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 198653.63748800487;
      doubleArray0[1] = 198653.63748800487;
      doubleArray0[2] = (-577.7481788170967);
      doubleArray0[3] = (double) 1604;
      doubleArray0[4] = 198653.63748800487;
      doubleArray0[5] = (-537.7707);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {198653.63748800487, 198653.63748800487, (-577.7481788170967), 1604.0, 198653.63748800487, (-537.7707)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "mg-d>Vu2R X3 Cr].%+";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(2474.668782926, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = (-1109.6637186355);
      doubleArray1[3] = 2474.668782926;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(217.0688352531, double0, 0.01);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-2425.6974), 759.0, 0.11113807559013367, (-569.402530585), 3.834E-20, 217.0688352531, 217.0688352531, (-23.39));
      assertEquals((-1846244.8489580555), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4933.684F);
      floatArray0[1] = 1855.909F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-4933.684F), 1855.909F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 49;
      intArray0[1] = (-2512);
      intArray0[2] = (-3596);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {49, (-2512), (-3596)}, intArray0);
      assertArrayEquals(new int[] {49, (-2512), (-3596)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-4933.684F), 1855.909F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-590.9491172191);
      doubleArray0[1] = (double) 1855.909F;
      doubleArray0[2] = (double) (-4933.684F);
      doubleArray0[3] = (double) (-3596);
      doubleArray0[4] = 2025.3847620422;
      doubleArray0[5] = (double) (-2512);
      doubleArray0[6] = (double) 1855.909F;
      doubleArray0[7] = (double) 1855.909F;
      doubleArray0[8] = (double) (-3596);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1855.909F);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {143.63758298435266, (-451.1019367105072), 1199.193697227574, 874.0528302036996, (-492.295128897228), 610.5730560266111, (-451.1019367105072), (-451.1019367105072), 874.0528302036996}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-590.9491172191), 1855.9090576171875, (-4933.68408203125), (-3596.0), 2025.3847620422, (-2512.0), 1855.9090576171875, 1855.9090576171875, (-3596.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {143.63758298435266, (-451.1019367105072), 1199.193697227574, 874.0528302036996, (-492.295128897228), 610.5730560266111, (-451.1019367105072), (-451.1019367105072), 874.0528302036996}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-590.9491172191), 1855.9090576171875, (-4933.68408203125), (-3596.0), 2025.3847620422, (-2512.0), 1855.9090576171875, 1855.9090576171875, (-3596.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-590.9491172191), 1855.9090576171875, (-4933.68408203125), (-3596.0), 2025.3847620422, (-2512.0), 1855.9090576171875, 1855.9090576171875, (-3596.0)}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-4933.684F);
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = (double) (-2512);
      doubleArray2[3] = 2025.3847620422;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (double) (-4933.684F);
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-4933.68408203125), Double.NaN, (-2512.0), 2025.3847620422, 0.0, (-4933.68408203125)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-590.9491172191), 1855.9090576171875, (-4933.68408203125), (-3596.0), 2025.3847620422, (-2512.0), 1855.9090576171875, 1855.9090576171875, (-3596.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (-3596);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 49;
      longArray2[1] = (long) (-2512);
      longArray2[2] = (long) (-2512);
      longArray2[3] = (long) (-3596);
      longArray2[4] = (long) (-2512);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-3596);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[1];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (long) (-2512);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&q]G8$f;,IoozEiu";
      stringArray0[1] = "30O";
      stringArray0[2] = "mg-d>Vu2R X3 Cr].%+";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      Double[] doubleArray0 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-1.0);
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = 223.7;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1178.686312;
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-4941.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = (Double) 2.17333333333333325E18;
      doubleArray1[1] = (Double) (-4941.7);
      doubleArray1[2] = (Double) 1178.686312;
      Double double0 = new Double(1685.68479);
      assertEquals(1685.68479, (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray1[3] = double0;
      doubleArray1[4] = (Double) 2.17333333333333325E18;
      doubleArray1[5] = (Double) (-4941.7);
      doubleArray1[6] = (Double) (-4941.7);
      doubleArray1[7] = (Double) (-4941.7);
      doubleArray1[8] = (Double) (-4941.7);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[13];
      Double double1 = new Double((-1.0));
      assertEquals((-1.0), (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      Double double2 = new Double(Double.NaN);
      assertEquals(Double.NaN, (double)double2, 0.01);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      
      doubleArray1[3] = double2;
      Double double3 = new Double(359.03452528);
      assertEquals(359.03452528, (double)double3, 0.01);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      
      doubleArray1[5] = (Double) 0.0;
      doubleArray1[6] = (Double) (-1.0);
      doubleArray1[7] = (Double) 0.0;
      doubleArray1[8] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(13, doubleArray1.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 148, 148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.9166666666666666, 1.0, 3920.3204, 0.9166666666666666, 1.0, 0.19999954104423523);
      assertEquals(3594.743699541044, double0, 0.01);
      
      int[] intArray0 = new int[3];
      int int0 = 103;
      intArray0[0] = 103;
      int int1 = 11;
      intArray0[1] = 11;
      int int2 = 174;
      intArray0[2] = 174;
      int int3 = (-315);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.9166666666666666, 1.0, 3920.3204, 0.9166666666666666, 1.0, 0.19999954104423523);
      assertEquals(3594.743699541044, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 103;
      intArray0[1] = 11;
      int int0 = 174;
      intArray0[2] = 174;
      int int1 = (-315);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-315));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-373.8), (-373.8), (-373.8), (-373.8));
      assertEquals(279452.88, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-373.8), 2.17333333333333325E18, 1687.74368862254, 2.17333333333333325E18);
      assertEquals(2.8556376166063203E21, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 750;
      intArray0[1] = 50;
      intArray0[2] = 122;
      intArray0[3] = 0;
      intArray0[4] = 416;
      intArray0[5] = 262;
      intArray0[6] = 4137;
      intArray0[7] = 360;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 360;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      doubleArray0[0] = null;
      double double0 = MathArrays.linearCombination(479.7324552718635, (-552.4642451822482), 4514.457012816668, 479.7324552718635);
      assertEquals(1900696.518186626, double0, 0.01);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 740;
      intArray0[1] = (-2203);
      intArray0[2] = 1604;
      intArray0[3] = (-2203);
      intArray0[4] = (-219);
      intArray0[5] = (-2203);
      intArray0[6] = 1604;
      intArray0[7] = 1604;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {740, (-2203), 1604, (-2203), (-219), (-2203), 1604, 1604}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0[0], (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2529;
      intArray2[1] = 846;
      intArray2[2] = 584;
      intArray2[3] = (-894);
      intArray2[4] = (-1520);
      intArray2[5] = (-1468);
      intArray2[6] = (-271);
      intArray2[7] = 8388608;
      int int0 = MathArrays.distance1(intArray0, intArray2);
      assertEquals(2529, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {2529, 846, 584, (-894), (-1520), (-1468), (-271), 8388608}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(217.0688352531, double0, 0.01);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[8][5];
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      longArray1[1] = (long) (-894);
      longArray1[2] = (long) 2529;
      longArray1[3] = (-1113L);
      longArray1[4] = (long) 2529;
      longArray1[5] = (long) 584;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) (-271);
      longArray2[1] = (long) (-271);
      longArray2[2] = (long) (-894);
      longArray2[3] = (long) 846;
      longArray2[4] = (long) (-271);
      longArray2[5] = 1L;
      longArray2[6] = (long) 846;
      longArray2[7] = (long) 846;
      longArray2[8] = (long) 846;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 2529;
      longArray3[1] = (-1113L);
      longArray3[2] = (long) 584;
      longArray3[3] = (long) 2529;
      longArray3[4] = (long) 584;
      longArray3[5] = (long) (-1468);
      longArray3[6] = (long) 846;
      longArray3[7] = (-1113L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) (-894);
      longArray4[1] = (long) 584;
      longArray4[2] = (long) (-1468);
      longArray4[3] = (-1113L);
      longArray4[4] = (long) 8388608;
      longArray4[5] = (long) (-1520);
      longArray4[6] = (long) 584;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = (long) 584;
      longArray5[1] = (long) 8388608;
      longArray5[2] = (long) 846;
      longArray5[3] = (long) 8388608;
      longArray5[4] = 1023L;
      longArray5[5] = 1L;
      longArray5[6] = (long) 846;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) (-271);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = 1L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -894 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.linearCombination(1.34217729E8, (-2178.0143473085), 0.0, (-2178.0143473085));
      assertEquals((-2.923281394251641E11), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[2][5];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 675.5114401209, 0.0, 675.5114401209);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2203);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-2203)}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-13);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 675.5114401209;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[5] = (double) (-13);
      doubleArray1[6] = (double) (-13);
      doubleArray1[7] = (double) 1604;
      doubleArray1[8] = (double) (-2203);
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(675.5114401209, double2, 0.01);
      assertArrayEquals(new double[] {(-13.0), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 675.5114401209, 0.0, 0.0, 0.0, (-13.0), (-13.0), 1604.0, (-2203.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[2] = (-1292.0F);
      floatArray0[3] = (-1578.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1957.125F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {1.0F, 0.0F, (-1292.0F), (-1578.0F), 1.0F, 1.0F, 1957.125F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4005.24F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-4005.24F), 1.0F, 0.0F, (-1.0F), 3.4028235E38F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-4005.24F), 1.0F, 0.0F, (-1.0F), 3.4028235E38F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W|$kYhUs%azh3";
      stringArray0[1] = "W|$kYhUs%azh3";
      stringArray0[2] = "matrix must have at least one column";
      stringArray0[3] = "W|$kYhUs%azh3";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "|x=Bn`MA ";
      stringArray0[7] = "|x=Bn`MA ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 642.003278052278;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 642.003278052278;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 642.003278052278;
      doubleArray1[3] = 642.003278052278;
      doubleArray1[4] = 642.003278052278;
      doubleArray1[5] = 642.003278052278;
      doubleArray1[6] = 642.003278052278;
      doubleArray1[7] = 642.003278052278;
      doubleArray1[8] = 642.003278052278;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2725;
      intArray0[2] = 2725;
      intArray0[3] = 831;
      intArray0[4] = 602;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-151.384168), 1305.83637, (-538.9444599832934), 0.0);
      assertEquals((-197682.95241659015), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-538.9444599832934);
      doubleArray2[3] = 0.0;
      double[] doubleArray3 = MathArrays.scale((-1542L), doubleArray0);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) (-1542L);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (double) (-1542L);
      doubleArray4[3] = (double) (-1542L);
      doubleArray4[4] = (double) (-1542L);
      doubleArray4[5] = (double) 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray5 = new double[4][5];
      doubleArray5[0] = doubleArray0;
      doubleArray5[1] = doubleArray0;
      doubleArray5[2] = doubleArray2;
      doubleArray5[3] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray4, mathArrays_OrderDirection0, doubleArray5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.scaleInPlace(2474.668782926, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2474.668782926;
      doubleArray1[1] = (-2135.258280392922);
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      double[] doubleArray2 = MathArrays.scale((-2135.258280392922), doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2474.668782926, (-2135.258280392922), 1.7976931348623157E308, 3.834E-20, 3.834E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-5284057.009972616), 4559327.923986539, Double.NEGATIVE_INFINITY, (-8.186580247026463E-17), (-8.186580247026463E-17)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {2474.668782926, (-2135.258280392922), 1.7976931348623157E308, 3.834E-20, 3.834E-20}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-5284057.009972616), 4559327.923986539, Double.NEGATIVE_INFINITY, (-8.186580247026463E-17), (-8.186580247026463E-17)}, doubleArray2, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      doubleArray0[0] = (double) 0;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      double double0 = MathArrays.linearCombination(217.0688352531, (-61.27572504391), (-61.27572504391), 1110.6762268797108, 0.5850973129272461, (-4196.582), 3895.451857, 3895.451857);
      assertEquals(1.509073121999741E7, double0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 0.19999954104423523;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-142.488590112);
      doubleArray0[4] = (-1780.528135783898);
      doubleArray0[5] = 3895.451857;
      doubleArray0[6] = (-804.39);
      doubleArray0[7] = (-3064.5);
      doubleArray0[8] = (-4941.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {6.52E18, 0.19999954104423523, 20.0, (-142.488590112), (-1780.528135783898), 3895.451857, (-804.39), (-3064.5), (-4941.7)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 43;
      intArray0[1] = (-1);
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 95;
      intArray0[4] = 1708;
      intArray0[5] = 43;
      intArray0[6] = 64;
      intArray0[7] = (-615);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {43, (-1), Integer.MAX_VALUE, 95, 1708, 43, 64, (-615)}, intArray0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1178.686312;
      doubleArray0[1] = 2.17333333333333325E18;
      doubleArray0[2] = (-4941.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,173,333,333,333,333,250 >= -4,941.7)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-151.384168), 1305.83637, (-538.9444599832934), 0.0);
      assertEquals((-197682.95241659015), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-538.9444599832934);
      doubleArray2[3] = 0.0;
      double double1 = MathArrays.linearCombination(2456.4, (-2719.3), (double) (-1542L), 0.5850973129272461, 3895.451857, (-151.384168), 0.0, 1110.6762268797108);
      assertEquals((-7270300.478412534), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray3 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (13,040,000,000,000,000,000 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4005.24F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-372.4);
      doubleArray0[1] = 871.652973946774;
      doubleArray0[2] = 1060.9820662606;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 1.0F;
      doubleArray0[6] = (double) (-4005.24F);
      doubleArray0[7] = 871.652973946774;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.882587189827978E7, double0, 0.01);
      assertArrayEquals(new double[] {(-372.4), 871.652973946774, 1060.9820662606, 1.0, 0.0, 1.0, (-4005.239990234375), 871.652973946774}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1L;
      longArray0[1] = 1L;
      longArray0[2] = 1L;
      longArray0[3] = 1L;
      longArray0[4] = 1L;
      longArray0[5] = 1L;
      longArray0[6] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1L, 1L, 1L, 1L, 1L, 1L, 1L}, longArray0);
      assertEquals(7, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-372.4), 871.652973946774, 1060.9820662606, 1.0, 0.0, 1.0, (-4005.239990234375), 871.652973946774}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 871.652973946774;
      doubleArray0[3] = (-1820.419641991171);
      doubleArray0[4] = 871.652973946774;
      doubleArray0[5] = (-1109.6637186355);
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(6064848.92498814, double0, 0.01);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 871.652973946774, (-1820.419641991171), 871.652973946774, (-1109.6637186355), 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, 871.652973946774, (-1820.419641991171), 871.652973946774, (-1109.6637186355), 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (-513.748266);
      doubleArray0[3] = 0.0;
      doubleArray0[5] = 837.0;
      doubleArray0[6] = 1305.83637;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2506L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,506 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-112.55329596999265), 2789.48812, 0.0, (-112.55329596999265), 2789.48812, 0.0, 0.0, 3978.8282671983);
      assertEquals((-313966.08197513834), double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-112.55329596999265);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1187);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-112.55329596999265), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1187, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1187;
      intArray0[1] = 1187;
      intArray0[2] = 1187;
      intArray0[3] = 1187;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1187, 1187, 1187, 1187}, intArray0);
      assertArrayEquals(new int[] {1187, 1187, 1187, 1187}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double double0 = MathArrays.linearCombination(1388.66927054014, 3973.363004243, 217.0688352531, 3973.363004243, (-2346.64451008), (double) 0.0F, (-2346.64451008), 712.9024);
      assertEquals(4707251.880879235, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(675.5114401209, 0.0, 675.5114401209, 479.7324552718635);
      assertEquals(324064.7617334318, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-13);
      intArray0[2] = 1604;
      intArray0[3] = 1604;
      intArray0[4] = 1604;
      intArray0[5] = (-2203);
      intArray0[6] = 1604;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-13), 0, 1604, 1604, 1604, (-2203), 1604}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, intArray0.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (-4092L);
      longArray0[1] = (-266L);
      longArray0[2] = (-305L);
      longArray0[3] = 0L;
      longArray0[4] = 2981L;
      longArray0[5] = (-1542L);
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      double double0 = MathArrays.linearCombination((double) (-266L), 2820.08087958, (-2719.3), 753.2319597645998, 2456.4, (-403.1627782614896), 1.304E19, 1869.34);
      assertEquals(2.4376193599999993E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("}hW'PXEwW\"iFux?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.}hW'PXEwW\"iFux?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-151.384168), 1305.83637, (-513.748266), 0.0);
      assertEquals((-197682.95241659015), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-196.99);
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-18.708388158022075);
      doubleArray0[1] = 0.0;
      doubleArray0[0] = (-1.0);
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2126221433, (-2738));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1733.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 863;
      intArray0[1] = 0;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 863;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 863;
      floatArray0[4] = (float) 863;
      floatArray0[5] = (float) 863;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 863;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {863.0F, 0.0F, 0.0F, 863.0F, 863.0F, 863.0F, 0.0F, 0.0F, 863.0F}, floatArray0, 0.01F);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 3.834E-20);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray2, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(1733.0, double1, 0.01);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&q]G8$f;,IoozEiu";
      stringArray0[1] = "30O";
      stringArray0[2] = "mg-d>Vu2R X3 Cr].%+";
      stringArray0[3] = "INC}`REASING";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 57;
      intArray0[2] = (-1);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 57, (-1), 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 57, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-4005.24F);
      floatArray0[2] = (-4005.24F);
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-4005.24F), (-4005.24F), 0.0F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), (-4005.24F), (-4005.24F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1, floatArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.fraction.BigFractionField$1";
      stringArray0[1] = "|x=Bn`MA ";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "W|$kYhUs%azh3";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[7] = "W|$kYhUs%azh3";
      stringArray0[8] = "Jzt\"S&]1Y9P4?Pr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, stringArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1733.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 863;
      intArray0[1] = 0;
      intArray0[2] = 291;
      intArray0[3] = 11;
      intArray0[4] = 871;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "matrix must have at least one column";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 79.743;
      int[] intArray0 = new int[3];
      intArray0[0] = 2725;
      intArray0[1] = 0;
      intArray0[2] = 831;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {2725, 0, 831}, intArray0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.304E19, 79.743}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2725, 0, 831}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4005.24F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-4005.24F), 1.0F, 0.0F, (-1.0F), 3.4028235E38F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-4005.24F), 1.0F, 0.0F, (-1.0F), 3.4028235E38F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W|$kYhUs%azh3";
      stringArray0[1] = "W|$kYhUs%azh3";
      stringArray0[2] = "matrix must have at least one column";
      stringArray0[3] = "W|$kYhUs%azh3";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[6] = "|x=Bn`MA ";
      stringArray0[7] = "Jzt\"S&]1Y9P4?Pr";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(8, stringArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.0F);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2474.668782926;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {3.834E-20, 1.7976931348623157E308, 2474.668782926, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      MathArrays.scaleInPlace(1.7976931348623157E308, doubleArray0);
      assertArrayEquals(new double[] {6.892355479062118E288, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(2474.668782926, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {6.892355479062118E288, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.7056296944863998E292, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.834E-20;
      doubleArray2[1] = 2474.668782926;
      doubleArray2[2] = 2474.668782926;
      doubleArray2[3] = 2474.668782926;
      doubleArray2[4] = 2474.668782926;
      doubleArray2[5] = 3.834E-20;
      doubleArray2[6] = 600.559;
      doubleArray2[7] = 3.834E-20;
      doubleArray2[8] = 1.7976931348623157E308;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertArrayEquals(new double[] {6.892355479062118E288, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 2474.668782926, 2474.668782926, 2474.668782926, 2474.668782926, 3.834E-20, 600.559, 3.834E-20, 1.7976931348623157E308}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4221.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 4221.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4221.0, 0.0, 4221.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4221.0, 0.0, 4221.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {4221.0, 0.0, 4221.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4221.0, 0.0, 4221.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.scaleInPlace(2358L, doubleArray0);
      assertArrayEquals(new double[] {9953118.0, 0.0, 9953118.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2446);
      intArray0[1] = 3855;
      intArray0[2] = (-1814);
      intArray0[3] = (-759);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {(-2446), 3855, (-1814), (-759)}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-2658), (-2658));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2126221433, (-2738));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[4];
      longArray1[0] = 1L;
      longArray1[1] = (-3397L);
      longArray1[2] = 683L;
      longArray1[3] = (-9223372036854775808L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 230L;
      longArray2[1] = (-3397L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-3397L);
      longArray3[1] = 1L;
      longArray3[2] = 230L;
      longArray3[3] = 1L;
      longArray3[4] = 1L;
      longArray3[5] = (-9223372036854775808L);
      longArray3[6] = (-9223372036854775808L);
      longArray3[7] = 1023L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[8];
      longArray1[0] = 2971L;
      longArray1[1] = 1L;
      longArray1[3] = (-3397L);
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = (-9223372036854775808L);
      longArray1[6] = 1L;
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-1921L);
      longArray2[2] = 34L;
      longArray2[3] = (-1880L);
      longArray2[4] = 1L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1880L);
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (-1921L);
      doubleArray0[3] = (double) (-1880L);
      MathArrays.scaleInPlace(1L, doubleArray0);
      assertArrayEquals(new double[] {(-1880.0), 1.0, (-1921.0), (-1880.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-1880.0), 1.0, (-1921.0), (-1880.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {(-1880.0), 1.0, (-1921.0), (-1880.0)}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 1.0;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1733.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 863;
      intArray0[1] = 0;
      intArray0[2] = 291;
      intArray0[3] = 0;
      intArray0[4] = 871;
      intArray0[5] = 602;
      intArray0[6] = 2725;
      intArray0[7] = 831;
      intArray0[8] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {863, 0, 291, 0, 871, 602, 2725, 831, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3466.0, double0, 0.01);
      assertArrayEquals(new double[] {1733.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3466.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.2784939181685606);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-1.2784939181685606)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace((-1.2784939181685606), doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {(-1.2784939181685606)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {(-1.2784939181685606)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) (-1.2784939181685606);
      doubleArray2[1] = (Double) (-1.2784939181685606);
      doubleArray2[2] = (Double) (-1.2784939181685606);
      doubleArray2[3] = (Double) (-1.2784939181685606);
      doubleArray2[4] = (Double) (-1.2784939181685606);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2783.67;
      doubleArray1[3] = 2783.67;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-196.99);
      doubleArray0[2] = 6.283185307179586;
      int[] intArray0 = new int[4];
      intArray0[0] = (-568);
      intArray0[1] = (-568);
      intArray0[2] = (-568);
      intArray0[3] = (-568);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-568), (-568), (-568), (-568)}, intArray0);
      assertEquals(4, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-568), (-3934.91069696112), (-3934.91069696112), (double) (-568), 1831.4456, (-1.0));
      assertEquals(4468227.106147832, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-196.99 < 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 3.834E-20;
      doubleArray2[1] = (Double) 3.834E-20;
      doubleArray2[2] = (Double) 3.834E-20;
      doubleArray2[3] = (Double) 3.834E-20;
      doubleArray2[4] = (Double) 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-2269);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2269));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[6][5];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 1023L;
      longArray1[2] = 1L;
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 1023L;
      longArray2[2] = 0L;
      longArray2[3] = 1023L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1023L;
      longArray3[1] = 0L;
      longArray3[2] = 1L;
      longArray3[3] = 1023L;
      longArray3[4] = (-2246L);
      longArray3[5] = 0L;
      longArray3[6] = 1023L;
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1L;
      longArray5[1] = 1023L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray5[5] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = 1L;
      longArray6[1] = 1L;
      longArray6[2] = 0L;
      longArray6[3] = (-2246L);
      longArray6[4] = (-2246L);
      longArray6[5] = 0L;
      longArray6[6] = 0L;
      longArray6[7] = 1L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,246 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-55.43981518), (-55.43981518), 2642.251051985);
      assertEquals((-146485.90998120894), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2642.251051985;
      doubleArray0[1] = (-146485.90998120894);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-146485.90998120894);
      doubleArray0[4] = 2642.251051985;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2642.251051985, (-146485.90998120894), 0.0, (-146485.90998120894), 2642.251051985, 0.0, 0.0, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2642.251051985, (-146485.90998120894), 0.0, (-146485.90998120894), 2642.251051985, 0.0, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[6][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-146485.90998120894);
      doubleArray2[3] = doubleArray3;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-1921L);
      longArray2[2] = 34L;
      longArray2[3] = (-1880L);
      longArray2[4] = 1L;
      longArray2[5] = (-9223372036854775808L);
      longArray2[6] = 1L;
      longArray2[7] = (-3397L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1880L);
      longArray3[1] = 1L;
      longArray3[2] = (-1880L);
      longArray3[3] = (-1880L);
      longArray3[4] = 230L;
      longArray3[5] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1921L);
      longArray4[1] = (-1880L);
      longArray4[2] = (-3397L);
      longArray4[3] = 1L;
      longArray4[4] = (-9223372036854775808L);
      longArray4[5] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-3397L);
      longArray5[1] = 683L;
      longArray5[2] = 1L;
      longArray5[3] = (-9223372036854775808L);
      longArray5[4] = 1L;
      longArray5[5] = 230L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[3][9];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 0.0;
      double double0 = 1.304E19;
      doubleArray2[1] = 1.304E19;
      doubleArray2[2] = 1.304E19;
      doubleArray1[2] = doubleArray2;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-3856.653545772));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3856.653545772)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3856.653545772)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 217.0688352531;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {217.0688352531}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-2269);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2269));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-3178.2983319907316), (-3178.2983319907316), (-3178.2983319907316), 0.0);
      assertEquals(1.0101580287135066E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-396.5668429522567), 1975.567650588947, (-396.5668429522567), (-396.5668429522567), (-3448.16), 1975.567650588947);
      assertEquals((-7438252.715358329), double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-7438252.715358329);
      doubleArray0[1] = 1975.567650588947;
      doubleArray0[2] = (-7438252.715358329);
      doubleArray0[3] = (-7438252.715358329);
      doubleArray0[4] = 1975.567650588947;
      doubleArray0[5] = (-7438252.715358329);
      doubleArray0[6] = (-7438252.715358329);
      doubleArray0[7] = 4221.0;
      doubleArray0[8] = (-396.5668429522567);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-7438252.715358329), 1975.567650588947, (-7438252.715358329), (-7438252.715358329), 1975.567650588947, (-7438252.715358329), (-7438252.715358329), 4221.0, (-396.5668429522567)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-7438252.715358329), 1975.567650588947, (-7438252.715358329), (-7438252.715358329), 1975.567650588947, (-7438252.715358329), (-7438252.715358329), 4221.0, (-396.5668429522567)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 265L;
      longArray0[1] = 0L;
      longArray0[2] = 2358L;
      longArray0[3] = (-1L);
      longArray0[4] = 0L;
      longArray0[5] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-196.99);
      doubleArray0[2] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-196.99 <= 6.283)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1289.00986700642;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-11.744754);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1289.00986700642, 0.0, (-11.744754), 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 3.834E-20;
      doubleArray2[1] = (Double) 3.834E-20;
      doubleArray2[2] = (Double) 3.834E-20;
      doubleArray2[3] = (Double) 3.834E-20;
      doubleArray2[4] = (Double) 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.834E-20;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.834E-20, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = (Double) 3.834E-20;
      doubleArray2[1] = (Double) 3.834E-20;
      doubleArray2[2] = (Double) 3.834E-20;
      doubleArray2[3] = (Double) 3.834E-20;
      doubleArray2[4] = (Double) 3.834E-20;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean3 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(5, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = -0.0;
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-3976);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3976));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[5];
      int int0 = (-1165);
      intArray0[0] = (-1165);
      int int1 = 134217729;
      intArray0[1] = 134217729;
      int int2 = 22;
      intArray0[2] = 22;
      int int3 = (-2181);
      intArray0[3] = (-2181);
      int int4 = (-1946);
      intArray0[4] = (-1946);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      double[] doubleArray3 = MathArrays.scale(600.559, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      double[] doubleArray4 = new double[6];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 600.559;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 114;
      intArray0[1] = (-1023);
      intArray0[2] = 2719;
      intArray0[3] = 2606;
      intArray0[4] = 297;
      intArray0[5] = 0;
      intArray0[6] = 210;
      intArray0[7] = 5000;
      intArray0[8] = 871;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {114, (-1023), 2719, 2606, 297, 0, 210, 5000, 871}, intArray0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance(doubleArray2, doubleArray2);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 134217729;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) 134217729;
      doubleArray0[4] = (double) 134217729;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 134217729;
      doubleArray0[7] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 0;
      doubleArray1[6] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-4005.24F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3.4028235E38F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 3.4028235E38F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-4005.24F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      doubleArray0[8] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1.0F;
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) 3.4028235E38F;
      doubleArray2[3] = (double) 3.4028235E38F;
      doubleArray2[4] = (double) (-1.0F);
      doubleArray1[7] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1833.68;
      doubleArray0[1] = 3895.451857;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1062.04;
      doubleArray0[5] = (-3173.263);
      doubleArray0[6] = 2.0;
      doubleArray0[7] = (-1738.08594396326);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2474.668782926;
      doubleArray0[3] = 3890.7529;
      doubleArray0[4] = 4733.3020077;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 134217729;
      intArray0[1] = (-568);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = null;
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 26;
      intArray0[0] = 26;
      intArray0[1] = 71;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1360.179367528102);
      doubleArray0[3] = 2535.605893;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2276.217681;
      doubleArray0[6] = (-1563.0);
      doubleArray0[7] = 655.324460724366;
      doubleArray0[8] = (-2077.60808621);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,360.179 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1412.2098);
      doubleArray0[4] = 2783.67;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-1,412.21 < 2,783.67)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 871.652973946774;
      doubleArray0[4] = -0.0;
      doubleArray0[5] = (-1820.419641991171);
      doubleArray0[6] = (-1109.6637186355);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(5305070.017997885, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1107;
      intArray0[2] = 2;
      intArray0[3] = (-1338);
      intArray0[4] = (-362);
      intArray0[5] = (-1);
      intArray0[6] = 252;
      intArray0[7] = 1280;
      intArray0[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&q]G8$f;,IoozEiu";
      stringArray0[1] = "30O";
      stringArray0[2] = "mg-d>Vu2R X3 Cr].%+";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 57;
      intArray0[2] = (-1);
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 499;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {0, 57, (-1), 0, 1, 499}, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      int int0 = 3599;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 11, 3599);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 69;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 69, 69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1328.472624886834);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 100.0;
      doubleArray0[3] = 1001.225306145;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.34643059838993);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 248.274491711643;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1764839.5150737145, 0.0, 10000.0, 1002452.113665149, 0.0, 1.8128753562806652, 0.0, 61640.22323467469, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = (-151.384168);
      double double1 = 1305.83637;
      MathArrays.linearCombination((-151.384168), 1305.83637, (-513.748266), 0.0);
      double[] doubleArray0 = new double[0];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-197682.95241659015);
      doubleArray1[2] = (-513.748266);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-197682.95241659015);
      doubleArray1[5] = 837.0;
      doubleArray1[6] = 1305.83637;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -197,682.952)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1108.57260421285;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 100.0;
      doubleArray0[4] = 986.650955516;
      doubleArray0[5] = (-372.66890326535);
      doubleArray0[6] = 1984.365869811;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {1108.57260421285, 0.0, -0.0, 100.0, 986.650955516, (-372.66890326535), 1984.365869811, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[1][7];
      doubleArray2[0] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 642.003278052278;
      doubleArray0[1] = (-2362.6082);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 3.141592653589793;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }
}
