/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:07:44 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 16;
      intArray0[1] = 1025;
      intArray0[2] = 1772;
      intArray0[3] = 577;
      intArray0[4] = 216;
      intArray0[5] = (-2144948247);
      intArray0[6] = (-3310);
      intArray0[7] = 3345;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {16, 1025, 1772, 577, 216, (-2144948247), (-3310), 3345}, intArray0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2960);
      assertEquals(0, doubleArray0.length);
      assertEquals(2960, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      int int0 = 51;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 51);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 68;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(1.0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int1 = 2146564731;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146564731, 1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 51;
      Object[] objectArray0 = MathArrays.buildArray(field0, 51);
      assertEquals(51, objectArray0.length);
      assertNotNull(objectArray0);
      
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3111.4194735674;
      doubleArray0[1] = (-1.7168146928204135);
      doubleArray0[2] = (-6.805646932770577E38);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1083.3184868;
      doubleArray0[5] = (-27.03457);
      doubleArray0[6] = 3.1660099222737955E-7;
      doubleArray0[7] = 464.323036625241;
      doubleArray0[8] = 1854.791;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6.805646932770577E38, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3111.4194735674, (-1.7168146928204135), (-6.805646932770577E38), 1.304E19, 1083.3184868, (-27.03457), 3.1660099222737955E-7, 464.323036625241, 1854.791}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(464.323036625241, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {1444703.738181724, (-797.1566114932048), (-3.160018650023292E41), 6.054772397593143E21, 503009.7294232371, (-12552.773636257642), 1.470051341095812E-4, 215595.88234088488, 861222.1894251674}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.805646932770577E38;
      doubleArray1[1] = (-1.7168146928204135);
      doubleArray1[2] = 3111.4194735674;
      doubleArray1[3] = (-1.7168146928204135);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (680,564,693,277,057,700,000,000,000,000,000,000,000 > -1.717)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {1.4E-45F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 1.4E-45F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) 1.4E-45F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.133398622996355E-45, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45, 1.401298464324817E-45}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 1596;
      intArray0[1] = (-202);
      intArray0[2] = 2147482800;
      intArray0[3] = 8;
      intArray0[4] = (-2144845461);
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-202);
      intArray1[1] = (-202);
      intArray1[2] = 0;
      intArray1[3] = (-202);
      intArray1[4] = (-2144845461);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-2147482488), int0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1596, (-202), 2147482800, 8, (-2144845461)}, intArray0);
      assertArrayEquals(new int[] {(-202), (-202), 0, (-202), (-2144845461)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2147482488);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2144845461);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,147,482,488 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 0;
      MathArrays.checkOrder(doubleArray3);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 0);
      assertEquals(0, objectArray0.length);
      assertNotNull(objectArray0);
      
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 0.058823529411764705;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2529.29425428804;
      doubleArray0[4] = 984.0542271;
      doubleArray0[5] = 567.578;
      doubleArray0[6] = 1.63E18;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = (-1021.2660159708);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = (-697.62937730933);
      doubleArray1[2] = 356.58709;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 4100.6F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 4100.6F;
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, 0.0F, 4100.6F, 0.0F, 0.0F, 4100.6F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 1.0F, 1.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 189);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(0.0, (-1891.35), 1702.48338, 0.0, 1702.48338, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = (-0.05417713522911072);
      doubleArray0[2] = (-5081.6882247);
      doubleArray0[3] = (-793.721674342724);
      doubleArray0[4] = 1330.8;
      doubleArray0[5] = 72.87801849658;
      doubleArray0[6] = 1187.244809227;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.86285714285714278E18, (-0.05417713522911072), (-5081.6882247), (-793.721674342724), 1330.8, 72.87801849658, 1187.244809227}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = -0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = -0.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = (-1.0F);
      floatArray1[7] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-1.0F), 3.4028235E38F, 0.0F, 1.0F, (-1.0F), -0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 1.0F, (-1.0F), 0.0F, -0.0F, 1.0F, (-1.0F), (-1.0F)}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (-1792.01);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0, (-1792.01)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-608.7237F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NEGATIVE_INFINITY;
      floatArray0[7] = -0.0F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1.4E-45F, 0.0F, (-1.0F), (-608.7237F), 0.0F, 0.0F, Float.NEGATIVE_INFINITY, -0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) 1.4E-45F;
      doubleArray0[4] = (double) -0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 1.401298464324817E-45, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = 1127.0;
      doubleArray0[2] = 1.86285714285714278E18;
      doubleArray0[3] = 722.195091;
      doubleArray0[4] = (-184.94115087);
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 0.6931470632553101;
      doubleArray0[7] = (-650.3676147460938);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.317238918096083E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 1127.0, 1.86285714285714278E18, 722.195091, (-184.94115087), 1.304E19, 0.6931470632553101, (-650.3676147460938)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-721.3);
      doubleArray0[1] = (-1363.0);
      doubleArray0[2] = 569.64445454577;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.9985313415527344;
      doubleArray0[1] = 1.997844754509471E-9;
      doubleArray0[3] = 1012.90001888839;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.9985313415527344, 1.997844754509471E-9, 0.0, 1012.90001888839}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 5.650007086920087E-9;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 972.55091651756;
      doubleArray0[3] = (-1992.757455);
      doubleArray0[4] = (-323.681344721);
      doubleArray0[5] = (-654.409);
      doubleArray0[6] = 105.71158;
      doubleArray0[7] = (-0.0013888888689039883);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][1];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-1992.757455), (-654.409), (-323.681344721), (-0.0013888888689039883), 5.650007086920087E-9, 1.0, 105.71158, 972.55091651756}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1992.757455), (-654.409), (-323.681344721), (-0.0013888888689039883), 5.650007086920087E-9, 1.0, 105.71158, 972.55091651756}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1594.44048785216);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1594.44048785216)}, doubleArray0, 0.01);
      
      double double0 = 202.3059;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.25534194707870483, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1594.44048785216);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1594.44048785216)}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.25534194707870483, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 9;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {1, 9}, intArray0);
      
      MathArrays.scaleInPlace(0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = (-437);
      int[] intArray2 = MathArrays.copyOf(intArray1, 0);
      assertEquals(3, intArray1.length);
      assertEquals(0, intArray2.length);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 1, (-437)}, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = Double.NaN;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NN9S=q;l*b08-k";
      stringArray0[1] = "r5/n";
      stringArray0[2] = "OqQ),^";
      stringArray0[3] = "INCREASING";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = ".H6pK1<Dt:";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 9.52766443111726E13;
      doubleArray1[2] = 2.608E18;
      doubleArray1[3] = 2.608E18;
      doubleArray1[4] = 9.52766443111726E13;
      doubleArray1[5] = 9.52766443111726E13;
      doubleArray1[6] = (double) 68;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3.6882689743608612E18, double0, 0.01);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 9.52766443111726E13, 2.608E18, 2.608E18, 9.52766443111726E13, 9.52766443111726E13, 68.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-698.63F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-698.63F)}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-698.63F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1556.42;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2784.298F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-1976.8348F);
      floatArray0[4] = (-173.0F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = 619.3607F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 2784.298F, Float.NaN, (-1976.8348F), (-173.0F), 0.0F, (-1.0F), 0.0F, 619.3607F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      doubleArray0[2] = (double) 68;
      doubleArray0[3] = (double) 68;
      doubleArray0[4] = (-2940.704);
      doubleArray0[5] = (double) 68;
      doubleArray0[6] = (-2045.884);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {68.0, 68.0, 68.0, 68.0, (-2940.704), 68.0, (-2045.884)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals((-4646.588), double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {68.0, 68.0, 68.0, 68.0, (-2940.704), 68.0, (-2045.884)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-977.0);
      doubleArray0[1] = 0.167;
      doubleArray0[2] = 2791.599882316649;
      doubleArray0[3] = (-433.742650652783);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1763.51179023;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1361.13F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-1361.13F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 9.527664431119956E13;
      doubleArray0[1] = 9.527664431119956E13;
      doubleArray0[2] = 9.527664431119956E13;
      doubleArray0[3] = 8.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "DIMENSION";
      stringArray0[1] = "DIMENSION";
      stringArray0[2] = "DIMENSION";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {9.527664431119956E13, 9.527664431119956E13, 9.527664431119956E13, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.527664431119956E13, 9.527664431119956E13, 9.527664431119956E13, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 21;
      intArray0[2] = (-1230);
      intArray0[3] = 134217729;
      intArray0[4] = 2;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-2037.201653167901);
      doubleArray0[3] = 1707.3807973088;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-65.6);
      doubleArray0[6] = (-204.58);
      doubleArray0[7] = 57.3301;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, 3.834E-20, (-2037.201653167901), 1707.3807973088, Double.NaN, (-65.6), (-204.58), 57.3301}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {6.283185307179586, 3.834E-20, (-2037.201653167901), 1707.3807973088, Double.NaN, (-65.6), (-204.58), 57.3301}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-65.6));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586, 3.834E-20, (-2037.201653167901), 1707.3807973088, Double.NaN, (-65.6), (-204.58), 57.3301}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.7684312217131862, 4.688967713051326E-21, (-249.14900304327264), 208.81203527555542, Double.NaN, (-8.022855554933933), (-25.02005776567659), 7.011449866614602}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 3.834E-20, (-2037.201653167901), 1707.3807973088, Double.NaN, (-65.6), (-204.58), 57.3301}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-683);
      intArray0[2] = (-683);
      intArray0[3] = 134217729;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = 134217729;
      intArray1[2] = 134217729;
      intArray1[3] = 1651;
      intArray1[4] = 134217729;
      intArray1[5] = 134217729;
      intArray1[6] = 134217729;
      intArray1[7] = 1651;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2.6843531550677717E8, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-683), 0, (-683), 134217729}, intArray0);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 1651, 134217729, 134217729, 134217729, 1651}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1594.44048785216);
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1594.44048785216)}, doubleArray0, 0.01);
      
      double double0 = 202.3059;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.25534194707870483, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1556.42;
      doubleArray0[1] = 1556.42;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1556.42, 1556.42, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(4844886.4328000005, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1556.42, 1556.42, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1556.42, 1556.42, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1556.42, 1556.42, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1510;
      intArray0[1] = 235;
      intArray0[2] = 279;
      intArray0[3] = 8;
      intArray0[4] = 817;
      intArray0[5] = 837;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 235;
      intArray1[1] = 817;
      intArray1[2] = 1510;
      intArray1[3] = 8;
      intArray1[4] = 279;
      intArray1[5] = 837;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(3626, int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1510, 235, 279, 8, 817, 837}, intArray0);
      assertArrayEquals(new int[] {235, 817, 1510, 8, 279, 837}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 2600, (-3379));
      assertEquals(2600, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 1585.4;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1585.4, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean2);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 6L;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 6L;
      floatArray0[1] = (float) 6L;
      floatArray0[2] = (float) 6L;
      floatArray0[3] = (float) 6L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 6L;
      doubleArray0[1] = 930.94;
      doubleArray0[2] = (double) 6.0F;
      doubleArray0[3] = (double) 6.0F;
      doubleArray0[4] = (double) 6.0F;
      doubleArray0[5] = (double) 6.0F;
      doubleArray0[6] = (double) 6.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2483;
      intArray0[1] = 2520;
      intArray0[2] = 1155;
      intArray0[4] = 1155;
      intArray0[5] = 1;
      intArray0[6] = 252;
      intArray0[7] = 4632;
      intArray0[8] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {2483, 2520, 1155, 0, 1155, 1, 252, 4632, 134217729}, intArray0);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2483;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 2520;
      intArray1[4] = 1;
      intArray1[5] = 1;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 6.283185307179586;
      double[] doubleArray0 = new double[2];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 43;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 66, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2146421917);
      intArray1[1] = (-724);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2146421917, int0);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-2146421917), (-724)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      int int0 = (-3423);
      intArray0[0] = (-3423);
      intArray0[1] = 311;
      intArray0[2] = 5389;
      intArray0[3] = 950;
      intArray0[4] = (-3367);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-3423), 311, 5389, 950, (-3367)}, intArray0);
      
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1118));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1556.42;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 2.608E18;
      doubleArray0[3] = 9.52766443111726E13;
      MathArrays.checkPositive(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1556.42, 1.304E19, 2.608E18, 9.52766443111726E13}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3298242891791292E19, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1556.42, 1.304E19, 2.608E18, 9.52766443111726E13}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1574.6368F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 820.41486F;
      floatArray0[4] = 1945.6F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3217.631F;
      floatArray0[7] = (-2093.0F);
      floatArray0[8] = 0.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean2);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {1.0F, 1574.6368F, 0.0F, 820.41486F, 1945.6F, 0.0F, 3217.631F, (-2093.0F), 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1574.6368F;
      doubleArray0[2] = (double) 3217.631F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-2093.0F);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 1.0F;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1574.6368408203125, 3217.631103515625, 0.0, (-2093.0), 0.0, 0.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1958.5943723;
      doubleArray0[1] = 0.19454771280288696;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1958.5943723, 0.19454771280288696}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3917.1887446, 0.3890954256057739}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1958.5943723, 0.19454771280288696}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3917.1887446, 0.3890954256057739}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(202.3059, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$VALUES";
      stringArray0[1] = "";
      stringArray0[2] = "DIMENSION";
      stringArray0[3] = "invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})";
      stringArray0[4] = "the Poisson mean must be positive ({0})";
      stringArray0[5] = "[p/fJ~";
      stringArray0[6] = "";
      stringArray0[7] = "@LLeuY";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      long[] longArray0 = new long[1];
      longArray0[0] = 477L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {477L}, longArray0);
      
      long[][] longArray1 = new long[1][6];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(1, longArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-821.13170024963);
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-821.13170024963)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      double[] doubleArray4 = new double[5];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (-821.13170024963);
      doubleArray4[1] = (-821.13170024963);
      doubleArray4[2] = (-821.13170024963);
      doubleArray4[3] = (-821.13170024963);
      doubleArray4[4] = (-821.13170024963);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray4, doubleArray2);
      assertFalse(boolean0);
      assertEquals(1, doubleArray2.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-821.13170024963)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-821.13170024963), (-821.13170024963), (-821.13170024963), (-821.13170024963), (-821.13170024963)}, doubleArray4, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      
      double double0 = MathArrays.linearCombination((-821.13170024963), (-1451.179), (-1451.179), 822.8485408467338, 822.8485408467338, (-1451.179));
      assertEquals((-1196591.965678287), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray4);
      assertEquals(1836.1063002381536, double1, 0.01);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-821.13170024963), (-821.13170024963), (-821.13170024963), (-821.13170024963), (-821.13170024963)}, doubleArray4, 0.01);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.0095696449279785;
      doubleArray0[1] = (double) (-698.63F);
      doubleArray0[2] = 322.8003;
      doubleArray0[3] = (double) (-698.63F);
      doubleArray0[4] = (double) (-698.63F);
      doubleArray0[5] = (double) (-698.63F);
      doubleArray0[6] = (double) (-698.63F);
      doubleArray0[7] = 322.8003;
      MathArrays.scaleInPlace(322.8003, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {971.4899842536449, (-225517.97516517332), 104200.03368009, (-225517.97516517332), (-225517.97516517332), (-225517.97516517332), (-225517.97516517332), 104200.03368009}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.0F, 1.4E-45F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 1.0F, 1.4E-45F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[1] = 392;
      intArray0[2] = 0;
      intArray0[3] = 319;
      intArray0[4] = 1880;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 392, 0, 319, 1880, 0}, intArray0);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 392;
      longArray1[2] = (long) 392;
      longArray1[3] = (long) 1880;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 392L, 392L, 1880L}, longArray1);
      
      Integer integer0 = new Integer(980);
      assertEquals(980, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(392);
      assertEquals(392, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1098));
      assertEquals((-1098), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 392;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 392L;
      doubleArray0[1] = (double) 1880;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 392);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {392.0, 1880.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {67.63380281690141, 324.36619718309856}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Double double0 = new Double(0L);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "number of samples ({0})";
      stringArray0[2] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-1238.4), doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.scale(1607.5, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.893113360537087E7, 2.893113360537087E7, 2.893113360537087E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1607.5;
      doubleArray3[1] = 134.1551146167588;
      doubleArray3[2] = 1607.5;
      doubleArray3[3] = 1607.5;
      doubleArray3[4] = 1607.5;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 134.1551146167588;
      doubleArray4[1] = (-847.7);
      doubleArray4[2] = 1607.5;
      doubleArray4[3] = 134.1551146167588;
      doubleArray4[4] = (-2441.2745689);
      doubleArray4[5] = 134.1551146167588;
      doubleArray4[6] = 134.1551146167588;
      doubleArray4[7] = 134.1551146167588;
      boolean boolean0 = MathArrays.equals(doubleArray3, doubleArray4);
      assertFalse(boolean0);
      assertEquals(5, doubleArray3.length);
      assertEquals(8, doubleArray4.length);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {1607.5, 134.1551146167588, 1607.5, 1607.5, 1607.5}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {134.1551146167588, (-847.7), 1607.5, 134.1551146167588, (-2441.2745689), 134.1551146167588, 134.1551146167588, 134.1551146167588}, doubleArray4, 0.01);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = (-698.63F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-698.63F)}, floatArray0, 0.01F);
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(3, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-698.63F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 16);
      assertEquals(0, doubleArray0.length);
      assertEquals(16, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 113236205062349959L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 16;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("\"{fj=U:F9*jrN>jO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.\"{fj=U:F9*jrN>jO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = new Double(952.814378704058);
      assertEquals(952.814378704058, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) double0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 16);
      assertEquals(1, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][9];
      long[][] longArray1 = new long[0][9];
      assertFalse(longArray1.equals((Object)longArray0));
      
      MathArrays.checkRectangular(longArray1);
      assertEquals(0, longArray1.length);
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.valueOf("DECREASING");
      assertEquals(MathArrays.OrderDirection.DECREASING, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[][] longArray0 = new long[3][6];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 4219L;
      long[][] longArray3 = new long[5][3];
      assertFalse(longArray3.equals((Object)longArray0));
      
      longArray3[0] = longArray1;
      longArray3[1] = longArray1;
      longArray3[2] = longArray2;
      longArray3[3] = longArray1;
      longArray3[4] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int int0 = 393;
      Integer integer0 = new Integer(393);
      assertEquals(393, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = 39;
      Integer integer1 = Integer.getInteger("DTyM:&cgn~=\t", 39);
      assertEquals(39, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(3, integerArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = (-699.0F);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-699.0F);
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(952.814378704058);
      assertEquals(952.814378704058, (double)double0, 0.01);
      assertNotNull(double0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = (double) double0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.283185307179586;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.283185307179586, 952.814378704058}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {39.47841760435743, 5986.709304742783}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 16);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(16, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586, 952.814378704058}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.283185307179586}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {39.47841760435743, 5986.709304742783}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(824);
      assertEquals(824, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-3376));
      assertEquals((-3376), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(66);
      assertEquals(66, (int)integer0);
      assertNotNull(integer0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(mathArrays_OrderDirection0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 43, 1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-3923.8151111635), (-3923.8151111635), (-3923.8151111635), Double.NaN, (-3923.8151111635), 0.7675435543060303, (-71.5953), (-12.75585843352));
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 1.5898896097030129);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 43, 1);
      assertEquals(43, objectArray0.length);
      assertNotNull(objectArray0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "number of samples ({0})";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean2);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      double[] doubleArray1 = MathArrays.scale((-234.03), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-15914.04), (-15914.04)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {68.0, 68.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-15914.04), (-15914.04)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1082154.72), (-1082154.72)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Integer integer0 = new Integer((-1092));
      assertEquals((-1092), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("rL2o mu9|y", (-1679));
      assertEquals((-1679), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, integerArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-3.141592653589793));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(104);
      assertEquals(104, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1057);
      assertEquals(1057, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = Integer.getInteger("H<-4&Lny)Slq~lH", (-1383));
      assertEquals((-1383), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[12];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      Integer integer4 = new Integer(864);
      assertEquals(864, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      
      integerArray0[2] = integer4;
      integerArray0[3] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(12, integerArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.34217729E8;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.34217729E8}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 864);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1634.922F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3440.48F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 94.485115F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-1634.922F), 0.0F, 3440.48F, 0.0F, 94.485115F, 1.0F, 0.5F}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1634.922F), 0.0F, 3440.48F, 0.0F, 94.485115F, 1.0F, 0.5F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.scaleInPlace(6.123233995736766E-17, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(1.04686845614412272E17, 2554.21670338, (-611.89455738737), 0.0, 1.04686845614412272E17, 6.123233995736766E-17);
      assertEquals(2.6739288969249515E20, double0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 6.123233995736766E-17;
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray2, doubleArray2);
      assertEquals(1, doubleArray2.length);
      assertEquals(1, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {6.123233995736766E-17}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3.749399456654644E-33}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1989);
      assertEquals(1989, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger((String) null, (-931));
      assertEquals((-931), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer2;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 201;
      intArray0[1] = 392;
      intArray0[2] = 0;
      intArray0[3] = 319;
      intArray0[4] = 1880;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {201, 392, 0, 319, 1880, 0}, intArray0);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 392;
      longArray1[2] = (long) 392;
      longArray1[3] = (long) 1880;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 392L, 392L, 1880L}, longArray1);
      
      Integer integer0 = new Integer(980);
      assertEquals(980, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(392);
      assertEquals(392, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-1092));
      assertEquals((-1092), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      
      Integer integer3 = Integer.getInteger((String) null, 980);
      assertEquals(980, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 392;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 201;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, integerArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 392L;
      doubleArray0[1] = (double) 1880;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 392);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {392.0, 1880.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {67.63380281690141, 324.36619718309856}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(1880.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {392.0, 1880.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {67.63380281690141, 324.36619718309856}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1);
      assertEquals(3, integerArray0.length);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      long[] longArray0 = new long[6];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2875L;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = (double) 2875L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {2875.0, 1.304E19, 2875.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {2875.0, 1.304E19, 2875.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(513.0111181317243, 2875.0, 1.304E19, 2052.732208194, (-3065.6356), (-3261.955), 1.2246467991473532E-16, (-2674.5896997));
      assertEquals(2.676762799484977E22, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 6.283185307179586;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(5.7738368206, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 201;
      intArray0[1] = 392;
      intArray0[2] = 0;
      intArray0[3] = 319;
      intArray0[4] = 1880;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {201, 392, 0, 319, 1880, 0}, intArray0);
      
      long[] longArray1 = new long[4];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 392;
      longArray1[2] = (long) 392;
      longArray1[3] = (long) 1880;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(4, longArray1.length);
      assertArrayEquals(new long[] {0L, 392L, 392L, 1880L}, longArray1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "f)*'.0C_eA]yNs#";
      stringArray0[2] = "<Lu)ZAH*1cWUX\":1";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "0cQFRau@R";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$3";
      stringArray0[6] = "Vn:~0`X=";
      stringArray0[7] = ".E13&T8i!H:#{@Z$7";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(22, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(22, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertEquals(22, doubleArray0.length);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.linearCombination((-3261.955), (-771.5242477421516), (-3542.454139409273), 4212.407074745726, 0.0, 17997.59477783569, 17997.59477783569, 1.304E19);
      assertEquals(2.346886359029774E23, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 68;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 68.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 68.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-3261.955), (double) 68, 0.0, 68.0);
      assertEquals((-221812.94), double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 68;
      longArray0[1] = (long) 68;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      assertArrayEquals(new long[] {68L, 68L}, longArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(68.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 68.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-635.6858722502145);
      double double0 = 3284.973636728228;
      doubleArray0[1] = 3284.973636728228;
      doubleArray0[2] = (-635.6858722502145);
      double double1 = 1.5898896097030129;
      double double2 = 3.834E-20;
      double double3 = MathArrays.linearCombination((-635.6858722502145), (-2784.1697), 3284.973636728228, (-2184.484), (-635.6858722502145), 1433.856514, (-635.6858722502145), (-635.6858722502145));
      assertEquals((-5913500.806222734), double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-5913500.806222734);
      doubleArray1[2] = 0.7675435543060303;
      doubleArray1[3] = 2844.013;
      doubleArray1[4] = (-635.6858722502145);
      doubleArray1[5] = 0.7675435543060303;
      doubleArray1[6] = 1.5898896097030129;
      doubleArray1[7] = (-5913500.806222734);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-92.05);
      double double1 = 981.0551422;
      double double2 = 1763.32686;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-92.05);
      doubleArray0[1] = (-92.05);
      doubleArray0[2] = 1763.32686;
      doubleArray0[3] = 1763.32686;
      doubleArray0[4] = 981.0551422;
      doubleArray0[5] = (-92.05);
      doubleArray0[6] = (-92.05);
      doubleArray0[7] = 981.0551422;
      doubleArray0[8] = 981.0551422;
      double[] doubleArray1 = MathArrays.scale(1763.32686, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-92.05), (-92.05), 1763.32686, 1763.32686, 981.0551422, (-92.05), (-92.05), 981.0551422, 981.0551422}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-162314.237463), (-162314.237463), 3109321.6151974592, 3109321.6151974592, 1729920.8833823793, (-162314.237463), (-162314.237463), 1729920.8833823793, 1729920.8833823793}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long[] longArray0 = new long[6];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(17997.59477783569, 0.0, (-20.39902034958913), 17997.59477783569, 0.0, 0.0);
      assertEquals((-367133.30211672926), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (-367133.30211672926);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 134.1551146167588;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(980);
      assertEquals(980, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(44);
      assertEquals(44, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(45);
      assertEquals(45, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      integerArray0[2] = integer2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.7675435543060303, 1684.5877244856, 0.7675435543060303, 503.41, 0.7675435543060303, 5085.797, 503.41, (-1.0));
      assertEquals(5079.544256124129, double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1684.5877244856;
      doubleArray0[1] = 5079.544256124129;
      doubleArray0[2] = 503.41;
      doubleArray0[3] = 5079.544256124129;
      doubleArray0[4] = 1684.5877244856;
      doubleArray0[5] = 0.7675435543060303;
      doubleArray0[6] = 0.7675435543060303;
      doubleArray0[7] = 5085.797;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1684.5877244856, 5079.544256124129, 503.41, 5079.544256124129, 1684.5877244856, 0.7675435543060303, 0.7675435543060303, 5085.797}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1684.5877244856, 5079.544256124129, 503.41, 5079.544256124129, 1684.5877244856, 0.7675435543060303, 0.7675435543060303, 5085.797}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2837835.8014875716, 2.580176984992363E7, 253421.62810000003, 2.580176984992363E7, 2837835.8014875716, 0.589123107756734, 0.589123107756734, 2.5865331125208996E7}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (-2754.72581);
      doubleArray3[2] = 5079.544256124129;
      doubleArray3[3] = 5085.797;
      doubleArray3[4] = 503.41;
      doubleArray3[5] = 503.41;
      double[] doubleArray4 = MathArrays.normalizeArray(doubleArray3, 1684.5877244856);
      assertEquals(6, doubleArray4.length);
      assertEquals(6, doubleArray3.length);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {Double.NaN, (-551.3053605877594), 1016.5730351740507, 1017.8244015367703, 100.74782418126907, 100.74782418126907}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-2754.72581), 5079.544256124129, 5085.797, 503.41, 503.41}, doubleArray3, 0.01);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.5463024377822876;
      doubleArray0[2] = 0.5463024377822876;
      doubleArray0[3] = 0.5463024377822876;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.5463024377822876, 0.5463024377822876}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.5463024377822876, 0.5463024377822876}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0926048755645752, 1.0926048755645752}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 1168.672467135403;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (-287.19141306);
      doubleArray2[6] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      double double0 = new Double(0L);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0L, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 4034.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = MathArrays.linearCombination(952.814378704058, 3.141592653589793, 3.141592653589793, 952.814378704058, 952.814378704058, 6.283185307179586);
      assertEquals(11973.418609485567, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 11973.418609485567;
      double[] doubleArray1 = MathArrays.scale(2027.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.283185307179586, 11973.418609485567}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12736.016617653022, 2.4270119521427244E7}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1340.72));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.283185307179586, 11973.418609485567}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.7031888063109799), (-1340.016811193689)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {6.283185307179586, 11973.418609485567}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12.566370614359172, 23946.837218971134}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1541);
      intArray0[1] = 574;
      intArray0[2] = (-3355);
      intArray0[3] = (-1911);
      intArray0[4] = (-1);
      intArray0[5] = 2092;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-544));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 134.1551146167588;
      doubleArray1[1] = 134.1551146167588;
      doubleArray1[2] = 134.1551146167588;
      doubleArray1[3] = 134.1551146167588;
      doubleArray1[4] = 134.1551146167588;
      doubleArray1[5] = 134.1551146167588;
      doubleArray1[6] = 134.1551146167588;
      doubleArray1[7] = 134.1551146167588;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.scaleInPlace((-2706.45451414145), doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(381082.3103275262, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905), (-363084.7155496905)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3379), (-3379));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(1763.32686, (-92.05), 1.5898896097030129, 981.0551422, (-2784.1697), 3.834E-20, (-2784.1697), 0.7675435543060303);
      assertEquals((-162891.43959319964), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[3][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      
      try { 
        MathArrays.normalizeArray(doubleArray3, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      double[] doubleArray1 = null;
      double double1 = new Integer(0);
      assertEquals(0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray2, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 1171);
      assertEquals(3, intArray0.length);
      assertEquals(1171, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[][] doubleArray3 = new double[4][4];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = (double) 1171;
      doubleArray4[1] = 0;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {17997.59477783569, 0.0, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 0.0, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 134.1551146167588;
      doubleArray2[1] = 134.1551146167588;
      doubleArray2[2] = 134.1551146167588;
      doubleArray2[3] = 1.34217729E8;
      doubleArray2[4] = 134.1551146167588;
      doubleArray2[5] = 134.1551146167588;
      doubleArray2[6] = 134.1551146167588;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 0.0, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {134.1551146167588, 134.1551146167588, 134.1551146167588, 1.34217729E8, 134.1551146167588, 134.1551146167588, 134.1551146167588}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1171;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2886);
      assertEquals(2886, intArray1.length);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {1171}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      
      double[] doubleArray3 = new double[24];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 134.1551146167588;
      doubleArray3[1] = (double) 1171;
      doubleArray3[2] = 134.1551146167588;
      doubleArray3[3] = (double) 1171;
      doubleArray3[4] = (double) 1171;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 24
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-582.1735129998862), 4.921795417060414, 790.93480501077, 4.921795417060414, 2.925681159240093E-8, 4.921795417060414);
      assertEquals(1027.480370422775, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-582.1735129998862);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.925681159240093E-8;
      doubleArray1[1] = 4.921795417060414;
      doubleArray1[2] = 790.93480501077;
      doubleArray1[3] = 952.814378704058;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(582.173513029143, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-582.1735129998862)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.925681159240093E-8, 4.921795417060414, 790.93480501077, 952.814378704058}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-582.1735129998862)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {338925.9992386286}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      
      double double2 = MathArrays.linearCombination(952.814378704058, 147.6, (-1746.58), 4.921795417060414, 2.925681159240093E-8, (-1746.58));
      assertEquals(132039.09280609022, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 2875L;
      longArray0[1] = 4519L;
      longArray0[2] = 0L;
      longArray0[3] = 2875L;
      longArray0[4] = (-202L);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 4519L;
      floatArray0[3] = (float) 2875L;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 4519.0F, 0.0F, 2875.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.linearCombination(1763.32686, (-92.05), 1.5898896097030129, 981.0551422, (-2784.1697), 3.834E-20, (-2784.1697), 0.7675435543060303);
      assertEquals((-162891.43959319964), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[][] doubleArray2 = new double[3][2];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 0.5463024377822876;
      doubleArray0[2] = 0.5463024377822876;
      doubleArray0[3] = 0.5463024377822876;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.5463024377822876, 0.5463024377822876}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-221.77);
      doubleArray0[1] = (-1717.81699);
      doubleArray0[2] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-221.77 > -1,717.817)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(boolean0);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      int int0 = 1171;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1171);
      assertEquals(3, intArray0.length);
      assertEquals(1171, intArray1.length);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 186.0;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(Double.NaN, Double.NaN, Double.NaN, Double.NaN, 961351.3042616275, (-2294.46));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 134.1551146167588;
      doubleArray1[1] = 134.1551146167588;
      doubleArray1[2] = 134.1551146167588;
      doubleArray1[3] = 134.1551146167588;
      doubleArray1[4] = 134.1551146167588;
      doubleArray1[5] = 134.1551146167588;
      doubleArray1[6] = 134.1551146167588;
      doubleArray1[7] = 134.1551146167588;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1);
      assertEquals(8, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588, 134.1551146167588}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(134.1551146167588, 2869.8059655104375, 134.1551146167588, 2181.2347, 0.25, 134.1551146167588, 0.9921976327896118, (-3261.955));
      assertEquals(674419.9741648503, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2047L;
      longArray0[1] = 1146L;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3341.875929701;
      doubleArray0[1] = (-1594.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3341.875929701, (-1594.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(0.0, 3341.875929701, 1850.5949659128, 5.650007086920087E-9, (-1594.0), 1408.0);
      assertEquals((-2244351.999989544), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3341.875929701, (-1594.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3341.875929701, (-1594.0), Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3341.875929701, (-1594.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = 149.342288748;
      double[] doubleArray1 = MathArrays.scale(149.342288748, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 149.342288748}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 22303.119208491004}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 6L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = (-1355L);
      longArray2[6] = (-906L);
      longArray2[7] = (-2693L);
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,355 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double0 = MathArrays.linearCombination(134.1551146167588, 17997.59477783569, 134.1551146167588, 17997.59477783569, 1046.414323, 17997.59477783569);
      assertEquals(2.366187973557032E7, double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(31171.016518440145, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, 0.036, (-835.10310960446));
      assertEquals((-30.063711945760556), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-835.10310960446);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-835.10310960446)}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 2602.48;
      doubleArray0[3] = (-397.50316);
      double double0 = MathArrays.linearCombination(2657.591211, 1.34217729E8, (-397.50316), (-2304.712328781292), (-1488.230137749), (-330.22));
      assertEquals(3.5669726452456946E11, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 2602.48, 0.0, (-397.50316), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 6772902.1504, 0.0, 158008.76220998558, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(44);
      assertEquals(44, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger((String) null, 980);
      assertEquals(980, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer3;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 2602.48, 0.0, (-397.50316), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5204.96, 0.0, (-795.00632), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 44;
      intArray0[2] = 980;
      intArray0[3] = (-1);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {3, 44, 980, (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = MathArrays.linearCombination(952.814378704058, 3.141592653589793, 3.141592653589793, 952.814378704058, 952.814378704058, 6.283185307179586);
      assertEquals(11973.418609485567, double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      MathArrays.scaleInPlace(186.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1168.672467135403, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1168.672467135403, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(897.7724697666, 9.313225746154785E-10, 1.0, (-1.0), (-1.0), (-1453.254394117163));
      assertEquals(1452.2543949532787, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1168.672467135403, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1365795.3354403495, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1168.672467135403, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[1][4];
      doubleArray3[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray3);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 1168.672467135403}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 134.1551146167588, 134.1551146167588}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 134.1551146167588, 134.1551146167588}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 17997.59477783569, 35995.18955567138, 17997.59477783569}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      double double1 = MathArrays.linearCombination(2669.4, 0.0, (-698.6300048828125), 134.1551146167588, 134.1551146167588, 134.1551146167588);
      assertEquals((-75727.19360192478), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.POSITIVE_INFINITY;
      doubleArray2[1] = Double.NaN;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.POSITIVE_INFINITY;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = Double.NaN;
      MathArrays.checkPositive(doubleArray2);
      assertEquals(8, doubleArray2.length);
      
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = Double.POSITIVE_INFINITY;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.ebeAdd(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 404096.5281785161;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 404096.5281785161;
      doubleArray1[1] = 404096.5281785161;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 404096.5281785161;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3341.875929701;
      doubleArray0[1] = (-1594.0);
      doubleArray0[2] = 0.0012959999999999998;
      doubleArray0[3] = 5.01380258169346E12;
      doubleArray0[4] = (-221.77);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1176.5F;
      floatArray0[1] = (-3540.2F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1685.8F;
      floatArray0[1] = 769.779F;
      floatArray0[2] = (-698.63F);
      floatArray0[3] = 1287.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3379), (-3379));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][2];
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(17997.59477783569, 17997.59477783569, (-20.0), 0.0, 17997.59477783569, 0.0);
      assertEquals(3.2391341778717846E8, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 81.91354116;
      double double1 = (-2898.511077686841);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 81.91354116;
      doubleArray1[1] = 81.91354116;
      doubleArray1[2] = 81.91354116;
      doubleArray1[3] = (-2898.511077686841);
      doubleArray1[4] = 81.91354116;
      doubleArray1[5] = (-2898.511077686841);
      doubleArray1[6] = 81.91354116;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      MathArrays.linearCombination(3.834E-20, 1.34217729E8, 3.834E-20, 1046.4501122206566);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1046.4501122206566;
      doubleArray0[2] = 1046.4501122206566;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1046.4501122206566;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-16));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2878.77;
      double double0 = 1.0;
      double double1 = 460.2718019;
      MathArrays.linearCombination(2878.77, 1.0, 2878.77, 460.2718019);
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer(11);
      Integer integer2 = new Integer(11);
      Integer integer3 = new Integer(11);
      Integer integer4 = new Integer(11);
      Integer integer5 = new Integer(2924);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 4016;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[2] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, 0.036, (-835.10310960446));
      assertEquals((-30.063711945760556), double0, 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = 0.036;
      doubleArray0[3] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (-835.10310960446);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 16);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertEquals(15, doubleArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1685.8F;
      floatArray0[1] = 769.779F;
      floatArray0[2] = (-698.63F);
      floatArray0[3] = 1287.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 769.779F;
      floatArray0[7] = 3685.84F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1685.8F;
      floatArray1[1] = (-698.63F);
      floatArray1[2] = 1287.0F;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-698.63F);
      doubleArray0[1] = (double) 1685.8F;
      doubleArray0[2] = (double) 769.779F;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -698.63 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = (-1738.5167205702);
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 100.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1.0));
      assertArrayEquals(new double[] {0.01251159887327665, (-1.0875811921129366), 0.01251159887327665, 0.0, 0.06255799436638325, 0.0, 0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 938.885F;
      floatArray0[1] = -0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1162.5978F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 313.5F;
      floatArray0[7] = (-3441.421F);
      floatArray0[8] = 0.5F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 58);
      assertEquals(58, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-296.3656592122), 0.0, 0.0, (-296.3656592122));
      int[] intArray0 = new int[4];
      int int0 = (-1812);
      intArray0[0] = (-1812);
      int int1 = 0;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.linearCombination(17997.59477783569, 17997.59477783569, (-20.0), 17997.59477783569, 17997.59477783569, 0.0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 3.2355346589162177E8;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 134.1551146167588;
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer(980);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(44);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(45);
      integerArray0[2] = integer2;
      Integer integer3 = Integer.getInteger((String) null, (int) integerArray0[0]);
      integerArray0[3] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3685.84F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-698.63F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.linearCombination(Double.NaN, 1.8014398509481984E16, Double.NaN, (-3871.87323626719));
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3685.84F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-698.63F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3685.84F;
      doubleArray0[1] = (double) (-698.63F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-698.63F);
      doubleArray0[5] = (double) 3685.84F;
      doubleArray0[6] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.scale(925.8929838, doubleArray0);
      assertArrayEquals(new double[] {3412693.476786705, (-646856.6197931558), 0.0, 0.0, (-646856.6197931558), 3412693.476786705, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-92.05), (-442.30864843), 981.0551422, 2227.78584);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2226295.265140328;
      doubleArray0[1] = 2226295.265140328;
      doubleArray0[2] = 379.174586;
      doubleArray0[3] = (-442.30864843);
      doubleArray0[4] = (-442.30864843);
      doubleArray0[5] = 2226295.265140328;
      doubleArray0[6] = 0.0;
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-27.637019199);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1, 1597);
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 2961.625402842;
      doubleArray3[8] = 0.0;
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray3);
      MathArrays.equals(doubleArray2, doubleArray2);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 1.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace((-144.262), doubleArray4);
      assertArrayEquals(new double[] {(-144.262), Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, (-144.262), Double.NaN}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = 789.97;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(789.97, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2878.77;
      doubleArray0[1] = (-203.571988048392);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      doubleArray0[2] = 134.1551146167588;
      MathArrays.scaleInPlace(134.1551146167588, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(17997.59477783569, 17997.59477783569, (-20.0), 17997.59477783569, 17997.59477783569, 0.0);
      assertEquals(3.2355346589162177E8, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {17997.59477783569, 17997.59477783569, 17997.59477783569}, doubleArray0, 0.01);
      
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 3.2355346589162177E8;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 134.1551146167588;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      long[] longArray1 = new long[5];
      longArray1[0] = 2899L;
      longArray1[1] = 0L;
      longArray1[2] = (-1L);
      longArray1[3] = 0L;
      longArray1[4] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 2899L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      longArray3[0] = 0L;
      longArray3[1] = (-1L);
      longArray3[2] = 0L;
      longArray3[3] = 2899L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 0L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1682.0);
      doubleArray0[2] = (-1645.4962852);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1280.1;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-120.3);
      doubleArray0[8] = 560.8768;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 2705.6073;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6.283185307179586;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 6.283185307179586;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.scaleInPlace((-92.05), doubleArray0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1.5898896097030129;
      doubleArray2[1] = 1.5898896097030129;
      doubleArray2[2] = (-92.05);
      doubleArray2[3] = 1.5898896097030129;
      doubleArray2[4] = 1.5898896097030129;
      doubleArray2[5] = (-92.05);
      doubleArray2[6] = (-92.05);
      MathArrays.distance1(doubleArray0, doubleArray2);
      MathArrays.checkOrder(doubleArray1);
      MathArrays.scaleInPlace(1.5898896097030129, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 735.0;
      doubleArray0[2] = 735.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[8][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2091;
      intArray0[1] = 14;
      intArray0[2] = (-1225);
      intArray0[3] = 13;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, (-296.3656592122), 0.0, 0.0, (-296.3656592122));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1812);
      intArray0[1] = 0;
      intArray0[2] = 134217729;
      int int0 = 0;
      intArray0[3] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-221.77);
      doubleArray0[1] = (-1717.81699);
      doubleArray0[2] = -0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not decreasing (-1,717.817 < -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MathArrays.linearCombination(952.814378704058, 3.141592653589793, 3.141592653589793, 952.814378704058, 952.814378704058, 6.283185307179586);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 11973.418609485567;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double double0 = 0.0;
      MathArrays.linearCombination(0.0, Double.NaN, 0.0, Double.NaN, 952.814378704058, 11973.418609485567);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[][] longArray0 = new long[0][9];
      MathArrays.checkRectangular(longArray0);
      double double0 = MathArrays.linearCombination(3.834E-20, 1.34217729E8, 3.834E-20, 1046.4501122206566);
      assertEquals(5.145947850757302E-12, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 1046.4501122206566;
      doubleArray0[2] = 1046.4501122206566;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 1046.4501122206566;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray1, 16);
      assertArrayEquals(new double[] {1.4699556E-39, 8.024179460507994E-17, 1095057.8373666247, 2190115.6747332495, 1095057.8373666247, 2190115.6747332495, 2190115.6747332495, 8.024179460507994E-17, 1095057.8373666247}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[][] longArray0 = new long[3][9];
      long[] longArray1 = new long[6];
      longArray1[0] = 2875L;
      longArray1[1] = 4519L;
      longArray1[2] = 0L;
      longArray1[3] = 2033L;
      longArray1[4] = (-202L);
      longArray1[5] = (-1158L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 2033L;
      longArray2[3] = (-1158L);
      longArray2[4] = 2033L;
      longArray2[5] = 2033L;
      longArray2[6] = 2875L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 638.51033;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-232.7852735323);
      doubleArray0[5] = 41.62550044405624;
      double double0 = -0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = (-2587.19);
      doubleArray0[8] = 427.80828477;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (638.51 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3215);
      MathArrays.distance1(intArray0, intArray0);
      double double0 = MathArrays.linearCombination((-1.0), 3.32, 1915.6007227300286, (-2870.0), (double) 0, 0.0, 0.0, 0.0);
      assertEquals((-5497777.394235182), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 32.05637474873206;
      doubleArray0[2] = (-857.60196677);
      doubleArray0[3] = (-650.3676147460938);
      doubleArray0[4] = 2.092571258544922;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 32.05637474873206, (-857.60196677), (-650.3676147460938), 2.092571258544922}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 32.05637474873206;
      doubleArray1[1] = 2.092571258544922;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MathArrays.linearCombination(952.814378704058, 952.814378704058, 952.814378704058, 952.814378704058, 952.814378704058, 6.283185307179586);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 1821697.1898351428;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(952.814378704058, Double.NaN, 952.814378704058, 952.814378704058, 952.814378704058, Double.NaN);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-698.63F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int int0 = 1738;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 1738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-635.6858722502145);
      doubleArray0[1] = 3284.973636728228;
      doubleArray0[2] = (-635.6858722502145);
      doubleArray0[3] = (-635.6858722502145);
      doubleArray0[4] = (-635.6858722502145);
      double[] doubleArray1 = MathArrays.scale((-635.6858722502145), doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray1);
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.scale(4038.66976, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-635.6858722502145));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 134.1551146167588;
      doubleArray0[1] = 134.1551146167588;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1989), (-1528));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 81.91354116;
      doubleArray0[1] = (-2898.511077686841);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray2);
      long[] longArray0 = new long[3];
      longArray0[0] = 606L;
      longArray0[1] = 1168L;
      longArray0[2] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-816.72762326102);
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-1187);
      int int1 = (-1852);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1187), (-1852));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1924;
      intArray0[1] = (-1249);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {1924, (-1249)}, intArray1);
      assertNotSame(intArray1, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1924;
      doubleArray0[1] = (double) 1924;
      doubleArray0[2] = (double) 1924;
      doubleArray0[3] = (double) (-1249);
      doubleArray0[4] = (double) (-1249);
      doubleArray0[5] = (double) 1924;
      doubleArray0[6] = (double) (-1249);
      doubleArray0[7] = (-2514.0);
      doubleArray0[8] = (double) (-1249);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1924.0);
      assertArrayEquals(new double[] {19902.021505376346, 19902.021505376346, 19902.021505376346, (-12919.763440860215), (-12919.763440860215), 19902.021505376346, (-12919.763440860215), (-26005.032258064515), (-12919.763440860215)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 2602.48;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-397.50316);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3102.420091758691);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-49.9196);
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-397.50316);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-397.50316);
      doubleArray1[6] = 82.0;
      doubleArray1[7] = 1.304E19;
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][1];
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1685.8F;
      floatArray0[1] = 769.779F;
      floatArray0[2] = (-698.63F);
      floatArray0[3] = 1287.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3685.84F;
      float[] floatArray1 = new float[3];
      floatArray1[0] = 1685.8F;
      floatArray1[1] = (-698.63F);
      floatArray1[2] = 1287.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-3286.3197705677);
      doubleArray0[4] = 242.81703282986;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 20.0, (-3286.3197705677), 242.81703282986}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      MathArrays.distanceInf(intArray1, intArray0);
      long[][] longArray0 = new long[7][3];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 0;
      longArray1[4] = (long) 0;
      longArray1[5] = (long) 0;
      longArray1[6] = (long) 0;
      longArray1[7] = (long) 0;
      longArray1[8] = (long) 0;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (-1L);
      longArray2[5] = (long) 0;
      longArray2[6] = 818L;
      longArray2[7] = (long) 0;
      longArray2[8] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 0;
      longArray3[1] = (-1L);
      longArray3[2] = (-1L);
      longArray3[3] = (-1L);
      longArray3[4] = 818L;
      longArray3[5] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (long) 0;
      longArray5[1] = 818L;
      longArray5[2] = 818L;
      longArray5[3] = (-1L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[9];
      longArray6[0] = (-1L);
      longArray6[1] = 818L;
      longArray6[2] = (long) 0;
      longArray6[3] = (-1L);
      longArray6[4] = (-1L);
      longArray6[5] = (-1L);
      longArray6[6] = (long) 0;
      longArray6[7] = 0L;
      longArray6[8] = (-1L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = (-1738.5167205702);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 100.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1183.471877309443;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1738.5167205702);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1738.5167205702);
      doubleArray1[5] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 68;
      doubleArray0[1] = (double) 68;
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-3379), 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 92;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 92, 92);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, 735.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1265.3620039389607);
      doubleArray0[4] = 1097.217725768;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2, 0);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {Double.NaN, (-1.0), 1.0, (-1265.3620039389607), 1097.217725768, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-685);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 980.485239186;
      doubleArray0[1] = 980.485239186;
      doubleArray0[2] = 980.485239186;
      doubleArray0[3] = 980.485239186;
      doubleArray0[4] = 980.485239186;
      doubleArray0[5] = 980.485239186;
      doubleArray0[6] = 980.485239186;
      MathArrays.scaleInPlace(980.485239186, doubleArray0);
      double double0 = MathArrays.linearCombination(961351.3042616275, 332.3172522422262, 961351.3042616275, (-3151.06029032003), 332.3172522422262, 0.0, 961351.3042616275, 961351.3042616275);
      assertEquals(9.214865279094978E11, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {961351.3042616275, 961351.3042616275, 961351.3042616275, 961351.3042616275, 961351.3042616275, 961351.3042616275, 961351.3042616275}, doubleArray0, 0.01);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 2960;
      intArray0[2] = 426;
      intArray0[3] = 1435;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2960);
      assertEquals(2960, intArray1.length);
  }
}
