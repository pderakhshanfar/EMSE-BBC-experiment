/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:24:36 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1647.94151;
      doubleArray0[1] = 0.24740394949913025;
      doubleArray0[2] = 4029.46955553;
      doubleArray0[3] = 2410.2;
      doubleArray0[4] = 8.0E298;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-17.71605055189));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1647.94151, 0.24740394949913025, 4029.46955553, 2410.2, 8.0E298}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.6493768872147425E-295), (-5.47877609507979E-299), (-8.9232857928839E-295), (-5.337403130020659E-295), (-17.71605055189)}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1647.94151, 0.24740394949913025, 4029.46955553, 2410.2, 8.0E298}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.6493768872147425E-295), (-5.47877609507979E-299), (-8.9232857928839E-295), (-5.337403130020659E-295), (-17.71605055189)}, doubleArray1, 0.01);
      assertEquals(17.71605055189, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement1 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1394.294F);
      floatArray0[2] = 3007.1F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1034.062F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-42.0F);
      floatArray0[7] = 333.4F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1394.294F), 3007.1F, 0.0F, 1034.062F, 0.0F, (-42.0F), 333.4F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-416));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 155.464599;
      doubleArray0[1] = 155.464599;
      doubleArray0[2] = 155.464599;
      MathArrays.scaleInPlace(155.464599, doubleArray0);
      assertArrayEquals(new double[] {24169.2415422308, 24169.2415422308, 24169.2415422308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(260.0, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(415.02563, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertEquals(1.0884212126202509E7, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.8017799073083269E18, 6.8017799073083269E18, 6.8017799073083269E18}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(155.464599, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.8017799073083269E18, 6.8017799073083269E18, 6.8017799073083269E18}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0574359857759461E21, 1.0574359857759461E21, 1.0574359857759461E21}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(252);
      assertNotNull(integer0);
      assertEquals(252, (int)integer0);
      
      Pair<String, Integer> pair0 = new Pair<String, Integer>("must have n >= 0 for binomial coefficient (n, k), got n = {0}", integer0);
      assertNotNull(pair0);
      
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 260;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 260);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 623.50498;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = (-0.12502530217170715);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1574.805301367557);
      doubleArray0[6] = 245.930442182;
      doubleArray0[7] = (-7.877917738262007E-9);
      doubleArray0[8] = 669.018069;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.86285714285714278E18, 623.50498, 1.304E19, (-0.12502530217170715), 0.0, (-1574.805301367557), 245.930442182, (-7.877917738262007E-9), 669.018069}, doubleArray0, 0.01);
      assertEquals(1.317238918096083E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 134217729;
      intArray0[1] = 2147483481;
      intArray0[2] = 134217729;
      intArray0[3] = (-2143416443);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483481;
      intArray1[1] = 134217729;
      intArray1[2] = 134217729;
      intArray1[3] = (-2143416443);
      intArray1[4] = 134217729;
      intArray1[5] = 134217729;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 2147483481, 134217729, (-2143416443)}, intArray0);
      assertArrayEquals(new int[] {2147483481, 134217729, 134217729, (-2143416443), 134217729, 134217729}, intArray1);
      assertEquals((-268435792), int0);
      assertEquals(4, intArray0.length);
      assertEquals(6, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 155.464599;
      doubleArray0[1] = 155.464599;
      doubleArray0[2] = 155.464599;
      MathArrays.scaleInPlace(155.464599, doubleArray0);
      assertArrayEquals(new double[] {24169.2415422308, 24169.2415422308, 24169.2415422308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(260.0, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(415.02563, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertEquals(1.0884212126202509E7, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.8017799073083269E18, 6.8017799073083269E18, 6.8017799073083269E18}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.scale(155.464599, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.8017799073083269E18, 6.8017799073083269E18, 6.8017799073083269E18}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0574359857759461E21, 1.0574359857759461E21, 1.0574359857759461E21}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Integer>> field0 = (Field<Pair<String, Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<String, Integer>[] pairArray0 = MathArrays.buildArray(field0, 260);
      assertNotNull(pairArray0);
      assertEquals(260, pairArray0.length);
      
      double[] doubleArray4 = MathArrays.convolve(doubleArray3, doubleArray0);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {6284002.800980008, 6284002.800980008, 6284002.800980008}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.6080222213984923E9, 2.6080222213984923E9, 2.6080222213984923E9}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.8017799073083269E18, 6.8017799073083269E18, 6.8017799073083269E18}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {1.0574359857759461E21, 1.0574359857759461E21, 1.0574359857759461E21}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {6.644930696473102E27, 1.3289861392946203E28, 1.9934792089419305E28, 1.3289861392946203E28, 6.644930696473102E27}, doubleArray4, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertEquals(5, doubleArray4.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 260;
      intArray0[1] = 0;
      intArray0[2] = 260;
      intArray0[3] = 260;
      intArray0[4] = 260;
      intArray0[5] = 260;
      intArray0[6] = 260;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {260, 0, 260, 260, 260, 260, 260}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {260, 0, 260, 260, 260, 260, 260}, intArray0);
      assertEquals(0, int1);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      
      long[][] longArray0 = new long[9][0];
      long[] longArray1 = new long[7];
      longArray1[0] = (-4035746434778044925L);
      longArray1[1] = (-4262L);
      longArray1[2] = 1L;
      longArray1[3] = 1742L;
      longArray1[4] = 1L;
      longArray1[5] = (-970L);
      longArray1[6] = 1494L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1494L;
      longArray2[1] = (-4262L);
      longArray2[2] = (-970L);
      longArray2[3] = (-4035746434778044925L);
      longArray2[4] = (-4035746434778044925L);
      longArray2[5] = (-4262L);
      longArray2[6] = (-4267615245585081135L);
      longArray2[7] = 3703L;
      longArray2[8] = (-4035746434778044925L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1742L;
      longArray3[1] = (-4267615245585081135L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1742L;
      longArray4[1] = 1L;
      longArray4[2] = (-4262L);
      longArray4[3] = (-7278142539171889152L);
      longArray4[4] = (-928L);
      longArray4[5] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray5[0] = 3703L;
      longArray5[1] = (-928L);
      longArray5[2] = 1L;
      longArray5[3] = (-928L);
      longArray5[4] = (-4267615245585081135L);
      longArray5[5] = (-4267615245585081135L);
      longArray5[6] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (-3199L);
      longArray7[1] = 1L;
      longArray7[2] = (-2209L);
      longArray7[3] = (-928L);
      longArray7[4] = 0L;
      longArray7[5] = 4459L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[1];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray5));
      
      longArray8[0] = 1494L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[7];
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray5));
      
      longArray9[0] = (-928L);
      longArray9[1] = 4459L;
      longArray9[2] = 1L;
      longArray9[3] = (-970L);
      longArray9[4] = 4459L;
      longArray9[5] = 0L;
      longArray9[6] = 3703L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2445.671F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1486.3623F;
      floatArray0[7] = 1429.899F;
      floatArray0[8] = (-136.86F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3396.6F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2445.671F;
      floatArray1[3] = (-136.86F);
      floatArray1[4] = 0.0F;
      floatArray1[5] = 1486.3623F;
      floatArray1[6] = 0.0F;
      floatArray1[8] = 1429.899F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2445.671F, 0.0F, 0.0F, 1486.3623F, 1429.899F, (-136.86F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3396.6F), 0.0F, 2445.671F, (-136.86F), 0.0F, 1486.3623F, 0.0F, 0.0F, 1429.899F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.3040000000134224E19;
      doubleArray0[1] = 1.86285714285714278E18;
      doubleArray0[2] = 1649.89039797;
      doubleArray0[3] = 2.17333333333333325E18;
      doubleArray0[4] = 1.3040000000134224E19;
      doubleArray0[5] = 2392.678;
      doubleArray0[6] = 6.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.3040000000134224E19, 1.86285714285714278E18, 1649.89039797, 2.17333333333333325E18, 1.3040000000134224E19, 2392.678, 6.0}, doubleArray0, 0.01);
      assertEquals(1.866217603923703E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2146513579;
      intArray0[1] = 0;
      intArray0[2] = (-809);
      intArray0[3] = 6;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {2146513579, 0, (-809), 6}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1703.4941F;
      floatArray0[2] = 248.94524F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1703.4941F, 248.94524F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2146253703;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146253703, 2146253703);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2196.988916333156;
      doubleArray0[1] = (-670.8646135);
      doubleArray0[2] = (-646.8046411167);
      doubleArray0[3] = (-790.9962441810173);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = 1024.0;
      doubleArray0[6] = 313.174;
      doubleArray0[7] = 119.0;
      doubleArray0[8] = 334.35;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][5];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 27, (-2420));
      assertNotNull(fieldElementArray0);
      assertEquals(27, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.9986783938944604E-8);
      doubleArray0[1] = (-2850.5);
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 1109.22;
      doubleArray0[4] = 2590.178199;
      doubleArray0[5] = 497.363396;
      doubleArray0[6] = (-2507.206);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3.9986783938944604E-8), (-2850.5), 1.34217729E8, 1109.22, 2590.178199, 497.363396, (-2507.206)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 2;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-970.543624);
      doubleArray0[1] = 2360.66233069;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1229.77704;
      doubleArray0[4] = 635.15773789176;
      doubleArray0[5] = 0.11113807559013367;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 133);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-970.543624), 2360.66233069, 1.0, 1229.77704, 635.15773789176, 0.11113807559013367}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(133, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 304;
      intArray0[1] = 123;
      intArray0[2] = 123;
      intArray0[3] = (-897);
      intArray0[4] = (-3508);
      intArray0[5] = (-2627);
      intArray0[6] = 2;
      intArray0[7] = (-2145624417);
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3508);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 156.0;
      doubleArray0[2] = 1074.02;
      doubleArray0[3] = (-817.0372822303609);
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-1866.9);
      doubleArray0[6] = 1057.68;
      doubleArray0[7] = (-1070.48028169);
      doubleArray0[8] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0E-5, 156.0, 1074.02, (-817.0372822303609), 3.834E-20, (-1866.9), 1057.68, (-1070.48028169), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0000000000000002E-10, 24336.0, 1153518.9604, 667549.9205543745, 1.4699556E-39, 3485315.6100000003, 1118686.9824, 1145928.033487102, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0E-5, 156.0, 1074.02, (-817.0372822303609), 3.834E-20, (-1866.9), 1057.68, (-1070.48028169), (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0000000000000002E-10, 24336.0, 1153518.9604, 667549.9205543745, 1.4699556E-39, 3485315.6100000003, 1118686.9824, 1145928.033487102, 1.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.scaleInPlace(3485315.6100000003, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {34.85315610000001, 5.437092351600001E8, 3.7432986714522004E9, (-2.8476327937094526E9), 1.336270004874E-13, (-6.506735712309001E9), 3.6863486143848004E9, (-3.730961635971355E9), (-3485315.6100000003)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {34.85315610000001, 5.437092351600001E8, 3.7432986714522004E9, (-2.8476327937094526E9), 1.336270004874E-13, (-6.506735712309001E9), 3.6863486143848004E9, (-3.730961635971355E9), (-3485315.6100000003)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0000000000000002E-10, 24336.0, 1153518.9604, 667549.9205543745, 1.4699556E-39, 3485315.6100000003, 1118686.9824, 1145928.033487102, 1.0}, doubleArray1, 0.01);
      assertEquals(4060647.4426086238, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 291);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(291, intArray1.length);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 1.7976931348623157E308;
      doubleArray0[5] = 1.7976931348623157E308;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2146253703, 2146253703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 89.0751722;
      doubleArray0[1] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {89.0751722, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7934.386302459652, 2.3230804909759998E21, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {89.0751722, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7934.386302459652, 2.3230804909759998E21, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(1.700416E38, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {89.0751722, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7934.386302459652, 2.3230804909759998E21, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {89.0751722, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {7934.386302459652, 2.3230804909759998E21, 1.700416E38}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.295448599665935E7, 5.396702967553292E42, 2.891414573056E76}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 188.47751406738;
      doubleArray0[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1305.0069866734664);
      doubleArray1[1] = (-1305.0069866734664);
      doubleArray1[2] = (-1305.0069866734664);
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 923.7756451189);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1305.0069866734664), (-1305.0069866734664), (-1305.0069866734664)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {307.9252150396333, 307.9252150396333, 307.9252150396333}, doubleArray2, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1305.0069866734664), (-1305.0069866734664), (-1305.0069866734664)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {307.9252150396333, 307.9252150396333, 307.9252150396333}, doubleArray2, 0.01);
      assertEquals((-1205533.670998953), double0, 0.01);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      float[] floatArray0 = new float[3];
      floatArray0[0] = 4560.06F;
      floatArray0[1] = 4560.06F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 4560.06F;
      floatArray1[2] = 4560.06F;
      floatArray1[3] = 4560.06F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {4560.06F, 4560.06F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 4560.06F, 4560.06F, 4560.06F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1002.7;
      doubleArray1[1] = (double) 4560.06F;
      doubleArray1[2] = (-2459.9942613835387);
      doubleArray1[3] = (double) 4560.06F;
      doubleArray1[4] = (double) 4560.06F;
      doubleArray1[5] = (double) 4560.06F;
      doubleArray1[6] = (double) 4560.06F;
      doubleArray1[7] = (double) 4560.06F;
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,459.994 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-1741.190810352), doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = -0.0F;
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, fieldElement0).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2, 2);
      assertNotNull(fieldElementArray0);
      assertEquals(2, fieldElementArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) -0.0F;
      doubleArray0[3] = (double) -0.0F;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) -0.0F;
      doubleArray2[1] = (-1112.5614145223572);
      doubleArray2[2] = 1.86285714285714278E18;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) -0.0F;
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, (-1112.5614145223572), 1.86285714285714278E18, 0.0, 2.0, -0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {-0.0, (-1112.5614145223572), 1.86285714285714278E18, 0.0, 2.0, -0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((-1476.0), -0.0, 0.0, -0.0, 0.0, 5.865827662008209E-8);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 920;
      intArray0[1] = 920;
      intArray0[2] = 920;
      intArray0[3] = 920;
      intArray0[4] = 203;
      intArray0[5] = 920;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 203;
      intArray1[1] = 203;
      intArray1[2] = 920;
      intArray1[3] = 920;
      intArray1[4] = 920;
      intArray1[5] = 203;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {920, 920, 920, 920, 203, 920}, intArray0);
      assertArrayEquals(new int[] {203, 203, 920, 920, 920, 203}, intArray1);
      assertEquals(2868, int0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2583.1F);
      floatArray0[1] = 1779.8265F;
      floatArray0[2] = -0.0F;
      floatArray0[3] = (-2000.5F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1127.9313F);
      floatArray0[7] = 0.0F;
      floatArray0[8] = (-2728.344F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 4365.095F;
      floatArray1[1] = -0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2583.1F), 1779.8265F, -0.0F, (-2000.5F), 1.0F, 1.0F, (-1127.9313F), 0.0F, (-2728.344F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {4365.095F, -0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-9223372036854775808L);
      longArray0[1] = 1L;
      longArray0[2] = (-1770L);
      longArray0[3] = (-1L);
      longArray0[4] = 4056L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 624.6562114148383;
      doubleArray1[1] = 624.6562114148383;
      doubleArray1[2] = 2832.229469566729;
      doubleArray1[3] = 1282.0;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 3.834E-20;
      doubleArray1[6] = (-2861.586624);
      doubleArray1[7] = 575.0807349471926;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {624.6562114148383, 624.6562114148383, 2832.229469566729, 1282.0, 3.834E-20, 3.834E-20, (-2861.586624), 575.0807349471926}, doubleArray1, 0.01);
      assertEquals(2966.8020717938894, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 624.6562114148383;
      doubleArray2[1] = 2966.8020717938894;
      doubleArray2[2] = 575.0807349471926;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 1282.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {624.6562114148383, 2966.8020717938894, 575.0807349471926, 3.834E-20, 0.0, 0.0, 1282.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[][] doubleArray3 = new double[3][1];
      doubleArray3[0] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      MathArrays.sortInPlace(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 927
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = (-3176);
      intArray0[3] = (-3176);
      intArray0[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 12, (-3176), (-3176), 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1589);
      intArray1[1] = 0;
      intArray1[2] = 12;
      intArray1[3] = 12;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      intArray1[7] = 12;
      intArray1[8] = 12;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = null;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-3226.4F);
      floatArray0[1] = (-1.0F);
      float float0 = 811.78F;
      floatArray0[2] = 811.78F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-3226.4F), (-1.0F), 811.78F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-1312.344), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1371.1972526, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = doubleArray1[0];
      Double double3 = Double.valueOf(0.0);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[2] = double3;
      Double double4 = new Double((double) doubleArray1[2]);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[3] = double4;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[3];
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = doubleArray1[0];
      Double double3 = Double.valueOf(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[2] = double3;
      Double double4 = new Double((double) doubleArray1[2]);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[3] = double4;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[7][6];
      doubleArray2[0] = null;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
      doubleArray2[3] = null;
      doubleArray2[4] = doubleArray0;
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) doubleArray1[3];
      doubleArray3[1] = (double) doubleArray1[3];
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) doubleArray1[2];
      doubleArray3[4] = (double) doubleArray1[0];
      doubleArray2[5] = doubleArray3;
      doubleArray2[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 638L;
      double[][] doubleArray1 = new double[9][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 638L;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-20.882043116989);
      doubleArray2[3] = (double) 638L;
      doubleArray2[4] = (double) 638L;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = (double) 638L;
      doubleArray2[7] = (double) 638L;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = null;
      doubleArray1[7] = null;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3.9986783938944604E-8);
      doubleArray0[1] = 2233.46139;
      doubleArray0[2] = (-2832.229469566729);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 1.80143987807663E16;
      doubleArray0[6] = 2.608E18;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-3275.5073);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-3.9986783938944604E-8), 2233.46139, (-2832.229469566729), 0.0, 1.304E19, 1.80143987807663E16, 2.608E18, (-1.0), (-3275.5073)}, doubleArray0, 0.01);
      assertEquals(1.329825509300237E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-3.9986783938944604E-8), 2233.46139, (-2832.229469566729), 0.0, 1.304E19, 1.80143987807663E16, 2.608E18, (-1.0), (-3275.5073)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2145915012;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1711);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2145915012}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1711, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1483.323477063);
      doubleArray0[1] = 1538.5384584;
      doubleArray0[2] = 8.7589485664;
      doubleArray0[3] = (-69.7);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1483.323477063), 1538.5384584, 8.7589485664, (-69.7)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1483.323477063), 1538.5384584, 8.7589485664, (-69.7)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2200248.537606268, (-4564300.4314180715), 2341115.8798899925, 233727.25115169008, (-214395.54192097118), (-1220.9974301561601), 4858.09}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = doubleArray1[0];
      Double double3 = Double.valueOf(0.0);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[2] = double3;
      Double double4 = new Double((double) doubleArray1[2]);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[3] = double4;
      double double5 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 178.9719852547;
      doubleArray3[1] = (double) doubleArray1[3];
      doubleArray3[2] = (double) doubleArray1[2];
      doubleArray3[3] = (double) doubleArray1[2];
      doubleArray3[4] = 0.0;
      MathArrays.scaleInPlace((double) doubleArray1[0], doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {32030.971506008555, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1984.42;
      doubleArray0[1] = 1984.42;
      doubleArray0[0] = 1984.42;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1984.42, 1984.42, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3937922.7364000003, 3937922.7364000003, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = 6748.6;
      double double1 = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[1];
      long[] longArray1 = new long[0];
      assertFalse(longArray1.equals((Object)longArray0));
      
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray0));
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 638L;
      longArray2[1] = 638L;
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1738567.0085755803;
      doubleArray1[1] = (double) 638L;
      doubleArray1[2] = (double) 0L;
      doubleArray1[3] = (double) 638L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1738567.0085755803, 638.0, 0.0, 638.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 0);
      assertNotNull(fieldElementArray0);
      assertEquals(0, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-6268.411F);
      floatArray0[1] = 1506.876F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1332.33F);
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-6268.411F), 1506.876F, 0.0F, (-1332.33F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.scale(1.5874010519681994, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.5F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-5579.078F);
      floatArray0[5] = (-1097.48F);
      floatArray0[6] = 365.76328F;
      floatArray0[7] = (-106.314316F);
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-106.314316F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 365.76328F;
      floatArray1[4] = 0.5F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = (-3147.4F);
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {1.0F, (-106.314316F), 0.0F, 365.76328F, 0.5F, 1.0F, 1.0F, 0.0F, (-3147.4F)}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 1.0F, 0.5F, 0.0F, (-5579.078F), (-1097.48F), 365.76328F, (-106.314316F), 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(9, floatArray1.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = 2707778.7156075262;
      doubleArray0[2] = (double) -0.0F;
      doubleArray0[3] = (double) -0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(1.801439877874554E16, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4.8779005587553385E22, -0.0, -0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {-0.0, 2707778.7156075262, -0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 4.8779005587553385E22, -0.0, -0.0}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      Double double3 = new Double(1193718.3336025835);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(1193718.3336025835, (double)double3, 0.01);
      
      Double double4 = Double.valueOf(0.0);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      
      Double double5 = new Double(0.0);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double5;
      doubleArray1[1] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray1.length);
      
      double double6 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[0];
      doubleArray2[1] = 0.0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1984.42;
      doubleArray0[1] = 1984.42;
      doubleArray0[2] = 1984.42;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1984.42;
      doubleArray1[1] = 1984.42;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) -0.0F;
      doubleArray0[1] = (double) -0.0F;
      doubleArray0[2] = (double) -0.0F;
      doubleArray0[3] = (double) -0.0F;
      doubleArray0[4] = (double) -0.0F;
      doubleArray0[5] = (double) -0.0F;
      doubleArray0[6] = (double) -0.0F;
      doubleArray0[7] = 2132520.893954509;
      doubleArray0[8] = (double) -0.0F;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2132520.893954509, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.547645363152538E12, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2132520.893954509, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.547645363152538E12, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 2132520.893954509;
      doubleArray2[1] = (double) -0.0F;
      doubleArray2[2] = (double) -0.0F;
      doubleArray2[3] = 2132520.893954509;
      doubleArray2[4] = (double) -0.0F;
      doubleArray2[5] = (double) -0.0F;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = -0.0F;
      floatArray0[1] = -0.0F;
      floatArray0[2] = (-3648.093F);
      floatArray0[3] = -0.0F;
      floatArray0[4] = -0.0F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3648.093F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = -0.0F;
      floatArray1[3] = (-3648.093F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {-0.0F, -0.0F, (-3648.093F), -0.0F, -0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3648.093F), (-1.0F), -0.0F, (-3648.093F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3648.093F);
      doubleArray0[1] = (double) (-3648.093F);
      doubleArray0[2] = (double) (-3648.093F);
      doubleArray0[3] = 2101.7834964016;
      doubleArray0[4] = (double) (-3648.093F);
      doubleArray0[5] = (double) -0.0F;
      doubleArray0[6] = (double) -0.0F;
      doubleArray0[7] = 1.00307692307692314E18;
      doubleArray0[8] = (double) -0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 776.0303899228825);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-2.8223469025904694E-12), (-2.8223469025904694E-12), (-2.8223469025904694E-12), 1.6260446519323952E-12, (-2.8223469025904694E-12), -0.0, -0.0, 776.0303899228921, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3648.093017578125), (-3648.093017578125), (-3648.093017578125), 2101.7834964016, (-3648.093017578125), -0.0, -0.0, 1.00307692307692314E18, -0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-2.8223469025904694E-12), (-2.8223469025904694E-12), (-2.8223469025904694E-12), 1.6260446519323952E-12, (-2.8223469025904694E-12), -0.0, -0.0, 776.0303899228921, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3648.093017578125), (-3648.093017578125), (-3648.093017578125), 2101.7834964016, (-3648.093017578125), -0.0, -0.0, 1.00307692307692314E18, -0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray1.length);
      assertEquals(17, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      double double1 = new Double(0.0);
      assertEquals(0.0, double1, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 2369L;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 2369L;
      floatArray0[1] = (float) 2369L;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 2369L;
      floatArray1[1] = (float) 2369L;
      floatArray1[2] = (float) 2369L;
      floatArray1[3] = (float) 2369L;
      floatArray1[4] = (float) 2369L;
      floatArray1[5] = (float) 2369L;
      floatArray1[6] = (float) 2369L;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2369.0F, 2369.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {2369.0F, 2369.0F, 2369.0F, 2369.0F, 2369.0F, 2369.0F, 2369.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1984.42;
      doubleArray0[1] = 1984.42;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1984.42, 1984.42, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.24665327F;
      floatArray0[2] = 1567.4126F;
      floatArray0[3] = (-1.4E-45F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1567.4126F;
      floatArray1[1] = (-1.4E-45F);
      floatArray1[2] = 1567.4126F;
      floatArray1[3] = 0.24665327F;
      floatArray1[4] = 0.24665327F;
      floatArray1[5] = 1567.4126F;
      floatArray1[6] = Float.NEGATIVE_INFINITY;
      floatArray1[7] = Float.NEGATIVE_INFINITY;
      floatArray1[8] = 1567.4126F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.24665327F, 1567.4126F, (-1.4E-45F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1567.4126F, (-1.4E-45F), 1567.4126F, 0.24665327F, 0.24665327F, 1567.4126F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 1567.4126F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(9, floatArray1.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2004, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = new Double(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 358.0F;
      floatArray0[2] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 358.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = -0.0F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[1] = double3;
      Double double4 = Double.valueOf(0.0);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray1[2] = double4;
      Double double5 = new Double((double) doubleArray1[2]);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[3] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      double double6 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[9];
      intArray0[0] = 895;
      intArray0[1] = 32760;
      intArray0[2] = 915;
      intArray0[3] = 919;
      intArray0[4] = (-2399);
      intArray0[5] = 2147482437;
      intArray0[6] = 227;
      intArray0[7] = (-912);
      intArray0[8] = 3437;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {895, 32760, 915, 919, (-2399), 2147482437, 227, (-912), 3437}, intArray0);
      assertArrayEquals(new int[] {895, 32760, 915, 919, (-2399), 2147482437, 227, (-912), 3437}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      doubleArray1[1] = doubleArray1[0];
      Double double3 = Double.valueOf(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[2] = double3;
      Double double4 = new Double((double) doubleArray1[2]);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[0] = double4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      double double5 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double6 = MathArrays.linearCombination(1066260.4469772545, (double) doubleArray1[0], 0.0, 919.55995185, (-0.9159267523672375), 2262.5021336853);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals((-2072.2862315303223), double6, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = (Double) 188.47751406738;
      doubleArray0[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Double double1 = new Double(1886.97883606975);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(1886.97883606975, (double)double1, 0.01);
      
      Double double2 = new Double(1.34217729E8);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(1.34217729E8, (double)double2, 0.01);
      
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[2] = double3;
      doubleArray1[3] = (Double) 0.0;
      doubleArray1[4] = double1;
      Double double4 = new Double(1.34217729E8);
      assertNotNull(double4);
      assertEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals(1.34217729E8, (double)double4, 0.01);
      
      doubleArray1[5] = double4;
      doubleArray1[6] = double1;
      doubleArray1[7] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(8, doubleArray1.length);
      
      double double5 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double5, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(2, doubleArray0.length);
      
      Double double6 = new Double(1619.588960321);
      assertNotNull(double6);
      assertNotEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double3, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertEquals(1619.588960321, (double)double6, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 893.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 188.47751406738;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1305.0069866734664);
      doubleArray1[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertEquals(1331.9499922611958, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3570.7262);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-725.1766362854925), (-725.1766362854925), 5021.079472570985}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean3);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[1];
      doubleArray1[0] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-2324.89), 0.0, 1305.0069866734664, Double.NaN, Double.NaN, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      long[][] longArray0 = new long[8][7];
      long[] longArray1 = new long[8];
      longArray1[0] = 2147483647L;
      longArray1[1] = 2935890503282001226L;
      longArray1[2] = (-783L);
      longArray1[3] = 230L;
      longArray1[4] = 3668L;
      longArray1[5] = 940L;
      longArray1[6] = 638L;
      longArray1[7] = 1968L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 1190L;
      longArray2[2] = 230L;
      longArray2[3] = 940L;
      longArray2[4] = 1073741824L;
      longArray2[5] = 230L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 2147483647L;
      longArray3[1] = 927L;
      longArray3[2] = 3668L;
      longArray3[3] = 1417L;
      longArray3[4] = 0L;
      longArray3[5] = (-2670L);
      longArray3[6] = 1190L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-1L);
      longArray4[1] = 2147483647L;
      longArray4[2] = (-783L);
      longArray4[3] = 230L;
      longArray4[4] = 230L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[7];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = 230L;
      longArray5[1] = 1417L;
      longArray5[2] = 1190L;
      longArray5[3] = 927L;
      longArray5[4] = 927L;
      longArray5[5] = 927L;
      longArray5[6] = 927L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = (-2670L);
      longArray6[1] = 2935890503282001226L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      
      longArray8[0] = 1190L;
      longArray8[1] = 2935890503282001226L;
      longArray8[2] = 1968L;
      longArray8[3] = 1968L;
      longArray8[4] = 703L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1073741824L);
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f-ZJrV1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "v%";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) (-1073741824L);
      double[] doubleArray4 = MathArrays.convolve(doubleArray1, doubleArray3);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertArrayEquals(new double[] {0.0, (-1.073741824E9)}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(5, doubleArray4.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 2160.3F;
      floatArray0[1] = 188.313F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 453.8F;
      floatArray0[4] = 3427.5803F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2160.3F, 188.313F, (-1.0F), 453.8F, 3427.5803F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 188.47751406738;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1305.0069866734664);
      doubleArray1[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertEquals(1331.9499922611958, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      Double double1 = new Double(188.47751406738);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(188.47751406738, (double)double1, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.20308939853341107), (-0.20308939853341107), 1.406178797066822}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.20308939853341107), (-0.20308939853341107), 1.406178797066822}, doubleArray2, 0.01);
      assertEquals(1306.4131654705332, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1032.59888;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1032.59888, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 71;
      intArray0[2] = 10;
      intArray0[3] = (-2146146484);
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 71;
      intArray1[1] = (-2146146484);
      intArray1[2] = (-219);
      intArray1[3] = 71;
      intArray1[4] = (-2146146484);
      intArray1[5] = 1;
      intArray1[6] = 1;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 71, 10, (-2146146484)}, intArray0);
      assertArrayEquals(new int[] {71, (-2146146484), (-219), 71, (-2146146484), 1, 1}, intArray1);
      assertEquals(3.035109564921305E9, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertEquals(7, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1032.59888, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1032.59888, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 927;
      floatArray0[1] = (float) 927;
      floatArray0[2] = (float) 927;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {927.0F, 927.0F, 927.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-3176);
      intArray0[1] = (-3176);
      intArray0[2] = (-3176);
      intArray0[3] = 4;
      intArray0[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3176), (-3176), (-3176), 4, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-3176);
      intArray1[2] = 0;
      intArray1[3] = 927;
      intArray1[4] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, (-3176), 0, 927, 0}, intArray1);
      assertArrayEquals(new int[] {(-3176), (-3176), (-3176), 4, 0}, intArray0);
      assertEquals(3176, int1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) 0, 510.3, (double) (-3176), (double) 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 188.47751406738;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1305.0069866734664);
      doubleArray1[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertEquals(1331.9499922611958, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = new Double(188.47751406738);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(188.47751406738, double1, 0.01);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1.0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.20308939853341107), (-0.20308939853341107), 1.406178797066822}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 1032.59888);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1984.42;
      doubleArray0[1] = 1984.42;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3176);
      intArray0[1] = (-3176);
      intArray0[2] = (-3176);
      intArray0[3] = (-3176);
      intArray0[4] = 0;
      intArray0[5] = (-3176);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3176), (-3176), (-3176), (-3176), 0, (-3176)}, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1984.42, 1984.42, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {1984.42, 1984.42, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3176);
      intArray1[1] = (-3176);
      intArray1[2] = 0;
      intArray1[3] = 0;
      int int1 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-3176), (-3176), 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-3176), (-3176), (-3176), (-3176), 0, (-3176)}, intArray0);
      assertEquals(3176, int1);
      assertEquals(4, intArray1.length);
      assertEquals(6, intArray0.length);
      
      double double0 = MathArrays.linearCombination((double) (-3176), Double.POSITIVE_INFINITY, (double) 0, (-0.9159267523672375));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-3176);
      doubleArray1[1] = (double) (-3176);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 1984.42;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-3176.0), (-3176.0), 0.0, 1984.42}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3176.0), (-3176.0), 0.0, 1984.42}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-1305.0069866734664)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[3];
      Double double0 = new Double(260.85790424733347);
      assertNotNull(double0);
      assertEquals(260.85790424733347, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-1305.0069866734664);
      doubleArray1[2] = (Double) (-1305.0069866734664);
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(mathArrays_OrderDirection0.equals((Object)mathArrays_OrderDirection1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection0, mathArrays_OrderDirection1);
      assertFalse(boolean1);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1305.0069866734664)}, doubleArray0, 0.01);
      assertEquals(1305.0069866734664, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((-4.503599627370496E15), (-1305.0069866734664), (-1583.043), (-0.4807729450061647), 506.261491, 260.85790424733347);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.8772289788986501E18, double2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 333.2F;
      floatArray0[2] = (-16.250494F);
      floatArray0[3] = (-2609.3945F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = (-281.82F);
      floatArray0[6] = (-762.5142F);
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F, 333.2F, (-16.250494F), (-2609.3945F), 1.0F, (-281.82F), (-762.5142F)}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1305.0069866734664)}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      Double[] doubleArray1 = new Double[4];
      Double double2 = new Double(178.9719852547);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals(178.9719852547, (double)double2, 0.01);
      
      doubleArray1[0] = double2;
      Double double3 = new Double(0.0);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      
      doubleArray1[1] = double3;
      Double double4 = Double.valueOf(0.0);
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertEquals((double)double4, (double)double1, 0.01);
      assertEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double0, 0.01);
      assertEquals(0.0, (double)double4, 0.01);
      
      doubleArray1[2] = double4;
      Double double5 = new Double((double) doubleArray1[2]);
      assertNotNull(double5);
      assertEquals((double)double5, (double)double3, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals(0.0, (double)double5, 0.01);
      assertEquals(4, doubleArray1.length);
      
      doubleArray1[3] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      double double6 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double7 = MathArrays.linearCombination(1066260.4469772545, (double) doubleArray1[0], 0.0, 919.55995185, (-0.9159267523672375), 2262.5021336853);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(1.908286767078515E8, double7, 0.01);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 927 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      long long0 = (-1073741824L);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = ">%wKmG_=";
      stringArray0[2] = ">%wKmG_=";
      stringArray0[4] = "^oB)?d7CQUJX\"$0oYc";
      stringArray0[5] = "";
      stringArray0[6] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 230;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {230}, intArray0);
      assertArrayEquals(new int[] {230}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = -0.0F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(364.8163488);
      assertNotNull(double0);
      assertEquals(364.8163488, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(364.8163488);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(364.8163488, (double)double1, 0.01);
      
      doubleArray0[1] = doubleArray0[0];
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = 364.8163488;
      doubleArray1[2] = (double) -0.0F;
      doubleArray1[3] = (double) -0.0F;
      doubleArray1[4] = (double) doubleArray0[1];
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertArrayEquals(new double[] {0.0, 364.8163488, -0.0, -0.0, 364.8163488}, doubleArray1, 0.01);
      assertEquals(515.9282282483936, double2, 0.01);
      assertEquals(5, doubleArray1.length);
      
      double double3 = MathArrays.linearCombination(753.03263089, (double) 0.0F, (-1640.0220376679601), 1978.424029061044, (double) -0.0F, 2144.637);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-3244659.0075119487), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = 1032.59888;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, 1032.59888, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, 1032.59888, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2065.19776, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-685), (-685));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1645.532957922;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      float[] floatArray0 = new float[17];
      floatArray0[0] = (-479.2684F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(17, floatArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1305.0069866734664);
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) 1.0F;
      doubleArray1[3] = 1645.532957922;
      doubleArray1[4] = 1645.532957922;
      doubleArray1[5] = (double) 0.0F;
      doubleArray1[6] = 1645.532957922;
      doubleArray1[7] = 1645.532957922;
      boolean boolean2 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1305.0069866734664), 0.0, 1.0, 1645.532957922, 1645.532957922, 0.0, 1645.532957922, 1645.532957922}, doubleArray1, 0.01);
      assertFalse(boolean2);
      assertEquals(3, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1305.0069866734664)}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-685), (-685));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[0];
      double double0 = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathArrays.linearCombination(1032.59888, Double.NaN, (double) 0, (double) 0, 1.0E-5, (double) 0, (-1.0), (double) 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 134217729, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1645.532957922;
      doubleArray0[1] = 1645.532957922;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1645.532957922, 1645.532957922, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 1645.532957922;
      doubleArray1[1] = (Double) 1645.532957922;
      doubleArray1[5] = (Double) 1645.532957922;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      Double[] doubleArray1 = new Double[4];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 0.0;
      doubleArray1[3] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray1.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-9223372036854775808L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      Double[] doubleArray1 = new Double[6];
      Double double0 = new Double(188.47751406738);
      assertNotNull(double0);
      assertEquals(188.47751406738, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double(Double.NaN);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      doubleArray1[2] = (Double) Double.NaN;
      doubleArray1[3] = (Double) Double.NaN;
      Double double2 = new Double(0.0875862700108075);
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(0.0875862700108075, (double)double2, 0.01);
      
      doubleArray1[4] = double2;
      doubleArray1[5] = (Double) Double.NaN;
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 188.47751406738;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) (-1305.0069866734664);
      doubleArray1[1] = (Double) (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {188.47751406738, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertEquals(1331.9499922611958, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-1305.0069866734664), (-2324.89), 188.47751406738, 753.03263089, (-2983.37), (-1305.0069866734664));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7069246.10536106, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1051.59);
      doubleArray0[2] = 6943541.2036;
      doubleArray0[3] = 0.7675435543060303;
      doubleArray0[4] = (-392.5);
      doubleArray0[5] = 1190.0733328;
      doubleArray0[6] = 484.2762411499;
      doubleArray0[7] = 1.34217729E8;
      doubleArray0[8] = 1617.1;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double double0 = new Integer(927);
      assertEquals(927, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-7.44321345601866E-11), (-7.44321345601866E-11), (-8.0E298), (-3974.23), (-252.98), 3340.540207823253);
      assertEquals(3.179384E302, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = Double.NaN;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1172.31262;
      doubleArray0[4] = 1782.5178095072;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, 1172.31262, 1782.5178095072, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 1782.5178095072, 1.7976931348623157E308, 0.0, 1172.31262, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1782.5178095072, 1.7976931348623157E308, 0.0, 1172.31262, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(1782.5178095072, 0.0, 1782.5178095072, 0.0, 0.0, 317.8047293136958, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1045.3317596;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1045.3317596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(1045.3317596, double1, 0.01);
      assertEquals(8, doubleArray3.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 927, 1616);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double(0.6816387176513672);
      assertNotNull(double0);
      assertEquals(0.6816387176513672, (double)double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-571.55F);
      floatArray0[1] = (-252.2F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-571.55F), (-252.2F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray1, (-1415));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 927;
      floatArray0[1] = (float) 927;
      floatArray0[2] = (float) 927;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {927.0F, 927.0F, 927.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      assertEquals(927, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 927, 927);
      assertNotNull(fieldElementArray0);
      assertEquals(927, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[1];
      longArray1[0] = 638L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[5][0];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 638L;
      doubleArray3[2] = (double) 638L;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (double) 638L;
      doubleArray2[2] = doubleArray3;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((double) 927, (-2170.756750243744), (-2170.756750243744), 1415.7818004768426, (-1495.5748), (double) 927);
      assertEquals((-6472007.247333298), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (-1073741824L);
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) (-1073741824L);
      double double1 = MathArrays.linearCombination(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[1];
      longArray1[0] = 638L;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 638L;
      longArray3[1] = 638L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 638L;
      longArray0[3] = longArray4;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      double double3 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double4 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double double0 = MathArrays.linearCombination(1032.59888, Double.NaN, (double) 0, (double) 0, 1.0E-5, (double) 0, (-1.0), 385.3194);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination((double) 0, (-1.0), 385.3194, 2.4988309686112653E7);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(9.628480495267115E9, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      Double double0 = new Double(1032.59888);
      assertNotNull(double0);
      assertEquals(1032.59888, (double)double0, 0.01);
      
      Double double1 = new Double((-2058.5616907705953));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2058.5616907705953), (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 1032.59888;
      doubleArray1[1] = double0;
      doubleArray0[0] = Double.NaN;
      doubleArray1[3] = double1;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[6] = (Double) Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, doubleArray1.length);
      
      long long0 = 1L;
      long long1 = (-9223372036854775808L);
      long long2 = (-498L);
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      longArray0[1] = (-9223372036854775808L);
      longArray0[2] = (-498L);
      longArray0[3] = (-9223372036854775808L);
      long long3 = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-498L);
      longArray0[6] = (-498L);
      long long4 = 1L;
      longArray0[7] = 1L;
      longArray0[8] = (-498L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1172.31262;
      doubleArray0[4] = 1782.5178095072;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, 1172.31262, 1782.5178095072, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, 1782.5178095072, 1172.31262, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, 1782.5178095072, 1172.31262, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(1782.5178095072, 0.0, 0.0, 0.0, 0.0, 317.8047293136958, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 1782.5178095072, 1.7976931348623157E308, 1172.31262, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[0] = 1.7976931348623157E308;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[1] = 1032.59888;
      doubleArray1[2] = 1.7976931348623157E308;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3512.9F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1672.81F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3512.9F, (-1.4E-45F), 0.0F, (-1672.81F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1672.81F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-1672.81F);
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) (-1672.81F);
      doubleArray0[5] = (double) (-1672.81F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-478.872445319));
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-119.71811132975), 0.0, (-119.71811132975), 0.0, (-119.71811132975), (-119.71811132975), 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1672.81005859375), 0.0, (-1672.81005859375), 0.0, (-1672.81005859375), (-1672.81005859375), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 29;
      intArray0[1] = 1313;
      intArray0[2] = 2307;
      intArray0[3] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {29, 1313, 2307, 1}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 214;
      intArray0[1] = 921;
      intArray0[2] = 921;
      intArray0[3] = (-2879);
      intArray0[4] = (-1);
      intArray0[5] = 2147146264;
      intArray0[6] = 2144635649;
      intArray0[7] = 577;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2146668991));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[4][6];
      long[] longArray1 = new long[1];
      longArray1[0] = 638L;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 638L;
      longArray3[1] = 638L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 638L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 981);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(981, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      double[][] doubleArray3 = new double[10][1];
      doubleArray3[0] = doubleArray2;
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      
      doubleArray4[0] = (double) 981;
      doubleArray4[1] = (double) 981;
      doubleArray4[2] = (double) 981;
      doubleArray4[3] = (double) 981;
      MathArrays.scaleInPlace((-2173.501607224), doubleArray4);
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {(-2132205.076686744), (-2132205.076686744), (-2132205.076686744), (-2132205.076686744)}, doubleArray4, 0.01);
      assertEquals(4, doubleArray4.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (-1073741824L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 0L;
      longArray2[3] = (-1073741824L);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      
      float[] floatArray0 = new float[9];
      longArray1[1] = (-1073741824L);
      floatArray0[1] = (float) (-1073741824L);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 0L;
      floatArray0[4] = (float) (-1073741824L);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) (-1073741824L);
      floatArray0[7] = (float) (-1073741824L);
      floatArray0[8] = 0.0F;
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F, (-1.07374182E9F), 0.0F, 0.0F, (-1.07374182E9F), 0.0F, (-1.07374182E9F), (-1.07374182E9F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(9, floatArray0.length);
      
      boolean boolean3 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new float[] {0.0F, (-1.07374182E9F), 0.0F, 0.0F, (-1.07374182E9F), 0.0F, (-1.07374182E9F), (-1.07374182E9F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean3);
      assertEquals(9, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection2, false);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection1));
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection3 = MathArrays.OrderDirection.DECREASING;
      boolean boolean4 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection3, true);
      assertFalse(mathArrays_OrderDirection3.equals((Object)mathArrays_OrderDirection2));
      assertFalse(mathArrays_OrderDirection3.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertNotSame(mathArrays_OrderDirection3, mathArrays_OrderDirection2);
      assertNotSame(mathArrays_OrderDirection3, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection3, mathArrays_OrderDirection1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean4);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 927;
      floatArray0[1] = (float) 927;
      floatArray0[2] = (float) 927;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {927.0F, 927.0F, 927.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      assertEquals(927, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 927;
      doubleArray3[2] = 900.0;
      doubleArray3[3] = (-3.43338934259355E-8);
      doubleArray3[4] = (double) 927.0F;
      doubleArray3[5] = (double) 927.0F;
      doubleArray3[6] = 1.304E19;
      doubleArray3[7] = (double) 927;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.isMonotonic(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 927.0, 900.0, (-3.43338934259355E-8), 927.0, 927.0, 1.304E19, 927.0}, doubleArray3, 0.01);
      assertFalse(boolean2);
      assertEquals(8, doubleArray3.length);
      
      MathArrays.scaleInPlace(927.0F, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      MathArrays.scaleInPlace(927.0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      assertEquals(927, doubleArray2.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 927;
      intArray0[1] = 927;
      intArray0[2] = 927;
      intArray0[3] = 927;
      intArray0[4] = 927;
      intArray0[5] = 927;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {927, 927, 927, 927, 927, 927}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, intArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (-1073741824L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 0L;
      longArray2[3] = (-1073741824L);
      Double[] doubleArray1 = new Double[2];
      Double double0 = new Double(0L);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-2058.5616907705953));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2058.5616907705953), (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray1.length);
      
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1L;
      longArray3[1] = 0L;
      longArray3[2] = (-9223372036854775808L);
      longArray3[3] = (-498L);
      longArray3[4] = 0L;
      longArray3[5] = (-1073741824L);
      try { 
        MathArrays.checkNonNegative(longArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4.503599627370496E15);
      doubleArray0[1] = (-3093.07245);
      doubleArray0[2] = (-1009.15832992);
      doubleArray0[3] = 1822.2883574252749;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,503,599,627,370,496 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      double[][] doubleArray2 = new double[6][6];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.86285714285714278E18, 0.8775825500488281, 1.0, (double) 134217729, (double) 0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1826.9357955281723), 1.86285714285714278E18, 216.1291260609, 1032.59888);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3.403320396241052E21), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathArrays.linearCombination(2151.09105699, 818.50887981, 1.34217729E8, 2151.09105699, 2151.09105699, 818.50887981, 1.34217729E8, 1.34217729E8);
      assertEquals(1.8014687495995356E16, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.8014687495995356E16;
      doubleArray0[1] = 2151.09105699;
      doubleArray0[2] = 818.50887981;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = 818.50887981;
      doubleArray1[1] = 1.8014687495995356E16;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.8014687495995356E16, 818.50887981, 818.50887981}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1.8014687495995356E16}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.2452896557837146E32, 1.4745181682474373E19, 1.4745181682474373E19}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 3676L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 10000L;
      longArray0[4] = (-2502L);
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) 10000L;
      doubleArray3[1] = (double) 3676L;
      doubleArray3[2] = (double) 0L;
      doubleArray3[3] = (double) 10000L;
      doubleArray3[4] = (double) 0L;
      doubleArray3[5] = (double) 0L;
      doubleArray3[6] = (double) (-1L);
      doubleArray3[7] = (double) 0L;
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1645.532957922;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1305.0069866734664);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1305.0069866734664)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 188.47751406738;
      doubleArray1[1] = (Double) 188.47751406738;
      doubleArray1[4] = (Double) 1645.532957922;
      doubleArray1[5] = (Double) 1645.532957922;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[4];
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2635.06);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {(-2635.06)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[9];
      Double double0 = new Double((-1304.94));
      assertNotNull(double0);
      assertEquals((-1304.94), (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      doubleArray1[1] = (Double) (-2635.06);
      doubleArray1[2] = (Double) (-2635.06);
      doubleArray1[3] = (Double) (-2635.06);
      doubleArray1[4] = (Double) (-2635.06);
      Double double1 = new Double((-2635.06));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-2635.06), (double)double1, 0.01);
      
      doubleArray1[5] = double1;
      doubleArray1[6] = (Double) (-2635.06);
      doubleArray1[7] = (Double) (-2635.06);
      doubleArray1[8] = (Double) (-2635.06);
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, doubleArray1.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      boolean boolean2 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new double[] {(-2635.06)}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-2635.06)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1645.532957922;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1299.009343);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {1645.532957922, 188.47751406738, (-1299.009343)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 188.47751406738;
      doubleArray1[1] = (Double) 188.47751406738;
      doubleArray1[2] = (Double) (-1299.009343);
      doubleArray1[3] = (Double) 188.47751406738;
      doubleArray1[4] = (Double) 1645.532957922;
      doubleArray1[5] = (Double) 1645.532957922;
      doubleArray1[6] = (Double) (-1299.009343);
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray1.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      long long0 = (-1L);
      longArray0[1] = (-1L);
      long long1 = 10000L;
      longArray0[2] = 10000L;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 3246.9;
      doubleArray0[0] = 3246.9;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1704.566124459019;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 1415.7818004768426;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 973.9296214);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3246.9, Double.NaN, 1704.566124459019, (-3.141592653589793), 1415.7818004768426, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {496.8886317444079, Double.NaN, 260.85790424722353, (-0.4807729450061647), 216.66385835337482, 0.0}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3246.9, Double.NaN, 1704.566124459019, (-3.141592653589793), 1415.7818004768426, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {496.8886317444079, Double.NaN, 260.85790424722353, (-0.4807729450061647), 216.66385835337482, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean2);
      assertEquals(1, floatArray0.length);
      
      boolean boolean3 = false;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (260.858 > -0.481)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (-1073741824L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 0L;
      longArray2[3] = (-1073741824L);
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-1073741824L);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (double) 0L;
      doubleArray3[3] = (double) 0L;
      doubleArray3[4] = (double) (-1073741824L);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 133L;
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 1L;
      longArray2[2] = 2870L;
      longArray0[1] = longArray2;
      longArray0[2] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (-1L);
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 133L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 133L;
      doubleArray0[6] = (double) 2870L;
      doubleArray0[7] = (double) 2870L;
      doubleArray0[8] = (double) 0L;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 133.0, 1.0, 133.0, 2870.0, 2870.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.650918E7, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      double double0 = 1.5707963267948966;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.5707963267948966);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int[] intArray0 = new int[5];
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1032.59888, Double.NaN, 1.7976931348623157E308}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
      
      double double2 = MathArrays.linearCombination(Double.NaN, 1.304E19, 1.304E19, 1032.59888, (double) 33, (-268.222020637), Double.NaN, 0.0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1581.0642F;
      floatArray0[2] = 466.9F;
      floatArray0[3] = (-1835.4F);
      floatArray0[4] = 5252.09F;
      floatArray0[5] = (-960.44F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 1581.0642F, 466.9F, (-1835.4F), 5252.09F, (-960.44F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-960.44F);
      doubleArray0[1] = (double) 5252.09F;
      doubleArray0[2] = (double) (-1835.4F);
      doubleArray0[3] = (double) 466.9F;
      doubleArray0[4] = (double) 1581.0642F;
      doubleArray0[5] = (double) 1581.0642F;
      doubleArray0[6] = (double) (-1.0F);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-960.44F);
      doubleArray1[1] = (double) (-1835.4F);
      doubleArray1[2] = (double) (-960.44F);
      doubleArray1[3] = 1.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 2473.6745;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2984.68733;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0E-5;
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 2473.6745, Double.NaN, 0.0, 0.0, 2984.68733, 1.0, 1.0E-5, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 1.34217729E8;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.34217729E8;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = 3.834E-20;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[][] doubleArray1 = new double[4][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1267.85271164);
      doubleArray2[1] = 20.0;
      doubleArray2[2] = 20.0;
      doubleArray2[3] = 0.0;
      doubleArray1[3] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 20.0, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.sortInPlace(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-1267.85271164), 20.0, 0.0, 20.0}, doubleArray2, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (0 < 20)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-113.6213);
      doubleArray0[1] = 1184.331867;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 5416.9532;
      doubleArray0[4] = 0.0;
      double double0 = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 1978.35007;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-113.6213), 1184.331867, 0.0, 5416.9532, 0.0, 0.0, 3.834E-20, 1978.35007}, doubleArray0, 0.01);
      assertEquals(3.467280274146464E7, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      
      long[][] longArray0 = new long[0][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1599;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1599}, intArray0);
      assertArrayEquals(new int[] {1599, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double double2 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {(-113.6213), 1184.331867, 0.0, 5416.9532, 0.0, 0.0, 3.834E-20, 1978.35007}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-3176);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-3176)}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      
      boolean boolean2 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, Double.NaN}, doubleArray0, 0.01);
      assertTrue(boolean2);
      assertEquals(2, doubleArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, (-3176)}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      
      double double0 = MathArrays.linearCombination(1.34217729E8, (double) (-1.0F), 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 2146735656);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(10, doubleArray0.length);
      assertEquals(10, doubleArray1.length);
      assertEquals(10, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, (-2650), (-156));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 900;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 900);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      assertEquals(927, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(927, doubleArray1.length);
      assertEquals(927, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<String>>) null, 927, 927);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2835;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2835, 2835);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = MathArrays.linearCombination(6.283185307179586, 6.283185307179586, 0.0, 6.283185307179586, (-1.0), 6.283185307179586);
      assertEquals(33.195232297177846, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((-1.0), 0.0, 1.0, 0.0, 1095.0, 1095.0, (-1268.0), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1199025.0, double1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 1199025.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 1199025.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {12.566370614359172, 12.566370614359172, 12.566370614359172, 2398050.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2635.06);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 927);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 927;
      floatArray0[1] = (float) 927;
      floatArray0[2] = (float) 927;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertEquals(2635.06, double1, 0.01);
      assertEquals(927, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1664.895075319);
      double[][] doubleArray1 = new double[5][2];
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1664.895075319);
      doubleArray2[1] = (-1664.895075319);
      doubleArray2[2] = (-1664.895075319);
      doubleArray2[3] = (-1664.895075319);
      doubleArray2[4] = (-1664.895075319);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1664.895075319);
      doubleArray3[1] = (-1664.895075319);
      doubleArray3[2] = (-1664.895075319);
      doubleArray3[3] = (-1664.895075319);
      doubleArray3[4] = (-1664.895075319);
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-702.6F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-394.0F);
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 237.193819686;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 474.387639372}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-160.66437);
      doubleArray0[0] = (-160.66437);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1984.42;
      doubleArray0[1] = 1984.42;
      doubleArray0[2] = 6748.6;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.scaleInPlace(6748.6, doubleArray1);
      assertArrayEquals(new double[] {2.6575465378869045E10, 2.6575465378869045E10, 3.0735555218725604E11}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {1984.42, 1984.42, 6748.6}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[7];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) 0;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.linearCombination(753.03263089, Double.NaN, 0.06666666666666667, (double) (-3176));
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1645.532957922;
      doubleArray0[1] = 188.47751406738;
      doubleArray0[2] = (-1299.009343);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) 188.47751406738;
      doubleArray1[1] = (Double) 188.47751406738;
      doubleArray1[2] = (Double) (-1299.009343);
      doubleArray1[3] = (Double) 188.47751406738;
      doubleArray1[4] = (Double) 1645.532957922;
      doubleArray1[5] = (Double) 1645.532957922;
      doubleArray1[6] = (Double) (-1299.009343);
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      long[] longArray0 = new long[5];
      longArray0[0] = 1L;
      longArray0[1] = (-1L);
      longArray0[2] = 10000L;
      longArray0[3] = (-9223372036854775808L);
      longArray0[4] = (-498L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      MathArrays.linearCombination((-1597.6), Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, (-1597.6), 0.0, 0.0, Double.NEGATIVE_INFINITY);
      int[] intArray0 = new int[4];
      intArray0[0] = (-518);
      intArray0[1] = (-522);
      intArray0[2] = 1762;
      intArray0[3] = (-1904);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1762;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = (double) (-518);
      doubleArray0[3] = (double) (-522);
      doubleArray0[4] = (double) (-522);
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1543.0);
      doubleArray0[0] = (-1543.0);
      doubleArray0[1] = (-506.2652708104991);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-506.2652708104991);
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1797);
      int int0 = 246;
      intArray0[1] = 246;
      intArray0[2] = 0;
      intArray0[3] = 0;
      int int1 = 2705;
      intArray0[4] = 2705;
      int[] intArray1 = MathArrays.copyOf(intArray0, 246);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1489.42599828;
      doubleArray0[1] = 2342.04;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      long[][] longArray0 = new long[8][1];
      long[] longArray1 = new long[3];
      longArray1[0] = (-1848L);
      longArray1[1] = (-2763L);
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-2763L);
      longArray2[1] = (-1848L);
      longArray2[2] = 0L;
      longArray2[3] = (-1848L);
      longArray2[4] = (-2763L);
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray2[8] = (-1848L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-2763L);
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-1848L);
      longArray4[1] = (-2763L);
      longArray4[2] = (-588L);
      longArray4[3] = (-2763L);
      longArray4[4] = (-1848L);
      longArray4[5] = 0L;
      longArray4[6] = 1023L;
      longArray4[7] = (-1848L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = (-588L);
      longArray5[1] = 0L;
      longArray5[2] = (-1848L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = (-488L);
      longArray6[1] = (-588L);
      longArray6[2] = (-588L);
      longArray6[3] = (-2763L);
      longArray6[4] = (-1848L);
      longArray6[5] = (-588L);
      longArray6[6] = (-1848L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = (-488L);
      longArray7[1] = (-588L);
      longArray7[2] = 0L;
      longArray7[3] = (-588L);
      longArray7[4] = (-1848L);
      longArray7[5] = (-2763L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = 1023L;
      longArray8[1] = (-2763L);
      longArray8[2] = 0L;
      longArray8[3] = (-488L);
      longArray8[4] = (-488L);
      longArray8[5] = (-588L);
      longArray8[6] = (-588L);
      longArray8[7] = 1023L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.checkOrder(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 38;
      intArray0[1] = 246;
      intArray0[2] = 0;
      intArray0[3] = 52;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {38, 246, 0, 52, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-3445.1462F);
      floatArray0[2] = (-1.0F);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-3445.1462F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-3445.1462F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0.0F;
      double[][] doubleArray1 = new double[6][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-1.0F);
      doubleArray2[1] = (-303.467);
      doubleArray2[2] = (double) 0.0F;
      doubleArray2[3] = (double) (-3445.1462F);
      doubleArray2[4] = (double) 0.0F;
      doubleArray2[5] = (double) 0.0F;
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 568.971;
      doubleArray0[1] = 1790.26;
      doubleArray0[2] = (-826.2253936);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-770.95);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2150);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,790.26 >= -826.225)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      double double0 = MathArrays.linearCombination(1.0, 1.0, 0.0, (-1495.5748), 2223.495422, 1.0);
      assertEquals(2224.495422, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      MathArrays.linearCombination(2151.09105699, 818.50887981, 1.34217729E8, 2151.09105699, 2151.09105699, 818.50887981, 1.34217729E8, 1.34217729E8);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.8014687495995356E16;
      doubleArray0[1] = 2151.09105699;
      doubleArray0[2] = 818.50887981;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 818.50887981;
      doubleArray1[1] = 1.8014687495995356E16;
      MathArrays.convolve(doubleArray0, doubleArray1);
      long[] longArray0 = new long[9];
      longArray0[0] = 3676L;
      longArray0[1] = (-1L);
      longArray0[2] = 0L;
      longArray0[3] = 10000L;
      longArray0[4] = (-2502L);
      longArray0[5] = 1098L;
      longArray0[6] = 0L;
      longArray0[7] = 100L;
      longArray0[8] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      double double0 = 1866.8802785258977;
      doubleArray0[1] = 1866.8802785258977;
      doubleArray0[2] = (-1687.8346835821678);
      double double1 = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1118.7798248761);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,687.835 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2984;
      intArray0[1] = 1786;
      intArray0[2] = 2;
      intArray0[3] = (-476);
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2321;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2984, 1786, 2, (-476), 0, 2, 2321}, intArray1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1678.83326888;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-142.278324);
      doubleArray0[3] = 25.94;
      doubleArray0[4] = 895.664556147899;
      doubleArray0[5] = 1.304E19;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,678.833 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1172.31262;
      doubleArray0[4] = 1782.5178095072;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 1782.5178095072, 1.7976931348623157E308, 0.0, 1172.31262, 0.0}, doubleArray0, 0.01);
      
      MathArrays.linearCombination(1782.5178095072, 0.0, 1782.5178095072, 0.0, 0.0, 317.8047293136958, 0.0, 0.0);
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1045.3317596;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 317.8047293136958;
      doubleArray3[7] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertEquals(1092.5741776202583, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.linearCombination(1.0, 1.0, 1.0, (-3255.901632), 1.0, 1.0, 1.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3255.901632);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 2256.7F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1140.1F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = 9218868437227405312L;
      longArray0[1] = 2147483647L;
      longArray0[2] = 1L;
      longArray0[3] = 252L;
      longArray0[4] = 1L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = null;
      MathArrays.equals((double[]) null, (double[]) null);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3246.9;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1704.566124459019;
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = 1415.7818004768426;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 973.9296214);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 3 and 4 are not decreasing (-0.481 < 216.664)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[3];
      longArray1[0] = 146L;
      long long0 = 1L;
      longArray1[1] = 1L;
      long long1 = 0L;
      longArray1[2] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      longArray2[0] = 0L;
      longArray2[1] = 1L;
      longArray2[2] = 2870L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      long long2 = (-1L);
      longArray3[0] = (-1L);
      longArray3[1] = 2870L;
      longArray3[2] = 1L;
      longArray3[3] = 1L;
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1984.42;
      doubleArray0[4] = (-753.03263089);
      doubleArray0[5] = (-1053.3159281964704);
      doubleArray0[6] = (-1502.160001706994);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2805.5908459548878, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(7871339.994905864, double1, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 139;
      intArray0[2] = 382;
      intArray0[3] = 2;
      intArray0[4] = 169;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.scale((-314.92552), doubleArray1);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 400.0, 1.4699556E-39, 3937922.7364000003, 567058.143185115, 1109474.444592392, 2256484.6707283566}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2911.0;
      doubleArray0[2] = 321.5;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4051.0523862464);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 33;
      intArray0[1] = 571;
      intArray0[2] = (-2740);
      intArray0[3] = (-1);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((double) 571, 0.0, 1.0, 0.0, (-4051.0523862464), 673.0, 1.304E19, 321.5);
      assertEquals(4.192359999999997E21, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1032.59888;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7976931348623157E308;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      MathArrays.copyOf(intArray0, 0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray1);
      double double0 = MathArrays.linearCombination(1.7976931348623157E308, (-1010.3212466174), 2000.2447877184, (double) 0, (double) 0, (double) 1, (-2276.297542), (-427.575884));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-201.7362217577);
      doubleArray0[2] = 20.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 587);
      assertEquals(587, doubleArray1.length);
  }
}
