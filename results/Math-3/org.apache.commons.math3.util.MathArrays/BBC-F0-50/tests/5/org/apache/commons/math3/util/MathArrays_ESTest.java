/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 20:26:12 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "";
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      MathArrays.buildArray(field0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 479.9F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1285.6301F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = 2657.0F;
      floatArray0[7] = (-1.0F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 10000);
      // Undeclared exception!
      MathArrays.distance1(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double((-1206.2457200105302));
      Double[] doubleArray0 = new Double[5];
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 11);
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Pair<FieldElement<String>, String> pair0 = new Pair<FieldElement<String>, String>(fieldElement0, "org.apache.commons.math3.util.MathArrays$3");
      Pair<String, Object> pair1 = new Pair<String, Object>("org.apache.commons.math3.util.MathArrays$3", pair0);
      Double double0 = new Double(84.28);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair1).when(field0).getZero();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 33;
      doubleArray0[1] = (double) 33;
      doubleArray0[2] = (double) 33;
      doubleArray0[3] = (double) 33;
      doubleArray0[4] = (double) 33;
      doubleArray0[5] = (double) 33;
      doubleArray0[6] = (double) 33;
      doubleArray0[7] = (double) 33;
      MathArrays.scale(33, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 6);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Integer integer1 = Integer.getInteger("", integer0);
      Object object0 = new Object();
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(integer1).when(field0).getZero();
      int int1 = 33;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 33, 33);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 33, 33);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = new Double(1.34217729E8);
      Double double1 = new Double((-1.0));
      Double double2 = new Double((-1.0));
      Double double3 = new Double((-1214.642218));
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double0;
      doubleArray0[1] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-619);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-619));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 1.0;
      double double1 = 3313.08;
      double double2 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1487.9F;
      doubleArray0[2] = (double) (-1773.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.4E-45F);
      doubleArray0[5] = (double) (-1773.0F);
      doubleArray0[6] = (double) (-1.4E-45F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2915.631232280819, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = (-3.940510424527919E-20);
      doubleArray0[2] = 0.9375;
      doubleArray0[3] = (-2579.7764);
      doubleArray0[4] = 1782.735485399716;
      doubleArray0[5] = 2718.63315;
      doubleArray0[6] = 0.5850973129272461;
      doubleArray0[7] = 1.63E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.63E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 258.843621437;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 5.206150291559893E-8;
      doubleArray0[4] = 5.669184079525E-24;
      doubleArray0[5] = 538.508;
      doubleArray0[6] = 0.06666666666666667;
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-280);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.checkPositive(doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2230);
      // Undeclared exception!
      MathArrays.convolve(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2129.951719734554;
      doubleArray1[1] = (-668.6190448925706);
      doubleArray1[2] = 1907.9127347198566;
      doubleArray1[3] = (-2052.59267184885);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[6][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = null;
      doubleArray2[2] = null;
      doubleArray2[3] = null;
      doubleArray2[4] = null;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-668.6190448925706);
      doubleArray3[1] = (-2052.59267184885);
      doubleArray3[2] = (-2052.59267184885);
      doubleArray3[3] = 2129.951719734554;
      doubleArray3[4] = 3.834E-20;
      doubleArray3[5] = (-668.6190448925706);
      doubleArray2[5] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.608E18;
      doubleArray0[1] = 1052.830790381991;
      doubleArray0[2] = 1480.6668177341;
      doubleArray0[3] = (-8.0E298);
      doubleArray0[4] = (-7.800414592973399E-9);
      doubleArray0[5] = 1575.3947564076;
      doubleArray0[6] = 404.9415666442;
      doubleArray0[7] = 2.9919025265404522E7;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2.9919025265404522E7;
      doubleArray1[1] = 2.608E18;
      doubleArray1[2] = 2.9919025265404522E7;
      doubleArray1[3] = 993.157;
      doubleArray1[4] = 2.9919025265404522E7;
      doubleArray1[5] = 1575.3947564076;
      doubleArray1[6] = 1575.3947564076;
      doubleArray1[7] = 1052.830790381991;
      MathArrays.linearCombination(doubleArray0, doubleArray1);
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[16];
      double double0 = MathArrays.distance(intArray0, intArray0);
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 3416.509, 0.0, 1811.43, 3159.061, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(1.0380426899170088E13, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 194.2F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 581, (-1772));
      assertEquals(581, fieldElementArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-2146840880);
      intArray0[2] = 1279;
      intArray0[3] = (-1);
      int[] intArray1 = new int[7];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = (-2146840880);
      intArray1[3] = 1279;
      intArray1[4] = (-1);
      intArray1[5] = (-2146840880);
      intArray1[6] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-1282977), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "l#6Xd8`p+";
      stringArray0[3] = "";
      stringArray0[4] = "PM8";
      stringArray0[5] = "INCREASING";
      stringArray0[6] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1643.57297809);
      doubleArray1[2] = (-1662.4021747);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 0.0;
      double[][] doubleArray2 = new double[2][7];
      doubleArray2[0] = null;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 3.834E-20;
      doubleArray3[2] = (-1643.57297809);
      doubleArray3[3] = 0.0;
      doubleArray2[1] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1154.8);
      doubleArray0[1] = 4209.59167981;
      doubleArray0[2] = 939.7499985;
      doubleArray0[3] = (-3234.61488802);
      doubleArray0[4] = (-1420.378303857815);
      doubleArray0[5] = 1649.270036789;
      doubleArray0[6] = (-2067.92454096648);
      doubleArray0[7] = 0.6409968137741089;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-344.74323F);
      floatArray0[1] = (-2713.63F);
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-2713.63F);
      floatArray1[1] = (-2713.63F);
      floatArray1[2] = (-2713.63F);
      floatArray1[3] = (-344.74323F);
      floatArray1[4] = (-344.74323F);
      floatArray1[5] = (-344.74323F);
      floatArray1[6] = (-344.74323F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = 141;
      intArray0[2] = (-2908);
      intArray0[3] = 231;
      intArray0[4] = 134217729;
      intArray0[5] = (-1562);
      intArray0[6] = 5163;
      intArray0[7] = 1426;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2908);
      doubleArray0[2] = (double) 134217729;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 134217729;
      doubleArray0[5] = (-3385.7739);
      doubleArray0[6] = (double) 141;
      doubleArray0[7] = 3204.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-662);
      doubleArray0[1] = (double) (-662);
      doubleArray0[2] = (double) (-662);
      doubleArray0[3] = (double) (-662);
      doubleArray0[4] = (double) (-662);
      doubleArray0[5] = (double) (-662);
      doubleArray0[6] = (double) (-662);
      doubleArray0[7] = (-1962.3713);
      MathArrays.distance(doubleArray0, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 3467;
      intArray0[1] = (-662);
      intArray0[2] = (-662);
      intArray0[3] = (-662);
      intArray0[4] = (-662);
      intArray0[5] = (-662);
      intArray0[6] = (-662);
      intArray0[7] = (-662);
      int[] intArray1 = new int[6];
      intArray1[0] = (-662);
      intArray1[1] = 3467;
      intArray1[2] = 3467;
      intArray1[3] = 3467;
      intArray1[4] = 3467;
      intArray1[5] = 245;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-2156.002738);
      doubleArray0[2] = 1478.52540644414;
      doubleArray0[3] = 234.43316005631;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-1161.97665691976);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[3][4];
      long[] longArray1 = new long[4];
      longArray1[0] = (-5330L);
      longArray1[1] = (-2277L);
      longArray1[2] = 134217729L;
      longArray1[3] = 85L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 134217729L;
      longArray2[1] = 134217729L;
      longArray2[2] = 134217729L;
      longArray2[3] = 134217729L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = (-2277L);
      longArray3[1] = 134217729L;
      longArray3[2] = 134217729L;
      longArray3[3] = 85L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,330 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      MathArrays.scaleInPlace(1.0380426899170088E13, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 194.2F;
      MathArrays.equals(floatArray0, (float[]) null);
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 581, (-1772));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1113.3553F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 724.8077F;
      floatArray0[3] = 1006.6002F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (-4499.349F);
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-491.0596);
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 2354.867;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.9868161777724352E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 32.633514;
      doubleArray0[1] = (-2734.1799404656);
      doubleArray0[2] = 3847.0774156359917;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 2638.0;
      doubleArray0[5] = (-3391.698976925157);
      doubleArray0[2] = 1.0;
      doubleArray0[7] = (-247.2);
      doubleArray0[8] = 1.4699556E-39;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(17, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.4699556E-39;
      doubleArray2[1] = (-247.2);
      doubleArray2[2] = 3847.0774156359917;
      doubleArray2[3] = 2593.67;
      doubleArray2[4] = (-3391.698976925157);
      doubleArray2[5] = (-247.2);
      doubleArray2[7] = 1.4699556E-39;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray2);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5099.076355885996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, (-3353.7929));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4.503599627370496E15;
      doubleArray0[2] = 0.003;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.304E19;
      doubleArray0[5] = 875.59;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = (-296.777193171972);
      doubleArray0[8] = (-4500.081);
      MathArrays.normalizeArray(doubleArray0, 247.2);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2354.867;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1.304E19);
      assertArrayEquals(new double[] {1.304E19, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      MathArrays.checkRectangular(longArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1879.0F;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination((-2.665777), (double) 0.0F, 1344.7483784, (double) 0.0F, (double) 0.0F, 0.0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2587.5375478718);
      doubleArray0[1] = (-0.010714690733195933);
      doubleArray0[2] = 3028.916228906186;
      doubleArray0[3] = 3.912E19;
      doubleArray0[4] = (-857.73065677);
      doubleArray0[5] = (-959.91);
      doubleArray0[6] = (-2321.5);
      doubleArray0[7] = (-4723.6184807207);
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-0.010714690733195933);
      doubleArray1[1] = 3028.916228906186;
      doubleArray1[2] = (-2321.5);
      doubleArray1[3] = (-4723.6184807207);
      doubleArray1[4] = (-4723.6184807207);
      doubleArray1[5] = (-5974.13887);
      doubleArray1[6] = (-665.28321);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[][] longArray0 = new long[2][2];
      MathArrays.checkRectangular(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[1] = 3.834E-20;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = 0.5F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) Float.NaN;
      doubleArray1[0] = (double) 0.5F;
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = (double) 0.5F;
      doubleArray1[4] = (double) Float.NaN;
      doubleArray1[5] = (double) 0.5F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(3.834E-20, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      MathArrays.normalizeArray(doubleArray1, 0.0);
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 2309.746755);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2726), (-2726));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5830993332061267E-10;
      doubleArray0[1] = (-1210.6363972373717);
      doubleArray0[2] = (-4133.612368677344);
      doubleArray0[3] = 1.5574076175689697;
      doubleArray0[4] = 1032.4;
      doubleArray0[5] = (-1379.8152761601377);
      doubleArray0[6] = (-177.813);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-4,133.612 <= 1.557)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 10000.0;
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = Double.NaN;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = 2053.7794;
      doubleArray2[7] = Double.NaN;
      MathArrays.checkPositive(doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = (-2181.668);
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1649.036608935579;
      doubleArray1[1] = 1649.036608935579;
      doubleArray1[2] = 1649.036608935579;
      doubleArray1[3] = 1649.036608935579;
      doubleArray1[4] = 1649.036608935579;
      doubleArray1[5] = 1649.036608935579;
      doubleArray1[6] = 1649.036608935579;
      doubleArray1[7] = 1649.036608935579;
      doubleArray1[8] = 1649.036608935579;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.POSITIVE_INFINITY;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[2];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-31.21F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[6][7];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1011;
      intArray0[1] = 2;
      int int0 = 526;
      intArray0[2] = 526;
      int int1 = (-363);
      intArray0[3] = (-363);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2354.867;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2354.867;
      doubleArray1[1] = 2354.867;
      boolean boolean0 = MathArrays.equals(doubleArray1, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      long[][] longArray0 = new long[3][2];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2435.5F);
      floatArray0[1] = 278.9175F;
      floatArray0[2] = 2152.9717F;
      floatArray0[3] = 3.4028235E38F;
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 3.4028235E38F;
      floatArray1[2] = 278.9175F;
      floatArray1[3] = 2152.9717F;
      floatArray1[4] = (-2435.5F);
      floatArray1[5] = (-2435.5F);
      floatArray1[6] = 278.9175F;
      floatArray1[7] = 3.4028235E38F;
      MathArrays.equals(floatArray0, floatArray1);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2152.9717F;
      doubleArray1[1] = (double) 0.0F;
      doubleArray1[2] = (double) (-2435.5F);
      doubleArray1[3] = (double) 278.9175F;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-778.2065F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 884.376F;
      float float0 = (-1329.2007F);
      floatArray0[3] = (-1329.2007F);
      float float1 = 0.0F;
      floatArray0[4] = 0.0F;
      float float2 = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1.0F);
      floatArray0[7] = 53.6F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1), (-3306));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-389.15228F);
      floatArray0[1] = 2598.0F;
      floatArray0[2] = (-389.15228F);
      floatArray0[3] = (-3402.7712F);
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.814697265625E-6;
      doubleArray0[1] = (double) (-389.15228F);
      doubleArray0[2] = (double) (-389.15228F);
      doubleArray0[3] = 5.206150291559893E-8;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[1] = (-1881.1317F);
      floatArray0[2] = (-61.2F);
      floatArray0[3] = (-6286.8F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1881.1317F);
      doubleArray0[1] = (double) (-113.75499F);
      doubleArray0[2] = (double) (-113.75499F);
      doubleArray0[3] = (double) (-1881.1317F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (-1805.40731605);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-739));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.linearCombination(6.52E18, (double) 43, Double.NaN, 1.304E19);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 6.52E18;
      doubleArray1[1] = 3.834E-20;
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 19.1449979853;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(6.52E18, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[][] longArray0 = new long[1][4];
      MathArrays.checkRectangular(longArray0);
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[16] = (double) (-9.0804F);
      doubleArray0[1] = (double) (-9.0804F);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-9.0804F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      MathArrays.distance1(doubleArray0, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "Kcsx|;}%E0}x";
      stringArray0[3] = "T=-0:";
      stringArray0[4] = "^YuwEx'ZiS`z,i`'0";
      stringArray0[5] = "~|-<s(>";
      stringArray0[6] = "{0} is smaller than, or equal to, the minimum ({1})";
      stringArray0[7] = "$VALUES";
      stringArray0[8] = "W";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[23];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1.375;
      doubleArray1[1] = (double) 134217729;
      doubleArray1[2] = (-3000.70719943153);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 23 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[16] = (double) (-9.0804F);
      doubleArray0[1] = (double) (-9.0804F);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray1[1] = Double.POSITIVE_INFINITY;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1503.54591);
      doubleArray0[1] = (-433.51);
      doubleArray0[2] = (-3597.764);
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m:Z1";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1024.20385015418);
      double double0 = (-733.75182049365);
      doubleArray0[1] = (-1024.20385015418);
      double double1 = 1069.42;
      doubleArray0[2] = 1069.42;
      double double2 = 854613.959348089;
      doubleArray0[3] = 854613.959348089;
      doubleArray0[4] = 100.0;
      double double3 = 1.2599210498948732;
      doubleArray0[5] = 1.2599210498948732;
      double double4 = 1.3040000000000008E19;
      doubleArray0[6] = 1.3040000000000008E19;
      double double5 = (-1.0E-6);
      doubleArray0[7] = (-1.0E-6);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = (-930.33);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-930.33);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 0.0F;
      MathArrays.equals(floatArray0, floatArray0);
      double double1 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.0, double1, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1025);
      intArray0[1] = 1470;
      intArray0[2] = (-2229);
      intArray0[3] = 2;
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = (-2229);
      intArray1[2] = 203;
      intArray1[3] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(3699, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 1.4699556E-39;
      doubleArray0[2] = 7562.0;
      doubleArray0[3] = (-1600.73476);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 390.8325995741;
      doubleArray0[8] = 6.283185307179586;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (7,562 >= -1,600.735)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1649.036608935579;
      doubleArray0[1] = 1649.036608935579;
      doubleArray0[2] = 1649.036608935579;
      doubleArray0[3] = 52.14785391266248;
      doubleArray0[4] = 1649.036608935579;
      MathArrays.scaleInPlace(1649.036608935579, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "x,";
      stringArray0[2] = "jwO=b/>8Y~?[)iEs3";
      stringArray0[3] = "oYEO1/-v:,";
      stringArray0[4] = "wt@a/u0]93{s+c";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-2181.668), doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.checkNonNegative(longArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer integer0 = new Integer(4018);
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      integerArray0[5] = integer0;
      integerArray0[6] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (int)integerArray0[4];
      doubleArray1[1] = (double) (int)integerArray0[4];
      doubleArray1[2] = (double) (int)integerArray0[5];
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = (double) (int)integerArray0[3];
      doubleArray1[5] = 9920307.800675198;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) (int)integerArray0[5];
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      int[] intArray0 = new int[3];
      intArray0[1] = 215;
      intArray0[2] = 215;
      MathArrays.distance1(intArray0, intArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 763.4, 489.0, 763.4, (-346.81), 865513.9089, 0.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 215;
      doubleArray1[1] = 865513.9089;
      doubleArray1[2] = 763.4;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 763.4;
      doubleArray1[5] = 865513.9089;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[8];
      intArray0[0] = (-2838);
      intArray0[1] = (-829);
      intArray0[2] = 31;
      intArray0[3] = 42;
      intArray0[4] = (-103);
      intArray0[5] = 111;
      intArray0[6] = 21;
      intArray0[7] = 38;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 42;
      floatArray0[2] = (-1380.0F);
      floatArray0[3] = (float) 42;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean0);
      
      double[] doubleArray1 = new double[0];
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray1, doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-2008);
      intArray0[1] = 79;
      intArray0[2] = (-2954);
      intArray0[3] = 1771;
      intArray0[4] = 0;
      intArray0[5] = 194;
      MathArrays.copyOf(intArray0);
      MathArrays.distanceInf(doubleArray0, doubleArray2);
      MathArrays.scaleInPlace(Double.NaN, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      MathArrays.linearCombination((-2802.6780878), (-2802.6780878), (-2802.6780878), (-1307.698419978982), 0.0, 506.919368321);
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2802.6780878);
      doubleArray0[3] = 1.1520062170960039E7;
      doubleArray0[4] = 506.919368321;
      doubleArray0[5] = 0.0;
      doubleArray0[0] = (-1307.698419978982);
      doubleArray0[7] = (-1307.698419978982);
      doubleArray0[8] = (-1307.698419978982);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4215), 17);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      long[][] longArray0 = new long[3][2];
      long[] longArray1 = new long[5];
      longArray1[0] = 538L;
      longArray1[1] = 796L;
      longArray1[2] = 1L;
      longArray1[3] = 1L;
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-1L);
      longArray2[1] = 1L;
      longArray2[2] = 1L;
      longArray2[3] = 538L;
      longArray2[4] = (-1L);
      longArray2[5] = 1L;
      longArray2[6] = 1677L;
      longArray2[7] = 538L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 1802L;
      longArray3[1] = 1L;
      longArray3[2] = 796L;
      longArray3[3] = 1L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-5798));
      Integer integer1 = Integer.getInteger("m:Z1", (-5798));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer1;
      Integer integer2 = new Integer((-4511));
      integerArray0[4] = integer2;
      integerArray0[5] = integer0;
      integerArray0[6] = integer1;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)integerArray0[3];
      doubleArray0[1] = (double) (int)integerArray0[2];
      doubleArray0[2] = (double) (int)integerArray0[5];
      doubleArray0[3] = 3348.61104;
      doubleArray0[4] = (double) (int)integerArray0[6];
      doubleArray0[5] = (double) (int)integerArray0[5];
      doubleArray0[6] = (double) (int)integerArray0[1];
      doubleArray0[7] = (double) (int)integerArray0[0];
      doubleArray0[8] = (double) (int)integerArray0[5];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1428.7749084585573;
      doubleArray0[1] = 1428.7749084585573;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t(ym}Q$*G@loS";
      stringArray0[1] = "m:Z1";
      stringArray0[2] = "m:Z1";
      stringArray0[3] = "m:Z1";
      stringArray0[4] = "m:Z1";
      stringArray0[5] = "m:Z1";
      stringArray0[6] = "m:Z1";
      stringArray0[7] = "m:Z1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      MathArrays.checkNonNegative(longArray0);
      double double0 = 4376.267774367332;
      double double1 = 1428.7749084585573;
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 1428.7749084585573;
      doubleArray0[1] = 1428.7749084585573;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 4.438921624363781E-8;
      doubleArray0[0] = 4.438921624363781E-8;
      double double1 = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      double double2 = 13.31894502;
      doubleArray0[2] = 13.31894502;
      double double3 = 1637.7087801;
      doubleArray0[3] = 1637.7087801;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 10000;
      doubleArray0[0] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 203, (-492.965812185), (double) 203, 867.7);
      Integer integer0 = new Integer(203);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(10000);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 203;
      integerArray0[6] = (Integer) 10000;
      integerArray0[7] = integerArray0[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (10,000 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 203;
      int int0 = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m:Z1";
      stringArray0[1] = "m:Z1";
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = (Integer) (-1);
      integerArray0[2] = (Integer) (-1);
      Integer integer0 = new Integer((-1));
      integerArray0[3] = integer0;
      integerArray0[4] = (Integer) (-1);
      Integer integer1 = Integer.getInteger("R-L~4amJrl.f4gxrN", (-1));
      integerArray0[5] = integer1;
      integerArray0[6] = (Integer) (-1);
      integerArray0[8] = (Integer) 203;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[0];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = 3348.61104;
      doubleArray1[2] = (double) (-1);
      doubleArray1[3] = (double) (-1);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(204.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-930.33);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.OrderDirection.values();
      Double double0 = new Double((-930.33));
      long[] longArray0 = new long[2];
      longArray0[0] = 3534L;
      longArray0[1] = 538L;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.checkOrder(doubleArray2);
      assertArrayEquals(new double[] {865513.9089}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      MathArrays.equals(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 221;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[0];
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      MathArrays.copyOf(intArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 677, (-718));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.equals(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3941.6F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1774.6F;
      floatArray0[4] = 1548.08F;
      floatArray0[5] = (-775.1535F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(1759.67, 1759.67, (double) 1774.6F, 564.0);
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double double0 = (-1600.73476);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double double1 = 1806.0050932331628;
      double double2 = 3247.8825447035347;
      double double3 = 2354.867;
      MathArrays.linearCombination(1806.0050932331628, (double) 0, 3247.8825447035347, 2354.867);
      double double4 = 0.0;
      MathArrays.linearCombination(0.9985313415527344, 469.535, 0.0, (-3583.152615), 1.09765000864E7, 0.9985313415527344, (-3583.152615), 1806.0050932331628);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      MathArrays.linearCombination(1.304E19, 3157.970299347517, (-1.0), 3157.970299347517);
      double double0 = 1337.7817;
      MathArrays.linearCombination(1337.7817, (-3583.152615), 1.304E19, 4.117993270349162E22, 3157.970299347517, 4.117993270349162E22, (-808.8278563303), 250.6363525183493);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (13,040,000,000,000,000,000 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-924.45333);
      doubleArray0[1] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = (-621.358332);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 878.057229381;
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray2);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-704);
      intArray0[1] = (-2488);
      intArray0[2] = 215;
      intArray0[3] = (-2488);
      intArray0[4] = (-704);
      doubleArray0[1] = (double) (-704);
      intArray0[6] = (-357);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 389;
      intArray0[0] = 389;
      intArray0[1] = 154;
      int int1 = 17;
      intArray0[2] = 17;
      int int2 = 22;
      intArray0[3] = 22;
      int[] intArray1 = new int[1];
      intArray1[0] = 154;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-924.45333);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 457.3183;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1063753.986862979, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (854,613.959 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      float[] floatArray0 = new float[23];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 5247.79F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-9.0804F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(Double.NaN, 1.2246467991473532E-16, (double) 0.0F, (double) 5247.79F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      long[][] longArray0 = new long[1][3];
      long[] longArray1 = new long[9];
      longArray1[0] = 4503599627370496L;
      longArray1[1] = (-1734L);
      longArray1[2] = 203L;
      longArray1[3] = 0L;
      longArray1[4] = 2374L;
      longArray1[5] = 1L;
      longArray1[6] = 1798L;
      longArray1[7] = 510L;
      longArray1[8] = 2147483648L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 134217729;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      double[][] doubleArray0 = new double[5][8];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-924.45333);
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = 134217729;
      intArray0[1] = (-2576);
      intArray0[2] = (-904);
      intArray0[3] = (-2147268921);
      intArray0[4] = 1033;
      intArray0[5] = (-497);
      intArray0[6] = (-83);
      int[] intArray1 = new int[8];
      intArray1[0] = (-83);
      intArray1[1] = (-2147268921);
      intArray1[2] = 1033;
      intArray1[3] = (-2576);
      intArray1[4] = (-904);
      intArray1[5] = (-904);
      intArray1[6] = (-497);
      intArray1[7] = (-83);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(133787901, int0);
      
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) (-2576);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      int int0 = 203;
      intArray0[1] = 203;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 203, (-492.965812185), (double) 203, 867.7);
      Integer integer0 = new Integer(203);
      int int1 = 2297;
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(10000);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 76071.040126445;
      doubleArray2[1] = (double) 10000;
      doubleArray2[2] = (double) (int)integerArray0[0];
      doubleArray2[3] = (double) (int)integerArray0[2];
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) (int)integerArray0[2];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      MathArrays.linearCombination((-3583.152615), Double.NaN, (-1600.73476), Double.NaN);
      MathArrays.linearCombination(6902.192481848625, (-1600.73476), (-1923.109872296304), (-808.8278563303), 4491.3914497526, 0.0, 5069.915076, Double.POSITIVE_INFINITY);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      int int1 = (-60);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729, (-60));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2354.867;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1972.0);
      MathArrays.distance(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 203, (-492.965812185), (double) 203, 867.7);
      Integer integer0 = new Integer(203);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(10000);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = integer1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 203, (-492.965812185), (double) 203, 867.7);
      Integer integer0 = new Integer(203);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(10000);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = integer1;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 35 != 18
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      doubleArray0[0] = (double) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1.7976931348623157E308;
      doubleArray0[2] = 856.9302971897018;
      doubleArray0[3] = 2347.62952;
      doubleArray0[4] = 0.8109631538391113;
      doubleArray0[5] = (-2005.42797899);
      doubleArray0[6] = 1.997844754509471E-9;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-67.3);
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination(3.834E-20, (-3583.1526151636), 3040.10745, (-3788.27));
      MathArrays.linearCombination((-4639.1141810646905), 1031.7, (-4639.1141810646905), Double.NaN, 1.34217729E8, Double.NaN, 562.363383, 1031.7);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[][] longArray0 = new long[1][9];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 10000;
      longArray1[1] = (long) 10000;
      longArray1[2] = (long) 10000;
      longArray1[3] = (long) 10000;
      longArray1[4] = (long) 10000;
      longArray1[5] = (long) 10000;
      longArray1[6] = (long) 10000;
      longArray1[7] = 10000L;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 10000L;
      doubleArray0[1] = (double) 10000L;
      doubleArray0[2] = (double) 10000L;
      doubleArray0[3] = (double) 10000L;
      doubleArray0[4] = (double) 10000L;
      doubleArray0[5] = (double) 10000L;
      doubleArray0[6] = (double) 10000;
      doubleArray0[7] = (double) 10000L;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-644);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-644);
      doubleArray0[1] = (double) (-644);
      doubleArray0[2] = (double) (-644);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-644);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 3192.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      long[][] longArray1 = new long[1][1];
      longArray1[0] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1288.0), (-1288.0), (-1288.0)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) (-644);
      doubleArray2[1] = (double) (-1.0F);
      doubleArray2[2] = (double) (-644.0F);
      doubleArray2[3] = (double) 3192.0F;
      doubleArray2[4] = (double) 3192.0F;
      doubleArray2[5] = (double) (-644.0F);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray2);
      assertEquals(643.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.linearCombination(3157.970299347517, (-3583.152615), (-1600.73476), Double.NaN);
      MathArrays.linearCombination(Double.NaN, (-808.8278563303), (-3583.152615), (-1600.73476), 3.834E-20, 3.834E-20, 0.0, 3.834E-20);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2953.970705944);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2953.970705944));
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-70.45495293824615));
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3192.0F;
      MathArrays.linearCombination((-2953.970705944), (double) 3192.0F, (double) 3192.0F, 69.08723080762552, (double) 3192.0F, 1.01, 69.08723080762552, (-2953.970705944));
      MathArrays.distance1(doubleArray0, doubleArray2);
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 134217729;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 1.34217729E8;
      doubleArray1[1] = (Double) 1.34217729E8;
      doubleArray1[2] = (Double) 1.34217729E8;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection.values();
      MathArrays.linearCombination(1.0, (-154.0965846), (-2306.908672910292), 0.1246747374534607, 0.041666666666621166, 0.0, (double) 134217729, 1307.97272);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-60), 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      MathArrays.linearCombination((-2802.6780878), (-2802.6780878), (-2802.6780878), (-1307.698419978982), 0.0, 506.919368321);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2802.6780878);
      doubleArray0[3] = 1.1520062170960039E7;
      doubleArray0[4] = 506.919368321;
      doubleArray0[5] = 0.0;
      doubleArray0[0] = (-1307.698419978982);
      doubleArray0[7] = (-1307.698419978982);
      doubleArray0[8] = (-1307.698419978982);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4215), 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 0;
      intArray0[2] = (-2174);
      intArray0[3] = 13;
      intArray0[4] = 1199;
      intArray0[5] = (-1452);
      intArray0[6] = (-2174);
      intArray0[7] = (-2174);
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-630.5307216276);
      doubleArray0[1] = (double) 9;
      doubleArray0[2] = (double) 13;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (-2802.6780878);
      doubleArray0[5] = (double) (-2174);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[5][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MathArrays.linearCombination(506.919368321, 1695.059898317235, 14.0, 14.0, 506.919368321, (-355.0));
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(1649.036608935579, doubleArray1);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3.834E-20, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-704);
      intArray0[1] = (-2488);
      intArray0[2] = 215;
      intArray0[3] = (-2488);
      intArray0[4] = (-704);
      doubleArray0[1] = (double) (-704);
      intArray0[6] = (-357);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-9.0804F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-9.0804F);
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((-3583.1526151636), (-3583.1526151636), (-492.965812185), Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 222.56540159;
      doubleArray0[4] = 1307.97272;
      MathArrays.linearCombination((-808.8278563303), Double.NaN, (double) (-9.0804F), (double) (-9.0804F), 1307.97272, 1.34217729E8, (double) 0.0F, (-3583.1526151636));
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 10000;
      doubleArray0[1] = (double) 10000;
      doubleArray0[2] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination((double) 203, (-492.965812185), (double) 203, 867.7);
      Integer integer0 = new Integer(203);
      Integer integer1 = new Integer(2297);
      Integer integer2 = new Integer(10000);
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 203;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      integerArray0[3] = integer2;
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 203;
      integerArray0[6] = (Integer) 10000;
      integerArray0[7] = integerArray0[5];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      long[][] longArray0 = new long[0][7];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1347.2730218372449, (-2668.647), 0.0, 0.0);
      Integer integer0 = new Integer((-875));
      Integer integer1 = new Integer(758);
      Integer integer2 = new Integer(86);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer2;
      Integer integer3 = new Integer((-875));
      integerArray0[1] = integer3;
      integerArray0[2] = integer2;
      boolean boolean0 = false;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "m:Z1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-9.0804F);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 10000;
      longArray0[1] = (long) 10000;
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((-1.0), (-2081.9425102386), (-1682.35217427), (-1682.35217427));
      MathArrays.scaleInPlace(0, doubleArray0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-489.797456207);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1307.97272;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3.141592653589793);
      doubleArray0[1] = (-3.141592653589793);
      doubleArray0[2] = (-3.141592653589793);
      doubleArray0[3] = (-3.141592653589793);
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = (-3.141592653589793);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 548.0;
      doubleArray2[1] = (-3.141592653589793);
      doubleArray2[2] = 548.0;
      doubleArray2[3] = (-159.0853707569);
      doubleArray2[4] = (-3.141592653589793);
      doubleArray2[5] = (-159.0853707569);
      doubleArray2[6] = (-159.0853707569);
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3781;
      doubleArray0[1] = (double) 1199;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m:Z1";
      stringArray0[1] = "m:Z1";
      stringArray0[2] = "m:Z1";
      stringArray0[3] = "D#+or|B";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 3313.08;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      MathArrays.equals(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination((-3871.5), 2272.7332459, 7.848361555046424E-8, 543.8813284, 2107.0, 1060.87546189, 1060.87546189, (-1087.10362298736));
      assertEquals((-7716903.721415942), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 0;
      longArray0[1] = (-1L);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      longArray0[8] = (long) 0;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      try { 
        MathArrays.normalizeArray(doubleArray0, (-2832.085557024));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "m:Z1";
      stringArray0[1] = "m:Z1";
      stringArray0[2] = "m:Z1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-9.0804F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-9.0804F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      MathArrays.linearCombination((-3583.1526151636), (-3583.1526151636), (-492.965812185), Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 222.56540159;
      doubleArray0[4] = 1307.97272;
      doubleArray0[5] = 222.56540159;
      doubleArray0[6] = (-492.965812185);
      doubleArray0[7] = (double) 10000;
      MathArrays.scaleInPlace(1205.191677, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 268233.96958443057, 0.0, 1576357.8358870514, 268233.96958443057, (-594118.2938909072), 1.205191677E7}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2953.970705944);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2953.970705944));
      MathArrays.normalizeArray(doubleArray1, (-80.70308884128626));
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3192.0F;
      floatArray0[1] = 3852.2F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1109.5F);
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) (-1109.5F);
      doubleArray2[1] = (double) (-1109.5F);
      doubleArray2[2] = (-2953.970705944);
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = (double) 3192.0F;
      doubleArray2[5] = (double) (-1.0F);
      doubleArray2[6] = (double) 3.4028235E38F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-2953.970705944)}, doubleArray1, 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-924.45333);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 457.3183;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-62);
      intArray0[1] = 1;
      intArray0[2] = 1390;
      intArray0[3] = (-2140666238);
      intArray0[4] = 1280;
      intArray0[5] = 26;
      intArray0[6] = 1390;
      intArray0[7] = (-279);
      intArray0[8] = 1;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1493.122225446;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-2312.189085042748);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1361.347392;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 55);
      int[] intArray0 = new int[4];
      intArray0[0] = 55;
      intArray0[1] = 55;
      intArray0[2] = 55;
      intArray0[3] = 55;
      MathArrays.copyOf(intArray0);
      double[][] doubleArray2 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      MathArrays.scale(Double.NaN, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 55 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MathArrays.linearCombination((-2802.6780878), (-2802.6780878), (-2802.6780878), 1.304E19, 0.0, 506.919368321);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2802.6780878);
      doubleArray0[3] = (-3.654692226491199E22);
      doubleArray0[4] = 506.919368321;
      doubleArray0[5] = 0.0;
      doubleArray0[0] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3.654692226491199E22);
      doubleArray1[1] = 0.0;
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      int int0 = (-644);
      intArray0[0] = (-644);
      intArray0[1] = 0;
      intArray0[2] = 424;
      intArray0[3] = 14;
      intArray0[4] = (-699);
      intArray0[5] = (-1);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 424;
      doubleArray0[3] = 3781.0;
      doubleArray0[4] = (double) 424;
      doubleArray0[5] = (double) 0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-644);
      intArray0[1] = 0;
      intArray0[2] = 424;
      intArray0[3] = 14;
      intArray0[4] = (-699);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 14;
      doubleArray0[2] = (double) 424;
      doubleArray0[3] = (double) 424;
      doubleArray0[4] = (double) (-644);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 424;
      doubleArray0[7] = (double) 14;
      double[][] doubleArray1 = new double[6][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.scale(1206.676135924, doubleArray0);
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.distance1(intArray1, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      long[][] longArray1 = new long[7][6];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-2796.1345F);
      floatArray0[2] = (-327.2858F);
      floatArray0[3] = 4076.135F;
      floatArray0[4] = 1.2387606F;
      floatArray0[5] = (-9.0804F);
      floatArray0[6] = 242.83F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 4076.135F, 0.0, (double) 4076.135F, (-3565.0));
      assertEquals((-1.4531421309814453E7), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 222.56540159;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0.0F;
      doubleArray1[1] = (double) (-2796.1345F);
      doubleArray1[2] = (double) 0.0F;
      doubleArray1[3] = 222.56540159;
      doubleArray1[4] = (double) (-2796.1345F);
      doubleArray1[5] = 1.44888888888888883E18;
      doubleArray1[6] = (double) 0.0F;
      doubleArray1[7] = 3.654692226491199E22;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 3.4028235E38F;
      doubleArray2[1] = 1.44888888888888883E18;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2953.970705944);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2953.970705944));
      MathArrays.normalizeArray(doubleArray1, (-70.45495293824615));
      MathArrays.OrderDirection.values();
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3192.0F;
      floatArray0[1] = 3852.2F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-2796.1345F);
      floatArray0[2] = (-327.2858F);
      floatArray0[3] = 4076.135F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-9.0804F);
      floatArray0[6] = 242.83F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.linearCombination((double) 4076.135F, 0.0, (double) 4076.135F, (-3564.955346));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 222.56540159;
      long[] longArray0 = new long[6];
      longArray0[0] = (-314L);
      longArray0[1] = (-3521L);
      longArray0[2] = 1L;
      longArray0[3] = (-3153L);
      longArray0[4] = 1L;
      longArray0[5] = (-1734L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -314 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = 1.304E19;
      double double1 = 0.0;
      double double2 = 506.919368321;
      MathArrays.linearCombination((-2802.6780878), (-2802.6780878), (-2802.6780878), 1.304E19, 0.0, 506.919368321);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2802.6780878);
      doubleArray0[3] = (-3.654692226491199E22);
      doubleArray0[4] = 506.919368321;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      doubleArray0[7] = 1.304E19;
      doubleArray0[8] = 1.304E19;
      MathArrays.safeNorm(doubleArray0);
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-3.654692226491199E22);
      doubleArray2[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MathArrays.linearCombination(0.0, Double.POSITIVE_INFINITY, (-2957.793618301633), (-2957.793618301633), (-2957.793618301633), Double.POSITIVE_INFINITY);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2957.793618301633);
      doubleArray0[1] = (-2957.793618301633);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = Double.NaN;
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 900;
      intArray0[1] = (-1173);
      intArray0[2] = 114;
      intArray0[3] = 0;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertArrayEquals(new int[] {900, (-1173), 114, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[6] = Double.NEGATIVE_INFINITY;
      MathArrays.scaleInPlace(Double.NEGATIVE_INFINITY, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.linearCombination((-721.8), (-721.8), (-721.8), (-721.8), (-721.8), (-721.8));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1562985.7199999997;
      int int0 = (-2227);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2227));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1298.3;
      doubleArray0[1] = 3461.76679528052;
      doubleArray0[2] = (-2157.700521579208);
      doubleArray0[3] = 1744.4063767757782;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1298.3;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3461.76679528052;
      doubleArray1[4] = (-2157.700521579208);
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, 2.666384345128645, Double.NEGATIVE_INFINITY, 0.5039063807400181, -0.0}, doubleArray2, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-274.50525F);
      floatArray0[3] = 3401.03F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1607.8F;
      floatArray0[6] = 0.0F;
      float[] floatArray1 = new float[7];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-849.2F);
      floatArray1[3] = 1607.8F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 3401.03F;
      floatArray1[6] = 1607.8F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 2;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 6.283185307179586;
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = 6.283185307179586;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1194.3886;
      doubleArray0[1] = 223.17136167951;
      doubleArray0[2] = (-3871.5);
      doubleArray0[3] = (-1743.844433282934);
      doubleArray0[4] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = 2124.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3.4028235E38F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      MathArrays.equals(doubleArray1, doubleArray1);
      MathArrays.linearCombination((-3871.5), 2272.7332459, 3.32, 2272.7332459, (double) 1.0F, 2272.7332459, 166.4858616696, 223.17136167951);
      double[] doubleArray2 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1650.6);
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-962.333201118992);
      doubleArray0[5] = (-2106.2757962);
      doubleArray0[6] = 208.38;
      doubleArray0[7] = 20.0;
      doubleArray0[8] = (-1595.387891231749);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1650.6), 3.834E-20, 0.0, (-962.333201118992), (-2106.2757962), 208.38, 20.0, (-1595.387891231749)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      double double0 = (-1694.9);
      doubleArray1[0] = (-1694.9);
      doubleArray1[1] = 767.7095161537404;
      doubleArray1[2] = 411.0;
      doubleArray1[3] = (-565.228106);
      doubleArray1[4] = 2129.546974523366;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 0.0;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-489.797456207);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 1307.97272;
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-704);
      intArray0[1] = (-2488);
      intArray0[2] = (-357);
      int[] intArray1 = MathArrays.copyOf(intArray0, 924);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = (-2796.1345F);
      floatArray0[2] = (-327.2858F);
      floatArray0[3] = 4076.135F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-9.0804F);
      floatArray0[6] = 242.83F;
      floatArray0[7] = 0.0F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      double double0 = MathArrays.linearCombination((double) 4076.135F, 0.0, (double) 4076.135F, (-3564.955346));
      assertEquals((-1.4531239294081727E7), double0, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 222.56540159;
      doubleArray0[1] = (double) 242.83F;
      MathArrays.scaleInPlace(0.0F, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1943);
      int[] intArray1 = new int[6];
      intArray1[0] = (-1943);
      intArray1[1] = 0;
      intArray1[2] = (-3763);
      intArray1[3] = (-1943);
      intArray1[4] = (-3235);
      intArray1[5] = 0;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(2747.816951690924, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2354.867;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1972.0);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3903);
      assertEquals(3903, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1493.122225446;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-2312.189085042748);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1361.347392;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 55);
      int[] intArray0 = new int[4];
      intArray0[0] = 55;
      intArray0[1] = 55;
      intArray0[2] = 55;
      intArray0[3] = 55;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      double[][] doubleArray2 = new double[0][5];
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      MathArrays.scale(Double.NaN, doubleArray1);
      MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-2312.189085042748), 0.0, 0.0, 0.0, 1.0, 20.0, 1361.347392, 1493.122225446, Double.NaN}, doubleArray0, 0.01);
      
      int int0 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-67.3);
      doubleArray0[1] = (-67.3);
      doubleArray0[2] = (-67.3);
      doubleArray0[3] = (-67.3);
      doubleArray0[4] = (-67.3);
      doubleArray0[5] = (-67.3);
      doubleArray0[6] = (-67.3);
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (-67.3);
      double[] doubleArray1 = MathArrays.scale((-67.3), doubleArray0);
      assertArrayEquals(new double[] {4529.29, 4529.29, 4529.29, 4529.29, 4529.29, 4529.29, 4529.29, 67.3, 4529.29}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1865.021005502181);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double double0 = (-1922.53769649163);
      doubleArray0[3] = (-1922.53769649163);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-729.3844955138626);
      doubleArray0[6] = 0.0;
      double[] doubleArray1 = new double[0];
      MathArrays.equals(doubleArray0, doubleArray1);
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 10000;
      intArray0[1] = 203;
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = 2747;
      intArray0[5] = 264;
      intArray0[6] = 2121;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 264;
      doubleArray0[1] = (double) 203;
      doubleArray0[2] = (double) 264;
      doubleArray0[3] = (-504.37048);
      doubleArray0[4] = (double) 2121;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3.834E-20);
      assertArrayEquals(new double[] {4.3114809699615634E-21, 3.3152675640234754E-21, 4.3114809699615634E-21, (-8.237059569433255E-21), 3.463883006548665E-20, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 355.99921833659;
      doubleArray0[2] = (-492.965812185);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 975.082791;
      double double0 = 1442.9379841469;
      doubleArray0[5] = 1442.9379841469;
      doubleArray0[6] = 3.834E-20;
      double double1 = 1.0;
      doubleArray0[7] = 1.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -492.966 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      MathArrays.linearCombination(1655.91636702442, 0.0, 0.0, 0.0);
      long[][] longArray0 = new long[9][1];
      long[] longArray1 = new long[8];
      longArray1[0] = (-1L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-48L);
      longArray1[4] = (-643L);
      longArray1[5] = 1303L;
      longArray1[6] = (-4369L);
      longArray1[7] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-48L);
      longArray2[1] = (-4369L);
      longArray2[2] = (-643L);
      longArray2[3] = 1303L;
      longArray2[4] = (-48L);
      longArray2[5] = (-643L);
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      longArray0[4] = longArray5;
      long[] longArray6 = new long[1];
      longArray6[0] = 1303L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[0];
      longArray0[6] = longArray7;
      long[] longArray8 = new long[3];
      longArray8[0] = 0L;
      longArray8[1] = 1303L;
      longArray8[2] = (-1L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[8];
      longArray9[0] = 1303L;
      longArray9[1] = (-1L);
      longArray9[2] = (-4369L);
      longArray9[3] = (-1L);
      longArray9[4] = (-4369L);
      longArray9[5] = (-48L);
      longArray9[6] = (-48L);
      longArray9[7] = 1303L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 97;
      intArray0[1] = 4666;
      intArray0[2] = (-891);
      intArray0[3] = (-1737);
      intArray0[4] = 52;
      intArray0[5] = (-1786);
      intArray0[6] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-644);
      intArray0[1] = 0;
      intArray0[2] = 424;
      intArray0[3] = 14;
      intArray0[4] = (-699);
      intArray0[5] = (-1);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 3.32;
      MathArrays.linearCombination(0.0, 3.32, 0.0, 3.32, 3.32, 3.32);
      int[] intArray0 = new int[4];
      intArray0[0] = 1750;
      intArray0[1] = (-950);
      int int0 = 0;
      intArray0[2] = 0;
      int int1 = 189;
      intArray0[3] = 189;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-950));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-38.787582312493);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 7.47868;
      doubleArray0[3] = 1742.538718577;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-841.62807141031);
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2953.970705944);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2953.970705944));
      MathArrays.normalizeArray(doubleArray1, (-80.70308884128626));
      assertArrayEquals(new double[] {(-2953.970705944)}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection.values();
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      float[] floatArray0 = new float[8];
      floatArray0[0] = 3192.0F;
      floatArray0[1] = 3852.2F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 3.4028235E38F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1109.5F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = 4078.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 5251.63F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (-1123.558F);
      float float0 = 1.0F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 556.0F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[4];
      floatArray1[0] = 5251.63F;
      floatArray1[1] = 556.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1.0F;
      MathArrays.equals(floatArray0, floatArray1);
      double double0 = 1.0;
      MathArrays.linearCombination(254.16937873, (double) (-1123.558F), (double) 0.0F, (double) 0.0F, 1.0, Double.NaN);
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3781;
      intArray0[1] = (-2174);
      intArray0[2] = (-1452);
      intArray0[3] = 1199;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3781;
      doubleArray0[1] = (double) 1199;
      doubleArray0[2] = (double) 1199;
      doubleArray0[3] = (double) 3781;
      doubleArray0[4] = (-3.141592653589793);
      doubleArray0[5] = (double) 3781;
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][9];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 3781;
      doubleArray2[1] = (-3.141592653589793);
      doubleArray2[2] = (double) (-2174);
      doubleArray2[3] = (double) 1199;
      doubleArray2[4] = (-159.0853707569);
      doubleArray2[5] = (double) (-1452);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (-1452);
      doubleArray3[1] = (double) (-2174);
      doubleArray3[2] = (double) (-1452);
      doubleArray3[3] = 548.0;
      doubleArray3[4] = (double) (-1452);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (double) (-1452);
      doubleArray3[7] = (double) (-1452);
      doubleArray1[2] = doubleArray3;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-3492.5247419002);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-159.0853707569);
      doubleArray4[3] = (double) 1199;
      doubleArray4[4] = (double) 3781;
      doubleArray4[5] = (double) (-2174);
      doubleArray4[6] = (double) (-2174);
      doubleArray4[7] = (-3.141592653589793);
      doubleArray1[4] = doubleArray4;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = 0L;
      longArray1[3] = (-1734L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = (-1734L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = 0L;
      longArray4[1] = 1L;
      longArray4[2] = (-1734L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = (-1734L);
      longArray5[3] = (-1734L);
      longArray5[4] = 0L;
      longArray5[5] = 1L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = (-1734L);
      longArray6[3] = 0L;
      longArray6[4] = 1L;
      longArray6[5] = (-1734L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      longArray7[0] = 0L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 1L;
      longArray7[4] = 0L;
      longArray7[5] = (-1734L);
      longArray7[6] = 0L;
      longArray7[7] = 1L;
      longArray7[8] = 1L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,734 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[7][5];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (long) 0;
      longArray2[1] = (long) 0;
      longArray2[2] = (long) 0;
      longArray2[3] = (long) 0;
      longArray2[4] = (long) 0;
      longArray2[5] = (-1L);
      longArray2[6] = (long) 0;
      longArray2[7] = (long) 0;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      longArray3[0] = (-1L);
      longArray3[1] = (long) 0;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[6];
      longArray5[0] = (-1L);
      longArray5[1] = (long) 0;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 0;
      longArray5[4] = (long) 0;
      longArray5[5] = (-1L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-1L);
      longArray6[1] = (-741L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[3];
      longArray7[0] = (-1L);
      longArray7[1] = (-741L);
      longArray7[2] = (-1L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 8 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-2473);
      intArray0[2] = 4589;
      intArray0[3] = (-1877);
      intArray0[4] = (-414);
      intArray0[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = 179;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 179);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.safeNorm(doubleArray0);
      MathArrays.copyOf(doubleArray0, 2297);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-1378), (-1378));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[][] longArray0 = new long[7][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 0L;
      longArray2[3] = 0L;
      longArray2[4] = 0L;
      longArray2[5] = 0L;
      longArray2[6] = 0L;
      longArray2[7] = 0L;
      longArray2[8] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = 0L;
      longArray5[1] = 0L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      longArray6[0] = 0L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = 0L;
      longArray6[4] = 1217L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      longArray7[0] = 0L;
      longArray7[1] = 1217L;
      longArray7[2] = 0L;
      longArray7[3] = 1217L;
      longArray7[4] = 1217L;
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1512.7936415369);
      doubleArray0[1] = 467.411;
      doubleArray0[2] = 312.634531828742;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1600.73476);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }
}
