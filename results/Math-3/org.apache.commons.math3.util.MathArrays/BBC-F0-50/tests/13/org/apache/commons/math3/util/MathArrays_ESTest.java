/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:50:15 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2145875270);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(10, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(16, doubleArray2.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1038));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 1904.259765625;
      doubleArray0[2] = 2637.40989572;
      doubleArray0[3] = (-4.9E-324);
      doubleArray0[4] = 2576.53548931734;
      doubleArray0[5] = 765.13072917;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 5315.898960696572;
      doubleArray0[8] = (-378.77532735);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6797.67231354939, double0, 0.01);
      assertEquals(23, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 6797.67231354939;
      doubleArray1[2] = (-4.9E-324);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 1904.259765625;
      doubleArray1[6] = 765.13072917;
      doubleArray1[7] = 6797.67231354939;
      doubleArray1[8] = 2637.40989572;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 6797.67231354939, (-4.9E-324), 3.834E-20, 3.834E-20, 1904.259765625, 765.13072917, 6797.67231354939, 2637.40989572}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(23, doubleArray0.length);
      assertEquals(45, doubleArray2.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.834E-20, 6797.67231354939, (-4.9E-324), 3.834E-20, 3.834E-20, 1904.259765625, 765.13072917, 6797.67231354939, 2637.40989572}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(23, doubleArray0.length);
      assertEquals(45, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2147483647);
      intArray0[1] = 1647;
      intArray0[2] = 3582;
      intArray0[3] = (-2863);
      intArray0[4] = 3405;
      intArray0[5] = 36;
      intArray0[6] = (-1931);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2147483647), 1647, 3582, (-2863), 3405, 36, (-1931)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2147483647);
      doubleArray0[1] = (double) (-1931);
      doubleArray0[2] = (double) 3405;
      doubleArray0[3] = (-2095.24290186);
      doubleArray0[4] = (double) 36;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) 3582;
      doubleArray0[7] = (double) (-2147483647);
      doubleArray0[8] = (double) 3405;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-2.147483647E9), (-1931.0), 3405.0, (-2095.24290186), 36.0, Double.NaN, 3582.0, (-2.147483647E9), 3405.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-2.147483647E9), (-1931.0), 3405.0, (-2095.24290186), 36.0, Double.NaN, 3582.0, (-2.147483647E9), 3405.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(17, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2147483647), 1647, 3582, (-2863), 3405, 36, (-1931)}, intArray0);
      assertArrayEquals(new int[] {(-2147483647), 1647, 3582, (-2863), 3405, 36, (-1931)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) 3405;
      integerArray0[1] = (Integer) 1647;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) 101;
      floatArray0[2] = (float) 101;
      floatArray0[3] = (float) 101;
      floatArray0[4] = (float) 101;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {101.0F, 101.0F, 101.0F, 101.0F, 101.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 101);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-1413.581697767);
      doubleArray0[3] = (-448.776974);
      doubleArray0[4] = 1.86285714285714278E18;
      doubleArray0[5] = 0.5463024377822876;
      doubleArray0[6] = 3607.106168661036;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.44888888888888883E18;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-1413.581697767), 0.0, (-448.776974), 1.86285714285714278E18, 0.5463024377822876, 3607.106168661036, 1.0, 1.44888888888888883E18}, doubleArray0, 0.01);
      assertEquals(1.3251834429505962E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, (-1413.581697767), 0.0, (-448.776974), 1.86285714285714278E18, 0.5463024377822876, 3607.106168661036, 1.0, 1.44888888888888883E18}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 64, 64);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3950.8);
      doubleArray0[1] = 5.0614674548127384E-8;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3950.8), 5.0614674548127384E-8, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.560882064E7, (-3.9993691240948335E-4), (-1.0303686400000001E23), 1.320030712215162E12, 1.700416E38}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 132;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {132}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3950.8), 5.0614674548127384E-8, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.560882064E7, (-3.9993691240948335E-4), (-1.0303686400000001E23), 1.320030712215162E12, 1.700416E38}, doubleArray1, 0.01);
      assertEquals(1.700416E38, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 132);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-3950.8), 5.0614674548127384E-8, 1.304E19}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3.9992760736196334E-14), 5.123571349963816E-25, 132.00000000000003}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = (double) 132;
      doubleArray3[2] = (double) 132;
      double double2 = MathArrays.safeNorm(doubleArray3);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1.304E19, 132.0, 132.0}, doubleArray3, 0.01);
      assertEquals(1.304E19, double2, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(3, doubleArray3.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {132}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {132}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, intArray1.length);
      assertEquals(1, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-3950.8), 5.0614674548127384E-8, 1.304E19}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 0;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3232.2176573039046;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.86285714285714278E18;
      doubleArray0[3] = (-1738.35860091);
      doubleArray0[4] = 1.125;
      doubleArray0[5] = (-3351.415724);
      doubleArray0[6] = 795.2505904773739;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3232.2176573039046, 1.0, 1.86285714285714278E18, (-1738.35860091), 1.125, (-3351.415724), 795.2505904773739}, doubleArray0, 0.01);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer((-2147483647));
      assertNotNull(integer0);
      assertEquals((-2147483647), (int)integer0);
      
      Double double0 = new Double((-1864.2206));
      assertNotNull(double0);
      assertEquals((-1864.2206), (double)double0, 0.01);
      
      Pair<Double, FieldElement<Pair<String, Object>>> pair0 = new Pair<Double, FieldElement<Pair<String, Object>>>(double0, (FieldElement<Pair<String, Object>>) null);
      assertNotNull(pair0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 101;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {101.0, 101.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 529);
      assertNotEquals((double)double0, (double)double1, 0.01);
      assertNotNull(objectArray0);
      assertEquals(529, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 323.0;
      doubleArray0[1] = 2194.98907;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][3];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[26];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5662.0F);
      floatArray0[1] = 97.03321F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-5662.0F), 97.03321F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(26, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1636.808F);
      floatArray0[1] = 588.99695F;
      floatArray0[2] = 3877.9004F;
      floatArray0[3] = (-149.267F);
      floatArray0[4] = (-1077.11F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1636.808F), 588.99695F, 3877.9004F, (-149.267F), (-1077.11F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1077.11F);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1077.1099853515625)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-16);
      intArray0[1] = 3167;
      intArray0[2] = 1840700269;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = (-2681);
      intArray0[6] = 191;
      intArray0[7] = 371;
      intArray0[8] = 17;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1840700269;
      intArray1[2] = 1840700269;
      intArray1[3] = (-16);
      intArray1[4] = 134217729;
      intArray1[5] = 1840700269;
      intArray1[6] = (-1);
      intArray1[7] = 191;
      intArray1[8] = 191;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, 1840700269, 1840700269, (-16), 134217729, 1840700269, (-1), 191, 191}, intArray1);
      assertArrayEquals(new int[] {(-16), 3167, 1840700269, 0, (-1), (-2681), 191, 371, 17}, intArray0);
      assertEquals((-479348936), int0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "points {3} and {2} are not decreasing ({1} < {0})";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "INCREASING";
      stringArray0[8] = "Gh?b";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 1049.57760701448, 1199.505, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-0.63);
      doubleArray0[1] = 2018.6070422299981;
      doubleArray0[2] = (-753.7999877929688);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3720.9);
      doubleArray0[5] = (-2345.903214338122);
      doubleArray0[6] = (-1034.147087);
      doubleArray0[7] = (-996.0);
      doubleArray0[8] = (-1961.85);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.39690000000000003, 4074774.3909405414, 568214.4215966798, 1.0, 1.384509681E7, 5503261.891041932, 1069460.1975505857, 992016.0, 3848855.4225}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean2 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.39690000000000003, 4074774.3909405414, 568214.4215966798, 1.0, 1.384509681E7, 5503261.891041932, 1069460.1975505857, 992016.0, 3848855.4225}, doubleArray1, 0.01);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.39690000000000003, 4074774.3909405414, 568214.4215966798, 1.0, 1.384509681E7, 5503261.891041932, 1069460.1975505857, 992016.0, 3848855.4225}, doubleArray1, 0.01);
      assertEquals((-6.627419631672215E10), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-0.63), 2018.6070422299981, (-753.7999877929688), 1.0, (-3720.9), (-2345.903214338122), (-1034.147087), (-996.0), (-1961.85)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.39690000000000003, 4074774.3909405414, 568214.4215966798, 1.0, 1.384509681E7, 5503261.891041932, 1069460.1975505857, 992016.0, 3848855.4225}, doubleArray1, 0.01);
      assertEquals(1.384881771E7, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1104.6824F);
      floatArray0[1] = 3651.0F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 3651.0F;
      floatArray0[0] = (-2281.0046F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-2281.0046F), 3651.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3651.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      Field<Pair<Object, String>> field0 = (Field<Pair<Object, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-232);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2298, (-232));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = -0.0F;
      floatArray0[1] = 1379.73F;
      floatArray0[2] = (-501.3F);
      floatArray0[3] = 417.402F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1379.73F;
      floatArray1[1] = 1379.73F;
      floatArray1[2] = -0.0F;
      floatArray1[3] = 1379.73F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {-0.0F, 1379.73F, (-501.3F), 417.402F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1379.73F, 1379.73F, -0.0F, 1379.73F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2602.71369247268);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-2602.71369247268), Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 2224.09882);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1674.7201;
      doubleArray0[1] = 1674.7201;
      double[] doubleArray1 = MathArrays.scale(1674.7201, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 1674.7201, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2804687.41334401, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2723.6F;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4E*zD81'q}";
      stringArray0[1] = "!4| f";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "4E*zD81'q}";
      stringArray0[4] = "1va/_";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[6] = "ZoSi3Yiws";
      stringArray0[7] = "+E0Bmxke";
      stringArray0[8] = "G~+PNOjbnOP8OJ2";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1674.7201, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2804687.41334401, 0.0}, doubleArray1, 0.01);
      assertEquals(2803012.6932440097, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[30];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(30, doubleArray0.length);
      assertEquals(59, doubleArray1.length);
      
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 30 != 59
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 3220.67F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = Float.POSITIVE_INFINITY;
      floatArray0[5] = 856.349F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 3220.67F, 0.0F, (-1.0F), Float.POSITIVE_INFINITY, 856.349F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1407.8;
      doubleArray0[1] = (-2602.71369247268);
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 3220.67F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1407.8, (-2602.71369247268), Double.POSITIVE_INFINITY, (-1.0), 3220.669921875}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 170;
      intArray0[1] = (-1533);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {170, (-1533)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 170;
      longArray2[1] = (-1L);
      longArray2[2] = (long) (-1533);
      longArray2[3] = (long) (-1533);
      longArray2[4] = (long) 170;
      longArray2[5] = (-3079L);
      longArray2[6] = (long) (-1533);
      longArray2[7] = (long) 170;
      longArray2[8] = (long) 170;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) (-1533);
      longArray3[1] = (-3079L);
      longArray3[2] = (-1L);
      longArray3[3] = (long) (-1533);
      longArray3[4] = (long) (-1533);
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Double double0 = new Double(5.61724809);
      assertNotNull(double0);
      assertEquals(5.61724809, (double)double0, 0.01);
      
      Integer integer0 = new Integer((-730));
      assertNotNull(integer0);
      assertEquals((-730), (int)integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (double) 101;
      doubleArray0[2] = (double) 101;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {101.0, 101.0, 101.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-436), (-2843));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1963.404671;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = 0.19999999999923582;
      doubleArray0[4] = (-294.863422318);
      doubleArray0[5] = (-2140.87);
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1963.404671, 20.0, 1.34217729E8, 0.19999999999923582, (-294.863422318), (-2140.87), 1.0, 1.304E19}, doubleArray0, 0.01);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1963.404671, 20.0, 1.34217729E8, 0.19999999999923582, (-294.863422318), (-2140.87), 1.0, 1.304E19}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3000;
      intArray0[1] = (-3327);
      intArray0[2] = 4080;
      intArray0[3] = 13;
      intArray0[4] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {3000, (-3327), 4080, 13, 2}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {3000, (-3327), 4080, 13, 2}, intArray1);
      assertArrayEquals(new int[] {3000, (-3327), 4080, 13, 2}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 13;
      floatArray0[1] = (float) 13;
      floatArray0[2] = (float) 13;
      floatArray0[3] = (float) (-3327);
      floatArray0[4] = (float) 3000;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {13.0F, 13.0F, 13.0F, (-3327.0F), 3000.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1901.7);
      doubleArray0[0] = (-1901.7);
      double double1 = 690.7620730366009;
      doubleArray0[1] = 690.7620730366009;
      double double2 = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 1.25;
      double double3 = 1974.454;
      doubleArray0[4] = 1974.454;
      double double4 = (-80.0);
      doubleArray0[5] = (-80.0);
      int int0 = 608;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 608);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1901.7), 690.7620730366009, 3.834E-20, 1.25, 1974.454, (-80.0)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(608, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.19999954120254515;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.19999954120254515}, doubleArray0, 0.01);
      assertEquals(0.19999954120254515, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.19999954120254515}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 462.758F;
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 462.758F;
      floatArray1[1] = 462.758F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {462.758F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {462.758F, 462.758F}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.19999954120254515}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.19999954120254515, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1082.05305);
      doubleArray0[1] = (-2039.0613243381429);
      doubleArray0[2] = 1176.98350097;
      doubleArray0[4] = 2981.8198533827;
      doubleArray0[5] = (-1082.05305);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {(-1082.05305), (-2039.0613243381429), 1176.98350097, 0.0, 2981.8198533827, (-1082.05305)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-3315);
      intArray0[1] = (-1617);
      intArray0[2] = 13;
      intArray0[3] = 142;
      intArray0[4] = (-1613);
      intArray0[5] = 0;
      intArray0[6] = (-538);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3315), (-1617), 13, 142, (-1613), 0, (-538)}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.8333333333333334;
      doubleArray0[1] = (-159.576970758624);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 229);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.8333333333333334, (-159.576970758624)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(229, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 1757.697);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1439.839944;
      doubleArray0[2] = 1.7827257129423813E-8;
      doubleArray0[3] = 2010.5;
      doubleArray0[4] = 1.871044268973733E14;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3.43338934259355E-8);
      doubleArray0[1] = (-3.43338934259355E-8);
      doubleArray0[2] = 1102.9;
      doubleArray0[3] = (-3.43338934259355E-8);
      doubleArray0[4] = (-3.43338934259355E-8);
      doubleArray0[5] = (-3.43338934259355E-8);
      doubleArray0[6] = (-3.43338934259355E-8);
      doubleArray0[7] = (-1444.70524);
      doubleArray0[8] = (-3.43338934259355E-8);
      MathArrays.scaleInPlace((-3.43338934259355E-8), doubleArray0);
      assertArrayEquals(new double[] {1.1788162377834969E-15, 1.1788162377834969E-15, (-3.786685105946426E-5), 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 4.960235574205057E-5, 1.1788162377834969E-15}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1.1788162377834969E-15, 1.1788162377834969E-15, (-3.786685105946426E-5), 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 4.960235574205057E-5, 1.1788162377834969E-15}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {1.1788162377834969E-15, 1.1788162377834969E-15, (-3.786685105946426E-5), 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 1.1788162377834969E-15, 4.960235574205057E-5, 1.1788162377834969E-15}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1676.7122F);
      floatArray0[2] = (-599.9045F);
      floatArray0[3] = (-3117.6455F);
      floatArray0[4] = (-3.4028235E38F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {1.0F, (-1676.7122F), (-599.9045F), (-3117.6455F), (-3.4028235E38F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = 1073741824;
      intArray0[1] = 134217729;
      intArray0[2] = 10;
      intArray0[3] = (-2373);
      intArray0[4] = 1507;
      intArray0[5] = 20;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1073741824, 134217729, 10, (-2373), 1507, 20}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(class0).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 101, 101);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3809.233F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = 1853.31F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {3809.233F, Float.NaN, 0.0F, 0.0F, Float.NaN, (-1.0F), 1853.31F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 101, 101);
      assertNotNull(objectArray0);
      assertEquals(101, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2540.0;
      doubleArray3[1] = 6.52E18;
      doubleArray3[2] = (-1.0);
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-652.6712424887176);
      doubleArray3[5] = 0.19999999999923582;
      doubleArray3[6] = 45.0;
      double double0 = MathArrays.distanceInf(doubleArray2, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2540.0, 6.52E18, (-1.0), Double.NaN, (-652.6712424887176), 0.19999999999923582, 45.0}, doubleArray3, 0.01);
      assertEquals(2540.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertEquals(1, doubleArray2.length);
      assertEquals(7, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      assertEquals(19, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace((-547.19916644104), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 39.7688F;
      floatArray0[2] = (-916.0F);
      floatArray0[3] = (-1101.2F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1006.64F;
      floatArray0[6] = 1324.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 39.7688F, (-916.0F), (-1101.2F), 0.0F, 1006.64F, 1324.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 24;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {24L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 24;
      floatArray0[5] = (float) 24;
      floatArray0[2] = (float) 24L;
      floatArray0[3] = (float) 24;
      floatArray0[4] = (float) 24;
      floatArray0[5] = (float) 24L;
      floatArray0[6] = (float) 24;
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 24L;
      floatArray1[1] = (float) 24L;
      floatArray1[2] = (float) 24L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {24.0F, 0.0F, 24.0F, 24.0F, 24.0F, 24.0F, 24.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {24.0F, 24.0F, 24.0F}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(3, floatArray1.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 24.0F;
      doubleArray0[1] = (double) 24.0F;
      doubleArray0[2] = (double) 24.0F;
      doubleArray0[3] = (double) 24.0F;
      doubleArray0[4] = (double) 24;
      doubleArray0[5] = (double) 24;
      doubleArray0[6] = (double) 24.0F;
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-396.5F);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-396.5F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(10, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 86;
      intArray0[1] = 3241;
      intArray0[2] = (-261);
      int[] intArray1 = new int[21];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-261);
      intArray1[1] = 86;
      intArray1[2] = (-261);
      intArray1[3] = 86;
      intArray1[4] = (-261);
      intArray1[5] = 3241;
      intArray1[6] = (-261);
      intArray1[7] = 3241;
      intArray1[8] = 86;
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {86, 3241, (-261)}, intArray0);
      assertEquals(3174.0248896314597, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(21, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.9489846229553223, 2.356194490192345, 0.9489846229553223, 2.356194490192345);
      assertEquals(4.4719846797691805, double0, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotNull(doubleArray4);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = Double.NaN;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 0.0036;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 0.0;
      double[] doubleArray6 = MathArrays.ebeDivide(doubleArray5, doubleArray5);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotNull(doubleArray6);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 1.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0036, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(8, doubleArray6.length);
      assertEquals(8, doubleArray5.length);
      
      MathArrays.scaleInPlace(0.0036, doubleArray6);
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray6));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, 0.0036, Double.NaN, Double.NaN, Double.NaN}, doubleArray6, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0036, 0.0, 0.0, 0.0}, doubleArray5, 0.01);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray5, doubleArray6);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertEquals(8, doubleArray6.length);
      assertEquals(8, doubleArray5.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      stringArray0[1] = "UOu4F*";
      stringArray0[2] = "Fq73@tBm(;WF>ESx";
      stringArray0[3] = "UOu4F*";
      stringArray0[4] = "UOu4F*";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 24;
      floatArray0[1] = (float) 24;
      floatArray0[2] = (-1142.1963F);
      floatArray0[3] = (float) 24;
      floatArray0[4] = (float) 24;
      floatArray0[5] = (float) 24;
      floatArray0[6] = (float) 24;
      floatArray0[7] = (float) 24;
      floatArray0[8] = (float) 24;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.5F;
      floatArray1[1] = (-1142.1963F);
      floatArray1[2] = (-1142.1963F);
      floatArray1[3] = (-1142.1963F);
      floatArray1[4] = (float) 24;
      floatArray1[5] = (-1142.1963F);
      floatArray1[6] = (float) 24;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.5F, (-1142.1963F), (-1142.1963F), (-1142.1963F), 24.0F, (-1142.1963F), 24.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {24.0F, 24.0F, (-1142.1963F), 24.0F, 24.0F, 24.0F, 24.0F, 24.0F, 24.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertEquals(7, floatArray1.length);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f5HR4I3{hSU)Fs";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[7][5];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = 851;
      int[] intArray0 = new int[1];
      intArray0[0] = 851;
      int[] intArray1 = MathArrays.copyOf(intArray0, 851);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {851}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(851, intArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 851;
      doubleArray0[1] = (double) 851;
      doubleArray0[2] = (double) 851;
      double double0 = (-3698.8943745);
      doubleArray0[3] = (-3698.8943745);
      doubleArray0[4] = (double) 851;
      doubleArray0[5] = (double) 851;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {851.0, 851.0, 851.0, (-3698.8943745), 851.0, 851.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {851.0, 851.0, 851.0, (-3698.8943745), 851.0, 851.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.scaleInPlace(851.0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {851.0, 851.0, 851.0, (-3698.8943745), 851.0, 851.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {724201.0, 724201.0, 724201.0, (-3147759.1126995003), 724201.0, 724201.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {851}, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertEquals(851, intArray2.length);
      assertEquals(1, intArray0.length);
      assertEquals(851, intArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-605);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      long[][] longArray0 = new long[4][5];
      long[] longArray1 = new long[1];
      longArray1[0] = (-469L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-469L);
      longArray2[1] = (-469L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-469L);
      longArray3[1] = (-469L);
      longArray3[2] = (-469L);
      longArray3[3] = (-469L);
      longArray3[4] = (-1600L);
      longArray3[5] = (-469L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[7];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-1600L);
      longArray4[1] = (-1600L);
      longArray4[2] = (-1600L);
      longArray4[3] = (-993L);
      longArray4[4] = (-469L);
      longArray4[5] = (-469L);
      long long0 = 2149L;
      longArray4[6] = 2149L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 23;
      intArray0[2] = (-3252);
      intArray0[3] = 134217729;
      intArray0[4] = (-337);
      intArray0[5] = 56;
      intArray0[6] = 135;
      intArray0[7] = 134217729;
      intArray0[8] = (-3686);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {10, 23, (-3252), 134217729, (-337), 56, 135, 134217729, (-3686)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-873);
      intArray1[1] = (-337);
      intArray1[2] = (-3686);
      intArray1[3] = (-3686);
      intArray1[4] = 10;
      intArray1[5] = (-3686);
      intArray1[6] = 135;
      double double1 = MathArrays.distance(intArray1, intArray1);
      assertEquals(double1, double0, 0.01);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-873), (-337), (-3686), (-3686), 10, (-3686), 135}, intArray1);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1058);
      intArray0[1] = 45;
      int int0 = (-808);
      intArray0[2] = (-808);
      int int1 = (-1209);
      int int2 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray0);
      assertEquals(0, int2);
      assertEquals(4, intArray0.length);
      
      int int3 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray0);
      assertEquals(0, int3);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-808);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[1] = 3381.59156494362;
      doubleArray0[2] = 3381.59156494362;
      doubleArray0[3] = 3381.59156494362;
      doubleArray0[4] = (-1487.88661317);
      doubleArray0[5] = 3381.59156494362;
      doubleArray0[6] = 3381.59156494362;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 3381.59156494362;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {3381.59156494362, 3381.59156494362, 3381.59156494362, 3381.59156494362, (-1487.88661317), 3381.59156494362, 3381.59156494362, Double.NaN, 3381.59156494362}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3381.59156494362, 3381.59156494362, 3381.59156494362, 3381.59156494362, (-1487.88661317), 3381.59156494362, 3381.59156494362, Double.NaN, 3381.59156494362}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-808);
      intArray1[1] = (-1209);
      intArray1[2] = 2146011082;
      intArray1[3] = (-1209);
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-808), (-1209), 2146011082, (-1209)}, intArray1);
      assertEquals(2146011082, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      int int1 = MathArrays.distanceInf(intArray1, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-808), (-1209), 2146011082, (-1209)}, intArray1);
      assertEquals(0, int1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1209);
      doubleArray0[1] = (double) (-1209);
      doubleArray0[2] = (double) 2146011082;
      doubleArray0[3] = (double) (-808);
      doubleArray0[4] = (double) (-808);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1209.0), (-1209.0), 2.146011082E9, (-808.0), (-808.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1209.0), (-1209.0), 2.146011082E9, (-808.0), (-808.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      MathArrays.scaleInPlace((-2837.9054), doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1209.0), (-1209.0), 2.146011082E9, (-808.0), (-808.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3431027.6286, 3431027.6286, (-6.090176438067643E12), 2293027.5632, 2293027.5632}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 2146011082;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {2.14601114E9F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray2.length);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1058);
      intArray0[1] = 45;
      intArray0[2] = (-808);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(4, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-808);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-808.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-808.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace((-1121.5719051948026), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {906230.0993974005}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray0);
      assertArrayEquals(new int[] {(-1058), 45, (-808), 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (-808);
      longArray1[1] = (-469L);
      longArray1[3] = (long) (-1209);
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 24;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {24L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      int int0 = 20;
      intArray0[1] = 20;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2, 20}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 20;
      doubleArray2[1] = (double) 20;
      doubleArray2[2] = (double) 24L;
      doubleArray2[3] = (double) 2;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 19 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = 1;
      int int0 = (-1);
      intArray0[2] = (-1);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {2, 1, (-1)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      assertEquals(19, doubleArray2.length);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) (-31);
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) (-1);
      doubleArray3[5] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray2, doubleArray3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@r9zT";
      stringArray0[1] = "$VALUES";
      stringArray0[2] = ">B5l3yL%VL[";
      stringArray0[3] = "PY *PS}vWV6";
      stringArray0[4] = "5?aq}<W[xI";
      stringArray0[5] = "q/=p#d";
      stringArray0[6] = "\"c)hZA]He0f&8bbHS[6";
      stringArray0[7] = "DENOMINATOR_FORMAT";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3381.59156494362;
      doubleArray1[1] = 3381.59156494362;
      doubleArray1[2] = 3381.59156494362;
      doubleArray1[3] = 3381.59156494362;
      doubleArray1[4] = 1.44888888888888883E18;
      doubleArray1[5] = 1.8983943971542124E7;
      doubleArray1[6] = 3381.59156494362;
      doubleArray1[7] = 3381.59156494362;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      int int0 = 24;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 24;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {24L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[1] = 3381.59156494362;
      doubleArray0[2] = 3381.59156494362;
      doubleArray0[3] = 3381.59156494362;
      doubleArray0[4] = 3381.59156494362;
      doubleArray0[5] = 3381.59156494362;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 3381.59156494362;
      doubleArray0[8] = 3381.59156494362;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 3381.59156494362;
      doubleArray0[4] = 3381.59156494362;
      doubleArray1[3] = 3381.59156494362;
      doubleArray1[4] = (-1289.0292231);
      doubleArray1[5] = 3381.59156494362;
      doubleArray1[0] = 3381.59156494362;
      doubleArray1[7] = (-1.0);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3381.59156494362, 3381.59156494362, 0.0, 3381.59156494362, (-1289.0292231), 3381.59156494362, 0.0, (-1.0)}, doubleArray1, 0.01);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 134217729;
      intArray0[1] = 2;
      intArray0[2] = (-1058);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {134217729, 2, (-1058)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[2] = 0.0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "knot values must be strictly increasing";
      stringArray0[1] = "number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}";
      stringArray0[2] = "NOT_POSITIVE_EXPONENT";
      stringArray0[3] = "_i} $LB|Q@nyg/S[R";
      stringArray0[4] = "V|Q-Q,z$U";
      stringArray0[5] = "";
      stringArray0[6] = "INCREASING";
      stringArray0[7] = "?2|_:lh4;[u^S_Wru";
      stringArray0[8] = "CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1267;
      intArray0[1] = 0;
      intArray0[2] = 2249;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 814.806880886;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6308511.059127345);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {814.806880886, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6308511.059127346, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(1.633933873315515E7, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {814.806880886, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6308511.059127346, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0307689909693706E14, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {1267, 0, 2249, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-2562.248);
      doubleArray3[1] = 2636.3736;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {814.806880886, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2562.248), 2636.3736}, doubleArray3, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 651.6646084593862;
      doubleArray0[1] = 2961.622273650888;
      doubleArray0[2] = 2961.622273650888;
      doubleArray0[3] = 651.6646084593862;
      doubleArray0[4] = 651.6646084593862;
      doubleArray0[5] = 0.0;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {651.6646084593862, 2961.622273650888, 2961.622273650888, 651.6646084593862, 651.6646084593862, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,961.622 >= 2,961.622)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 24;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {24L, 0L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "UOu4F*";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      stringArray0[2] = "UOu4F*";
      stringArray0[3] = "UOu4F*";
      stringArray0[4] = "UOu4F*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 24L;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {24.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-693.835F);
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 2614.6F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 17.703F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-693.835F), Float.POSITIVE_INFINITY, 2614.6F, 0.0F, (-1.0F), 17.703F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 651.6646084593862, 651.6646084593862, (-2364.78));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float[] floatArray0 = new float[0];
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 19 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1267;
      intArray0[1] = 0;
      intArray0[2] = 2249;
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")k\"R|es";
      stringArray0[1] = "Q}e=v<";
      stringArray0[2] = "UOu4F*";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 40.8;
      doubleArray0[1] = (double) 2249;
      doubleArray0[2] = 1.304E19;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {40.8, 2249.0, 1.304E19}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2125.39459653649);
      doubleArray0[1] = (-2125.39459653649);
      doubleArray0[2] = (-2125.39459653649);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-2125.39459653649), (-2125.39459653649), (-2125.39459653649)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2125.39459653649);
      doubleArray1[2] = (-727.7958204989651);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-4.9E-324);
      doubleArray0[1] = 1904.259765625;
      doubleArray0[2] = 2637.40989572;
      doubleArray0[3] = 4.438921624363781E-8;
      doubleArray0[4] = 2576.53548931734;
      doubleArray0[5] = 765.13072917;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 5315.898960696572;
      doubleArray0[8] = (-378.77532735);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-4.9E-324), 1904.259765625, 2637.40989572, 4.438921624363781E-8, 2576.53548931734, 765.13072917, 3.834E-20, 5315.898960696572, (-378.77532735)}, doubleArray0, 0.01);
      assertEquals(6797.67231354939, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 6797.67231354939;
      doubleArray1[2] = (-4.9E-324);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 3.834E-20;
      doubleArray1[5] = 1904.259765625;
      doubleArray1[6] = 765.13072917;
      doubleArray1[7] = 6797.67231354939;
      doubleArray1[8] = 4.438921624363781E-8;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4.9E-324), 1904.259765625, 2637.40989572, 4.438921624363781E-8, 2576.53548931734, 765.13072917, 3.834E-20, 5315.898960696572, (-378.77532735)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 6797.67231354939, (-4.9E-324), 3.834E-20, 3.834E-20, 1904.259765625, 765.13072917, 6797.67231354939, 4.438921624363781E-8}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-4.9E-324), 1904.259765625, 2637.40989572, 4.438921624363781E-8, 2576.53548931734, 765.13072917, 3.834E-20, 5315.898960696572, (-378.77532735)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3.834E-20;
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 337.7258054;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 337.7258054}, doubleArray0, 0.01);
      assertEquals(114058.71963307868, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {3.834E-20, 337.7258054}, doubleArray0, 0.01);
      assertEquals(337.7258054, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {3.834E-20, 337.7258054}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 114058.71963307868);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 337.7258054}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.2948407379036001E-17, 114058.71963307868}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 12;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2893.074343972741);
      doubleArray0[1] = (-727.123);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1457.3278132;
      doubleArray1[1] = 1457.3278132;
      doubleArray1[2] = 1457.3278132;
      doubleArray1[3] = (-727.123);
      doubleArray1[4] = (-2893.074343972741);
      doubleArray1[5] = (-2893.074343972741);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-2893.074343972741), (-727.123), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1457.3278132, 1457.3278132, 1457.3278132, (-727.123), (-2893.074343972741), (-2893.074343972741)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1457.3278132, 1457.3278132, 1457.3278132, (-727.123), (-2893.074343972741), (-2893.074343972741)}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1457.3278132, 1457.3278132, 1457.3278132, (-727.123), (-2893.074343972741), (-2893.074343972741)}, doubleArray1, 0.01);
      assertEquals(3.594812379373019E7, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(11, doubleArray2.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h1qe/2^%d2j4}5]KAJ";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(19, doubleArray0.length);
      
      double double1 = new Double(3.834E-20);
      assertEquals(double1, double0, 0.01);
      assertEquals(3.834E-20, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "jNwX.,a.bF)";
      stringArray0[1] = "jNwX.,a.bF)";
      stringArray0[2] = "jNwX.,a.bF)";
      stringArray0[3] = "jNwX.,a.bF)";
      stringArray0[4] = "jNwX.,a.bF)";
      stringArray0[6] = "jNwX.,a.bF)";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[4];
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1914.060306);
      doubleArray0[1] = (double) (-1058);
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {(-1914.060306), (-1058.0)}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-1914.060306), (-1058.0)}, doubleArray0, 0.01);
      assertEquals(2187.0049965660373, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1914.060306), (-1058.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3828.120612), (-2116.0)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1058);
      intArray1[1] = 134217729;
      intArray1[2] = 99;
      int int0 = MathArrays.distance1(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1058), 134217729, 99}, intArray1);
      assertEquals(134218886, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int int0 = (-2088);
      int int1 = 851;
      int[] intArray0 = new int[9];
      intArray0[0] = (-2088);
      intArray0[1] = 851;
      intArray0[2] = 851;
      int int2 = (-2488);
      intArray0[3] = (-2488);
      intArray0[4] = 851;
      intArray0[5] = (-2088);
      intArray0[6] = 851;
      int int3 = 4220;
      intArray0[7] = 4220;
      intArray0[8] = 851;
      int[] intArray1 = MathArrays.copyOf(intArray0, 4220);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2088), 851, 851, (-2488), 851, (-2088), 851, 4220, 851}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(4220, intArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 24;
      longArray0[1] = (long) 24;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {24L, 24L}, longArray0);
      assertEquals(2, longArray0.length);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")k\"R|es";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      stringArray0[2] = "UOu4F*";
      stringArray0[3] = "UOu4F*";
      stringArray0[4] = "UOu4F*";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, stringArray0.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 24L;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {24.0F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(1, floatArray0.length);
      
      long[][] longArray1 = new long[2][0];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(2, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 1272.68458, (-1529.632479), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      stringArray0[2] = "Fq73@tBm(;WF>ESx";
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1619726.0401697767, 2339775.520811686, 0.0, Double.NaN, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,529.632 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = 0.0;
      doubleArray0[16] = 0.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 798;
      intArray0[1] = 1430;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1430;
      intArray1[1] = 1430;
      intArray1[2] = 798;
      intArray1[3] = 798;
      intArray1[4] = 1430;
      intArray1[5] = 1430;
      intArray1[6] = 798;
      intArray1[7] = (-2507);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {798, 1430}, intArray0);
      assertArrayEquals(new int[] {1430, 1430, 798, 798, 1430, 1430, 798, (-2507)}, intArray1);
      assertEquals(632, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(8, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[3] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray1[6] = (-1529.632479);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I`dTD0ejI,u";
      stringArray0[1] = "UOu4F*";
      stringArray0[2] = ")k\"R|es";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 1272.68458, (-1529.632479), 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      stringArray0[2] = "Fq73@tBm(;WF>ESx";
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1263);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[1] = (-2125.39459653649);
      doubleArray0[2] = (-2125.39459653649);
      doubleArray0[3] = (-2125.39459653649);
      doubleArray0[4] = (-535.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1472.3891475011092;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3381.59156494362, (-2125.39459653649), (-2125.39459653649), (-2125.39459653649), (-535.0), 0.0, 1472.3891475011092}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.1435161512097841E7, 4517302.190986509, 4517302.190986509, 4517302.190986509, 286225.0, 0.0, 2167929.801679043}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-2125.39459653649);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-1414.96473676);
      doubleArray2[4] = 3381.59156494362;
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1529.632479);
      doubleArray1[1] = (-1529.632479);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      double double0 = MathArrays.linearCombination(450131.5715150238, (-4110.8080151739), (-3277.085565264852), 0.0);
      assertEquals((-1.8504044720667832E9), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, (-3691.58735293317));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1529.632479), (-1529.632479), Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1845.7936764665849), (-1845.7936764665849), Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3366.9614428513646;
      doubleArray0[1] = (-2125.39459653649);
      doubleArray0[2] = (-2125.39459653649);
      doubleArray0[3] = (-2125.39459653649);
      doubleArray0[4] = (-3692.06332481);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3366.9614428513646, (-2125.39459653649), (-2125.39459653649), (-2125.39459653649), (-3692.06332481), 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3366.9614428513646, (-2125.39459653649), (-2125.39459653649), (-2125.39459653649), (-3692.06332481), 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3366.9614428513646, (-2125.39459653649), (-2125.39459653649), (-2125.39459653649), (-3692.06332481), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(9.695825300131758E7, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3366.9614428513646);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3366.9614428513646, (-2125.39459653649), (-2125.39459653649), (-2125.39459653649), (-3692.06332481), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1691.6797631453624), 1067.8729438060886, 1067.8729438060886, 1067.8729438060886, 1855.022374578461, -0.0, -0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(19, doubleArray0.length);
      assertEquals(19, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 553;
      intArray0[1] = 3392;
      intArray0[2] = 553;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {553, 3392, 553}, intArray0);
      assertArrayEquals(new int[] {553, 3392, 553}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double double0 = MathArrays.linearCombination((-733.1587800379828), (double) 0, (double) 0, 409.84371315, (double) 553, 1472.3891475011092, 705.0, 732.4627515897557);
      assertEquals(1330617.4384388912, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1529.632479);
      String[] stringArray0 = new String[22];
      stringArray0[0] = "I`dTD0ejI,u";
      stringArray0[1] = "I`dTD0ejI,u";
      stringArray0[2] = ")k\"R|es";
      stringArray0[3] = "Fq73@tBm(;WF>ESx";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "jNwX.,a.bF)";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(22, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1267;
      intArray0[1] = 0;
      intArray0[2] = 2249;
      intArray0[3] = Integer.MAX_VALUE;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {1267, 0, 2249, Integer.MAX_VALUE}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"h4_kU!qM?2mi_vtf|";
      stringArray0[1] = "w 69c_lkgPOYr8";
      stringArray0[2] = "";
      stringArray0[3] = "e$<qjQBrTuS\"3s7X?";
      stringArray0[4] = "%adnb";
      stringArray0[5] = "minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}";
      stringArray0[6] = "1ihG#1:t1/kNE";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 651.6646084593862;
      doubleArray0[2] = (-159.576970758624);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 651.6646084593862, (-159.576970758624)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-852L);
      longArray0[1] = (-1L);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 651.6646084593862, (-159.576970758624)}, doubleArray0, 0.01);
      assertEquals(670.9184536998695, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(286225.0, (double) (-1L), (double) (-852L), (-324.111846443));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-10081.706830564008), double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      stringArray0[1] = "Fq73@tBm(;WF>ESx";
      stringArray0[2] = "Fq73@tBm(;WF>ESx";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1272.68458, (-1529.632479), 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1529.632479);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I`dTD0ejI,u";
      stringArray0[1] = "UOu4F*";
      stringArray0[2] = ")k\"R|es";
      stringArray0[3] = "Fq73@tBm(;WF>ESx";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[5] = "jNwX.,a.bF)";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 553;
      intArray0[1] = 3392;
      intArray0[2] = 3392;
      intArray0[3] = 553;
      intArray0[4] = 3392;
      intArray0[5] = (-1);
      intArray0[6] = 3392;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {553, 3392, 3392, 553, 3392, (-1), 3392}, intArray0);
      assertArrayEquals(new int[] {553, 3392, 3392, 553, 3392, (-1), 3392}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double double1 = MathArrays.linearCombination(1272.68458, 850.6484390819973, 1.304E19, 0.0, 2214.11061274678, (-258.5596), 0.0, (double) (-1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(510127.597033165, double1, 0.01);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 651.6646084593862;
      doubleArray0[2] = (-159.576970758624);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertArrayEquals(new double[] {0.0, 651.6646084593862, (-159.576970758624)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      long[][] longArray0 = new long[5][7];
      long[] longArray1 = new long[5];
      longArray1[0] = (-852L);
      longArray1[1] = (-1L);
      longArray1[2] = 78L;
      longArray1[3] = (-928L);
      longArray1[4] = (-604L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[6];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-852L);
      longArray2[1] = (-852L);
      longArray2[2] = 78L;
      longArray2[3] = 9223372036854775807L;
      longArray2[4] = (-852L);
      longArray2[5] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-1L);
      longArray3[1] = 78L;
      longArray3[2] = (-928L);
      longArray3[3] = (-852L);
      longArray3[4] = (-928L);
      longArray3[5] = (-1L);
      longArray3[6] = 9223372036854775807L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = (-928L);
      longArray4[1] = 78L;
      longArray4[2] = 9223372036854775807L;
      longArray4[3] = (-852L);
      longArray4[4] = (-1L);
      longArray4[5] = 9223372036854775807L;
      longArray4[6] = (-604L);
      longArray4[7] = 78L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[0];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -852 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1[1]);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2088);
      int[] intArray1 = MathArrays.copyOf(intArray0, 851);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {(-2088)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(851, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(0.003, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 112;
      double[] doubleArray2 = MathArrays.scale(0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.34217729E8, (-2088.0), (double) 0, (double) 0, 467.45628);
      assertEquals(Double.NaN, double0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 112, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2088);
      double[][] doubleArray1 = new double[2][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = " uy}8!8H+nRe)&I^jP";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DEGREES_OF_FREEDOM";
      stringArray0[4] = "^H?S_CHFH,";
      stringArray0[5] = "";
      boolean boolean2 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = 0;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[0][5];
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 467.45628);
      int int0 = (-1715);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      MathArrays.linearCombination((-2940.228940282346), (-1456.9322), 0.0, 1.0, 467.45628, 3.834E-20);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      MathArrays.ebeAdd(doubleArray2, doubleArray2);
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, false);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      MathArrays.linearCombination(467.45628, (-1529.632479), (-1866.4184), 1740.5896608619, 0.0, 2130.06395);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-583.6);
      doubleArray1[1] = (-3963704.8782829284);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1866.4184);
      MathArrays.copyOf(doubleArray1, 135);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 651.6646084593862;
      doubleArray0[2] = 2961.622273650888;
      float[] floatArray0 = new float[0];
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.linearCombination(651.6646084593862, Double.NaN, (-3974.0), (-1.0), 0.0, (-1019.0242847), 444.21378578999975, 4461.1);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 467.45628);
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      MathArrays.linearCombination(doubleArray0, doubleArray2);
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = (-2146717597);
      intArray0[2] = (-2594);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2893.074343972741);
      doubleArray0[1] = (-727.123);
      doubleArray0[2] = 1457.3278132;
      doubleArray0[3] = 392.9262441212641;
      doubleArray0[4] = (-1664.88222819079);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((-1664.88222819079), 1457.3278132, (-2893.074343972741), 1.0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Fq73@tBm(;WF>ESx";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2802.0);
      doubleArray1[3] = 1659.732333;
      doubleArray1[4] = 1472.3891475011092;
      doubleArray1[5] = 1472.3891475011092;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 243;
      intArray0[1] = 243;
      MathArrays.copyOf(intArray0);
      double double0 = 1542.9;
      double double1 = (-578.3709527);
      MathArrays.linearCombination(1542.9, 0.0, (-535.0), 651.6646084593862, (-1483.8819038779593), (-578.3709527), 392.9262441212641, 4516.203);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 112;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 134217729;
      intArray0[5] = 0;
      intArray0[6] = 1706;
      intArray0[7] = 0;
      intArray0[8] = 3319;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[6][6];
      doubleArray4[0] = doubleArray2;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray1;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray1;
      doubleArray4[5] = doubleArray2;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1637.3617629999999;
      doubleArray0[1] = 2137.5950918209;
      doubleArray0[2] = (-0.25);
      doubleArray0[3] = (-1280.6349486557);
      doubleArray0[4] = 1408.3186884053875;
      doubleArray0[5] = 3238.20001239;
      doubleArray0[6] = (-419.5);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 64);
      assertEquals(64, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3421.284;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertEquals(4.004675945012743E10, double0, 0.01);
      
      int[] intArray0 = new int[4];
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      double double0 = MathArrays.linearCombination(467.45628, (-1529.632479), (-1866.4184), 1740.5896608619, 0.0, 2130.06395);
      assertEquals((-3963704.8782829284), double0, 0.01);
      
      MathArrays.distance(doubleArray0, doubleArray0);
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3959501.5609814622, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double double0 = 651.6646084593862;
      doubleArray0[1] = 651.6646084593862;
      int[] intArray0 = new int[4];
      int int0 = 12;
      intArray0[0] = 12;
      int int1 = 1497;
      int int2 = (-457);
      intArray0[2] = (-457);
      int int3 = (-2220);
      intArray0[3] = (-2220);
      int[] intArray1 = new int[2];
      int int4 = (-28);
      intArray1[0] = (-28);
      intArray1[1] = (-2220);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1267;
      intArray0[0] = 1267;
      try { 
        MathArrays.sortInPlace((double[]) null, (double[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1222.5354997408;
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[6];
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[3] = 2249;
      intArray0[5] = 2249;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) 2249;
      floatArray0[3] = (float) 2249;
      floatArray0[4] = (float) 2249;
      floatArray0[5] = (float) Integer.MAX_VALUE;
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-779.9F);
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) 2249;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) 2249;
      floatArray1[5] = (float) 2249;
      floatArray1[6] = (float) Integer.MAX_VALUE;
      floatArray1[7] = (float) Integer.MAX_VALUE;
      floatArray1[8] = (float) 2249;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1081);
      intArray0[1] = (-1071);
      intArray0[2] = (-2146455651);
      intArray0[3] = 59;
      intArray0[4] = 0;
      intArray0[5] = 156;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-2088);
      intArray0[0] = (-2088);
      int int1 = 851;
      MathArrays.copyOf(intArray0, 851);
      double[] doubleArray0 = new double[7];
      intArray0[0] = (-2088);
      doubleArray0[1] = (double) (-2088);
      doubleArray0[2] = (double) (-2088);
      doubleArray0[3] = (double) (-2088);
      doubleArray0[4] = (-1257.2909648797465);
      doubleArray0[5] = (double) (-2088);
      doubleArray0[6] = (double) (-2088);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-2,088 <= -2,088)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1222.5354997408;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3144.70954050999);
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VZ&Y46&c'&8+jju,";
      stringArray0[1] = "CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT";
      stringArray0[2] = "nKkX3MhkU@IP7,";
      stringArray0[3] = "points {0} and {1} are not strictly decreasing ({2} <= {3})";
      stringArray0[4] = "3C]RDl";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      double[][] doubleArray2 = new double[3][1];
      doubleArray2[0] = doubleArray0;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1188.1423);
      doubleArray0[3] = (-1075.65363);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 697.3971145235;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1253.1977486);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,188.142 < -1,075.654)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3500.6801;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1735.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, (-3521.0), 0.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      MathArrays.normalizeArray(doubleArray0, (-4263.832));
      MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2088);
      MathArrays.copyOf(intArray0, 851);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2088);
      doubleArray0[1] = (double) (-2088);
      doubleArray0[2] = (double) (-2088);
      doubleArray0[3] = (double) (-2088);
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertArrayEquals(new double[] {(-2088.0), (-2088.0), (-2088.0), 0.0, 0.0, 0.0, (-2088.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2893.074343972741);
      doubleArray0[1] = (-727.123);
      doubleArray0[2] = 1457.3278132;
      doubleArray0[3] = 392.9262441212641;
      doubleArray0[4] = (-1664.88222819079);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][8];
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = (-727.123);
      doubleArray2[2] = 3734.7844970056003;
      doubleArray2[3] = (-3.141592653589793);
      doubleArray2[4] = 1457.3278132;
      doubleArray2[5] = 392.9262441212641;
      doubleArray2[6] = (-727.123);
      doubleArray2[7] = 3734.7844970056003;
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int int0 = (-478);
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 2147483172;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, 2147483172);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[16] = 0.0;
      double[] doubleArray1 = new double[0];
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 651.6646084593862;
      doubleArray0[2] = 2961.622273650888;
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      MathArrays.buildArray(field0, 2, (-478));
      Field<Integer> field1 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field1).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field1, 175, (-1715));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2088);
      int[] intArray1 = MathArrays.copyOf(intArray0, 851);
      assertEquals(851, intArray1.length);
      
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-2088);
      intArray0[0] = (-2088);
      int int1 = 851;
      MathArrays.copyOf(intArray0, 851);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2088);
      doubleArray0[1] = (double) (-2088);
      doubleArray0[2] = (double) (-2088);
      doubleArray0[3] = (double) (-2088);
      doubleArray0[4] = (-1257.2909648797465);
      doubleArray0[5] = (double) (-2088);
      doubleArray0[6] = (double) (-2088);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (-2,088 <= -2,088)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3500.6801;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1735.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, (-3521.0), 0.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray0, 0);
      try { 
        MathArrays.normalizeArray(doubleArray2, (-4263.832));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1058);
      intArray0[1] = 45;
      intArray0[2] = (-808);
      intArray0[3] = (-1209);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.distanceInf(intArray0, intArray0);
      MathArrays.OrderDirection.values();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-808);
      MathArrays.copyOf(doubleArray0);
      MathArrays.scaleInPlace((-1121.5719051948026), doubleArray0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.copyOf(intArray0);
      long[][] longArray0 = new long[3][3];
      long[] longArray1 = new long[6];
      longArray1[0] = (long) (-808);
      longArray1[1] = (-469L);
      longArray1[2] = (-543L);
      longArray1[3] = (long) (-1209);
      longArray1[4] = (long) (-808);
      longArray1[5] = (long) (-808);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2893.074343972741);
      doubleArray0[1] = (-727.123);
      doubleArray0[2] = 1457.3278132;
      doubleArray0[3] = 392.9262441212641;
      doubleArray0[4] = (-1664.88222819079);
      MathArrays.safeNorm(doubleArray0);
      MathArrays.linearCombination((-3.141592653589793), 1457.3278132, (-2893.074343972741), 1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1664.88222819079);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 1457.3278132;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 3734.7844970056003;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 458;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1111);
      assertEquals(1111, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, Double.NaN}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1488;
      intArray0[1] = 0;
      intArray0[2] = 49;
      intArray0[3] = 0;
      intArray0[4] = 3619;
      intArray0[5] = 0;
      intArray0[6] = (-963);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2209);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1064);
      intArray0[4] = 0;
      intArray0[5] = (-1219);
      intArray0[6] = 267;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1064);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      MathArrays.copyOf(intArray0, 0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-3.141592653589793);
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) (-1219);
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) (-1064);
      doubleArray2[5] = (double) (-1064);
      MathArrays.copyOf(doubleArray2, 0);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 4279.140487;
      // Undeclared exception!
      try { 
        MathArrays.scale(4279.140487, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1674.7201;
      doubleArray0[1] = 1674.7201;
      doubleArray0[2] = 1674.7201;
      double[] doubleArray1 = MathArrays.scale(1674.7201, doubleArray0);
      assertArrayEquals(new double[] {2804687.41334401, 2804687.41334401, 2804687.41334401}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 3.4028235E38F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 2723.6F;
      floatArray0[4] = (-621.6338F);
      floatArray0[5] = (-904.8289F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3366.9614428513646;
      doubleArray0[1] = 3366.9614428513646;
      doubleArray0[2] = 3366.9614428513646;
      doubleArray0[3] = 3366.9614428513646;
      doubleArray0[4] = (-3692.06332481);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 3366.9614428513646);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Double, String>>) null, 1433, 1433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      Field<Pair<String, Object>> field0 = (Field<Pair<String, Object>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 2;
      int int1 = (-478);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2, (-478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-93.6328227);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 861.9952146981;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-2405.5823);
      doubleArray0[6] = (-2054.258956114658);
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = (-1280.6349486557);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 0.0, 467.45628);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 467.45628;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 467.45628;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = 0.0;
      doubleArray2[8] = 467.45628;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.linearCombination((-3990.632001), (-3990.632001), (-2380.296308), 4057.23839583615);
      double[] doubleArray0 = null;
      int int0 = (-513);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, (-513));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2235.93;
      doubleArray0[2] = 161.4182437;
      doubleArray0[3] = (-1451.902703);
      doubleArray0[4] = (-3741.695);
      doubleArray0[5] = 3240.46324509;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 299;
      MathArrays.distance(intArray0, intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[1][2];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 0.0);
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 0;
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1483.8819038779593);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1188.1423);
      doubleArray0[3] = (-1075.65363);
      doubleArray0[4] = 1.34217729E8;
      doubleArray0[5] = 697.3971145235;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1253.1977486);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,483.882 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.POSITIVE_INFINITY;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][7];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 539;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3421.284;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 3421.284}, doubleArray0, 0.01);
      assertEquals(4.004675945012743E10, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = 526;
      intArray0[3] = (-1975);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace((-2126.81), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3381.59156494362;
      doubleArray0[1] = (-2125.39459653649);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-535.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1472.3891475011092;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[3];
      int int0 = 3392;
      intArray0[0] = 3392;
      int int1 = 553;
      intArray0[1] = 553;
      int int2 = 0;
      intArray0[2] = 0;
      MathArrays.copyOf(intArray0);
      MathArrays.linearCombination(0.0, 1472.3891475011092, (-258.5596), (-732.95554934), 0.0, 3381.59156494362, (-908.3772), (double) 553);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1272.68458;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1529.632479);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(13, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[0];
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2146.021;
      doubleArray0[2] = 1190.880074;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 425.03932;
      doubleArray0[5] = 1.7976931348623157E308;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 432.67974;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = (-1379.372);
      doubleArray0[4] = (-353.45475149);
      doubleArray0[5] = (-1898.6435);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2181.0881971360277;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[3][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      double[][] doubleArray3 = new double[4][4];
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-353.45475149);
      doubleArray4[1] = (-1379.372);
      doubleArray3[0] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 432.67974;
      doubleArray5[1] = 1142.0583137870817;
      doubleArray5[2] = 432.67974;
      doubleArray5[3] = (-1.0);
      doubleArray5[4] = 0.0;
      doubleArray3[1] = doubleArray5;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 651.6646084593862;
      doubleArray0[2] = 2961.622273650888;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[0];
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int int0 = 1;
      int int1 = (-2146305007);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Pair<String, Object>>>) null, (-2146305007));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1272.68458;
      doubleArray0[1] = (-1529.632479);
      int int0 = (-478);
      int int1 = 148;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<String, Object>>) null, 148, (-2055));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1487.857507;
      doubleArray0[1] = 149.504256;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1487.857507);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[4][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      long[] longArray0 = new long[1];
      long long0 = (-852L);
      longArray0[0] = (-852L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -852 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3076.6273;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2385.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-929.3877102464);
      doubleArray0[5] = (-2232.238449);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1064.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3076.6273, 0.0, 2385.0, 0.0, (-929.3877102464), (-2232.238449), 0.0, 1064.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-1);
      intArray0[0] = (-1);
      int int1 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-55);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      MathArrays.linearCombination(0.0, 861.9952146981, 0.0, 1664.88222819079);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      MathArrays.linearCombination(1.34217729E8, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.scaleInPlace(0.0, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      MathArrays.distance1(doubleArray1, doubleArray1);
      MathArrays.copyOf(doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2203;
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-1364);
      intArray0[6] = 595;
      intArray0[7] = 0;
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = (-1);
      intArray1[2] = 2203;
      intArray1[3] = (-1);
      intArray1[4] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1222.5354997408;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3144.70954050999);
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      double double0 = MathArrays.linearCombination((-427.18), 1222.5354997408, (-427.18), 1222.5354997408, (-1304.18201), (-427.18), (-1304.18201), (-2952.90484873306));
      assertEquals(3363760.4224326783, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      MathArrays.OrderDirection.valueOf("DECREASING");
      double double0 = 1.34217729E8;
      double double1 = (-438.2693743);
      MathArrays.linearCombination(1.34217729E8, (-438.2693743), 1.34217729E8, 1.34217729E8, (-438.2693743), (-438.2693743));
      int[] intArray0 = new int[7];
      intArray0[0] = (-3164);
      intArray0[1] = 183;
      int int0 = (-2489);
      intArray0[2] = (-2489);
      intArray0[3] = (-572);
      intArray0[4] = 3671;
      int int1 = 46;
      intArray0[5] = 46;
      int int2 = 308;
      intArray0[6] = 308;
      MathArrays.distanceInf(intArray0, intArray0);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-3164));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 941.9275564267;
      doubleArray0[1] = (-1172.7466829233);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4538.935228119224;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-3.141592653589793);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2.0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1413.581697767);
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 162.93;
      doubleArray0[3] = -0.0;
      doubleArray0[4] = (-1534.00746238171);
      doubleArray0[5] = 495.4047386612966;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,413.582 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1784.1);
      doubleArray0[2] = 2851.363600786;
      doubleArray0[3] = (-4345.250759372616);
      doubleArray0[4] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-1784.1), 2851.363600786, (-4345.250759372616), 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 2851.363600786);
      assertArrayEquals(new double[] {Double.NaN, 1551.902906891111, (-2480.264256859649), 3779.724950754538, -0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-704);
      intArray0[1] = 5316;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 741;
      intArray0[5] = (-2045);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
