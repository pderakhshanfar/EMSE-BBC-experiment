/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:53:36 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2447.8452F);
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = (-2119.1792F);
      floatArray0[3] = (-422.054F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-2447.8452F), Float.POSITIVE_INFINITY, (-2119.1792F), (-422.054F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      int int0 = 212;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 212);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(212, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray2, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<Integer> fieldElement0 = (FieldElement<Integer>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0).when(field0).getZero();
      int int0 = 1592;
      int int1 = 3;
      int int2 = 2146321589;
      int int3 = (-693);
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146321589, (-693));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-114.056);
      double double0 = 728.6276173866099;
      doubleArray0[1] = 728.6276173866099;
      doubleArray0[2] = 1272.74881;
      double double1 = 307.4445946252;
      doubleArray0[3] = 307.4445946252;
      double double2 = 3.834E-20;
      doubleArray0[4] = 3.834E-20;
      doubleArray0[5] = (-2491.909433);
      double double3 = 0.19999954104423523;
      doubleArray0[6] = 0.19999954104423523;
      doubleArray0[7] = 1.8014398509481984E16;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][3];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = null;
      doubleArray1[4] = null;
      doubleArray1[5] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1291.783F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-37.47829F);
      floatArray0[5] = 1.4E-45F;
      floatArray0[6] = 903.26F;
      floatArray0[7] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1291.783F), 0.0F, Float.POSITIVE_INFINITY, 0.0F, (-37.47829F), 1.4E-45F, 903.26F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1.4E-45F;
      doubleArray0[5] = (double) 903.26F;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = 1736.533761;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.401298464324817E-45, (-1.0), 0.0, 0.0, 1.401298464324817E-45, 903.260009765625, 0.0, 1736.533761}, doubleArray0, 0.01);
      assertEquals(1957.4036753655598, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1291.783F), 0.0F, Float.POSITIVE_INFINITY, 0.0F, (-37.47829F), 1.4E-45F, 903.26F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-3171.89536641104);
      doubleArray1[1] = 1.2246467991473532E-16;
      doubleArray1[2] = 1.34217729E8;
      doubleArray1[3] = 5.669184079525E-24;
      doubleArray1[4] = 1.3517317232305464E8;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 1.3517317232305464E8;
      doubleArray1[7] = (-1206.76);
      doubleArray1[8] = 2571.1782572;
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {(-3171.89536641104), 1.2246467991473532E-16, 1.34217729E8, 5.669184079525E-24, 1.3517317232305464E8, Double.NaN, 1.3517317232305464E8, (-1206.76), 2571.1782572}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-3171.89536641104), 1.2246467991473532E-16, 1.34217729E8, 5.669184079525E-24, 1.3517317232305464E8, Double.NaN, 1.3517317232305464E8, (-1206.76), 2571.1782572}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.44888888888888806E18;
      doubleArray0[1] = Double.NaN;
      doubleArray0[0] = (-1.5707963267948966);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 23.643;
      doubleArray0[5] = 7756.050422424;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1.0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-1553.0F);
      floatArray0[2] = (-2211.712F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = (-1649.0487F);
      floatArray0[5] = 0.5F;
      floatArray0[6] = (-1672.733F);
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1553.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3249.8464F);
      floatArray1[3] = (-1553.0F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = (-1649.0487F);
      floatArray1[6] = (-1672.733F);
      floatArray1[7] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1.0F, (-1553.0F), (-2211.712F), (-1.0F), (-1649.0487F), 0.5F, (-1672.733F), 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1553.0F), 0.0F, (-3249.8464F), (-1553.0F), 1.0F, (-1649.0487F), (-1672.733F), 1.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 2275.55887478998, 2275.55887478998, 0.0, 0.0, (-254.583), 0.0, (-254.583));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = (-383.7027F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 382.74973F;
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1.0F);
      floatArray1[1] = 382.74973F;
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = 382.74973F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, (-383.7027F), (-1.0F), 382.74973F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1.0F), 382.74973F, Float.POSITIVE_INFINITY, 382.74973F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(10, floatArray0.length);
      assertEquals(4, floatArray1.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 382.74973F;
      doubleArray0[1] = 3.6725170580355583E-9;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[5] = (double) (-1.0F);
      try { 
        MathArrays.normalizeArray(doubleArray0, (-18.430862426757812));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-975.2625F);
      floatArray0[1] = 1629.4456F;
      floatArray0[2] = 2417.4F;
      floatArray0[3] = 1169.89F;
      floatArray0[4] = (-1984.802F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1884.807F;
      floatArray0[7] = (-91.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-975.2625F), 1629.4456F, 2417.4F, 1169.89F, (-1984.802F), 0.0F, 1884.807F, (-91.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-975);
      intArray0[3] = (-2147483645);
      intArray0[4] = (-5819);
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-5819);
      intArray1[1] = (-975);
      intArray1[2] = (-975);
      intArray1[3] = 30;
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      intArray1[6] = (-1);
      intArray1[7] = (-2147483645);
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-5819), (-975), (-975), 30, (-1), (-1), (-1), (-2147483645)}, intArray1);
      assertArrayEquals(new int[] {(-1), (-1), (-975), (-2147483645), (-5819)}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals((-2147471065), int0);
      assertEquals(8, intArray1.length);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.26E18;
      doubleArray0[1] = 1.1921056801463227E-8;
      doubleArray0[2] = 342.174368864039;
      doubleArray0[3] = 3.2451855365842673E32;
      doubleArray0[4] = 2.17333333333333325E18;
      doubleArray0[5] = (-3105.0);
      doubleArray0[6] = 2.0E-5;
      doubleArray0[7] = 3.834E-20;
      doubleArray0[8] = 3187.537;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {3.26E18, 1.1921056801463227E-8, 342.174368864039, 3.2451855365842673E32, 2.17333333333333325E18, (-3105.0), 2.0E-5, 3.834E-20, 3187.537}, doubleArray0, 0.01);
      assertEquals(3.2451855365842673E32, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.26E18, 1.1921056801463227E-8, 342.174368864039, 3.2451855365842673E32, 2.17333333333333325E18, (-3105.0), 2.0E-5, 3.834E-20, 3187.537}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.06276E37, 1.4211159526371267E-16, 117083.29870750343, 1.0531229166855719E65, 4.7233777777777774E36, 9641025.0, 4.0000000000000007E-10, 1.4699556E-39, 1.0160392126369E7}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = (-306783379);
      intArray0[2] = (-972);
      intArray0[3] = 2;
      intArray0[4] = 2147043589;
      intArray0[5] = 232;
      intArray0[6] = (-632);
      intArray0[7] = 295;
      intArray0[8] = 108;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2, (-306783379), (-972), 2, 2147043589, 232, (-632), 295, 108}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 232;
      doubleArray0[2] = (double) (-632);
      doubleArray0[3] = (double) 3241;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 232.0, (-632.0), 3241.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[24];
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(24, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = (-1329.9F);
      floatArray0[2] = 1330.634F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, (-1329.9F), 1330.634F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1330.634F;
      doubleArray2[1] = (double) Float.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray2[3] = (double) Float.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1330.634033203125, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray2.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.3466666666666665E18;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = (-1406.63661);
      doubleArray0[3] = 1966.180159;
      doubleArray0[4] = Double.POSITIVE_INFINITY;
      doubleArray0[5] = (-906.276);
      doubleArray0[6] = 1163.4168154052;
      doubleArray0[7] = (-2334.4841237);
      doubleArray0[8] = 6.34178769525E11;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {4.3466666666666665E18, 6.52E18, (-1406.63661), 1966.180159, Double.POSITIVE_INFINITY, (-906.276), 1163.4168154052, (-2334.4841237), 6.34178769525E11}, doubleArray0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 3894.431502501818, 0.0, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2400);
      intArray0[0] = (-385);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-385), 0}, intArray1);
      assertArrayEquals(new int[] {(-385), 0}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-385), 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("#Nt-0qj;1*C3(t").when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 1602, (-385));
      assertFalse(object0.equals((Object)object2));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)object2));
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(objectArray0);
      assertNotSame(object0, object2);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      assertNotSame(object1, object2);
      assertNotSame(object2, object0);
      assertNotSame(object2, object1);
      assertEquals(1602, objectArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[1];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1849.2F);
      floatArray0[1] = (-3148.4268F);
      floatArray0[2] = (-2379.2F);
      floatArray0[3] = 1605.9F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-3239.487F);
      floatArray0[8] = (-2992.6907F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-1849.2F), (-3148.4268F), (-2379.2F), 1605.9F, 0.0F, 1.0F, 0.0F, (-3239.487F), (-2992.6907F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[15];
      Double double0 = new Double((-164.8959396815041));
      assertNotNull(double0);
      assertEquals((-164.8959396815041), (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((-1889.9832101));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1889.9832101), (double)double1, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(1073.8637907495195);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals(1073.8637907495195, (double)double2, 0.01);
      
      doubleArray0[2] = double2;
      Double double3 = new Double((-1889.9832101));
      assertEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotNull(double3);
      assertEquals((-1889.9832101), (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(15, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double4 = MathArrays.linearCombination((-1.5707963267948966), (-2501.6776), 1460.0, (double) doubleArray0[2], Double.NaN, Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(15, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2081.6F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 4871.4077F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2081.6F, 1.0F, 4871.4077F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = null;
      double double0 = 1.304E19;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1.304E19, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.145894820876798E-6;
      doubleArray0[1] = 3.145894820876798E-6;
      doubleArray0[2] = 3.145894820876798E-6;
      doubleArray0[3] = 3.145894820876798E-6;
      MathArrays.scaleInPlace(3.145894820876798E-6, doubleArray0);
      assertArrayEquals(new double[] {9.896654224019462E-12, 9.896654224019462E-12, 9.896654224019462E-12, 9.896654224019462E-12}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(5687.352752, 165.605, (-2281.55408616981), 1.34217729E8, 9.896654224019462E-12, (-119.0), 9.896654224019462E-12, (-177.666));
      assertEquals((-3.062240661823297E11), double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.checkPositive(doubleArray0);
      assertArrayEquals(new double[] {9.896654224019462E-12, 9.896654224019462E-12, 9.896654224019462E-12, 9.896654224019462E-12}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1895.94;
      doubleArray0[1] = 2.800552834259E-8;
      doubleArray0[2] = 2.800552834259E-8;
      doubleArray0[3] = 2.800552834259E-8;
      doubleArray0[4] = 2.800552834259E-8;
      doubleArray0[5] = 2.800552834259E-8;
      doubleArray0[6] = 2.800552834259E-8;
      MathArrays.scaleInPlace(2.800552834259E-8, doubleArray0);
      assertArrayEquals(new double[] {5.309680140585009E-5, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16, 7.843096177476118E-16}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2.800552834259E-8;
      doubleArray1[1] = 2.800552834259E-8;
      doubleArray1[2] = (-252.2);
      doubleArray1[3] = 2.800552834259E-8;
      doubleArray1[4] = 2.800552834259E-8;
      doubleArray1[5] = 2.800552834259E-8;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 288.557175038;
      doubleArray0[1] = 48.0;
      doubleArray0[2] = (-617.4838056462371);
      doubleArray0[3] = 596.186;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {288.557175038, 48.0, (-617.4838056462371), 596.186}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 288.557175038;
      doubleArray1[1] = 596.186;
      doubleArray1[2] = 596.186;
      doubleArray1[3] = 48.0;
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {288.557175038, 48.0, (-617.4838056462371), 596.186}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {288.557175038, 596.186, 596.186, 48.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-227636.10088709655), double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 12;
      intArray0[1] = (-804);
      intArray0[2] = (-749);
      int[] intArray1 = MathArrays.copyOf(intArray0, 205);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {12, (-804), (-749)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(205, intArray1.length);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.scale(907L, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 162;
      intArray0[1] = 162;
      intArray0[2] = 1218;
      intArray0[3] = 228;
      intArray0[4] = 110;
      intArray0[5] = 2145727211;
      intArray0[6] = 2146489449;
      intArray0[7] = 134217729;
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2146489449;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 4742;
      intArray0[1] = 67;
      intArray0[2] = 13;
      intArray0[3] = (-478);
      intArray0[4] = 2143497342;
      intArray0[5] = 232;
      intArray0[6] = 247;
      intArray0[7] = 16;
      intArray0[8] = (-905);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {4742, 67, 13, (-478), 2143497342, 232, 247, 16, (-905)}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-478);
      floatArray0[1] = (float) 2143497342;
      floatArray0[2] = (float) 232;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {(-478.0F), 2.14349734E9F, 232.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long[] longArray0 = new long[15];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(15, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 950L;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[11];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(11, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.5850973129272461;
      doubleArray1[1] = 19.3600690879;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = (-2367.0);
      doubleArray1[4] = 1.9699272335463627E-8;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.438921624363781E-8;
      doubleArray0[1] = 146.676874954033;
      doubleArray0[2] = (-7.877917738262007E-9);
      doubleArray0[3] = (-2086.84);
      doubleArray0[4] = 3093.4745362;
      doubleArray0[5] = (-836.551938746);
      doubleArray0[6] = 1.86285714285713715E18;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2147.8;
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = (double) 907L;
      doubleArray0[3] = (double) 950L;
      doubleArray0[4] = (double) 907L;
      doubleArray0[5] = (double) 950L;
      doubleArray0[6] = (double) 907L;
      doubleArray0[7] = 537.7153;
      doubleArray0[8] = (double) 950L;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2147.8, 1.44888888888888883E18, 907.0, 950.0, 907.0, 950.0, 907.0, 537.7153, 950.0}, doubleArray0, 0.01);
      assertEquals(1.44888888888888883E18, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination(1.44888888888888883E18, 0.3153223395347595, 3161.9404, 1.304E19, 1.44888888888888883E18, 382.7508);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.1786723064367504E22, double1, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2147.8;
      doubleArray1[1] = 1.44888888888888883E18;
      doubleArray1[2] = 1.44888888888888883E18;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = 382.7508;
      doubleArray1[5] = 537.7153;
      doubleArray1[6] = 0.3153223395347595;
      doubleArray1[7] = 4.1786723064367504E22;
      doubleArray1[8] = 1.304E19;
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2147.8, 1.44888888888888883E18, 907.0, 950.0, 907.0, 950.0, 907.0, 537.7153, 950.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4295.6, 2.8977777777777777E18, 1.44888888888888986E18, 1.304E19, 1289.7508, 1487.7152999999998, 907.3153223395348, 4.1786723064367504E22, 1.304E19}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2147.8, 1.44888888888888883E18, 1.44888888888888883E18, 1.304E19, 382.7508, 537.7153, 0.3153223395347595, 4.1786723064367504E22, 1.304E19}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1592;
      int int1 = 3;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1592, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-252.2);
      doubleArray0[1] = 93.37423118345248;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-252.2), 93.37423118345248}, doubleArray0, 0.01);
      assertEquals(268.9304502080432, double0, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 294.0;
      doubleArray0[1] = (-37.196);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1088.1343473499);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-916.466054845754);
      doubleArray0[6] = 2018.048;
      doubleArray0[7] = 6383.907860606138;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-916.466054845754);
      doubleArray1[1] = 294.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {294.0, (-37.196), 1.0, (-1088.1343473499), 0.0, (-916.466054845754), 2018.048, 6383.907860606138}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-916.466054845754), 294.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(8, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-916.466054845754), 294.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1873.351808845886;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 2629.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-758.5033170227);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1873.351808845886, 4.9E-324, 2629.0, 1.0, (-758.5033170227)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1873.351808845886, 4.9E-324, 2629.0, 1.0, (-758.5033170227)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 162;
      intArray0[2] = 162;
      intArray0[3] = 268;
      intArray0[4] = 48;
      intArray0[5] = 9;
      intArray0[6] = 0;
      intArray0[7] = 48;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1225);
      intArray1[1] = (-1225);
      intArray1[2] = 48;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.scale(907L, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 907L;
      doubleArray2[1] = (double) 907L;
      doubleArray2[2] = (double) 907L;
      doubleArray2[3] = 1641.4096876835508;
      doubleArray2[4] = (double) 907L;
      doubleArray2[5] = (double) 907L;
      doubleArray2[6] = (double) 907L;
      doubleArray2[7] = (-1389.485);
      double double0 = MathArrays.distance1(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {907.0, 907.0, 907.0, 1641.4096876835508, 907.0, 907.0, 907.0, (-1389.485)}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(907.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 2147449589;
      intArray0[2] = 1863;
      intArray0[3] = 191;
      intArray0[4] = (-725);
      intArray0[5] = (-4547);
      intArray0[6] = 2023;
      intArray0[7] = 225;
      double double1 = new Integer(191);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(191, double1, 0.01);
      
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2929);
      intArray1[1] = 2147449589;
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2929), 2147449589}, intArray1);
      assertArrayEquals(new int[] {0, 2147449589, 1863, 191, (-725), (-4547), 2023, 225}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2929, int0);
      assertEquals(2, intArray1.length);
      assertEquals(8, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 225;
      floatArray0[1] = (float) 0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {225.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1380.1);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-769.50412794);
      doubleArray0[3] = (-2788.4232735);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-191.0);
      doubleArray0[6] = (-778.34494836579);
      doubleArray0[7] = 248.614;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1380.1), 1.0, (-769.50412794), (-2788.4232735), 1.0, (-191.0), (-778.34494836579), 248.614}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 1.0F;
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertArrayEquals(new float[] {0.0F, 1.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 1.0F, 0.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(boolean1);
      assertEquals(3, floatArray1.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(907L);
      assertNotNull(double0);
      assertEquals(907.0, (double)double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 950L;
      floatArray0[1] = (float) 950L;
      floatArray0[2] = (float) 950L;
      floatArray0[3] = (float) 950L;
      floatArray0[4] = (float) 950L;
      floatArray0[5] = (float) 950L;
      float float0 = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) 950L;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {950.0F, 950.0F, 950.0F, 950.0F, 950.0F, 950.0F, 0.0F, 950.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 950.0F;
      doubleArray0[1] = (double) 950.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1550);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1550, doubleArray1.length);
      
      double double0 = new Integer(1550);
      assertEquals(1550, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1375.0233179289114;
      Double double1 = new Double(1375.0233179289114);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1375.0233179289114, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray0 = new Double[3];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 251.1F;
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 764043.8954912936;
      doubleArray0[0] = 3644.700826297899;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {3644.700826297899, 0.0}, doubleArray0, 0.01);
      assertEquals(1.3283844113216586E7, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3644.700826297899, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.3283844113216586E7;
      doubleArray2[1] = 1.3283844113216586E7;
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {3644.700826297899, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.3283844113216586E7, 1.3283844113216586E7}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1.304E19);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 907L;
      longArray0[1] = 907L;
      longArray0[2] = 907L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {907L, 907L, 907L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 907L;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {907.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (double) 907L;
      doubleArray2[2] = (double) 907L;
      doubleArray2[3] = (double) 907L;
      doubleArray2[4] = (double) 907L;
      doubleArray2[5] = (double) 907L;
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {907.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 907.0, 907.0, 907.0, 907.0, 907.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 874.1;
      doubleArray0[1] = 874.1;
      doubleArray0[2] = 874.1;
      double[] doubleArray1 = MathArrays.scale(874.1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.1, 874.1, 874.1}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764050.81, 764050.81, 764050.81}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.1, 874.1, 874.1}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764050.81, 764050.81, 764050.81}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[][] longArray0 = new long[2][4];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long long0 = 4697L;
      longArray2[0] = 4697L;
      longArray2[1] = 1055L;
      longArray2[2] = 4454L;
      longArray2[3] = (-955L);
      longArray2[4] = 1112L;
      longArray2[5] = (-3345L);
      long long1 = (-351L);
      longArray2[6] = (-351L);
      longArray2[7] = 448L;
      long long2 = 424L;
      longArray2[8] = 424L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.scale(0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      double double0 = 2775.863012767638;
      doubleArray0[0] = 2775.863012767638;
      doubleArray0[1] = 414.60758311;
      doubleArray0[2] = (-3418.022);
      double double1 = 3133.1;
      doubleArray0[3] = 3133.1;
      doubleArray0[4] = 3081.18;
      doubleArray0[5] = (-1296.4283826971516);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2775.863012767638, 414.60758311, (-3418.022), 3133.1, 3081.18, (-1296.4283826971516)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = 1035;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1035);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1035, intArray1.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {2775.863012767638, 414.60758311, (-3418.022), 3133.1, 3081.18, (-1296.4283826971516)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(6367.958986988728, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 11
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      long[] longArray0 = new long[10];
      long[][] longArray1 = new long[8][4];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      long[] longArray2 = new long[14];
      assertFalse(longArray2.equals((Object)longArray0));
      
      longArray2[0] = 0L;
      longArray2[1] = 1112L;
      longArray2[2] = 1112L;
      longArray2[3] = (-1L);
      longArray2[4] = 1112L;
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-1.0F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) (-0.9915991F), (double) (-0.9915991F), (double) (-0.9915991F), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) 907L;
      doubleArray1[2] = (double) (-0.9915991F);
      doubleArray1[3] = (double) 907L;
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 907.0, (-0.9915990829467773), 907.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (double) (-0.9915991F);
      doubleArray2[2] = Double.NaN;
      doubleArray2[3] = 3.834E-20;
      doubleArray2[4] = (double) 907L;
      doubleArray2[5] = Double.NaN;
      doubleArray2[6] = Double.NaN;
      double double2 = MathArrays.safeNorm(doubleArray2);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, (-0.9915990829467773), Double.NaN, 3.834E-20, 907.0, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(7, doubleArray2.length);
      
      MathArrays.scaleInPlace((-0.9915991F), doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-625.6163993777);
      doubleArray1[1] = (-0.05417713522911072);
      doubleArray1[2] = 3396.244;
      doubleArray1[3] = (-1872.5017);
      doubleArray1[4] = (-506.0);
      doubleArray1[5] = 540.4031363172685;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-1547.544251324869), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Double double1 = new Double(1736.9778832973473);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1736.9778832973473, (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      doubleArray0[0] = double1;
      Double double2 = new Double(1.34217729E8);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(1.34217729E8, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (double) doubleArray0[0];
      doubleArray1[2] = (double) (-1537);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true, true);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.34217729E8, 1736.9778832973473, (-1537.0)}, doubleArray1, 0.01);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 1.4E-45F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      Double double0 = new Double(Double.NaN);
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      Double double1 = new Double(Double.NaN);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(Double.NaN, (double)double1, 0.01);
      
      Double[] doubleArray2 = new Double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 874.0961901089;
      doubleArray0[1] = 874.0961901089;
      doubleArray0[2] = 874.0961901089;
      double[] doubleArray1 = MathArrays.scale(874.0961901089, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[] longArray0 = new long[4];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[][] longArray1 = new long[6][2];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[1];
      longArray1[0] = 1476L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 1476L;
      longArray0[1] = longArray1;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1476L;
      longArray3[1] = 1476L;
      longArray3[2] = 1476L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 1476L;
      longArray4[1] = 1476L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1476L;
      longArray5[1] = 1476L;
      longArray5[2] = 1476L;
      longArray5[3] = 1476L;
      longArray5[4] = 1476L;
      longArray5[5] = 1476L;
      longArray5[6] = 1476L;
      longArray5[7] = 1476L;
      longArray5[8] = 1476L;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 1476L;
      doubleArray2[1] = (double) 1476L;
      doubleArray2[2] = (double) 1476L;
      doubleArray2[3] = (double) 1476L;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[4] = 3.141592653589793;
      doubleArray2[5] = 3.141592653589793;
      double double0 = MathArrays.linearCombination(3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793);
      assertEquals(39.47841760435743, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(7.6952989809711845, double1, 0.01);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.scaleInPlace(0.9974949359893799, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.1337227628972566, 3.1337227628972566, 3.1337227628972566, 3.1337227628972566, 3.1337227628972566, 3.1337227628972566}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.checkPositive(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double2 = (-3.141592653589793);
      double double3 = (-1977.229);
      double double4 = MathArrays.linearCombination((-3.141592653589793), (-1977.229), 349.9424393078, (-3279.798483169203), 3.141592653589793, 0.9974949359893799);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-1141525.8998146257), double4, 0.01);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      Double double1 = new Double((-1229));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1229.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      Double double2 = Double.valueOf((double) 0);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals(0.0, (double)double2, 0.01);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[4][2];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = (-5041.91629);
      doubleArray0[4] = 1.304E19;
      double double0 = MathArrays.linearCombination(764044.1495628943, (-352.04844), 1.0, 0.0, (-352.04844), (-281.162159390145));
      assertEquals((-2.688815682451433E8), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, (-5041.91629), 1.304E19, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 2.608E19, 0.0, (-10083.83258), 2.608E19, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = (-5041.91629);
      doubleArray0[4] = 1.304E19;
      doubleArray0[6] = (-3133.1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, (-5041.91629), 1.304E19, 0.0, (-3133.1)}, doubleArray0, 0.01);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = (-3133.1);
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      doubleArray1[4] = (-3133.1);
      doubleArray1[5] = 1.8441344853345161E19;
      doubleArray1[6] = 1.304E19;
      doubleArray1[7] = (-5041.91629);
      doubleArray1[8] = 0.0;
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, (-5041.91629), 1.304E19, 0.0, (-3133.1)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-3133.1), 1.304E19, 1.304E19, (-3133.1), 1.8441344853345161E19, 1.304E19, (-5041.91629), 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9.668134485334516E19, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      float[] floatArray1 = new float[8];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2041.7095F;
      floatArray1[2] = 2041.7095F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 2041.7095F;
      floatArray1[7] = 2041.7095F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 2041.7095F, 2041.7095F, 0.0F, 0.0F, 0.0F, 2041.7095F, 2041.7095F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(8, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = (-0.9915991F);
      double double0 = MathArrays.linearCombination((double) (-0.9915991F), (double) (-0.9915991F), (double) (-0.9915991F), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = 907L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 907L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-0.9915991F);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {907.0, Double.NaN, Double.NaN, (-0.9915990829467773), 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.992 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) (-0.9915991F), (double) (-0.9915991F), (-1.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[] longArray0 = new long[8];
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 907L;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) (-0.9915991F);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {907.0, Double.NaN, Double.NaN, (-0.9915990829467773), Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-907.0), Double.NaN, Double.NaN, 0.9915990829467773, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      Double double1 = new Double(0.366272509098053);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.366272509098053, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray2 = new Double[1];
      doubleArray2[0] = (Double) (-0.9915990829467773);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, doubleArray2.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(8, longArray0.length);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {907.0, Double.NaN, Double.NaN, (-0.9915990829467773), Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-907.0), Double.NaN, Double.NaN, 0.9915990829467773, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.normalizeArray(doubleArray1, (-1.0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1.0010944700754905), Double.NaN, Double.NaN, 0.0010944700754905695, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {907.0, Double.NaN, Double.NaN, (-0.9915990829467773), Double.NaN, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-907.0), Double.NaN, Double.NaN, 0.9915990829467773, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray3.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathArrays.linearCombination(5.0153846153846157E17, (-1983.2044086537358), (-1171.9), (-1171.9), (-1983.2044086537358), (-419.085746), (-419.085746), 117.4588021799);
      assertEquals((-9.94653288032487E20), double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1576);
      intArray0[0] = (-1576);
      int int1 = 169;
      intArray0[1] = 169;
      int int2 = 216;
      intArray0[2] = 216;
      int int3 = 2147480426;
      intArray0[3] = 2147480426;
      int int4 = (-1056);
      intArray0[4] = (-1056);
      int int5 = (-1284);
      intArray0[5] = (-1284);
      intArray0[6] = 3175;
      int int6 = 1182;
      intArray0[7] = 1182;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1182;
      intArray1[1] = (-1056);
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[3] = (-5041.91629);
      doubleArray0[4] = 1.304E19;
      doubleArray0[6] = (-3133.1);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, (-5041.91629), 1.304E19, 0.0, (-3133.1)}, doubleArray0, 0.01);
      assertEquals(1.8441344853345161E19, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      
      double[][] doubleArray1 = new double[1][9];
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 3894.431502501818, 0.0, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2400);
      intArray0[1] = (-385);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("INCREASING").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 135, 332);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1446.9574153324);
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 874.0961901089;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 874.0961901089;
      doubleArray0[1] = 874.0961901089;
      doubleArray0[2] = 874.0961901089;
      double[] doubleArray1 = MathArrays.scale(874.0961901089, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1323363.286268687, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-185.042187886137), (-1062.150159076433), 3582.86202, (-185.042187886137), (-1062.150159076433), (-1062.150159076433));
      assertEquals(661724.9226502593, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-349.9424393078);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1276.968F;
      floatArray0[5] = (-0.9915991F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-0.9915991F);
      double double0 = MathArrays.linearCombination((double) 0.0F, (double) 0.0F, (double) 1.0F, (-3727.08003501659));
      assertEquals((-3727.08003501659), double0, 0.01);
      
      long[][] longArray0 = new long[0][8];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.283185307179586;
      doubleArray2[1] = (-3727.08003501659);
      doubleArray2[2] = (double) 1276.968F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6.283 >= -3,727.08)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1062.150159076433), (-1062.150159076433), (-1062.150159076433), (-1062.150159076433), 3582.86202, (-1062.150159076433), (-185.042187886137), 3582.86202);
      assertEquals((-2212192.1707146703), double0, 0.01);
      
      Double double1 = new Double(3582.86202);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(3582.86202, (double)double1, 0.01);
      
      Double[] doubleArray2 = new Double[5];
      doubleArray2[0] = double1;
      doubleArray2[1] = double1;
      doubleArray2[2] = double1;
      doubleArray2[3] = double1;
      doubleArray2[4] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(5, doubleArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 755L;
      longArray0[1] = 755L;
      longArray0[2] = 755L;
      longArray0[3] = 755L;
      longArray0[4] = 755L;
      longArray0[5] = 755L;
      longArray0[6] = 755L;
      longArray0[7] = 2523L;
      longArray0[8] = 755L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {755L, 755L, 755L, 755L, 755L, 755L, 755L, 2523L, 755L}, longArray0);
      assertEquals(9, longArray0.length);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-349.9424393078);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = MathArrays.linearCombination((double) (-0.9915991F), (double) (-0.9915991F), (-1.0), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[][] longArray0 = new long[2][0];
      long[] longArray1 = new long[8];
      longArray1[0] = 907L;
      longArray1[1] = 9007199254740990L;
      longArray1[2] = (-1L);
      longArray1[3] = (-1402L);
      longArray1[4] = 9223372036854775807L;
      longArray1[5] = 0L;
      longArray1[6] = 1112L;
      longArray1[7] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1402L);
      longArray2[1] = (-1L);
      longArray2[2] = (-1L);
      longArray2[3] = 1112L;
      longArray2[4] = (-1L);
      longArray2[5] = 907L;
      longArray2[6] = 1112L;
      longArray2[7] = 907L;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 192;
      intArray0[1] = 6;
      intArray0[2] = 2;
      intArray0[3] = 2145877452;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {192, 6, 2, 2145877452}, intArray0);
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-11);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-11), (-11));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2104.515678877;
      doubleArray0[1] = 1780.5717076;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.07073719799518585;
      doubleArray0[4] = (-3.5997360512765566E-9);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2104.515678877, 1780.5717076, 1.0, 0.07073719799518585, (-3.5997360512765566E-9)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2104.515678877, 1780.5717076, 1.0, 0.07073719799518585, (-3.5997360512765566E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {2104.515678877, 1780.5717076, 1.0, 0.07073719799518585, (-3.5997360512765566E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2755.2959073938155, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 1628967263;
      intArray0[2] = (-2146474965);
      intArray0[3] = 2989;
      int[] intArray1 = MathArrays.copyOf(intArray0, 429);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {6, 1628967263, (-2146474965), 2989}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(429, intArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2104.515678877, 1780.5717076, 1.0, 0.07073719799518585, (-3.5997360512765566E-9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {4209.031357754, 3561.1434152, 2.0, 0.1414743959903717, (-7.199472102553113E-9)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2104.515678877, 1780.5717076, 1.0, 0.07073719799518585, (-3.5997360512765566E-9)}, doubleArray0, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1062.150159076433), (-1062.150159076433), (-1062.150159076433), (-1062.150159076433), 3582.86202, (-1062.150159076433), (-185.042187886137), 3582.86202);
      assertEquals((-2212192.1707146703), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-1062.150159076433);
      doubleArray2[1] = (-2212192.1707146703);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (-1062.150159076433);
      doubleArray2[4] = (-185.042187886137);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (-1062.150159076433);
      doubleArray2[7] = (-1062.150159076433);
      doubleArray2[8] = (-1062.150159076433);
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 3582.86202;
      doubleArray3[1] = (-185.042187886137);
      doubleArray3[2] = (-2212192.1707146703);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-185.042187886137);
      doubleArray3[5] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray2, doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1062.150159076433), (-2212192.1707146703), 0.0, (-1062.150159076433), (-185.042187886137), 0.0, (-1062.150159076433), (-1062.150159076433), (-1062.150159076433)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {3582.86202, (-185.042187886137), (-2212192.1707146703), 0.0, (-185.042187886137), 0.0}, doubleArray3, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-349.9424393078);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1276.968F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-349.9424393078);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1276.968F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(358.2978570833117, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = (double) 0.0F;
      double double2 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      
      double double3 = MathArrays.distance(doubleArray1, doubleArray0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double4 = MathArrays.distance(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(0.0, double4, 0.01);
      assertEquals(0, doubleArray3.length);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-185.042187886137), (-1062.7), (-293.1199), (-211.2168965329125), 2725.0, (-2079.345722034424), (-1069.434242), 3.834E-20);
      assertEquals((-5407660.88388717), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((-2079.345722034424));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-2079.345722034424), (double)double2, 0.01);
      
      Double double3 = new Double(3582.86202);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(3582.86202, (double)double3, 0.01);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = double2;
      doubleArray2[1] = double3;
      doubleArray2[2] = double2;
      doubleArray2[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 898L;
      longArray0[1] = 9007199254740990L;
      longArray0[2] = 1476L;
      longArray0[3] = 1L;
      longArray0[4] = (-3958705157555305932L);
      longArray0[5] = 1L;
      longArray0[6] = 1336L;
      longArray0[7] = (-1093L);
      longArray0[8] = (-2479L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,958,705,157,555,305,932 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 874.0961901089;
      doubleArray0[1] = 874.0961901089;
      doubleArray0[2] = 874.0961901089;
      double[] doubleArray1 = MathArrays.scale(874.0961901089, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 0L;
      longArray1[3] = 755L;
      longArray0[0] = longArray1;
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = (Double) 874.0961901089;
      Double double0 = new Double(874.0961901089);
      assertNotNull(double0);
      assertEquals(874.0961901089, (double)double0, 0.01);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 874.0961901089;
      doubleArray2[3] = (Double) 874.0961901089;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      MathArrays.checkNonNegative(longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 755L}, longArray1);
      assertEquals(4, longArray1.length);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {874.0961901089, 874.0961901089, 874.0961901089}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {764044.1495628943, 764044.1495628943, 764044.1495628943}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = (-1229);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3323);
      intArray1[1] = 0;
      intArray1[2] = (-4118);
      intArray1[3] = (-3323);
      intArray1[4] = (-1229);
      intArray1[5] = 2240;
      intArray1[6] = 0;
      intArray1[7] = 134217729;
      intArray1[8] = (-4118);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-3323), 0, (-4118), (-3323), (-1229), 2240, 0, 134217729, (-4118)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6368.12554838549, double0, 0.01);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      Double double1 = new Double((-1229));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-1229.0), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[7];
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      Double double2 = new Double((double) doubleArray0[3]);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1229.0), (double)double2, 0.01);
      assertEquals(7, doubleArray0.length);
      
      doubleArray0[4] = double2;
      doubleArray0[5] = double1;
      doubleArray0[6] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertTrue(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-960.82);
      doubleArray0[2] = (-48.98469);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, (-960.82), (-48.98469), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ZERO_NORM_FOR_ROTATION_AXIS";
      stringArray0[1] = "0\nJVcl:z@";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[4] = "&9";
      stringArray0[5] = "_<u8$Ho";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, stringArray0.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 2977.6;
      doubleArray0[4] = 2977.6;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 100.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 2977.6, 0.0, 100.0, 6.283185307179586, 2977.6}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 0.0;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 0.0;
      Double double1 = new Double(1270.37025225884);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1270.37025225884, (double)double1, 0.01);
      
      doubleArray2[4] = (Double) 2977.6;
      doubleArray2[5] = (Double) 2977.6;
      doubleArray2[6] = (Double) 2977.6;
      doubleArray2[7] = (Double) 0.0;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[4] = 3.141592653589793;
      doubleArray2[5] = 3.141592653589793;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6.728011747499565, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertEquals(9.869604401089358, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkPositive(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray2.length);
      
      double double2 = MathArrays.linearCombination(1.304E19, 3.141592653589793, 3.141592653589793, (-1291.104687126187), 100.0, (-2281.55408616981));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4.096636820281067E19, double2, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586, 6.283185307179586}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-185.042187886137), (-1062.7), (-293.1199), (-211.2168965329125), 2725.0, (-2079.345722034424), (-1069.434242), 3.834E-20);
      assertEquals((-5407660.88388717), double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      
      Double double2 = new Double((-2079.345722034424));
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotNull(double2);
      assertEquals((-2079.345722034424), (double)double2, 0.01);
      
      Double double3 = new Double(3582.86202);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotNull(double3);
      assertEquals(3582.86202, (double)double3, 0.01);
      
      Double[] doubleArray2 = new Double[4];
      doubleArray2[0] = double2;
      doubleArray2[1] = double2;
      doubleArray2[2] = double2;
      doubleArray2[3] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, doubleArray2.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 898L;
      longArray0[1] = 9007199254740990L;
      longArray0[2] = 1476L;
      longArray0[3] = 1L;
      longArray0[4] = (-3958705157555305932L);
      longArray0[5] = 1L;
      longArray0[6] = 1336L;
      longArray0[7] = (-1093L);
      longArray0[8] = (-2479L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,958,705,157,555,305,932 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-5041.91629);
      doubleArray0[4] = (-1864.2);
      double double0 = MathArrays.linearCombination((-347.9424393078), 3795.097756668862, 1316.109751224, 1.304E19, 1864.2, 1864.2);
      assertEquals(1.7162071155960963E22, double0, 0.01);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 240, (-2400));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double1 = MathArrays.linearCombination((-5041.91629), (-5041.91629), 0.0, 1.304E19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.5420919875367366E7, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2041.7095F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 2041.7095F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4554.42480783447;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1121.9641693584604));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2217);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2920.389;
      int[] intArray0 = new int[4];
      int int0 = 117;
      intArray0[0] = 117;
      intArray0[2] = 838;
      int int1 = (-980);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-960.82);
      doubleArray0[2] = (-48.98469);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-960.82), (-48.98469), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 923175.0724000001, 94130.93969160001, 2399.4998543961, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2558.6112689);
      doubleArray0[4] = (-960.82);
      doubleArray0[5] = (-284.96919);
      doubleArray0[6] = 737.89354;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, (-2558.6112689), (-960.82), (-284.96919), 737.89354}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, (-2558.6112689), (-960.82), (-284.96919), 737.89354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 1.0, 0.0, 6546491.625342069, 923175.0724000001, 81207.43924925612, 544486.8763737316}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, (-2558.6112689), (-960.82), (-284.96919), 737.89354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 1.0, 0.0, 6546491.625342069, 923175.0724000001, 81207.43924925612, 544486.8763737316}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, Double.NaN, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double double0 = MathArrays.linearCombination((-960.82), (-960.82), 1.0, (-1495.99093488745), 100.0, (-1137.3446), (-1137.3446), (-1137.3446));
      assertEquals(2101497.3606142723, double0, 0.01);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {100.0, 1.0, 0.0, (-2558.6112689), (-960.82), (-284.96919), 737.89354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {10000.0, 1.0, 0.0, 6546491.625342069, 923175.0724000001, 81207.43924925612, 544486.8763737316}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      long[][] longArray0 = new long[6][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 9007199254740990L;
      longArray1[1] = (-1L);
      longArray1[2] = 326L;
      longArray1[3] = (-3512299194304650054L);
      longArray1[4] = (-2607L);
      longArray1[5] = (-272L);
      longArray1[6] = 317L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1962L);
      longArray2[1] = (-272L);
      longArray2[2] = (-2607L);
      longArray2[3] = (-2607L);
      longArray2[4] = (-1L);
      longArray2[5] = (-2607L);
      longArray2[6] = (-3512299194304650054L);
      longArray2[7] = (-3512299194304650054L);
      longArray2[8] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 317L;
      longArray3[1] = 9007199254740990L;
      longArray3[2] = (-1L);
      longArray3[3] = 326L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-2607L);
      longArray4[1] = (-1962L);
      longArray4[2] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 9007199254740990L;
      longArray5[1] = 326L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (-272L);
      longArray6[1] = (-2607L);
      longArray6[2] = (-2607L);
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-960.82);
      long[][] longArray0 = new long[0][3];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 3894.431502501818, 0.0, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2400);
      intArray0[1] = (-385);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray1);
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray0.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 135, 332);
      assertNotNull(objectArray0);
      assertEquals(135, objectArray0.length);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = MathArrays.linearCombination(431.341742152, (-347.9424393078), (-347.9424393078), (-95.42), 3133.1, (-764.03));
      assertEquals((-2510663.8233808926), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-764.03);
      doubleArray0[1] = (-764.03);
      doubleArray0[2] = 431.341742152;
      doubleArray0[3] = (-764.03);
      doubleArray0[4] = (-347.9424393078);
      doubleArray0[5] = (-95.42);
      doubleArray0[6] = (-764.03);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[2][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-764.03), (-764.03), 431.341742152, (-764.03), (-347.9424393078), (-95.42), (-764.03)}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[5] = 3.141592653589793;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 3.141592653589793, 3.141592653589793, 3.141592653589793, 0.0, 3.141592653589793}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(6.728011747499565, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {3.141592653589793}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(9.869604401089358, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      double[][] doubleArray4 = new double[6][3];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray3, mathArrays_OrderDirection0, true);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {9.869604401089358}, doubleArray3, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray3.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 76;
      intArray0[2] = 533;
      intArray0[3] = (-207);
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3323);
      intArray0[2] = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1.16701792169E7;
      doubleArray0[2] = (double) (-3323);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.16701792169E7, (-3323.0)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.scaleInPlace(0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3323);
      intArray0[2] = 0;
      intArray0[3] = (-1229);
      intArray0[4] = (-4118);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-3323);
      integerArray0[1] = (Integer) (-4118);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = Float.NEGATIVE_INFINITY;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-3323);
      floatArray0[3] = (float) (-3323);
      floatArray0[4] = (float) (-1229);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {Float.NEGATIVE_INFINITY, 0.0F, (-3323.0F), (-3323.0F), (-1229.0F)}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-960.82);
      doubleArray0[2] = (-48.98469);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertArrayEquals(new double[] {0.0, (-960.82), (-48.98469), 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 907L;
      longArray0[1] = 0L;
      longArray0[2] = 9007199254740990L;
      longArray0[3] = 0L;
      longArray0[4] = (-109L);
      longArray0[5] = 1L;
      longArray0[6] = (-532L);
      longArray0[7] = (-4135L);
      longArray0[8] = 3008L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -109 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 4554.42480783447;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1121.9641693584604));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(11, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2217);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-0 >= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-764.03), (-764.03), (-764.03), (-764.03), (-764.03), (-764.03));
      assertEquals(1751225.5226999999, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1751225.5226999999;
      doubleArray0[1] = 1751225.5226999999;
      doubleArray0[2] = 1751225.5226999999;
      doubleArray0[3] = 1751225.5226999999;
      doubleArray0[4] = (-764.03);
      doubleArray0[5] = (-764.03);
      double[] doubleArray1 = MathArrays.scale((-764.03), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1751225.5226999999, 1751225.5226999999, 1751225.5226999999, 1751225.5226999999, (-764.03), (-764.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), 583741.8409, 583741.8409}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double1 = MathArrays.linearCombination((-0.05417713522911072), (-535.14), 151.20104503633442, 1751225.5226999999, (-535.14), (-2747.6), (-764.03), (-3681.518948556756));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.6907029970515895E8, double1, 0.01);
      
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {1751225.5226999999, 1751225.5226999999, 1751225.5226999999, 1751225.5226999999, (-764.03), (-764.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), 583741.8409, 583741.8409}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.339740061631181E9, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1751225.5226999999, 1751225.5226999999, 1751225.5226999999, 1751225.5226999999, (-764.03), (-764.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), 583741.8409, 583741.8409}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2.343120198880839E15), (-2.343120198880839E15), (-2.343120198880839E15), (-2.343120198880839E15), (-4.45996278702827E8), (-4.45996278702827E8)}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {1751225.5226999999, 1751225.5226999999, 1751225.5226999999, 1751225.5226999999, (-764.03), (-764.03)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), 583741.8409, 583741.8409}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), (-1.337988836108481E9), 583741.8409, 583741.8409}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray3.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-252.2);
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1520.8454285);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "DIFFERENT_ROWS_LENGTHS";
      stringArray0[1] = "SF8 b=9OO^?-_ejBkpP";
      stringArray0[2] = "";
      stringArray0[3] = "t<RlU(Jt>0dog<Lic#";
      stringArray0[4] = "DECREASING";
      stringArray0[5] = "|";
      stringArray0[6] = "B8]7bs:in)<L0?h";
      stringArray0[7] = "MkI1;iDxPR7GSHz ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      MathArrays.scaleInPlace((-1520.8454285), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 383557.2170677, -0.0, -0.0, -0.0, 2312970.8173893485}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, 383557.2170677, -0.0, -0.0, -0.0, 2312970.8173893485}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, 767114.4341354, -0.0, -0.0, -0.0, 4625941.634778697}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 974.3F;
      Double double0 = new Double(0.0F);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Double double1 = new Double((-2281.55408616981));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals((-2281.55408616981), (double)double1, 0.01);
      
      Double[] doubleArray0 = new Double[6];
      doubleArray0[0] = double0;
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      doubleArray0[3] = double1;
      doubleArray0[4] = double0;
      doubleArray0[5] = double0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$2";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[2] = "INCREASING";
      stringArray0[3] = "";
      stringArray0[4] = "#Nt-0qj;1*C3(t";
      stringArray0[5] = "#=, L";
      stringArray0[6] = "te%Yaem\"6X7$u%tV";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, stringArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(0.0, 0.0, 0.0, 3894.431502501818, 0.0, 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2400);
      intArray0[1] = (-385);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-2400), (-385)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 135, 332);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = MathArrays.linearCombination(431.341742152, (-347.9424393078), (-347.9424393078), (-95.42), 3133.1, (-764.03));
      assertEquals((-2510663.8233808926), double0, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-764.03);
      doubleArray0[1] = (-764.03);
      doubleArray0[2] = 431.341742152;
      doubleArray0[3] = (-764.03);
      doubleArray0[4] = (-347.9424393078);
      doubleArray0[5] = (-95.42);
      doubleArray0[6] = (-764.03);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -764.03 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-8.810013115774497), (-8.810013115774497), 3582.86202, (-8.810013115774497), (-185.042187886137), 3582.86202);
      assertEquals((-694467.0721320545), double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][5];
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4741.03F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-4741.03F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1062.7), (-1062.7), 0.0, 0.0, 3582.86202, 0.0, (-185.042187886137), 3582.86202);
      assertEquals(466350.6629250558, double0, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[6][5];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray0;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4741.03F);
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-4741.03F), 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4554.42480783447;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1121.9641693584604));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2217);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      MathArrays.checkOrder(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      intArray2[3] = 0;
      int int1 = MathArrays.distance1(intArray0, intArray2);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertEquals(2217, int1);
      assertEquals(1, intArray0.length);
      assertEquals(4, intArray2.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2217;
      floatArray0[3] = (float) 2217;
      floatArray0[4] = (float) 2217;
      floatArray0[5] = (float) 0;
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-606.0193386038046);
      double double1 = 1691.0;
      double double2 = MathArrays.linearCombination(1691.0, (-606.0193386038046), (-293.1199), (-7.902492175393613E21), (-7.902492175393613E21), (-7.902492175393613E21));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6.244938258215727E43, double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      int int0 = (-1641);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1641));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-3323);
      intArray0[2] = 0;
      intArray0[3] = (-1229);
      intArray0[4] = (-4118);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, intArray0.length);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = (Integer) (-3323);
      integerArray0[1] = (Integer) (-4118);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(2, integerArray0.length);
      
      Double[] doubleArray0 = new Double[1];
      Double double1 = new Double(0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(0.0, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertFalse(boolean1 == boolean0);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) (int)integerArray0[1];
      doubleArray3[3] = (double) (int)integerArray0[0];
      doubleArray3[4] = (double) (-1229);
      doubleArray3[5] = (double) doubleArray0[0];
      doubleArray3[6] = (double) (int)integerArray0[0];
      doubleArray3[7] = (double) (-3323);
      boolean boolean2 = MathArrays.equals(doubleArray2, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, (-4118.0), (-3323.0), (-1229.0), 0.0, (-3323.0), (-3323.0)}, doubleArray3, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(boolean2);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(8, doubleArray3.length);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      
      doubleArray4[0] = (double) 0;
      boolean boolean3 = MathArrays.equalsIncludingNaN(doubleArray4, doubleArray1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray4, 0.01);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertFalse(boolean3);
      assertEquals(2, doubleArray1.length);
      assertEquals(1, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-764.03);
      doubleArray0[3] = (-764.03);
      doubleArray0[4] = (-786.2);
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {0.0, 0.0, (-764.03), (-764.03), (-786.2)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3108.3808418044573);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-786.2);
      double double0 = 0.0;
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1631);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1631), 0, 0, 0, 134217729, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 907L;
      doubleArray0[1] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {907.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 907L;
      longArray0[1] = 907L;
      longArray0[2] = 907L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {907L, 907L, 907L}, longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 907L;
      doubleArray1[1] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {907.0, Double.NaN}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = MathArrays.linearCombination(0.0875862700108075, (-177.666), (-119.0), (-4177.0866332929), 0.0875862700108075, (-119.0), Double.NaN, 0.8414709568023682);
      assertEquals(Double.NaN, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 957.334, 1.7976931348623157E308, 0.0, 2047.94589801977, 1.7976931348623157E308, 2394.1271652, 2.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-526.37);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2394.1271652;
      doubleArray0[5] = 2394.1271652;
      MathArrays.scaleInPlace(957.334, doubleArray0);
      assertArrayEquals(new double[] {(-503911.89758), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 2291979.335569577, 2291979.335569577}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.scale((-2027.84), doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-503911.89758), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, 0.0, 2291979.335569577, 2291979.335569577}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0218527023886272E9, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, -0.0, (-4.647767375841411E9), (-4.647767375841411E9)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 0.0;
      MathArrays.scaleInPlace((-1821.9378223162357), doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {-0.0}, doubleArray2, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(1, doubleArray2.length);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 94;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-1212.079068);
      doubleArray0[0] = (-1212.079068);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertArrayEquals(new double[] {(-1212.079068)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = (-51);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-51));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 771;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 0, 771}, intArray0);
      assertArrayEquals(new int[] {(-1), 0, 771}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 771;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 2096.0558544;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 771;
      doubleArray0[5] = (-1582.09697);
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      double double0 = (-252.2);
      doubleArray0[1] = (-252.2);
      doubleArray0[2] = 0.0;
      double double1 = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1520.8454285);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -252.2)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, (-211.2168965329125));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 0.0;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3727.0F);
      floatArray1[1] = 3.4028235E38F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3727.0F), 3.4028235E38F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-636.6141649894968), 0.0, 2427.9694019822996, (double) 3.4028235E38F, 0.0, (double) 3.4028235E38F);
      assertEquals(8.261951256730826E41, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-703.0689826);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-703.0689826)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3727.0F), 3.4028235E38F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(2, floatArray1.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-547);
      intArray0[1] = (-120);
      intArray0[2] = 24;
      intArray0[3] = 0;
      intArray0[4] = (-1398);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new int[] {(-547), (-120), 24, 0, (-1398)}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1683.0576058);
      doubleArray0[2] = 6.283185307179586;
      doubleArray0[3] = 2977.6;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 100.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[5][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {0.0, (-1683.0576058), 6.283185307179586, 2977.6, 0.0, 0.0, (-1.0), 100.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      Double[] doubleArray2 = new Double[9];
      doubleArray2[0] = (Double) 0.0;
      Double double0 = new Double((-1.0));
      assertNotNull(double0);
      assertEquals((-1.0), (double)double0, 0.01);
      
      doubleArray2[1] = double0;
      doubleArray2[2] = (Double) 0.0;
      Double double1 = new Double(1270.37025225884);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1270.37025225884, (double)double1, 0.01);
      
      doubleArray2[3] = double1;
      doubleArray2[4] = (Double) 100.0;
      doubleArray2[5] = (Double) 2977.6;
      doubleArray2[6] = (Double) 2977.6;
      doubleArray2[7] = (Double) 6.283185307179586;
      Double double2 = new Double((-1.0));
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotNull(double2);
      assertEquals((-1.0), (double)double2, 0.01);
      
      doubleArray2[8] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, true);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(boolean0);
      assertEquals(9, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-964);
      intArray0[1] = 0;
      intArray0[2] = 273;
      intArray0[3] = (-21);
      intArray0[4] = 78;
      intArray0[5] = 1212;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-964), 0, 273, (-21), 78, 1212}, intArray0);
      assertArrayEquals(new int[] {(-964), 0, 273, (-21), 78, 1212}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-964);
      floatArray0[1] = (float) (-21);
      floatArray0[2] = (float) 78;
      floatArray0[3] = (float) 273;
      floatArray0[4] = (float) 78;
      floatArray0[5] = (float) 78;
      floatArray0[6] = (float) (-964);
      floatArray0[7] = 542.7F;
      floatArray0[8] = (float) 1212;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-964.0F), (-21.0F), 78.0F, 273.0F, 78.0F, 78.0F, (-964.0F), 542.7F, 1212.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-964);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 273;
      doubleArray0[3] = (double) (-21.0F);
      doubleArray0[4] = (double) 78.0F;
      doubleArray0[5] = (double) 0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1212);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-964.0), 0.0, 273.0, (-21.0), 78.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1212, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (-349.9424393078);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 6.283185307179586);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.03611623416608457), 6.319301541345672}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {2.0, (-349.9424393078)}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1276.968F;
      floatArray0[5] = 0.0F;
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 1276.968F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertEquals(6, floatArray0.length);
      assertEquals(5, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4554.42480783447;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1121.9641693584604));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1121.9641693584604)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2217);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray1);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {4554.42480783447}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = (-2217);
      int int0 = MathArrays.distanceInf(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2217)}, intArray0);
      assertArrayEquals(new int[] {(-2217)}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray2.length);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 4554.42480783447;
      doubleArray2[1] = (-1121.9641693584604);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) (-2217);
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-2607L);
      longArray0[0] = (-2607L);
      longArray0[1] = (-1206L);
      longArray0[2] = (-2718L);
      long long1 = 1490L;
      longArray0[3] = 1490L;
      long long2 = (-1248L);
      longArray0[4] = (-1248L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,607 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-441.1);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1564.7);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 848.3628109375594;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1306.853468;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      int int0 = 3013;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3013);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 1306.853468, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3013, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {Double.NaN, 1306.853468, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertEquals(3013, doubleArray1.length);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[1][9];
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 1306.853468;
      doubleArray3[2] = Double.NaN;
      doubleArray3[3] = (double) 3013;
      doubleArray3[4] = (double) 3013;
      doubleArray2[0] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3,013
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-863.535333817);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 3.834E-20;
      doubleArray1[4] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1410.2F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      float float0 = 1975.8523F;
      floatArray0[3] = 1975.8523F;
      floatArray0[4] = (-782.0F);
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-1375.6813F);
      floatArray0[7] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1410.2F), 0.0F, 0.0F, 1975.8523F, (-782.0F), 1.0F, (-1375.6813F), 1.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1375.6813F);
      doubleArray0[1] = (double) (-1375.6813F);
      doubleArray0[2] = (double) (-1410.2F);
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = 2561.4703595;
      int int0 = (-2260);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-2260));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2920.389;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = 722.512213920451;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2920.389, 0.0, Double.POSITIVE_INFINITY, 722.512213920451}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = (-606.0193386038046);
      MathArrays.linearCombination(1.304E19, (-606.0193386038046), (-606.0193386038046), 1691.0, (-293.1199), (-606.0193386038046));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-293.1199);
      doubleArray0[1] = (-7.902492175393613E21);
      doubleArray0[2] = (-606.0193386038046);
      doubleArray0[3] = 1691.0;
      doubleArray0[4] = (-293.1199);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1641));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2281.55408616981);
      doubleArray0[2] = (-674.4410922621693);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-250.506);
      MathArrays.equals(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2281);
      intArray0[3] = 0;
      intArray0[4] = 3538;
      MathArrays.copyOf(intArray0, 0);
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) (-2281);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) 3538;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 4583.760186554183;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) 3538;
      doubleArray2[8] = 0.0;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3108.3808418044573);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-786.2);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-764.03);
      doubleArray0[5] = (-199.57877129);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 527.8778807;
      doubleArray0[8] = (-1207.3502);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[3][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 874.0961901089;
      doubleArray0[1] = 874.0961901089;
      doubleArray0[2] = 874.0961901089;
      double[] doubleArray1 = MathArrays.scale(874.0961901089, doubleArray0);
      MathArrays.copyOf(doubleArray1);
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[4];
      longArray1[0] = 0L;
      longArray1[1] = 907L;
      longArray1[2] = 1L;
      longArray1[3] = 755L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 907L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      longArray3[0] = 1L;
      longArray3[1] = 755L;
      longArray3[2] = 907L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = 1L;
      longArray4[1] = 0L;
      longArray4[2] = 907L;
      longArray4[3] = 0L;
      longArray4[4] = 1L;
      longArray4[5] = 755L;
      longArray4[6] = 907L;
      longArray4[7] = 907L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      longArray5[0] = 755L;
      longArray5[1] = 0L;
      longArray5[2] = 1L;
      longArray5[3] = 0L;
      longArray5[4] = 907L;
      longArray5[5] = 1L;
      longArray5[6] = 1L;
      longArray5[7] = 755L;
      longArray5[8] = 755L;
      longArray0[4] = longArray5;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0E-5;
      doubleArray1[1] = (-1260.33691955);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2172.6755689617244;
      doubleArray1[4] = (-1770.0);
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = 48.66;
      doubleArray1[7] = (-3662.68);
      doubleArray0[0] = doubleArray1;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1264.7;
      doubleArray0[1] = 1264.7;
      doubleArray0[2] = 1264.7;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1264.7;
      doubleArray0[5] = 1264.7;
      doubleArray0[6] = 1264.7;
      MathArrays.scaleInPlace(1264.7, doubleArray0);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = (-418);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-418), (-418));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (-5041.91629);
      doubleArray0[4] = (-1864.2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-3133.1);
      MathArrays.safeNorm(doubleArray0);
      double[][] doubleArray1 = new double[1][9];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 1.304E19, 0.0, (-5041.91629), 1.34217729E8, (-1864.2), (-3133.1)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, (-1864.2), (-5041.91629));
      assertEquals(9399140.347818, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 98;
      intArray0[1] = 67;
      int int0 = (-1868);
      intArray0[2] = (-1868);
      intArray0[3] = 0;
      int int1 = (-3096);
      intArray0[4] = (-3096);
      intArray0[5] = 375;
      int int2 = 2;
      intArray0[6] = 2;
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-3096);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 98;
      doubleArray0[4] = (double) (-3096);
      doubleArray0[5] = (double) 67;
      double[][] doubleArray1 = new double[3][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      MathArrays.normalizeArray(doubleArray0, 0.0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 375;
      doubleArray2[1] = (double) (-3096);
      try { 
        MathArrays.ebeDivide(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-1147.610552655205);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 1735.86712127634;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2.0;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[0][0];
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection1, doubleArray2);
      long[][] longArray0 = new long[7][8];
      long[] longArray1 = new long[8];
      longArray1[0] = 0L;
      longArray1[1] = 2232L;
      longArray1[2] = 4269L;
      longArray1[3] = 0L;
      longArray1[4] = 319L;
      longArray1[5] = (-2088L);
      longArray1[6] = 0L;
      longArray1[7] = 451L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      longArray2[0] = 2232L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      longArray4[0] = (-2088L);
      longArray4[1] = 0L;
      longArray4[2] = 2232L;
      longArray4[3] = 0L;
      longArray4[4] = 2232L;
      longArray4[5] = 0L;
      longArray4[6] = 319L;
      longArray4[7] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = 451L;
      longArray5[1] = 451L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      longArray6[0] = 2232L;
      longArray6[1] = 0L;
      longArray6[2] = 0L;
      longArray6[3] = (-2088L);
      longArray6[4] = 2232L;
      longArray6[5] = 9218868437227405312L;
      longArray6[6] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = 433L;
      longArray7[1] = 0L;
      longArray7[2] = 0L;
      longArray7[3] = 4269L;
      longArray7[4] = 2232L;
      longArray7[5] = 2232L;
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1446.9574153324);
      doubleArray0[1] = Double.POSITIVE_INFINITY;
      doubleArray0[2] = 1601.23193440709;
      doubleArray0[3] = (-542.095622134587);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1375.0233179289114;
      doubleArray0[1] = 1375.0233179289114;
      MathArrays.scaleInPlace(1375.0233179289114, doubleArray0);
      int int0 = 275;
      int int1 = (-1587);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 275, (-1587));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      MathArrays.scaleInPlace(2598.065941830727, doubleArray0);
      int int0 = 275;
      int int1 = (-1587);
      int int2 = 2766;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Integer>) null, 2766, 275);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      MathArrays.OrderDirection.values();
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3.141592653589793;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 3.141592653589793;
      doubleArray2[1] = 3.141592653589793;
      doubleArray2[2] = 3.141592653589793;
      doubleArray2[3] = 3.141592653589793;
      doubleArray2[4] = 3.141592653589793;
      doubleArray2[5] = 3.141592653589793;
      MathArrays.distance(doubleArray1, doubleArray2);
      MathArrays.safeNorm(doubleArray1);
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      MathArrays.checkOrder(doubleArray0);
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0);
      double[][] doubleArray4 = new double[6][3];
      doubleArray4[0] = doubleArray1;
      doubleArray4[1] = doubleArray0;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray1;
      doubleArray4[4] = doubleArray0;
      doubleArray4[5] = doubleArray3;
      try { 
        MathArrays.sortInPlace(doubleArray1, doubleArray4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-1631);
      intArray0[1] = 0;
      intArray0[2] = 265;
      intArray0[3] = 0;
      intArray0[4] = 134217729;
      intArray0[5] = (-2237);
      intArray0[6] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
