/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:08:58 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double[] doubleArray0 = new Double[3];
      Double double0 = new Double((-2227.4459));
      assertEquals((-2227.4459), (double)double0, 0.01);
      assertNotNull(double0);
      
      doubleArray0[0] = double0;
      Double double1 = new Double(4.9E-324);
      assertEquals(4.9E-324, (double)double1, 0.01);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      doubleArray0[1] = double1;
      Double double2 = new Double(3.834E-20);
      assertEquals(3.834E-20, (double)double2, 0.01);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      
      doubleArray0[2] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<String, String>> field0 = (Field<Pair<String, String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4650));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 246.03485F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1652.0F);
      floatArray0[1] = 2587.9253F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 725.7325F;
      floatArray0[6] = (-546.7737F);
      floatArray0[7] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {246.03485F, 2587.9253F, (-1652.0F), 0.0F, 0.0F, 725.7325F, (-546.7737F), 1.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 246.03485F;
      doubleArray0[1] = (double) 725.7325F;
      doubleArray0[2] = (double) 246.03485F;
      doubleArray0[3] = (double) 725.7325F;
      doubleArray0[4] = (double) (-1652.0F);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 246.03485F;
      doubleArray0[7] = (double) (-546.7737F);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {246.03485107421875, 725.7324829101562, 246.03485107421875, 725.7324829101562, (-1652.0), 0.0, 246.03485107421875, (-546.773681640625)}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0, 1265);
      assertEquals(1265, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {246.03485107421875, 725.7324829101562, 246.03485107421875, 725.7324829101562, (-1652.0), 0.0, 246.03485107421875, (-546.773681640625)}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 316.29767;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = (double) 1.0F;
      doubleArray3[3] = (double) 2587.9253F;
      doubleArray3[4] = (double) 1.0F;
      doubleArray3[5] = (double) 246.03485F;
      doubleArray3[6] = (double) (-1652.0F);
      // Undeclared exception!
      MathArrays.convolve(doubleArray3, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 3088;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 3088);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-6083.87242372817);
      doubleArray0[2] = (-633.1);
      doubleArray0[3] = 605.189982678;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1168.7);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5793.236F);
      floatArray0[1] = (-1591.8718F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-5793.236F), (-1591.8718F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2571;
      intArray0[1] = 1817;
      intArray0[2] = 4222;
      intArray0[3] = (-1);
      intArray0[4] = 134217729;
      intArray0[5] = (-986);
      intArray0[6] = 2215;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {2571, 1817, 4222, (-1), 134217729, (-986), 2215}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2571, 1817, 4222, (-1), 134217729, (-986), 2215}, intArray0);
      assertArrayEquals(new int[] {2571, 1817, 4222, (-1), 134217729, (-986), 2215}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4222;
      doubleArray0[1] = 1950.219201892673;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {4222.0, 1950.219201892673}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4222.0, 1950.219201892673}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-1308.392624316096));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {4222.0, 1950.219201892673}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-894.9833891461027), (-413.40923516999345)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(5636.511189848597, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4222.0, 1950.219201892673}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-894.9833891461027), (-413.40923516999345)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      int int1 = MathArrays.distance1(intArray1, intArray1);
      assertEquals(0, int1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2571, 1817, 4222, (-1), 134217729, (-986), 2215}, intArray0);
      assertArrayEquals(new int[] {2571, 1817, 4222, (-1), 134217729, (-986), 2215}, intArray1);
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double1 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertEquals((-4584858.497643131), double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {4222.0, 1950.219201892673}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-894.9833891461027), (-413.40923516999345)}, doubleArray2, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = (double) 2215;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = (-4584858.497643131);
      doubleArray3[5] = 5636.511189848597;
      doubleArray3[6] = 1950.219201892673;
      doubleArray3[7] = (double) (-1);
      doubleArray3[8] = (-1.0);
      try { 
        MathArrays.checkOrder(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,215 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 191.5F;
      floatArray0[1] = Float.POSITIVE_INFINITY;
      floatArray0[2] = 1.0F;
      floatArray0[4] = 2931.982F;
      floatArray0[5] = 1202.2811F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {191.5F, Float.POSITIVE_INFINITY, 1.0F, 0.0F, 2931.982F, 1202.2811F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1202.2811F;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 191.5F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (double) 191.5F;
      doubleArray0[5] = (double) 1.0F;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1141.1336819050675));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.7598723186650325);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.7598723186650325), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6.747350469761734E-20), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(6.747350469761734E-20, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.7598723186650325), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6.747350469761734E-20), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2625, (-936));
      assertEquals(2625, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2625;
      doubleArray0[1] = (double) 2625;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (2,625 >= 2,625)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 1698.977961590148;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2146883119);
      intArray0[1] = (-4182);
      intArray0[2] = 1130;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-4182);
      intArray1[1] = 1130;
      intArray1[2] = (-2146883119);
      intArray1[3] = (-4182);
      intArray1[4] = (-2146883119);
      intArray1[5] = (-2146883119);
      intArray1[6] = (-2146883119);
      intArray1[7] = 13;
      intArray1[8] = 1130;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals((-1198798), int0);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2146883119), (-4182), 1130}, intArray0);
      assertArrayEquals(new int[] {(-4182), 1130, (-2146883119), (-4182), (-2146883119), (-2146883119), (-2146883119), 13, 1130}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) (-2146883119);
      longArray1[1] = (long) (-2146883119);
      longArray1[2] = (long) (-2146883119);
      longArray1[3] = (long) (-2146883119);
      longArray1[4] = (long) 1130;
      longArray1[5] = (long) (-4182);
      longArray1[6] = (long) (-2146883119);
      longArray1[7] = (long) (-4182);
      longArray1[8] = (-1041L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.834E-20;
      doubleArray1[1] = 1698.977961590148;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 8.0E298;
      doubleArray1[4] = 371.3702;
      doubleArray1[5] = 5.101248E38;
      doubleArray1[6] = 1.883511811213715E-8;
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2.258594253069816E19, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 5.101248E38, 3.400832E38, 1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(7.411941505979658E38, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 5.101248E38, 3.400832E38, 1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray1, 1.304E19);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 3.400832E38, 5.101248E38, 3.400832E38, 1.700416E38, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, 2.8977777777777777E18, 4.346666666666667E18, 2.8977777777777777E18, 1.44888888888888883E18, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      FieldElement<String> fieldElement1 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray0 = null;
      try { 
        MathArrays.normalizeArray((double[]) null, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1369.83F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = 1283.535F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, 0.0F, (-1369.83F), 1.0F, (-1.0F), 1283.535F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) 1283.535F;
      doubleArray0[3] = (double) 1.0F;
      doubleArray0[4] = (-1.0129027912496858E-9);
      doubleArray0[5] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[6] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[7] = (-5.207000323380292E-8);
      try { 
        MathArrays.normalizeArray(doubleArray0, Float.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2190.3064F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 3599.0F;
      floatArray0[3] = 843.2507F;
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertFalse(boolean1);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {(-2190.3064F), 0.0F, 3599.0F, 843.2507F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2415.5325);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-2415.5325)}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= -2,415.532)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-6083.87242372817);
      doubleArray0[2] = (-633.1);
      doubleArray0[3] = 605.189982678;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1168.7);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5793.236F);
      floatArray0[1] = (-1591.8718F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-5793.236F), (-1591.8718F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 134217729);
      assertEquals(134217729, objectArray0.length);
      assertNotNull(objectArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = 134217729;
      intArray0[2] = 134217729;
      intArray0[3] = 134217729;
      intArray0[4] = 134217729;
      intArray0[5] = 134217729;
      intArray0[6] = 134217729;
      intArray0[7] = 134217729;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729, 134217729}, intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = Float.POSITIVE_INFINITY;
      floatArray0[1] = (-507.71F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {Float.POSITIVE_INFINITY, (-507.71F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-507.71F);
      doubleArray0[1] = (double) (-507.71F);
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[3] = (double) Float.POSITIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-507.7099914550781), (-507.7099914550781), Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2258.66124939796);
      doubleArray0[1] = (-2767.9868136267078);
      doubleArray0[2] = 1788.7838164;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1484.212783473982;
      doubleArray0[6] = 844510.9329359032;
      doubleArray0[7] = 1168.7;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1673);
      intArray0[1] = 1848;
      intArray0[3] = 2145717625;
      int int0 = 4;
      intArray0[4] = 4;
      intArray0[5] = (-1473);
      intArray0[6] = 100;
      intArray0[7] = 2;
      intArray0[8] = 59;
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 100;
      intArray1[1] = (-1673);
      intArray1[2] = (-1473);
      intArray1[3] = 59;
      intArray1[4] = 2;
      intArray1[5] = 59;
      intArray1[6] = 100;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-6083.87242372817);
      doubleArray0[2] = (-633.1);
      doubleArray0[3] = 605.189982678;
      doubleArray0[4] = 5.206150291559893E-8;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = (-1168.7);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5793.236F);
      floatArray0[1] = (-1591.8718F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-5793.236F), (-1591.8718F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19, (-6083.87242372817), (-633.1), 605.189982678, 5.206150291559893E-8, 3.834E-20, (-1168.7)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 134217729;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 134217729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((-1566.0), (double) 0, (double) 0, (-1566.0), (double) 0, (-1566.0));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1369.0533633);
      doubleArray0[1] = 0.3058015757857271;
      doubleArray0[2] = 459.45410944435;
      doubleArray0[3] = (-1.7976931348623157E308);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1369.0533633));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1369.0533633), 0.3058015757857271, 459.45410944435, (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0426179391882664E-302), 2.3288661880769454E-306, 3.499024286283264E-303, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1369.0533633), 0.3058015757857271, 459.45410944435, (-1.7976931348623157E308)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.0426179391882664E-302), 2.3288661880769454E-306, 3.499024286283264E-303, Double.NEGATIVE_INFINITY}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkOrder(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-5318.2085F);
      floatArray0[4] = (-617.6808F);
      floatArray0[5] = 139.8F;
      floatArray0[6] = (-1092.2635F);
      floatArray0[7] = (-464.0F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-1687.3678F);
      floatArray1[1] = (-1092.2635F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1092.2635F);
      floatArray1[4] = (-617.6808F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, (-5318.2085F), (-617.6808F), 139.8F, (-1092.2635F), (-464.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-1687.3678F), (-1092.2635F), 0.0F, (-1092.2635F), (-617.6808F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 326.9804366249;
      doubleArray1[2] = (-1750.481837954526);
      doubleArray1[3] = 3.141592653589793;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-897.0);
      doubleArray1[6] = 0.34233886559468374;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertFalse(boolean1);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 326.9804366249, (-1750.481837954526), 3.141592653589793, 1.0, (-897.0), 0.34233886559468374}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int0 = MathArrays.distance1(intArray0, (int[]) null);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1674.4723F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = (-2875.9119F);
      floatArray0[7] = 4223.48F;
      floatArray0[8] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {(-1674.4723F), 0.0F, 0.0F, (-1.0F), 0.0F, 1.0F, (-2875.9119F), 4223.48F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double[][] doubleArray0 = new double[2][3];
      doubleArray0[1] = doubleArray0[0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1076.019740874;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0[1]);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {1076.019740874}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-347.10859837);
      doubleArray1[1] = 6.52E18;
      doubleArray1[2] = 1.342202769551E8;
      doubleArray1[3] = 339.179423;
      doubleArray1[4] = 2485.85973988458;
      doubleArray1[5] = (-3239.3879);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.304E19;
      doubleArray1[1] = 1.304E19;
      doubleArray1[2] = 1.304E19;
      doubleArray1[3] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(2.608E19, double0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertEquals(4, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 1.304E19, 1.304E19, 1.304E19}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-0.3058015757857271);
      doubleArray0[2] = 340.7329;
      doubleArray0[3] = 8.0E298;
      doubleArray0[4] = (-9.007199254740992E15);
      doubleArray0[5] = (-3358.8113678422);
      doubleArray0[6] = (-4432.131872313982);
      doubleArray0[7] = 1074.07843528;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-0.3058015757857271), 340.7329, 8.0E298, (-9.007199254740992E15), (-3358.8113678422), (-4432.131872313982), 1074.07843528}, doubleArray0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-0.3058015757857271), 340.7329, 8.0E298, (-9.007199254740992E15), (-3358.8113678422), (-4432.131872313982), 1074.07843528}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, (-0.3058015757857271), 340.7329, 8.0E298, (-9.007199254740992E15), (-3358.8113678422), (-4432.131872313982), 1074.07843528}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, (-0.6116031515714542), 681.4658, 1.6E299, (-1.8014398509481984E16), (-6717.6227356844), (-8864.263744627964), 2148.15687056}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace((-1079.200342163578), doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, (-0.3058015757857271), 340.7329, 8.0E298, (-9.007199254740992E15), (-3358.8113678422), (-4432.131872313982), 1074.07843528}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 660.042330444236, (-735438.1245327763), (-1.7267205474617246E302), 1.9441145035304006E19, 7249660.754876435, 9566316.466230698, (-2318291.6297293925)}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-792.18075393);
      doubleArray0[1] = (-1325.001);
      doubleArray0[2] = (-634.931101768868);
      doubleArray0[3] = 2480.7134967258903;
      doubleArray0[4] = 155.51951;
      doubleArray0[5] = (-3682.1553802654435);
      doubleArray0[6] = (-592.977134779418);
      doubleArray0[7] = (-2486.3116024);
      doubleArray0[8] = 2590.7;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3682.1553802654435);
      doubleArray1[1] = 155.51951;
      doubleArray1[2] = (-3682.1553802654435);
      doubleArray1[3] = 2590.7;
      doubleArray1[4] = (-3682.1553802654435);
      doubleArray1[5] = (-792.18075393);
      doubleArray1[6] = (-592.977134779418);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1176.5411399564182);
      double[][] doubleArray1 = new double[2][3];
      doubleArray1[0] = doubleArray0;
      int[] intArray0 = new int[0];
      double double0 = MathArrays.linearCombination((-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182), (-1176.5411399564182));
      assertEquals(5536996.216039792, double0, 0.01);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 5536996.216039792;
      doubleArray2[1] = (-1176.5411399564182);
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long[][] longArray0 = new long[5][6];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.6184495260681568;
      doubleArray1[1] = Double.NaN;
      doubleArray1[0] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = Double.NaN;
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1111.253604);
      doubleArray0[1] = 712.29495489289;
      doubleArray0[2] = (-353.908061000237);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 3639.692041;
      doubleArray0[5] = 3732.76714423085;
      doubleArray0[6] = (-492.136620332432);
      doubleArray0[7] = 2.0420643E7;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1111.253604), 712.29495489289, (-353.908061000237), 1.0, 3639.692041, 3732.76714423085, (-492.136620332432), 2.0420643E7}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 1.0, 0.0, 1.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long[][] longArray0 = new long[3][5];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1703.0);
      doubleArray1[1] = 1239.94531555625;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[6][9];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.34217729E8;
      doubleArray1[1] = (-0.010714690733195933);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 96.4027418862;
      doubleArray1[5] = 2397.117500352137;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = 4252.7001953125;
      doubleArray0[4] = doubleArray1;
      doubleArray0[5] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1.9841269659586505E-4);
      doubleArray1[1] = 1.34217729E8;
      doubleArray1[2] = 1528.2;
      doubleArray1[3] = (-3078.09317);
      doubleArray1[4] = (-2946.9267709);
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray1);
      assertFalse(boolean1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.9841269659586505E-4), 1.34217729E8, 1528.2, (-3078.09317), (-2946.9267709)}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1566.7904799467);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, (-1566.7904799467)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UnAOeuo*B";
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 514998.0;
      doubleArray0[1] = 1290.67508625771;
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {514998.0, 1290.67508625771}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.167;
      doubleArray1[1] = 964.1326824041;
      doubleArray1[2] = 753.318;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (964.133 > 753.318)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[16];
      stringArray0[7] = "%C7wnLsY|{";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-96.39898477360768);
      doubleArray0[1] = 493.11;
      doubleArray0[2] = (-3725.07584623);
      doubleArray0[3] = 3247.875494437144;
      doubleArray0[4] = (-740.7357429625);
      doubleArray0[5] = 1149.840998437;
      doubleArray0[6] = 0.125;
      doubleArray0[7] = 558.4317;
      doubleArray0[8] = 793.259844227;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-96.39898477360768), 493.11, (-3725.07584623), 3247.875494437144, (-740.7357429625), 1149.840998437, 0.125, 558.4317, 793.259844227}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {(-96.39898477360768), 493.11, (-3725.07584623), 3247.875494437144, (-740.7357429625), 1149.840998437, 0.125, 558.4317, 793.259844227}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1149.840998437;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1149.840998437;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 793.259844227;
      doubleArray2[3] = (-3725.07584623);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2634.0;
      doubleArray0[1] = 1734.0958320018005;
      doubleArray0[2] = (-2743.3316199031183);
      doubleArray0[3] = (-2506.03911);
      doubleArray0[4] = 2441.211561;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {2634.0, 1734.0958320018005, (-2743.3316199031183), (-2506.03911), 2441.211561}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2634.0;
      doubleArray1[1] = 2560.7237;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3294198.0;
      doubleArray1[4] = 5.784024941581159E15;
      doubleArray1[5] = 660.1;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2634.0, 1734.0958320018005, (-2743.3316199031183), (-2506.03911), 2441.211561}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2634.0, 2560.7237, 0.0, 3294198.0, 5.784024941581159E15, 660.1}, doubleArray1, 0.01);
      assertFalse(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {6937956.0, 6557305.86774169, 0.0, 1.0851740463204E13, 3.345494452483293E31, 435732.01}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2634.0, 2560.7237, 0.0, 3294198.0, 5.784024941581159E15, 660.1}, doubleArray1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination((double) (-1.0F), (-1785.26), 0.0, (-1785.26), 0.003, (-1429.3));
      assertEquals(1780.9721, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1157.375F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 1208.23F;
      floatArray0[3] = (-143.432F);
      floatArray0[4] = 1943.3724F;
      floatArray0[5] = 1.0F;
      floatArray0[6] = 1288.0712F;
      floatArray0[7] = 3247.8904F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {1157.375F, Float.NaN, 1208.23F, (-143.432F), 1943.3724F, 1.0F, 1288.0712F, 3247.8904F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1157.375F;
      doubleArray0[1] = (double) 1943.3724F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1157.375, 1943.3724365234375}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-4252.7F);
      floatArray0[4] = 1249.56F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1.4E-45F, Float.NaN, (-4252.7F), 1249.56F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-4252.7F);
      doubleArray0[1] = (double) 1249.56F;
      doubleArray0[2] = (double) 1.4E-45F;
      doubleArray0[3] = (double) 1249.56F;
      doubleArray0[4] = (double) 1249.56F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = 382.25365541;
      doubleArray0[7] = (double) 0.0F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4787.0427017506045, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-4252.7001953125), 1249.56005859375, 1.401298464324817E-45, 1249.56005859375, 1249.56005859375, 0.0, 382.25365541, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-4,252.7 < 1,249.56)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.092571258544922;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {2.092571258544922, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.185142517089844, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[4];
      longArray1[0] = 1232L;
      longArray1[1] = (-4867L);
      longArray1[2] = (-2146701131L);
      longArray1[3] = 31L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-2146701131L);
      longArray2[1] = (-4867L);
      longArray2[2] = (-2146701131L);
      longArray2[3] = 1232L;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 31L;
      doubleArray2[1] = (double) 1232L;
      doubleArray2[2] = (double) 1232L;
      doubleArray2[3] = (double) (-2146701131L);
      doubleArray2[4] = (double) (-2146701131L);
      doubleArray2[5] = (double) (-2146701131L);
      doubleArray2[6] = (double) 1232L;
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      int[] intArray0 = new int[1];
      intArray0[0] = 72;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 289;
      intArray1[1] = (-2933);
      intArray1[2] = (-2933);
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(217.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertEquals(3, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {72}, intArray0);
      assertArrayEquals(new int[] {289, (-2933), (-2933)}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = new Double(289);
      assertEquals(289.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 470;
      intArray1[1] = 470;
      intArray1[2] = 470;
      intArray1[3] = 470;
      intArray1[4] = 470;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(470, int0);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {470, 470, 470, 470, 470}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      FieldElement<String> fieldElement0 = (FieldElement<String>) mock(FieldElement.class, new ViolatedAssumptionAnswer());
      Field<FieldElement<String>> field0 = (Field<FieldElement<String>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(fieldElement0, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      FieldElement<String>[][] fieldElementArray0 = MathArrays.buildArray(field0, 2634, 2634);
      assertEquals(2634, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-2147482218);
      int int0 = (-448);
      intArray0[2] = (-448);
      intArray0[3] = 0;
      intArray0[4] = 2568;
      int int1 = 509;
      boolean boolean2 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 1035717485;
      // Undeclared exception!
      MathArrays.buildArray(field0, 1035717485, 1035717485);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2762.644750512017;
      doubleArray0[1] = (-812.344291);
      doubleArray0[2] = (-812.344291);
      doubleArray0[3] = 2762.644750512017;
      doubleArray0[4] = (-812.344291);
      doubleArray0[5] = 0.9315965175628662;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {2762.644750512017, (-812.344291), (-812.344291), 2762.644750512017, (-812.344291), 0.9315965175628662}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.9315965175628662;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-812.344291);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      doubleArray0[1] = (-357.94711);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1429.3), (-357.94711)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-812.344291), Double.NaN, (-1429.3), (-812.344291), (-395.67213153), 2735.027745512567, 3.1660099222737955E-7, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-791.5943F);
      floatArray0[1] = (-791.5943F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-791.5943F), (-791.5943F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      floatArray0[0] = (float) (-3692);
      intArray0[1] = 470;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 470;
      intArray1[1] = (-3692);
      intArray1[2] = (-3692);
      intArray1[3] = 470;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 274;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 7;
      intArray0[4] = 289;
      intArray0[5] = (-2933);
      intArray0[6] = 891;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {274, (-1), 1, 7, 289, (-2933), 891}, intArray0);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 0.0F;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.scaleInPlace(0.5850973129272461, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(46644.661156256916, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 1.4E-45F;
      floatArray0[2] = 0.5F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 1.4E-45F, 0.5F}, floatArray0, 0.01F);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(0.167, (double) 0.5F, (double) 1.4E-45F, (double) 0.5F, (double) 1.4E-45F, (double) 1.4E-45F, (-2212.352096386), 1110.0);
      assertEquals((-2455710.7434884603), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-703);
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-2209.745F);
      floatArray0[1] = (-3238.6545F);
      floatArray0[2] = (-2209.745F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-3238.6545F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-2209.745F);
      floatArray1[5] = (-2209.745F);
      floatArray1[6] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(3, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-2209.745F), (-3238.6545F), (-2209.745F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-3238.6545F), 0.0F, (-2209.745F), (-2209.745F), 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-2209.745F), (-3238.6545F), (-2209.745F)}, floatArray0, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = 380L;
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      longArray0[2] = longArray2;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 380L;
      doubleArray2[1] = (double) 2039L;
      doubleArray2[2] = (double) 4503599627370495L;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 157;
      intArray0[1] = 1;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {157, 1}, intArray0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-281.278129097);
      doubleArray0[2] = (double) 157;
      doubleArray0[3] = (double) 157;
      doubleArray0[4] = (double) 157;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-281.278129097);
      doubleArray1[1] = (double) 1;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1422.167567401135);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = (-1606.119233);
      double double2 = MathArrays.linearCombination(0.0, (-1422.167567401135), (-358.4913), (-358.4913));
      assertEquals(128516.01217569002, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      MathArrays.scaleInPlace((-1422.167567401135), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-358.4913), (-358.4913), 0.0, (-1606.119));
      assertEquals(128516.01217569002, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 2326.1624F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-2981.5276F);
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2981.5276F);
      floatArray1[2] = Float.POSITIVE_INFINITY;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 2326.1624F, 0.0F, (-2981.5276F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-2981.5276F), Float.POSITIVE_INFINITY, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[3] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[4] = 0.0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "vector must have at last one elemnt";
      stringArray0[2] = "h<(,ICpAhI}mJ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(3, stringArray0.length);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2212.352096386);
      doubleArray1[1] = (-12.19794701031779);
      doubleArray1[2] = (-12.19794701031779);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-12.19794701031779);
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2212.352096386), (-12.19794701031779), (-12.19794701031779), Double.NaN, (-12.19794701031779)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.9841269659586505E-4), (-38.8615217898969), (-1.9841269659586505E-4), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.scaleInPlace(922.2762, doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2040399.684516914), (-11249.876216477252), (-11249.876216477252), Double.NaN, (-11249.876216477252)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (-11,249.876 >= -11,249.876)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-703);
      doubleArray0[1] = 253.15041589;
      doubleArray0[2] = (double) (-703);
      double double0 = MathArrays.linearCombination((double) (-2031), 0.0, (-928.525488787958), 253.15041589);
      assertEquals((-235056.6136511371), double0, 0.01);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-2031);
      MathArrays.scaleInPlace(1827.7908924, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3712243.3024644)}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (253.15 >= -703)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-358.4913), (-358.4913), 0.0, (-1606.119233));
      assertEquals(128516.01217569002, double0, 0.01);
      
      MathArrays.scaleInPlace(1.0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.scaleInPlace(1945.76939361, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1945.76939361)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-894);
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-894.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(799236.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-894.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[23];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-894.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799236.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-894.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {799236.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-57.3), 1.0, (-1695.0), (-2739.1924874));
      assertEquals(4642873.966143, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination((-2739.1924874), (-1266.348419), (-4000.188), (-57.3), (-57.3), 1016.1225799);
      assertEquals(3639759.0243273973, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      MathArrays.scaleInPlace(3.141592653589793, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-4000.188);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-4000.188);
      doubleArray1[3] = 4642873.966143;
      doubleArray1[4] = 1.34217729E8;
      doubleArray1[5] = (-1695.0);
      doubleArray1[6] = 1016.1225799;
      doubleArray1[7] = 1016.1225799;
      doubleArray1[8] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      double double0 = MathArrays.linearCombination(Double.NaN, (-2991.8925401184833), 0.0, (-0.12502530217170715), (-5002.9), Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.scaleInPlace(3088.108, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, Double.NaN, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      double double0 = MathArrays.linearCombination((-813.57352161), (double) 4503599627370495L, 4783689.648067664, (double) 2039L, (-1.0), (-353.83));
      assertEquals((-3.6640093990073533E18), double0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(2039L, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(3.834E-20, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int[] intArray0 = new int[1];
      intArray0[0] = 1860;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1860}, intArray0);
      assertArrayEquals(new int[] {1860}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      stringArray0[0] = "";
      stringArray0[1] = ">}]PvB:[)K7JB2.";
      stringArray0[2] = "UnAOeuo*B";
      stringArray0[3] = ">}]PvB:[)K7JB2.";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1860;
      doubleArray0[1] = 1.34217729E8;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1860.0, 1.34217729E8}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(825343.2226327725, 46644.661156256916, 825343.2226327725, 5.019852098287624);
      assertEquals(3.850199805822673E10, double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 1860, 215.9737510816, 46644.661156256916, 825343.2226327725, 0.0, (-1014.776603093));
      assertEquals(3.8498256668495804E10, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      MathArrays.scaleInPlace((-358.4913), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-666793.8180000001), (-4.8115888152257706E10)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2339.188;
      doubleArray0[5] = Double.NaN;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "uhkSl/|Xu[%!omFV";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Yj";
      stringArray0[5] = "uhkSl/|Xu[%!omFV";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray1 = MathArrays.scale(959.1247, doubleArray0);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {3013.179111396514, 0.0, 0.0, Double.NaN, 2243572.9887436, Double.NaN, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, Double.NaN, 2339.188, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray2);
      assertFalse(boolean1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {3.141592653589793, 0.0, 0.0, Double.NaN, 2339.188, Double.NaN, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1695);
      double[] doubleArray0 = new double[0];
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1695);
      doubleArray1[1] = 1.184154459111628E-8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1695.0), 1.184154459111628E-8, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1.184154459111628E-8;
      doubleArray2[3] = (double) (-1695);
      doubleArray2[4] = 1.184154459111628E-8;
      doubleArray2[5] = 2900.0;
      doubleArray2[6] = (double) (-1695);
      double double1 = MathArrays.distance(doubleArray0, doubleArray2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1.184154459111628E-8, (-1695.0), 1.184154459111628E-8, 2900.0, (-1695.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(double1, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double double2 = MathArrays.linearCombination(0.0, 1.184154459111628E-8, 773.73, (-1695.0), (-289.353), 1.184154459111628E-8);
      assertEquals((-1311472.3500034264), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.scale(317.093362813, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotNull(doubleArray3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 168;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2145502573);
      intArray1[1] = 0;
      intArray1[2] = 168;
      intArray1[3] = 168;
      intArray1[4] = 168;
      intArray1[5] = 168;
      intArray1[6] = 168;
      intArray1[7] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2145502741, int0);
      assertEquals(1, intArray0.length);
      assertEquals(8, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {168}, intArray0);
      assertArrayEquals(new int[] {(-2145502573), 0, 168, 168, 168, 168, 168, 0}, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      long[][] longArray1 = new long[7][7];
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      try { 
        MathArrays.checkRectangular(longArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 6 while others have length 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4850), (-2137));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int[] intArray0 = new int[1];
      intArray0[0] = 1860;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1860}, intArray0);
      assertArrayEquals(new int[] {1860}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      stringArray0[0] = "";
      stringArray0[1] = ">}]PvB:[)K7JB2.";
      stringArray0[2] = "UnAOeuo*B";
      stringArray0[3] = ">}]PvB:[)K7JB2.";
      stringArray0[4] = "";
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1860;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (-754.5684F);
      floatArray0[3] = (float) 1860;
      floatArray0[4] = 660.634F;
      floatArray0[5] = (float) 1860;
      floatArray0[6] = (float) 1860;
      floatArray0[7] = (float) 1860;
      floatArray0[8] = (float) 1860;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {1860.0F, (-1.0F), (-754.5684F), 1860.0F, 660.634F, 1860.0F, 1860.0F, 1860.0F, 1860.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1860.0F;
      doubleArray0[1] = (double) 660.634F;
      doubleArray0[2] = (double) 1860.0F;
      doubleArray0[3] = (double) 660.634F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1860.0, 660.6339721679688, 1860.0, 660.6339721679688}, doubleArray0, 0.01);
      assertFalse(boolean1 == boolean0);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {1860.0, 660.6339721679688, 1860.0, 660.6339721679688}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-611);
      intArray0[0] = (-611);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[3] = "";
      stringArray0[4] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[5] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[6] = "uhkSl/|Xu[%!omFV";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      float float0 = (-549.925F);
      // Undeclared exception!
      try { 
        MathArrays.scale((-611), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = MathArrays.linearCombination(576.5430835964067, 576.5430835964067, (-927.6694274579), (-2990.67), (-927.6694274579), (-2554.464079209), (-424.6588725313), 576.5430835964067);
      assertEquals(5231619.147834186, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(dQ9(9CRPBa(";
      stringArray0[1] = "(dQ9(9CRPBa(";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2990.67);
      doubleArray0[1] = (-927.6694274579);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3131.24218410842, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2990.67), (-927.6694274579)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2990.67), (-927.6694274579)}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray1 = MathArrays.scale((-0.617080461305088), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.scale((-0.617080461305088), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertTrue(boolean0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-4867);
      int int1 = 81;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4867), 81);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int[] intArray0 = new int[1];
      intArray0[0] = 1860;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1860}, intArray0);
      assertArrayEquals(new int[] {1860}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      stringArray0[0] = "";
      stringArray0[1] = ">}]PvB:[)K7JB2.";
      stringArray0[2] = "UnAOeuo*B";
      stringArray0[3] = ">}]PvB:[)K7JB2.";
      stringArray0[4] = "";
      stringArray0[6] = "uhkSl/|Xu[%!omFV";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-549.925F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-549.925F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-549.925F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 1860;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-549.9249877929688), 0.0, 1860.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {302417.4921990968, 0.0, (-2045720.9545898438), 0.0, 3459600.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.scaleInPlace((-4.825233428), doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {2653.516433991125, -0.0, (-8974.93417608)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      doubleArray0[1] = (-357.94711);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1429.3), (-357.94711)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2171024.623557352, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1429.3), (-357.94711)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-3074);
      intArray0[1] = (-3623);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-3074), (-3623)}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1429.3), (-357.94711)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2042898.4899999998, 1023227.608646, 128126.1335573521}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (2,042,898.49 > 1,023,227.609)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int[] intArray0 = new int[1];
      intArray0[0] = 1860;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {1860}, intArray0);
      assertArrayEquals(new int[] {1860}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      stringArray0[0] = "";
      stringArray0[1] = ">}]PvB:[)K7JB2.";
      stringArray0[2] = "UnAOeuo*B";
      stringArray0[3] = ">}]PvB:[)K7JB2.";
      stringArray0[4] = "";
      stringArray0[6] = "uhkSl/|Xu[%!omFV";
      stringArray0[7] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-549.925F), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray0, 0.01);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-755.41);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-755.41);
      doubleArray1[5] = 1144.75964702;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 2952.73198063994;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[][] doubleArray1 = new double[5][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      long[][] longArray0 = new long[0][6];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(927.6694274579, 0.0, (-57.3), (-57.3), 0.0, 1.304E19);
      assertEquals(3283.2899999999995, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-219.98492F);
      floatArray0[1] = 1404.4022F;
      floatArray0[3] = (-616.6978F);
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathArrays.linearCombination(576.5430835964067, 576.5430835964067, (-927.6694274579), (-2990.67), (-927.6694274579), (-2554.464079209), (-424.6588725313), 576.5430835964067);
      assertEquals(5231619.147834186, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(dQ9(9CRPBa(";
      double double1 = MathArrays.linearCombination(0.0, 5231619.147834186, 795.89595750492, (-1585.41899), (-424.6588725313), 795.89595750492);
      assertEquals((-1599812.845058792), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1399);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1399));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3195.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1232L;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3195.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(6390.0, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3195.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double[][] doubleArray3 = new double[9][2];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1362.533;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1362.533}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      int[] intArray0 = new int[4];
      intArray0[0] = 197;
      intArray0[1] = 134217729;
      intArray0[2] = 197;
      intArray0[3] = 134217729;
      int[] intArray1 = MathArrays.copyOf(intArray0, 197);
      assertEquals(4, intArray0.length);
      assertEquals(197, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {197, 134217729, 197, 134217729}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-894);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-894)}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-894)}, intArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[23];
      integerArray0[0] = (Integer) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) (-894);
      doubleArray2[1] = (double) (int)integerArray0[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray2.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-894.0), 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[] doubleArray3 = new double[5];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (double) (-894);
      doubleArray3[1] = 1.0E-5;
      doubleArray3[2] = (-2779.30337);
      doubleArray3[3] = (-2779.30337);
      doubleArray3[4] = 0.0;
      double double3 = MathArrays.distance(doubleArray3, doubleArray1);
      assertEquals(4030.9168243697013, double3, 0.01);
      assertEquals(5, doubleArray3.length);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-894.0), 1.0E-5, (-2779.30337), (-2779.30337), 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = 1144.75964702;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 1144.75964702;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1144.75964702;
      doubleArray1[5] = 1144.75964702;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1144.75964702;
      doubleArray1[8] = 1144.75964702;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = -0.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-2314.0415);
      doubleArray0[4] = (-1497.0);
      doubleArray0[5] = -0.0;
      doubleArray0[6] = -0.0;
      doubleArray0[7] = (-1497.0);
      doubleArray0[8] = -0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (-0 >= -0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination(576.5430835964067, 576.5430835964067, (-927.6694274579), (-2990.67), (-927.6694274579), (-2554.464079209), (-424.6588725313), 576.5430835964067);
      assertEquals(5231619.147834186, double0, 0.01);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(dQ9(9CRPBa(";
      stringArray0[1] = "(dQ9(9CRPBa(";
      stringArray0[2] = "";
      stringArray0[3] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2990.67);
      doubleArray0[1] = (-927.6694274579);
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(3131.24218410842, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2990.67), (-927.6694274579)}, doubleArray0, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0208025E7}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      double[][] doubleArray3 = new double[2][5];
      doubleArray3[0] = doubleArray0;
      doubleArray3[1] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(2, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray4 = new double[8][2];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      doubleArray4[0] = doubleArray0;
      doubleArray4[1] = doubleArray2;
      doubleArray4[2] = doubleArray2;
      doubleArray4[3] = doubleArray2;
      doubleArray4[4] = doubleArray2;
      double[] doubleArray5 = new double[1];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      
      doubleArray5[0] = (-1.0);
      doubleArray4[5] = doubleArray5;
      doubleArray4[6] = doubleArray2;
      doubleArray4[7] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray4);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(8, doubleArray4.length);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray1);
      assertEquals(3196.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = 0.0;
      double double1 = 64.170087016;
      double double2 = 0.0;
      int int0 = 0;
      int int1 = 304;
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, 304, (-562));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1719;
      intArray0[0] = 1719;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3195.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1232L;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3195.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(1, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      
      double double2 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(6390.0, double2, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3195.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double[][] doubleArray3 = new double[9][2];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray1;
      doubleArray3[2] = doubleArray0;
      doubleArray3[3] = doubleArray1;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray2;
      doubleArray3[6] = doubleArray1;
      doubleArray3[7] = doubleArray1;
      doubleArray3[8] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, doubleArray3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray3.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      
      double double3 = MathArrays.distanceInf(doubleArray1, doubleArray2);
      assertEquals(6390.0, double3, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertEquals(1, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-3195.0)}, doubleArray2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 193;
      intArray0[2] = 32760;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 193, 32760, 0}, intArray0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "@(Ae,k!_!$6";
      stringArray0[5] = "@(Ae,k!_!$6";
      stringArray0[6] = "";
      stringArray0[8] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean1);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      long[][] longArray1 = new long[7][7];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      longArray1[3] = longArray0;
      longArray1[4] = longArray0;
      longArray1[5] = longArray0;
      longArray1[6] = longArray0;
      MathArrays.checkRectangular(longArray1);
      assertEquals(7, longArray1.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 193;
      intArray0[2] = 32760;
      intArray0[3] = 0;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 193, 32760, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      Integer integer0 = new Integer(193);
      assertEquals(193, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-160));
      assertEquals((-160), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((Integer[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-894);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-894)}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, (-894)}, intArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[23];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) (-894);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = (-5953L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[2] = 2039L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 2039L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3195.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1232L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$OrderDirection";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "@(Ae,k!_!$6";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertFalse(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "3I<";
      stringArray0[2] = "NEGATIVE_BRIGHTNESS_EXPONENT";
      stringArray0[3] = "8YF<iyfbGR7g.Gcb";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(4, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, (-1031.5592), (-3992.5628955774687), 0.0, 64.170087016, (-3992.5628955774687), (-3992.5628955774687), 0.0);
      assertEquals((-256203.10842605907), double0, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 2900L;
      longArray0[1] = 1194L;
      longArray0[2] = 1066L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 2900L;
      longArray0[6] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {2900L, 1194L, 1066L, 0L, 0L, 2900L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3570.978F);
      floatArray0[1] = (-541.45F);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.9315965175628662, 64.170087016, 1.44888888888888883E18, 1239.94531555625, 0.9315965175628662, 0.9315965175628662);
      assertEquals(1.7965429905392777E21, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.44888888888888883E18;
      doubleArray0[1] = 64.170087016;
      doubleArray0[2] = 1.44888888888888883E18;
      doubleArray0[3] = 1.7965429905392777E21;
      doubleArray0[4] = 64.170087016;
      doubleArray0[5] = 1239.94531555625;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.44888888888888883E18, 64.170087016, 1.44888888888888883E18, 1.7965429905392777E21, 64.170087016, 1239.94531555625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0992790123456787E36, 4117.800067641011, 2.0992790123456787E36, 3.2275667168558114E42, 4117.800067641011, 1537464.3855698886}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertEquals(3.2275709154138363E42, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.44888888888888883E18, 64.170087016, 1.44888888888888883E18, 1.7965429905392777E21, 64.170087016, 1239.94531555625}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0992790123456787E36, 4117.800067641011, 2.0992790123456787E36, 3.2275667168558114E42, 4117.800067641011, 1537464.3855698886}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (-3813L);
      longArray0[1] = (-3512299194304650054L);
      longArray0[2] = (-930L);
      longArray0[3] = 0L;
      longArray0[4] = 1L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,813 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      doubleArray0[1] = (-357.94711);
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1566.19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1566.19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 5676624.156233911);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = (-5953L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[2] = 2039L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 2039L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-2868L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -5,953 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 64.170087016;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (double) 1066L;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 128.340174032, 0.0, 2.608E19, 2132.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 64.170087016, 0.0, 1.304E19, 1066.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.linearCombination(1.304E19, (-0.010714690733195933), (-2544.059), (double) 0L, 0.0, 2200.081910503436);
      assertEquals((-1.39719567160874976E17), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, (-3522.74));
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray0.length);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {-0.0, (-1.733547027106931E-14), -0.0, (-3522.739999999999), (-2.879785920245398E-13), -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 64.170087016, 0.0, 1.304E19, 1066.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-812.344291), (-812.344291), (-812.344291), (-812.344291), (-170.92), 0.0);
      assertEquals(1319806.4942405852, double0, 0.01);
      
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-812.344291);
      doubleArray0[1] = 1319806.4942405852;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[3][6];
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-812.344291);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 10
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3570.978F);
      floatArray0[1] = (-541.45F);
      floatArray0[2] = 0.0F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1566.19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1566.19}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1566.19}, doubleArray0, 0.01);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1176.5411399564182);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, (-1176.5411399564182), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-812.344291), 2762.644750512017, 0.0, (-812.344291), 0.9315965175628662, (-688.66935), (-812.344291), 0.9315965175628662);
      assertEquals((-2245617.030220326), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = (-3484);
      intArray0[3] = 2041;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 134217729, (-3484), 2041}, intArray0);
      assertArrayEquals(new int[] {0, 134217729, (-3484), 2041}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 292);
      assertEquals(5, doubleArray0.length);
      assertEquals(292, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, 3651, 292);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1079.200342163578);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-2205.262232665);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-1292.4);
      doubleArray0[5] = 18.156;
      doubleArray0[6] = 757.6091819457992;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-1079.200342163578), 3.834E-20, (-2205.262232665), Double.NaN, (-1292.4), 18.156, 757.6091819457992}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= -2,205.262)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = (-2147482218);
      intArray0[2] = (-448);
      intArray0[3] = 0;
      intArray0[4] = 2568;
      intArray0[5] = 509;
      intArray0[6] = 2147483619;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {1, (-2147482218), (-448), 0, 2568, 509, 2147483619}, intArray0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0E-5;
      doubleArray0[0] = 1.0E-5;
      double double1 = 316.541;
      doubleArray0[1] = 316.541;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      double double3 = (-2109.4560115668405);
      doubleArray0[3] = (-2109.4560115668405);
      double double4 = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {1.0E-5, 316.541, 0.0, (-2109.4560115668405), (-1.0), 1.0}, doubleArray0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 1564.865;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {3.141592653589793, 1564.865}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-3040.1091F);
      floatArray0[1] = (-1161.0092F);
      floatArray0[2] = (-1133.8914F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1899.2F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {(-3040.1091F), (-1161.0092F), (-1133.8914F), 0.0F, 0.0F, (-1899.2F)}, floatArray0, 0.01F);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2140720793;
      intArray0[1] = (-609);
      intArray0[2] = (-2137);
      intArray0[3] = (-170);
      intArray0[4] = 2147483437;
      intArray0[5] = 272;
      intArray0[6] = 171;
      intArray0[7] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(8, intArray1.length);
      assertEquals(8, intArray0.length);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {2140720793, (-609), (-2137), (-170), 2147483437, 272, 171, 2}, intArray1);
      assertArrayEquals(new int[] {2140720793, (-609), (-2137), (-170), 2147483437, 272, 171, 2}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 702.295175;
      doubleArray0[1] = 702.295175;
      doubleArray0[2] = 702.295175;
      doubleArray0[3] = 702.295175;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.scale(702.295175, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {702.295175, 702.295175, 702.295175, 702.295175, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {493218.51282828057, 493218.51282828057, 493218.51282828057, 493218.51282828057, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-930L);
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-930L);
      longArray2[1] = 0L;
      longArray2[2] = (-930L);
      longArray2[3] = (-930L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (-930L);
      longArray4[1] = 0L;
      longArray4[2] = (-1331L);
      longArray4[3] = (-930L);
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray4[8] = (-930L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = (-1331L);
      longArray5[2] = (-930L);
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      
      longArray7[0] = (-92L);
      longArray7[1] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray6));
      
      longArray8[0] = (-1331L);
      longArray8[1] = 35L;
      longArray8[2] = (-92L);
      longArray8[3] = (-930L);
      longArray8[4] = (-92L);
      longArray8[5] = 0L;
      longArray8[6] = (-1331L);
      longArray8[7] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray1));
      
      longArray9[0] = 0L;
      longArray9[1] = (-930L);
      longArray9[2] = 35L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -930 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-75.6177449163094);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-20.0), 1.0, (-75.6177449163094), 1.0E-5, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-835.8225037051761);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1029.3;
      doubleArray0[4] = 554.12118636;
      doubleArray0[5] = -0.0;
      doubleArray0[6] = 1484.713;
      doubleArray0[7] = (-760.5242500237682);
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.0E-5, (-835.8225037051761), (-1.0), 1029.3, 554.12118636, -0.0, 1484.713, (-760.5242500237682), 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 1.34217729E8, 1.34217729E8, 0.0, 0.0);
      assertEquals(1.801439877791744E16, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("Lh}+@G4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lh}+@G4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-918.97264797);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-918.97264797)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(918.97264797, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-918.97264797)}, doubleArray0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1577.1715;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 1577.1715, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1618L;
      longArray0[5] = 2900L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {1066L, 0L, 0L, 0L, 1618L, 2900L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1260.027), (-1260.027), 1562.189149504323, 1562.189149504323);
      assertEquals(4028102.9795580404, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1562.189149504323;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 1562.189149504323;
      doubleArray0[3] = 4028102.9795580404;
      doubleArray0[4] = 1562.189149504323;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {1562.189149504323, (-20.0), 1562.189149504323, 4028102.9795580404, 1562.189149504323}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2440434.93882904, (-62487.56598017292), 4881269.87765808, 1.258525504793723E10, (-1.538028143658345E8), 1.258525504793723E10, 1.6225618494794242E13, 1.258531753550321E10, 2440434.93882904}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-611);
      int int0 = (-1695);
      intArray0[1] = (-1695);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-611), (-1695)}, intArray0);
      assertFalse(int1 == int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-611);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-611);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-611.0), 0.0, (-611.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 134217729;
      intArray0[3] = 2;
      intArray0[4] = (-831);
      intArray0[5] = 2;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {104, 1, 134217729, 2, (-831), 2}, intArray0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 134217729;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-831);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 104;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, 1.34217728E8F, 2.0F, (-831.0F), 2.0F, 104.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {104, 1, 134217729, 2, (-831), 2}, intArray0);
      
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 134217729;
      longArray1[1] = (long) (-831);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 104;
      longArray1[4] = (long) 1;
      longArray1[5] = (long) 104;
      longArray1[6] = (-1246L);
      longArray1[7] = (long) 2;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 104;
      longArray2[1] = (long) 104;
      longArray2[2] = (long) 104;
      longArray2[3] = (long) 134217729;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1;
      longArray3[1] = (-1246L);
      longArray3[2] = (long) (-831);
      longArray3[3] = (-1246L);
      longArray3[4] = (long) 1;
      longArray3[5] = (long) 134217729;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -831 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 308.0;
      double double0 = (-433.4);
      doubleArray0[1] = (-433.4);
      doubleArray0[2] = (-328.0);
      doubleArray0[3] = (-3.141592653589793);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -433.4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-119);
      intArray0[1] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-119), 0}, intArray0);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-119);
      intArray1[2] = 0;
      intArray1[3] = (-1982);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-119);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-3073);
      intArray0[0] = (-3073);
      int int1 = new Integer((-3073));
      assertEquals((-3073), int1);
      assertTrue(int1 == int0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-3073);
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {(-3073)}, intArray1);
      assertArrayEquals(new int[] {(-3073)}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-3073));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-611);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-541.45F);
      floatArray0[1] = (-541.45F);
      floatArray0[2] = (float) (-611);
      floatArray0[3] = (-791.5943F);
      float[] floatArray1 = new float[4];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-611);
      floatArray1[1] = (float) (-611);
      floatArray1[2] = (float) (-611);
      floatArray1[3] = (-791.5943F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      assertEquals(4, floatArray1.length);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-541.45F), (-541.45F), (-611.0F), (-791.5943F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-611.0F), (-611.0F), (-611.0F), (-791.5943F)}, floatArray1, 0.01F);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3073);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      int[] intArray3 = MathArrays.copyOf(intArray0, 0);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray3.length);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotNull(intArray3);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3073);
      doubleArray0[1] = 1757.291409;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {(-3073.0), 1757.291409}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-6146.0), 3514.582818}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float float0 = 3517.9158F;
      floatArray0[1] = 3517.9158F;
      float float1 = 3035.2795F;
      floatArray0[2] = 3035.2795F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 3517.9158F, 3035.2795F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[2];
      int int0 = 2232;
      intArray0[0] = 2232;
      int int1 = 296;
      intArray0[1] = 296;
      int int2 = (-1351);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2147483647L;
      longArray2[1] = (-721L);
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = (-5953L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 2147483647L;
      longArray3[1] = 2147483647L;
      longArray3[2] = 2039L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 2039L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (-2868L);
      longArray5[1] = (-721L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -721 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3570.978F);
      floatArray0[1] = (-541.45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-870.0F);
      floatArray0[4] = (-791.5943F);
      floatArray0[5] = (-4257.0F);
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {(-3570.978F), (-541.45F), 0.0F, (-870.0F), (-791.5943F), (-4257.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2382.566716009;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.normalizeArray(doubleArray1, 1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (5,676,624.156 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = (-2838);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-916);
      intArray0[5] = 134217729;
      intArray0[6] = 0;
      intArray0[7] = 3;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 134217729;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134217729;
      intArray1[5] = 0;
      intArray1[6] = 134217729;
      intArray1[7] = (-1207);
      intArray1[8] = (-916);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(134220567, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2838);
      doubleArray0[2] = (double) (-916);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 134217729;
      doubleArray0[5] = (double) (-2838);
      doubleArray0[6] = (double) (-916);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 1023L;
      longArray1[2] = 981L;
      longArray1[3] = 10000L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 0L;
      longArray1[6] = (-1042L);
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-9223372036854775808L);
      longArray2[1] = 1L;
      longArray2[2] = 981L;
      longArray2[3] = 0L;
      longArray2[4] = 10000L;
      longArray2[5] = 1L;
      longArray2[6] = 1L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 1L;
      longArray3[1] = (-1042L);
      longArray3[2] = 981L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = 1023L;
      longArray3[6] = 1023L;
      longArray3[7] = (-9223372036854775808L);
      longArray3[8] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (-1042L);
      longArray4[1] = (-103L);
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 0L;
      longArray5[1] = 10000L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = (-1037L);
      longArray6[2] = 0L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 20.0;
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3228.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-682.4981910856594);
      doubleArray0[4] = 0.0;
      double double1 = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-554.7965);
      doubleArray0[7] = 1.7976931348623157E308;
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MathArrays.linearCombination((-812.344291), (-812.344291), (-812.344291), (-812.344291), (-170.92), 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-812.344291);
      doubleArray0[1] = 1319806.4942405852;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-64.2501);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2368.968631383223;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2985.5837224262;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2368.968631383223;
      doubleArray2[1] = 3.834E-20;
      doubleArray1[5] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.304E19;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2339.188;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3.142 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1144.75964702;
      doubleArray0[2] = (-755.41);
      doubleArray0[3] = (-2214.7);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1239.94531555625;
      double double0 = 1528.2;
      doubleArray0[1] = 1528.2;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 832.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1362.533;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 4290.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0E-5;
      int int0 = (-561);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-561));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-245.778304387);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2223.31585;
      doubleArray0[3] = 1382.0;
      doubleArray0[4] = 4513.774431614503;
      doubleArray0[5] = (-1112.21);
      doubleArray0[6] = 1869.904125;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-547.52);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 4513.774431614503;
      doubleArray2[1] = (-245.778304387);
      doubleArray2[2] = 2223.31585;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1112.21);
      doubleArray2[6] = 2223.31585;
      doubleArray2[7] = 279.5587561336064;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {(-245.778304387), Double.NaN, 2223.31585, 1382.0, 4513.774431614503, (-1112.21), 1869.904125, 0.0, (-547.52)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4867), 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1176.5411399564182);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1566.7904799467);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1719;
      intArray0[0] = 1719;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 168;
      intArray0[2] = 168;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, 1719, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      MathArrays.safeNorm(doubleArray1);
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 1232L;
      longArray1[1] = (-4164L);
      longArray1[2] = 3780L;
      longArray1[3] = (-3339L);
      longArray1[4] = 1228L;
      longArray1[5] = 3634L;
      longArray1[6] = (-1021L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-4164L);
      longArray2[1] = 3634L;
      longArray2[2] = (-3339L);
      longArray2[3] = 1232L;
      longArray2[4] = (-1021L);
      longArray2[5] = (-3339L);
      longArray2[6] = (-4164L);
      longArray2[7] = (-3339L);
      longArray2[8] = 3780L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,164 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1552.462182, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      double double0 = (-357.94711);
      doubleArray0[1] = (-357.94711);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,429.3 < -357.947)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3523.751);
      doubleArray0[1] = (-1566.7904799467);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-43.49F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2709.9065F;
      floatArray0[3] = 824.0F;
      floatArray0[4] = (-117.0F);
      floatArray0[5] = 243.649F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-43.49F);
      doubleArray0[1] = (double) 243.649F;
      doubleArray0[2] = (double) (-117.0F);
      doubleArray0[3] = (-2103.8);
      doubleArray0[4] = (double) (-43.49F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-86.9800033569336), 487.2980041503906, (-234.0), (-4207.6), (-86.9800033569336)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1902);
      intArray0[1] = (-894);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1902);
      doubleArray0[2] = (double) (-1902);
      doubleArray0[3] = (double) (-1902);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0E-5, (double) (-1902), (-1.0), (-1.0), 0.0, (-1902.0), (-2779.30337), (double) 0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1902);
      integerArray0[1] = (Integer) (-894);
      integerArray0[2] = (Integer) (-1902);
      integerArray0[3] = (Integer) (-894);
      Integer integer0 = new Integer(4014);
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1902);
      integerArray0[6] = (Integer) (-1902);
      Integer integer1 = new Integer((-894));
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) (-894);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }
}
