/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:53:21 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(11, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3240);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(11, doubleArray0.length);
      assertEquals(3240, doubleArray1.length);
      
      // Undeclared exception!
      MathArrays.convolve(doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      double double0 = 1874.3348;
      Double double1 = new Double(1874.3348);
      assertEquals(1874.3348, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = 2147483632;
      int int1 = 28;
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483632, 28);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 2146490891;
      intArray0[2] = 21;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2146490891;
      intArray1[1] = 2146490891;
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[3] = 2146490891;
      intArray1[4] = 21;
      intArray1[5] = Integer.MAX_VALUE;
      intArray1[6] = 21;
      intArray1[7] = 2146490891;
      intArray1[8] = 2146490891;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals((-2146490914), int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      assertArrayEquals(new int[] {Integer.MAX_VALUE, 2146490891, 21}, intArray0);
      assertArrayEquals(new int[] {2146490891, 2146490891, Integer.MAX_VALUE, 2146490891, 21, Integer.MAX_VALUE, 21, 2146490891, 2146490891}, intArray1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 292;
      int int0 = 3067;
      intArray0[1] = 3067;
      int int1 = (-1588);
      intArray0[2] = (-1588);
      intArray0[3] = 1;
      int int2 = 1912;
      intArray0[4] = 1912;
      int int3 = 24;
      intArray0[5] = 24;
      int int4 = 32768;
      int[] intArray1 = MathArrays.copyOf(intArray0, 32768);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(6, intArray0.length);
      assertEquals(32768, intArray1.length);
      assertArrayEquals(new int[] {292, 3067, (-1588), 1, 1912, 24}, intArray0);
      
      // Undeclared exception!
      MathArrays.distance(intArray1, intArray1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1041.71053);
      doubleArray0[1] = (-1041.71053);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1041.71053), (-1041.71053)}, doubleArray0, 0.01);
      
      float[] floatArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int int0 = 2200;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2200);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2200, doubleArray1.length);
      assertArrayEquals(new double[] {(-1041.71053), (-1041.71053)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(object0).when(field0).getZero();
      int int1 = 185;
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2200, doubleArray1.length);
      assertArrayEquals(new double[] {(-1041.71053), (-1041.71053)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 2200);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1041.71053);
      doubleArray0[1] = (-389.50779389);
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-1041.71053), (-389.50779389)}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 2200);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2200, doubleArray1.length);
      assertArrayEquals(new double[] {(-1041.71053), (-389.50779389)}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2200, doubleArray1.length);
      assertArrayEquals(new double[] {(-1041.71053), (-389.50779389)}, doubleArray0, 0.01);
      
      Object[] objectArray0 = MathArrays.buildArray(field0, 2200);
      assertNotNull(objectArray0);
      assertEquals(2200, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Integer integer0 = new Integer(117);
      assertEquals(117, (int)integer0);
      assertNotNull(integer0);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 729.2;
      doubleArray0[1] = 0.6816387176513672;
      doubleArray0[2] = (-2108.6880025);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 3986651.989804853;
      doubleArray0[6] = 1838.150280813316;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {729.2, 0.6816387176513672, (-2108.6880025), 1.304E19, 3986651.989804853, 0.0, 1838.150280813316}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.700416E38, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      assertArrayEquals(new double[] {729.2, 0.6816387176513672, (-2108.6880025), 1.304E19, 3986651.989804853, 0.0, 1838.150280813316}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-2,108.688 <= 13,040,000,000,000,000,000)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 148.08165756;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 4.9E-324;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(148.08165756, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {148.08165756, 4.9E-324, 4.9E-324}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.304E19, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1.304E19}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3852.75644978952;
      doubleArray0[1] = (-3.940510424527919E-20);
      doubleArray0[2] = 4.3466666666666665E18;
      doubleArray0[3] = (-1946.505151933);
      doubleArray0[4] = 3134.224;
      doubleArray0[5] = (-3055.575594222868);
      doubleArray0[6] = 738.9806006871567;
      doubleArray0[7] = 581.4143325249335;
      doubleArray0[8] = 1.304E19;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3745366896198556E19, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {3852.75644978952, (-3.940510424527919E-20), 4.3466666666666665E18, (-1946.505151933), 3134.224, (-3055.575594222868), 738.9806006871567, 581.4143325249335, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1946.505151933);
      doubleArray1[1] = (-1312.0211);
      doubleArray1[2] = 1.3745366896198556E19;
      doubleArray1[3] = (-1946.505151933);
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      double double0 = 882.359664392;
      Double double1 = new Double(882.359664392);
      assertEquals(882.359664392, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(double1).when(field0).getZero();
      int int0 = 24;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 24, 24);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.1666666505023083;
      doubleArray0[1] = 2674.73;
      doubleArray0[2] = 3409.52;
      doubleArray0[3] = 2.2860509143963117E-8;
      doubleArray0[4] = 0.75;
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 159.9003378;
      doubleArray0[7] = 994.0729551;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.6080000000001157E18;
      doubleArray0[1] = (-1061.527134560207);
      doubleArray0[2] = 5501.348502310117;
      doubleArray0[3] = 49.1879243;
      doubleArray0[4] = 0.7214844226837158;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = (-3307.02509269);
      doubleArray0[7] = 1710.843;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2.6080000000001157E18, (-1061.527134560207), 5501.348502310117, 49.1879243, 0.7214844226837158, Double.POSITIVE_INFINITY, (-3307.02509269), 1710.843}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.linearCombination((-1.0), Double.NEGATIVE_INFINITY, 4994.5291, (-1091.8665174965), 4994.5291, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1232L;
      longArray0[1] = 1232L;
      longArray0[2] = 1232L;
      longArray0[3] = 1232L;
      longArray0[4] = 1232L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1232L, 1232L, 1232L, 1232L, 1232L}, longArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-806.98409172717);
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 2786.0;
      doubleArray0[3] = 3272.363562;
      doubleArray0[4] = 4.9E-324;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {4.9E-324, 3.834E-20, 2786.0, (-806.98409172717), 3272.363562}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(4372.800316296875, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {4.9E-324, 3.834E-20, 2786.0, (-806.98409172717), 3272.363562}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-1);
      intArray0[2] = 185;
      intArray0[3] = 0;
      intArray0[4] = (-3206);
      intArray0[5] = (-1128);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long[][] longArray0 = new long[3][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 483.977337109;
      doubleArray2[1] = 483.977337109;
      doubleArray2[2] = 483.977337109;
      doubleArray2[3] = 483.977337109;
      doubleArray2[4] = 483.977337109;
      doubleArray2[5] = 2.718281828459045;
      doubleArray2[6] = 483.977337109;
      doubleArray2[7] = 483.977337109;
      doubleArray2[8] = 483.977337109;
      MathArrays.scaleInPlace(483.977337109, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {234234.06283511865, 234234.06283511865, 234234.06283511865, 234234.06283511865, 234234.06283511865, 1315.5868008493921, 234234.06283511865, 234234.06283511865, 234234.06283511865}, doubleArray2, 0.01);
      
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(Double.NaN, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1381.56052737258, 0.0, 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3288.3694;
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-569.5);
      doubleArray0[4] = (-3337.53331);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {20.0, 3288.3694, 20.0, (-569.5), (-3337.53331)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 20.0;
      doubleArray1[1] = (-569.5);
      doubleArray1[2] = 20.0;
      doubleArray1[3] = (-237.52802809527998);
      doubleArray1[4] = (-3337.53331);
      doubleArray1[5] = (-569.5);
      doubleArray1[6] = 20.0;
      doubleArray1[7] = (-260.586002);
      double[] doubleArray2 = MathArrays.scale((-237.52802809527998), doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray2.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-4750.5605619056), 135272.21200026193, (-4750.5605619056), 56419.564130832114, 792757.7058266128, 135272.21200026193, (-4750.5605619056), 61896.479204292686}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {20.0, (-569.5), 20.0, (-237.52802809527998), (-3337.53331), (-569.5), 20.0, (-260.586002)}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(994609.266991518, double0, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray2.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertArrayEquals(new double[] {(-4750.5605619056), 135272.21200026193, (-4750.5605619056), 56419.564130832114, 792757.7058266128, 135272.21200026193, (-4750.5605619056), 61896.479204292686}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {20.0, 3288.3694, 20.0, (-569.5), (-3337.53331)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {20.0, (-569.5), 20.0, (-237.52802809527998), (-3337.53331), (-569.5), 20.0, (-260.586002)}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[9];
      longArray1[0] = 2709L;
      longArray1[1] = (-793L);
      longArray1[2] = 3529L;
      longArray1[3] = 2985L;
      longArray1[4] = (-1386L);
      longArray1[5] = (-1757L);
      longArray1[6] = (-4814L);
      longArray1[7] = (-1L);
      longArray1[8] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = (-1L);
      longArray2[2] = 2709L;
      longArray2[3] = 0L;
      longArray2[4] = 2709L;
      longArray2[5] = (-3739L);
      longArray2[6] = (-793L);
      longArray2[7] = (-793L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (-3739L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 3529L;
      longArray4[1] = 0L;
      longArray4[2] = 2709L;
      longArray4[3] = (-4814L);
      longArray4[4] = 2985L;
      longArray4[5] = (-3591L);
      longArray4[6] = (-3739L);
      longArray4[7] = (-1614L);
      longArray4[8] = 3529L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (-3591L);
      longArray5[1] = 2985L;
      longArray5[2] = 2709L;
      longArray5[3] = (-3591L);
      longArray5[4] = (-1L);
      longArray5[5] = (-1757L);
      longArray5[6] = (-3591L);
      longArray5[7] = 2985L;
      longArray5[8] = (-1614L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (-4814L);
      longArray6[1] = (-1L);
      longArray6[2] = 2985L;
      longArray6[3] = 3529L;
      longArray6[4] = (-3591L);
      longArray6[5] = (-4814L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      
      longArray7[0] = (-1757L);
      longArray7[1] = (-1614L);
      longArray7[2] = (-793L);
      longArray7[3] = (-3739L);
      longArray7[4] = (-1L);
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray3));
      
      longArray8[0] = (-1757L);
      longArray8[1] = 3529L;
      longArray8[2] = 0L;
      longArray8[3] = (-1L);
      longArray8[4] = 0L;
      longArray8[5] = (-1386L);
      longArray8[6] = 0L;
      longArray8[7] = (-4814L);
      longArray0[7] = longArray8;
      long[] longArray9 = new long[2];
      assertFalse(longArray9.equals((Object)longArray3));
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray1));
      
      longArray9[0] = (-793L);
      longArray9[1] = (-1757L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -793 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-894);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-894)}, intArray0);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-894)}, intArray0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-894);
      doubleArray0[2] = (double) (-894);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-894);
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-894.0), (-894.0), 0.0, 0.0, (-894.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = MathArrays.scale((-0.5), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 269.60187F;
      floatArray0[4] = (-1258.2186F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 269.60187F, (-1258.2186F)}, floatArray0, 0.01F);
      
      Integer integer0 = new Integer(181);
      assertEquals(181, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(181);
      assertEquals(181, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[][] longArray1 = new long[9][9];
      int int0 = 78;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[16];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.26E18;
      doubleArray1[1] = 3.26E18;
      doubleArray1[2] = (-407.9717600525);
      try { 
        MathArrays.convolve(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1666666505023083;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.1666666505023083, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1020;
      intArray0[1] = 139;
      intArray0[2] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1020, 139, 0}, intArray0);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1020;
      int int1 = MathArrays.distance1(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1159, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertEquals(3, intArray0.length);
      assertEquals(5, intArray1.length);
      assertArrayEquals(new int[] {1020, 139, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1020}, intArray1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "W~";
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 346.904712524121;
      doubleArray0[1] = 3.26E18;
      doubleArray0[2] = (-787.92012385);
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 331.76380653783;
      doubleArray0[5] = 1566.19;
      doubleArray0[6] = 3338.34644270554;
      doubleArray0[7] = (-0.12502530217170715);
      doubleArray0[8] = (-1.0);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {346.904712524121, 3.26E18, (-787.92012385), 3.834E-20, 331.76380653783, 1566.19, 3338.34644270554, (-0.12502530217170715), (-1.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3564);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(3564, doubleArray1.length);
      assertArrayEquals(new double[] {346.904712524121, 3.26E18, (-787.92012385), 3.834E-20, 331.76380653783, 1566.19, 3338.34644270554, (-0.12502530217170715), (-1.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3.26E18, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(9, doubleArray0.length);
      assertEquals(3564, doubleArray1.length);
      assertArrayEquals(new double[] {346.904712524121, 3.26E18, (-787.92012385), 3.834E-20, 331.76380653783, 1566.19, 3338.34644270554, (-0.12502530217170715), (-1.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      long[][] longArray1 = new long[9][9];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      double double0 = 2908.76070183;
      doubleArray0[1] = 2908.76070183;
      doubleArray0[2] = 3.834E-20;
      double double1 = 3073.0;
      doubleArray0[3] = 3073.0;
      doubleArray0[4] = 0.8775825500488281;
      doubleArray0[5] = 1902.0;
      doubleArray0[6] = (-3794.00388602);
      doubleArray0[7] = (-2138.7609193765807);
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.8775825500488281;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 3.834E-20;
      doubleArray1[3] = 3.834E-20;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-3073);
      doubleArray0[1] = (-1187.9);
      doubleArray0[2] = (-1187.9);
      doubleArray0[3] = 1213.7294385;
      doubleArray0[4] = (double) (-3073);
      doubleArray0[5] = (-1187.9);
      doubleArray0[6] = (-353.83);
      double[] doubleArray1 = MathArrays.scale((-1187.9), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-3073.0), (-1187.9), (-1187.9), 1213.7294385, (-3073.0), (-1187.9), (-353.83)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3650416.7, 1411106.4100000001, 1411106.4100000001, (-1441789.19999415), 3650416.7, 1411106.4100000001, 420314.657}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-3073.0), (-1187.9), (-1187.9), 1213.7294385, (-3073.0), (-1187.9), (-353.83)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals((-2.9362882882747578E10), double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertArrayEquals(new double[] {(-3073.0), (-1187.9), (-1187.9), 1213.7294385, (-3073.0), (-1187.9), (-353.83)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3650416.7, 1411106.4100000001, 1411106.4100000001, (-1441789.19999415), 3650416.7, 1411106.4100000001, 420314.657}, doubleArray1, 0.01);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1213.7294385;
      doubleArray3[1] = (-2.9362882882747578E10);
      doubleArray3[2] = (-353.83);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(7, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
      assertArrayEquals(new double[] {(-3073.0), (-1187.9), (-1187.9), 1213.7294385, (-3073.0), (-1187.9), (-353.83)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1213.7294385, (-2.9362882882747578E10), (-353.83)}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = (-353.83);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale((-353.83), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = (-353.83);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1946.0;
      doubleArray1[1] = (-1429.3);
      doubleArray1[2] = (-4111.42647);
      doubleArray1[3] = 0.1666666505023083;
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4767.980928652551, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {1946.0, (-1429.3), (-4111.42647), 0.1666666505023083}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {1946.0, (-1429.3), (-4111.42647), 0.1666666505023083}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2145927500;
      intArray0[1] = 2;
      intArray0[2] = (-3587);
      intArray0[3] = 309;
      intArray0[4] = 166;
      intArray0[5] = (-22);
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {2145927500, 2, (-3587), 309, 166, (-22)}, intArray0);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1946.0, (-1429.3), (-4111.42647), 0.1666666505023083}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3073);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "S8esk3>zv";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 0;
      floatArray1[1] = 266.7F;
      floatArray1[2] = (float) 0;
      floatArray1[3] = (float) (-3073);
      floatArray1[4] = 313.5569F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0, floatArray0.length);
      assertEquals(5, floatArray1.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 266.7F, 0.0F, (-3073.0F), 313.5569F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, (-1615.7797524098348));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, -\u221E at index 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[][] longArray0 = new long[3][9];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 4;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {4}, intArray0);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(3, longArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1491.786963886486;
      doubleArray0[1] = 718.9469090591;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      double double1 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(2742361.003667294, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {1491.786963886486, 718.9469090591, 4.0, 4.0, 4.0}, doubleArray0, 0.01);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 4;
      intArray1[1] = 2080374784;
      intArray1[2] = 4;
      intArray1[3] = 4;
      intArray1[4] = 4;
      intArray1[5] = 4;
      intArray1[6] = 774;
      intArray1[7] = 4;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-2147019798), (-2147019798));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 2.7349068883781795;
      double double1 = 1946.0;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (-968.7204F);
      floatArray0[2] = (-1276.541F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-968.7204F), (-1276.541F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-353.83);
      doubleArray0[1] = 4.503599627370496E15;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-968.7204F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) (-968.7204F);
      doubleArray0[6] = (-2157.963614444594);
      doubleArray0[7] = (double) (-968.7204F);
      double[] doubleArray1 = MathArrays.scale(4.503599627370496E15, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.59350865615250253E18), 2.028240960365167E31, 0.0, (-4.3627288232303002E18), 0.0, (-4.3627288232303002E18), (-9.718604129891762E18), (-4.3627288232303002E18)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-353.83), 4.503599627370496E15, 0.0, (-968.7203979492188), 0.0, (-968.7203979492188), (-2157.963614444594), (-968.7203979492188)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {1.0F, (-968.7204F), (-1276.541F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.59350865615250253E18), 2.028240960365167E31, 0.0, (-4.3627288232303002E18), 0.0, (-4.3627288232303002E18), (-9.718604129891762E18), (-4.3627288232303002E18)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-353.83), 4.503599627370496E15, 0.0, (-968.7203979492188), 0.0, (-968.7203979492188), (-2157.963614444594), (-968.7203979492188)}, doubleArray0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(15, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.59350865615250253E18), 2.028240960365167E31, 0.0, (-4.3627288232303002E18), 0.0, (-4.3627288232303002E18), (-9.718604129891762E18), (-4.3627288232303002E18)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-353.83), 4.503599627370496E15, 0.0, (-968.7203979492188), 0.0, (-968.7203979492188), (-2157.963614444594), (-968.7203979492188)}, doubleArray0, 0.01);
      
      MathArrays.scaleInPlace(0.0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertEquals(15, doubleArray3.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {(-1.59350865615250253E18), 2.028240960365167E31, 0.0, (-4.3627288232303002E18), 0.0, (-4.3627288232303002E18), (-9.718604129891762E18), (-4.3627288232303002E18)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-353.83), 4.503599627370496E15, 0.0, (-968.7203979492188), 0.0, (-968.7203979492188), (-2157.963614444594), (-968.7203979492188)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 844467.6063287209;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W~";
      stringArray0[1] = "W~";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0.16666665050231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2841.17;
      doubleArray0[1] = (-353.83);
      doubleArray0[2] = (-353.83);
      doubleArray0[3] = (-353.83);
      doubleArray0[4] = 2841.17;
      doubleArray0[5] = 2841.17;
      double[] doubleArray1 = MathArrays.scale(2841.17, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {2841.17, (-353.83), (-353.83), (-353.83), 2841.17, 2841.17}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8072246.968900001, (-1005291.1810999999), (-1005291.1810999999), (-1005291.1810999999), 8072246.968900001, 8072246.968900001}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      long[][] longArray0 = new long[1][1];
      long[] longArray1 = new long[1];
      longArray1[0] = 1618L;
      longArray0[0] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {2841.17, (-353.83), (-353.83), (-353.83), 2841.17, 2841.17}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8072246.968900001, (-1005291.1810999999), (-1005291.1810999999), (-1005291.1810999999), 8072246.968900001, 8072246.968900001}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 109.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2.85040095144011776E17;
      doubleArray2[3] = 2841.17;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double double0 = 844510.7277169935;
      doubleArray0[3] = 844510.7277169935;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 844510.7277169935, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 844510.7277169935, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, 0.0, Double.NaN, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (-797.205775259093);
      doubleArray2[3] = (-186.286185939);
      double double2 = (-1429.3);
      doubleArray2[4] = (-1429.3);
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1110);
      intArray0[1] = (-867);
      intArray0[2] = (-867);
      Integer integer0 = new Integer(485);
      assertEquals(485, (int)integer0);
      assertNotNull(integer0);
      
      double double0 = MathArrays.linearCombination(Double.NaN, 1.0, 4538.2775214, (-936.42));
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[1][6];
      long[] longArray1 = new long[4];
      longArray1[0] = (long) (-1110);
      longArray1[1] = (long) (-1110);
      longArray1[2] = (long) (-1110);
      longArray1[3] = (long) 485;
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,110 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 887.8F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 193;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 193, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      String[] stringArray0 = new String[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0.0F, (-1002.779538851), (double) 193, (double) 887.8F, (double) 0.0F, (-1002.779538851));
      assertEquals(171345.39764404297, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      long[][] longArray0 = new long[2][2];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 52;
      longArray1[1] = (long) 52;
      longArray1[2] = (long) 193;
      longArray1[3] = (long) 193;
      longArray1[4] = (long) 193;
      longArray1[5] = (long) 52;
      longArray1[6] = (long) 52;
      longArray1[7] = (long) 193;
      longArray1[8] = (long) 52;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 193;
      longArray2[1] = (long) 52;
      longArray2[2] = (long) 52;
      longArray0[1] = longArray2;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-22);
      int[] intArray0 = new int[1];
      intArray0[0] = (-22);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {(-22)}, intArray0);
      assertArrayEquals(new int[] {(-22)}, intArray1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-22);
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {(-22.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 114);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(114, doubleArray1.length);
      assertArrayEquals(new double[] {(-22.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(22.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(114, doubleArray1.length);
      assertArrayEquals(new double[] {(-22.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 697.5968218414;
      doubleArray0[1] = (double) (-1110);
      doubleArray0[2] = (double) (-1110);
      doubleArray0[3] = (double) (-1110);
      doubleArray0[4] = (double) (-1110);
      doubleArray0[5] = (double) (-1110);
      doubleArray0[6] = (double) (-1110);
      doubleArray0[7] = (double) (-867);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(15, doubleArray1.length);
      assertArrayEquals(new double[] {697.5968218414, (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-867.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertArrayEquals(new double[] {697.5968218414, (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-1110.0), (-867.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1395.1936436828, (-2220.0), (-2220.0), (-2220.0), (-2220.0), (-2220.0), (-2220.0), (-1734.0)}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[][] doubleArray3 = new double[5][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 880.125F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1467.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 1452.497F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-129.423F);
      floatArray0[7] = 1152.603F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {880.125F, 1.0F, 1467.0F, 0.0F, 1452.497F, 0.0F, (-129.423F), 1152.603F}, floatArray0, 0.01F);
      
      boolean boolean2 = MathArrays.equals(doubleArray2, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray4 = MathArrays.scale(0.0F, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray4.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[] doubleArray5 = MathArrays.scale(880.125F, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray0);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotNull(doubleArray5);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray5.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray5, 0.01);
      
      double[] doubleArray6 = MathArrays.ebeAdd(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray6);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray5);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray6);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray5);
      assertNotSame(doubleArray2, doubleArray6);
      assertNotSame(doubleArray2, doubleArray5);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray0);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotNull(doubleArray6);
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray5));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray5));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray0));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray6.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray6, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray4, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[8];
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      intArray0[0] = 134217729;
      intArray0[1] = 0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-22);
      floatArray0[1] = (float) (-22);
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) (-22);
      floatArray1[1] = (float) (-22);
      floatArray1[2] = (float) (-22);
      floatArray1[3] = (float) (-22);
      floatArray1[4] = (float) (-22);
      floatArray1[5] = (float) (-22);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2, floatArray0.length);
      assertEquals(6, floatArray1.length);
      assertArrayEquals(new float[] {(-22.0F), (-22.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-22.0F), (-22.0F), (-22.0F), (-22.0F), (-22.0F), (-22.0F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3.940510424527919E-20);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2241009.0;
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-3.940510424527919E-20), Double.NaN, 2241009.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 140;
      intArray0[1] = 169;
      intArray0[2] = 2;
      intArray0[3] = (-946);
      intArray0[4] = 142;
      int[] intArray1 = new int[3];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2;
      intArray1[1] = 660;
      intArray1[2] = 169;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      long[][] longArray1 = new long[3][9];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-360.9436573213776);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-360.9436573213776)}, doubleArray0, 0.01);
      
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-360.9436573213776)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-360.9436573213776)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 11, (-977.6239179), 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1902);
      intArray0[1] = (-894);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1902), (-894)}, intArray0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1902);
      doubleArray0[2] = (double) (-1902);
      doubleArray0[3] = (double) (-1902);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1902.0), (-1902.0), (-1902.0)}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-3182.25), (double) (-1902), (-1.0), (-1.0), 0.0, (-1902.0), (-2779.30337), (double) 0);
      assertEquals(6052640.5, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.0852812E7, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, (-1902.0), (-1902.0), (-1902.0)}, doubleArray0, 0.01);
      
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1902), (-894)}, intArray0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, (-1902.0), (-1902.0), (-1902.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {(-1902), (-894)}, intArray0);
      assertArrayEquals(new int[] {(-1902), (-894)}, intArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      long[][] longArray0 = new long[7][2];
      long[] longArray1 = new long[3];
      longArray1[0] = (long) (-894);
      longArray1[1] = (long) (-1902);
      longArray1[2] = (long) (-894);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[7];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) (-1902);
      longArray3[1] = (long) (-1902);
      longArray3[2] = (long) (-1902);
      longArray3[3] = (long) (-1902);
      longArray3[4] = (long) 0;
      longArray3[5] = (long) (-1902);
      longArray3[6] = (long) (-894);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[2];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = (long) (-894);
      longArray4[1] = (long) (-1902);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[9];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = (long) (-894);
      longArray5[1] = (long) 0;
      longArray5[2] = (long) (-1902);
      longArray5[3] = (long) 0;
      longArray5[4] = (long) (-894);
      longArray5[5] = (long) (-894);
      longArray5[6] = (long) (-1902);
      longArray5[7] = (long) (-894);
      longArray5[8] = (long) (-894);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[7];
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      
      longArray6[0] = (long) (-1902);
      longArray6[1] = (long) (-894);
      longArray6[2] = (long) (-894);
      longArray6[3] = (long) (-1902);
      longArray6[4] = (long) (-1902);
      longArray6[5] = (long) (-894);
      longArray6[6] = (long) (-1902);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[9];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) (-1902);
      longArray7[1] = (long) 0;
      longArray7[2] = (long) 0;
      longArray7[3] = 1L;
      longArray7[4] = 2147483647L;
      longArray7[5] = (long) (-1902);
      longArray7[6] = (long) (-894);
      longArray7[7] = (long) (-1902);
      longArray7[8] = (long) (-894);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 0 while others have length 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1666666505023083;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.1666666505023083, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.1666666505023083, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      double double2 = MathArrays.linearCombination(0.1666666505023083, 0.1666666505023083, 0.0, (double) (-721L), 0.1666666505023083, 0.1666666505023083, (-2779.30337), 1308.5629524);
      assertEquals((-3636893.3679069253), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = null;
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      double[] doubleArray0 = null;
      double[][] doubleArray1 = new double[4][3];
      doubleArray1[0] = null;
      doubleArray1[1] = null;
      doubleArray1[2] = null;
      doubleArray1[3] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      
      double double0 = MathArrays.linearCombination(2.831224394462511E11, 2.831224394462511E11, 3.834E-20, 3.834E-20, 1.34217729E8, (-2715.983419), (-353.83), 0.9921976327896118);
      assertEquals(8.015831571763159E22, double0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.1666666505023083;
      doubleArray0[0] = 0.1666666505023083;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.1666666505023083, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      double[] doubleArray1 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      doubleArray0[1] = (-360.9436573213776);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {(-1429.3), (-360.9436573213776)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertArrayEquals(new double[] {(-1429.3), (-360.9436573213776)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(1862.0309, (-1429.3), (-1429.3), (-360.9436573213776), (-1429.3), Double.NEGATIVE_INFINITY, 3.834E-20, (-1429.3));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      assertArrayEquals(new double[] {(-1429.3), (-360.9436573213776)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1066L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1066.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1066.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      double[] doubleArray3 = MathArrays.ebeAdd(doubleArray2, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "DECREASING";
      stringArray0[3] = "-hpF!_2>Hvio#`";
      stringArray0[4] = "b";
      stringArray0[5] = "9}NfSO]a|d`T";
      stringArray0[6] = "W~";
      stringArray0[7] = "S8esk3>zv";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double[][] doubleArray3 = new double[5][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      MathArrays.scaleInPlace(96.32357205365, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray4 = MathArrays.copyOf(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray4.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.1666666505023083;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.1666666505023083, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertTrue(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, true, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.1666666505023083}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {-0.0, (-1497.0)}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, (-1497.0)}, doubleArray0, 0.01);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("PJ]soE2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PJ]soE2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3800;
      intArray0[1] = 150;
      intArray0[2] = 145;
      intArray0[3] = 0;
      intArray0[4] = 807;
      intArray0[5] = (-165);
      intArray0[6] = (-2009);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray0.length);
      assertEquals(0, intArray1.length);
      assertArrayEquals(new int[] {3800, 150, 145, 0, 807, (-165), (-2009)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[1][0];
      long[] longArray1 = new long[7];
      longArray1[0] = (long) 3800;
      longArray1[1] = (long) 0;
      longArray1[2] = (long) (-2009);
      longArray1[3] = (long) (-165);
      longArray1[4] = (long) (-165);
      longArray1[5] = (long) 807;
      longArray1[6] = (long) (-165);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,009 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-518.52319013619);
      double double0 = (-495.824125);
      doubleArray0[1] = (-495.824125);
      doubleArray0[2] = 1497.0;
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-518.52319013619), (-495.824125), 1497.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-518.52319013619);
      doubleArray2[1] = (-518.52319013619);
      doubleArray2[2] = 1497.0;
      doubleArray2[3] = (-495.824125);
      doubleArray2[4] = (-518.52319013619);
      doubleArray2[5] = (-518.52319013619);
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      double[][] doubleArray1 = new double[1][8];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = 0.0F;
      float float2 = 0.0F;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int int0 = 193;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 193;
      doubleArray0[7] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(15, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-1.0), 0.0, 0.0, 193.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 15
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.linearCombination((-1.0), Double.NEGATIVE_INFINITY, 4994.5291, (-1091.8665174965), 4994.5291, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1232L;
      longArray0[1] = 1232L;
      longArray0[2] = 1232L;
      longArray0[3] = 1232L;
      longArray0[4] = 1232L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {1232L, 1232L, 1232L, 1232L, 1232L}, longArray0);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3391));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double0 = MathArrays.linearCombination(1074.80061, 1074.80061, 2559.64143535, 0.8109631538391113, 1074.80061, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotNull(doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotNull(doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray4.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray4, 0.01);
      
      double double1 = MathArrays.distance(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray4);
      assertEquals(0.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3073);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotNull(intArray2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray2.length);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0}, intArray2);
      
      int[] intArray3 = MathArrays.copyOf(intArray0, 0);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotNull(intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray3.length);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      assertArrayEquals(new int[] {}, intArray3);
      
      double[] doubleArray0 = new double[2];
      boolean boolean0 = false;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) (-3073);
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0), 0.0, 0.0, (-3073.0)}, doubleArray1, 0.01);
      
      double[][] doubleArray2 = new double[2][7];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".F%bdMm";
      stringArray0[1] = "";
      stringArray0[2] = "org.apache.commons.math3.exception.NullArgumentException";
      stringArray0[3] = "l'OUPx&m9>e)QP]0xo";
      stringArray0[4] = "7;RYm}Nq:;`^^$?<";
      stringArray0[5] = "";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathArrays.linearCombination(313.14623, 1898.807328, 1898.807328, 0.0, 576.5430835964067, 0.0, 20.0, (-2554.464079209));
      assertEquals(543515.0746753935, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "(dQ9(9CRPBa(";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 1L;
      longArray0[1] = 1023L;
      long long0 = 981L;
      longArray0[2] = 981L;
      double[][] doubleArray0 = new double[9][6];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      double[] doubleArray1 = new double[0];
      doubleArray0[5] = doubleArray1;
      doubleArray0[6] = null;
      doubleArray0[7] = null;
      doubleArray0[8] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 1066L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 0L;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1066.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 1066.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = (Double) 0.0;
      doubleArray1[1] = (Double) 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      MathArrays.checkPositive(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-611);
      intArray0[1] = (-611);
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-611), (-611)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-611);
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.linearCombination((double) (-611), 0.0, 1.34217729E8, (double) (-611), 0.6299605249474366, 0.6299605249474366);
      assertEquals((-8.200703241860315E10), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(611.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-611.0), 0.0}, doubleArray0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) (-611);
      integerArray0[1] = (Integer) (-611);
      integerArray0[2] = (Integer) (-611);
      integerArray0[3] = (Integer) (-611);
      Integer integer0 = new Integer((int) integerArray0[2]);
      assertEquals((-611), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(7, integerArray0.length);
      
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-611);
      integerArray0[6] = (Integer) (-611);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(7, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(844510.7277169935, 1.375, 844510.7277169935, (-3464.6818731466706), 3091.68789284585, 11.73, 1.34217729E8, 1832.949669151083);
      assertEquals(2.4308957842251035E11, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1362.533;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1362.533}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 4290.0F;
      floatArray0[2] = (-1.0F);
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = 4290.0F;
      floatArray1[4] = (-1.0F);
      floatArray1[5] = (-1.0F);
      floatArray1[6] = (-1.0F);
      floatArray1[7] = 4290.0F;
      floatArray1[8] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {(-1.0F), 4290.0F, (-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 0.0F, 4290.0F, (-1.0F), (-1.0F), (-1.0F), 4290.0F, (-1.0F)}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {1362.533}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.scale(1362.533, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertArrayEquals(new double[] {1362.533}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1856496.1760889997}, doubleArray2, 0.01);
      
      boolean boolean2 = MathArrays.equals((float[]) null, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(9, floatArray1.length);
      assertArrayEquals(new float[] {1.0F, (-1.0F), 0.0F, 4290.0F, (-1.0F), (-1.0F), (-1.0F), 4290.0F, (-1.0F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      long[][] longArray0 = new long[1][5];
      long[] longArray1 = new long[5];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray1[2] = 277L;
      longArray1[3] = (-1632L);
      longArray1[4] = (-174L);
      longArray0[0] = longArray1;
      MathArrays.checkRectangular(longArray0);
      assertEquals(1, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "/sTzt$?Q";
      stringArray0[3] = "-hpF!_2>Hvio#`";
      stringArray0[4] = "b";
      stringArray0[5] = "9}NfSO]a|d`T";
      stringArray0[6] = "W~";
      stringArray0[7] = "S8esk3>zv";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-614.7994F);
      floatArray0[1] = 1.0F;
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {(-614.7994F), 1.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.linearCombination(-0.0, 1605.404750004333, (double) (-614.7994F), -0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1362.533;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {1362.533}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((-812.344291), (double) (-1.0F), 0.6409968137741089, (double) (-1.0F), 1385.556233008, (-2651.74));
      assertEquals((-3673323.182022447), double0, 0.01);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-3673323.182022447);
      doubleArray2[1] = (-2651.74);
      doubleArray2[3] = 1385.556233008;
      doubleArray2[4] = (-812.344291);
      doubleArray2[5] = (-812.344291);
      doubleArray2[6] = 1362.533;
      double double1 = MathArrays.safeNorm(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertEquals(3673324.8328152644, double1, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7, doubleArray2.length);
      assertArrayEquals(new double[] {(-3673323.182022447), (-2651.74), 0.0, 1385.556233008, (-812.344291), (-812.344291), 1362.533}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 193;
      intArray0[1] = 32760;
      intArray0[3] = 193;
      intArray0[4] = 0;
      intArray0[5] = 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      double double1 = MathArrays.linearCombination((-1294.4), 0.0, (double) 193, (double) 0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {-0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = 844510.7277169935;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-132.547);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, 844510.7277169935, Double.NEGATIVE_INFINITY, (-132.547)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-115.081184F);
      float float0 = 1211.9789F;
      floatArray0[1] = 1211.9789F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-2167.6F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {(-115.081184F), 1211.9789F, 0.0F, Float.NaN, (-2167.6F)}, floatArray0, 0.01F);
      
      double double0 = 2.608E18;
      double[] doubleArray1 = MathArrays.scale(2.608E18, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-115.081184F);
      doubleArray2[1] = (double) 1211.9789F;
      doubleArray2[2] = (double) (-115.081184F);
      doubleArray2[3] = (double) 0.0F;
      doubleArray2[4] = 2852.7504026;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-812.344291), (-812.344291), (-812.344291), (-812.344291), (-170.92), 0.0);
      assertEquals(1319806.4942405852, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-561);
      intArray0[1] = 2595;
      intArray0[2] = (-2416);
      intArray0[3] = 122;
      intArray0[4] = 2;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {(-561), 2595, (-2416), 122, 2}, intArray0);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      float[] floatArray0 = new float[1];
      floatArray0[0] = 486.4503F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {486.4503F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1515;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 2147483647L;
      longArray2[1] = (-721L);
      longArray2[2] = 2039L;
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {2, 0}, intArray1);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 380L;
      doubleArray2[3] = 1757.291409;
      doubleArray2[4] = (double) 2039L;
      doubleArray2[5] = (double) (-721L);
      doubleArray2[6] = (double) 2039L;
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      int int0 = 193;
      intArray0[1] = 193;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {52, 193, 0, 0}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      assertEquals(2.0, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3195.0, double1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 1232L;
      longArray0[1] = (-4164L);
      longArray0[2] = 3780L;
      longArray0[3] = (-3339L);
      double double2 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(3196.0, double2, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3195.0}, doubleArray1, 0.01);
      
      MathArrays.scaleInPlace(4.116164446561962E-8, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.315114540676547E-4}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[3];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 2145659946;
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {1, (-1), 2145659946}, intArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      doubleArray0[1] = 0.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.linearCombination(2.608E18, (-1009.3), 0.0, 0.0, (-1009.3), 1.304E19);
      assertEquals((-1.57935264E22), double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      long long0 = 2147483647L;
      longArray2[0] = 2147483647L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((String[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotNull(doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray3 = new double[5][8];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray0;
      doubleArray3[2] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 1.34217729E8, 1.34217729E8, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1328.2955F;
      floatArray0[1] = 3021.701F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 3950.45F;
      floatArray0[4] = (-2706.7864F);
      floatArray0[5] = Float.NEGATIVE_INFINITY;
      floatArray0[6] = 1455.9348F;
      floatArray0[7] = (-194.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean1 == boolean0);
      
      MathArrays.equals(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.scale((-354.0), doubleArray0);
      float[] floatArray1 = new float[5];
      floatArray1[0] = 1455.9348F;
      floatArray1[1] = 3021.701F;
      floatArray1[2] = 3950.45F;
      floatArray1[3] = (-194.0F);
      floatArray1[4] = 1471.5558F;
      MathArrays.equals(floatArray0, floatArray1);
      boolean boolean2 = MathArrays.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      int int0 = (-4867);
      int int1 = 81;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4867), 81);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 2147483647L;
      longArray2[1] = (-721L);
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      MathArrays.equals((float[]) null, (float[]) null);
      MathArrays.checkNonNegative(longArray0);
      MathArrays.distance(doubleArray1, doubleArray0);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1041.71053);
      doubleArray0[0] = (-1041.71053);
      double double1 = 2095.113738555437;
      doubleArray0[1] = 2095.113738555437;
      MathArrays.distance1(doubleArray0, doubleArray0);
      float[] floatArray0 = null;
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      int int0 = 2200;
      MathArrays.copyOf(doubleArray0, 2200);
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = 336;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 336);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      
      long[][] longArray0 = new long[0][2];
      MathArrays.checkNonNegative(longArray0);
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      long long0 = (-721L);
      int int0 = 311;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 184;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 184;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.distance(doubleArray1, doubleArray1);
      double[][] doubleArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray1, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "/sTzt$?Q";
      stringArray0[3] = "-hpF!_2>Hvio#`";
      stringArray0[4] = "b";
      stringArray0[5] = "9}NfSO]a|d`T";
      stringArray0[6] = "W~";
      stringArray0[7] = "S8esk3>zv";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      double double0 = MathArrays.linearCombination(0.04168701738764507, (-1497.0), -0.0, -0.0);
      assertEquals((-62.405465029304665), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2.074484F;
      MathArrays.equals(floatArray0, floatArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 52;
      intArray0[1] = 193;
      intArray0[2] = 32760;
      intArray0[3] = 0;
      MathArrays.distance(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      MathArrays.distance(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[7][4];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      MathArrays.convolve(doubleArray0, doubleArray0);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 3184);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = -0.0;
      doubleArray2[1] = -0.0;
      doubleArray2[2] = 1616.538;
      doubleArray2[3] = -0.0;
      doubleArray2[5] = (-1497.0);
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      long[][] longArray0 = new long[0][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 1023L;
      longArray1[2] = 981L;
      longArray1[3] = 10000L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 0L;
      longArray1[6] = (-1042L);
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-9223372036854775808L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = 1.34217729E8;
      doubleArray0[3] = (double) 981L;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-9223372036854775808L);
      doubleArray0[7] = (double) 1023L;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not increasing (134,217,729 > 981)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3073);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      MathArrays.copyOf(intArray1);
      int[] intArray2 = MathArrays.copyOf(intArray0, 0);
      double[] doubleArray0 = new double[2];
      int[] intArray3 = MathArrays.copyOf(intArray2);
      assertEquals(0, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1176.5411399564182);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1566.7904799467);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1176.5411399564182);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-1176.5411399564182);
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = 0.0;
      MathArrays.scaleInPlace(Double.NaN, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1176.5411399564182);
      doubleArray0[3] = 0.0;
      Integer integer0 = new Integer((-1387));
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = integer0;
      integerArray0[1] = integer0;
      integerArray0[2] = integer0;
      integerArray0[3] = integer0;
      integerArray0[4] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not decreasing (-1,176.541 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = 1577.1715;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean0);
      
      MathArrays.scaleInPlace(Double.POSITIVE_INFINITY, doubleArray0);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.NaN}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 192;
      intArray0[1] = (-124);
      intArray0[2] = (-1691);
      intArray0[3] = (-679);
      int[] intArray1 = MathArrays.copyOf(intArray0, 48);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-611);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-611);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-611);
      MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      long[] longArray0 = new long[5];
      longArray0[0] = (-838L);
      longArray0[1] = 0L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (-1695);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -838 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.scale((-1.0), doubleArray0);
      double[][] doubleArray2 = new double[2][2];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray0;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      Integer integer0 = new Integer(779);
      double double1 = MathArrays.linearCombination((-1.0), 867.0, 1175.561345464, 22.0);
      assertEquals(24995.349600208, double1, 0.01);
      
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "/sTzt$?Q";
      stringArray0[3] = "-hpF!_2>Hvio#`";
      stringArray0[4] = "b";
      stringArray0[5] = "9}NfSO]a|d`T";
      stringArray0[6] = "W~";
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2800);
      intArray0[1] = (-1827);
      intArray0[2] = 833;
      intArray0[3] = (-4462);
      intArray0[4] = (-843);
      intArray0[5] = 21;
      intArray0[6] = 573;
      intArray0[7] = 8;
      intArray0[8] = 2131403289;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-2800));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1913);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Double>) null, (-22), (-22));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1902);
      intArray0[1] = (-894);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1902);
      doubleArray0[2] = (double) (-1902);
      doubleArray0[3] = (double) (-1902);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0E-5, (double) (-1902), (-1.0), (-1.0), 0.0, (-1902.0), (-2779.30337), (double) 0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.copyOf(intArray0);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      MathArrays.copyOf(doubleArray0, 0);
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1, (-1902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      doubleArray0[1] = (-1497.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "/sTzt$?Q";
      stringArray0[3] = "-hpF!_2>Hvio#`";
      stringArray0[4] = "b";
      stringArray0[5] = "9}NfSO]a|d`T";
      stringArray0[6] = "W~";
      stringArray0[7] = "S8esk3>zv";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.OrderDirection.values();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1497.0);
      doubleArray1[1] = (-1497.0);
      doubleArray1[2] = (-1497.0);
      doubleArray1[3] = -0.0;
      doubleArray1[4] = (-1497.0);
      doubleArray1[5] = -0.0;
      doubleArray1[6] = -0.0;
      doubleArray1[7] = (-1497.0);
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1497.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-1110);
      intArray0[1] = (-1110);
      intArray0[2] = (-867);
      intArray0[3] = (-1110);
      intArray0[4] = (-1110);
      intArray0[5] = (-867);
      intArray0[6] = (-867);
      MathArrays.copyOf(intArray0);
      MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1566.19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      double double0 = MathArrays.linearCombination(539.204095390327, 1566.19, 1.304E19, 1566.19, 1.304E19, (-3669.52), 1566.19, 539.204095390327);
      assertEquals((-2.74274232E22), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1577.1715;
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 1023L;
      longArray1[2] = 981L;
      longArray1[3] = 10000L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 0L;
      longArray1[6] = (-1042L);
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-9223372036854775808L);
      longArray2[1] = 1L;
      longArray2[2] = 981L;
      longArray2[3] = 0L;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1L;
      doubleArray0[1] = (double) 1023L;
      doubleArray0[2] = (double) 981L;
      doubleArray0[3] = (double) (-1042L);
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MathArrays.equals((double[]) null, (double[]) null);
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 1.0E-5;
      doubleArray0[0] = 1.0E-5;
      double double1 = 316.541;
      doubleArray0[1] = 316.541;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      double double3 = (-2109.4560115668405);
      doubleArray0[3] = (-2109.4560115668405);
      double double4 = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 1.0;
      MathArrays.equals(doubleArray0, doubleArray0);
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1902);
      intArray0[1] = (-894);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1902);
      doubleArray0[2] = (double) (-1902);
      doubleArray0[3] = (double) (-1902);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      double double1 = MathArrays.linearCombination(1.0E-5, (double) (-1902), (-1.0), (-1.0), 0.0, (-1902.0), (-2779.30337), (double) 0);
      assertEquals(0.98098, double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(1.0852812E7, double2, 0.01);
      
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(double3, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1902);
      integerArray0[1] = (Integer) (-894);
      integerArray0[2] = (Integer) (-1902);
      integerArray0[3] = (Integer) (-894);
      Integer integer0 = new Integer(4006);
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1902);
      double double4 = new Double((-1902.0));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)integerArray0[2];
      floatArray0[1] = (float) (-1902);
      floatArray0[2] = (float) 4006;
      floatArray0[3] = (float) (-1902);
      MathArrays.equals(floatArray0, floatArray0);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-3570.978F);
      floatArray0[1] = (-541.45F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-870.0F);
      floatArray0[4] = (-791.5943F);
      floatArray0[5] = (-4257.0F);
      floatArray0[6] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) (-791.5943F);
      doubleArray0[2] = (double) (-541.45F);
      doubleArray0[3] = (double) (-4257.0F);
      doubleArray0[4] = (double) (-870.0F);
      doubleArray0[5] = (double) 0.0F;
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray1 = MathArrays.scale((-4257.0F), doubleArray0);
      assertArrayEquals(new double[] {-0.0, 3369816.9321899414, 2304952.701965332, 1.8122049E7, 3703590.0, -0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 702.295175;
      doubleArray0[1] = 702.295175;
      doubleArray0[2] = 702.295175;
      doubleArray0[3] = 702.295175;
      doubleArray0[4] = 0.0;
      MathArrays.scale(702.295175, doubleArray0);
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[2];
      longArray1[0] = (-930L);
      longArray1[1] = 0L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-930L);
      longArray2[1] = 0L;
      longArray2[2] = (-930L);
      longArray2[3] = (-930L);
      longArray2[4] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      longArray3[0] = 0L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      longArray4[0] = (-930L);
      longArray4[1] = 0L;
      longArray4[2] = (-1331L);
      longArray4[3] = (-930L);
      longArray4[4] = 0L;
      longArray4[5] = 0L;
      longArray4[6] = 0L;
      longArray4[7] = 0L;
      longArray4[8] = (-930L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = 0L;
      longArray5[1] = (-1331L);
      longArray5[2] = (-930L);
      longArray5[3] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[0];
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      longArray7[0] = (-92L);
      longArray7[1] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[8];
      longArray8[0] = (-1331L);
      longArray8[1] = 35L;
      longArray8[2] = (-92L);
      longArray8[3] = (-930L);
      longArray8[4] = (-92L);
      longArray8[5] = 0L;
      longArray8[6] = (-1331L);
      longArray8[7] = 0L;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[3];
      longArray9[0] = 0L;
      longArray9[1] = (-930L);
      longArray9[2] = 35L;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -930 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-20.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-75.6177449163094);
      doubleArray0[3] = 1.0E-5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = (-835.8225037051761);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 1029.3;
      doubleArray0[4] = 554.12118636;
      doubleArray0[5] = -0.0;
      doubleArray0[6] = 1484.713;
      doubleArray0[7] = (-760.5242500237682);
      doubleArray0[8] = 0.0;
      MathArrays.convolve(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, 563);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 1.34217729E8, 1.34217729E8, 0.0, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray2 = new double[4][3];
      doubleArray2[0] = doubleArray0;
      doubleArray2[1] = doubleArray1;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray2);
      MathArrays.distanceInf(doubleArray1, doubleArray0);
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      try { 
        Integer.valueOf("Lh}+@G4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Lh}+@G4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-918.97264797);
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      MathArrays.safeNorm(doubleArray0);
      try { 
        MathArrays.normalizeArray(doubleArray1, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%C7wnLsY|{";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      MathArrays.linearCombination(0.0, 0.0, 0.0, 0.0, 64.170087016, 0.0, 64.170087016, 0.0);
      long[] longArray0 = new long[6];
      longArray0[0] = 1066L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 1618L;
      longArray0[5] = 2900L;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1066L, 0L, 0L, 0L, 1618L, 2900L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MathArrays.linearCombination((-1260.027), (-1260.027), 1562.189149504323, 1562.189149504323);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1562.189149504323;
      doubleArray0[1] = (-20.0);
      doubleArray0[2] = 1562.189149504323;
      doubleArray0[3] = 4028102.9795580404;
      doubleArray0[4] = 1562.189149504323;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      double[][] doubleArray2 = new double[1][2];
      doubleArray2[0] = doubleArray1;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-611);
      int int0 = (-1695);
      intArray0[1] = (-1695);
      MathArrays.distance1(intArray0, intArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-611);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-611);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      try { 
        MathArrays.checkPositive(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 134217729;
      intArray0[3] = 2;
      intArray0[4] = (-831);
      intArray0[5] = 2;
      MathArrays.distanceInf(intArray0, intArray0);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 134217729;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) (-831);
      floatArray0[4] = (float) 2;
      floatArray0[5] = (float) 104;
      MathArrays.equals(floatArray0, floatArray0);
      MathArrays.distance(intArray0, intArray0);
      long[][] longArray0 = new long[3][1];
      long[] longArray1 = new long[8];
      longArray1[0] = (long) 134217729;
      longArray1[1] = (long) (-831);
      longArray1[2] = (long) 0;
      longArray1[3] = (long) 104;
      longArray1[4] = (long) 1;
      longArray1[5] = (long) 104;
      longArray1[6] = (-1246L);
      longArray1[7] = (long) 2;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = (long) 104;
      longArray2[1] = (long) 104;
      longArray2[2] = (long) 104;
      longArray2[3] = (long) 134217729;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      longArray3[0] = (long) 1;
      longArray3[1] = (-1246L);
      longArray3[2] = (long) (-831);
      longArray3[3] = (-1246L);
      longArray3[4] = (long) 1;
      longArray3[5] = (long) 134217729;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -831 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 308.0;
      double double0 = (-433.4);
      doubleArray0[1] = (-433.4);
      doubleArray0[2] = (-328.0);
      doubleArray0[3] = (-3.141592653589793);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -433.4 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-119);
      intArray0[1] = 0;
      MathArrays.distance1(intArray0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = (-119);
      intArray1[2] = 0;
      intArray1[3] = (-1982);
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = (-119);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = -0.0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-277));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-139.3333F);
      float[] floatArray1 = new float[1];
      MathArrays.equalsIncludingNaN(floatArray1, floatArray0);
      double[] doubleArray1 = MathArrays.scale((-139.3333F), doubleArray0);
      MathArrays.equals(floatArray0, floatArray0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      double[] doubleArray3 = new double[24];
      doubleArray3[0] = (double) (-139.3333F);
      doubleArray3[1] = (double) (-139.3333F);
      doubleArray3[2] = 1669.4727;
      doubleArray3[3] = (double) (-139.3333F);
      doubleArray3[4] = (double) (-139.3333F);
      try { 
        MathArrays.ebeAdd(doubleArray2, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 24
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3073);
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, int0);
      
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertEquals(1, intArray2.length);
      
      int[] intArray3 = MathArrays.copyOf(intArray0, 0);
      assertEquals(0, intArray3.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-3073);
      doubleArray0[1] = 1757.291409;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-6146.0), 3514.582818}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      float float0 = 3517.9158F;
      floatArray0[1] = 3517.9158F;
      float float1 = 3035.2795F;
      floatArray0[2] = 3035.2795F;
      MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      int[] intArray0 = new int[2];
      int int0 = 2232;
      intArray0[0] = 2232;
      int int1 = 296;
      intArray0[1] = 296;
      int int2 = (-1351);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-353.83), doubleArray0);
      long[][] longArray0 = new long[5][9];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      longArray2[0] = 2147483647L;
      longArray2[1] = (-721L);
      longArray2[2] = 2039L;
      longArray2[3] = 380L;
      longArray2[4] = 4503599627370495L;
      longArray2[5] = (-5953L);
      longArray2[6] = (-1L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[3];
      longArray3[0] = 2147483647L;
      longArray3[1] = 2147483647L;
      longArray3[2] = 2039L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      longArray4[0] = 2039L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[2];
      longArray5[0] = (-2868L);
      longArray5[1] = (-721L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -721 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2382.566716009;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      MathArrays.normalizeArray(doubleArray1, 1.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (5,676,624.156 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 134217729;
      intArray0[1] = (-2838);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-916);
      intArray0[5] = 134217729;
      intArray0[6] = 0;
      intArray0[7] = 3;
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 134217729;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 134217729;
      intArray1[5] = 0;
      intArray1[6] = 134217729;
      intArray1[7] = (-1207);
      intArray1[8] = (-916);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(134220567, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-2838);
      doubleArray0[2] = (double) (-916);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 134217729;
      doubleArray0[5] = (double) (-2838);
      doubleArray0[6] = (double) (-916);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long[][] longArray0 = new long[6][9];
      long[] longArray1 = new long[8];
      longArray1[0] = 1L;
      longArray1[1] = 1023L;
      longArray1[2] = 981L;
      longArray1[3] = 10000L;
      longArray1[4] = (-9223372036854775808L);
      longArray1[5] = 0L;
      longArray1[6] = (-1042L);
      longArray1[7] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      longArray2[0] = (-9223372036854775808L);
      longArray2[1] = 1L;
      longArray2[2] = 981L;
      longArray2[3] = 0L;
      longArray2[4] = 10000L;
      longArray2[5] = 1L;
      longArray2[6] = 1L;
      longArray2[7] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 1L;
      longArray3[1] = (-1042L);
      longArray3[2] = 981L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = 1023L;
      longArray3[6] = 1023L;
      longArray3[7] = (-9223372036854775808L);
      longArray3[8] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (-1042L);
      longArray4[1] = (-103L);
      longArray4[2] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      longArray5[0] = 0L;
      longArray5[1] = 10000L;
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      longArray6[0] = 0L;
      longArray6[1] = (-1037L);
      longArray6[2] = 0L;
      longArray0[5] = longArray6;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 20.0;
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 3228.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-682.4981910856594);
      doubleArray0[4] = 0.0;
      double double1 = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-554.7965);
      doubleArray0[7] = 1.7976931348623157E308;
      doubleArray0[8] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-812.344291), (-812.344291), (-812.344291), (-812.344291), (-170.92), 0.0);
      assertEquals(1319806.4942405852, double0, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-812.344291);
      doubleArray0[1] = 1319806.4942405852;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {659903.2471202926, 1.741889182239624E12, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-64.2501);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2368.968631383223;
      doubleArray0[5] = 1.304E19;
      doubleArray0[6] = 2985.5837224262;
      double[][] doubleArray1 = new double[9][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2368.968631383223;
      doubleArray2[1] = 3.834E-20;
      doubleArray1[5] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1.304E19;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 1.304E19;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray1[6] = doubleArray3;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 7
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2339.188;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.34217729E8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = false;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (3.142 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1144.75964702;
      doubleArray0[2] = (-755.41);
      doubleArray0[3] = (-2214.7);
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {Double.NaN, 1.0, 1.0, 1.0, Double.NaN}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1239.94531555625;
      double double0 = 1528.2;
      doubleArray0[1] = 1528.2;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 832.0;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1362.533;
      double[][] doubleArray1 = new double[3][8];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 4290.0F;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = 1.0F;
      floatArray0[4] = (-1.0F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0E-5;
      int int0 = (-561);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-561));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-245.778304387);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 2223.31585;
      doubleArray0[3] = 1382.0;
      doubleArray0[4] = 4513.774431614503;
      doubleArray0[5] = (-1112.21);
      doubleArray0[6] = 1869.904125;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-547.52);
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 4513.774431614503;
      doubleArray2[1] = (-245.778304387);
      doubleArray2[2] = 2223.31585;
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = (-1112.21);
      doubleArray2[6] = 2223.31585;
      doubleArray2[7] = 279.5587561336064;
      boolean boolean0 = MathArrays.equals(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-245.778304387), Double.NaN, 2223.31585, 1382.0, 4513.774431614503, (-1112.21), 1869.904125, 0.0, (-547.52)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-4867), 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 1719;
      intArray0[0] = 1719;
      int int1 = 0;
      intArray0[1] = 0;
      int int2 = 168;
      intArray0[2] = 168;
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      MathArrays.distance(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, 1719, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 3195.0);
      MathArrays.linearCombination((-1.0), (-1.0), 0.0, 0.0, (-1.0), (-1.0));
      MathArrays.safeNorm(doubleArray1);
      long[][] longArray0 = new long[2][7];
      long[] longArray1 = new long[7];
      longArray1[0] = 1232L;
      longArray1[1] = (-4164L);
      longArray1[2] = 3780L;
      longArray1[3] = (-3339L);
      longArray1[4] = 1228L;
      longArray1[5] = 3634L;
      longArray1[6] = (-1021L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[9];
      longArray2[0] = (-4164L);
      longArray2[1] = 3634L;
      longArray2[2] = (-3339L);
      longArray2[3] = 1232L;
      longArray2[4] = (-1021L);
      longArray2[5] = (-3339L);
      longArray2[6] = (-4164L);
      longArray2[7] = (-3339L);
      longArray2[8] = 3780L;
      longArray0[1] = longArray2;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,164 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(1552.462182, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1429.3);
      double double0 = (-357.94711);
      doubleArray0[1] = (-357.94711);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,429.3 < -357.947)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      MathArrays.equals((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-353.83), doubleArray0);
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 193;
      intArray0[1] = 32760;
      intArray0[3] = 193;
      intArray0[4] = 0;
      intArray0[5] = 193;
      intArray0[6] = 0;
      float[] floatArray0 = new float[0];
      boolean boolean2 = MathArrays.equals(floatArray0, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-43.49F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2709.9065F;
      floatArray0[3] = 824.0F;
      floatArray0[4] = (-117.0F);
      floatArray0[5] = 243.649F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-43.49F);
      doubleArray0[1] = (double) 243.649F;
      doubleArray0[2] = (double) (-117.0F);
      doubleArray0[3] = (-2103.8);
      doubleArray0[4] = (double) (-43.49F);
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-86.9800033569336), 487.2980041503906, (-234.0), (-4207.6), (-86.9800033569336)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      double double0 = (-353.83);
      double[] doubleArray0 = new double[0];
      MathArrays.scale((-353.83), doubleArray0);
      MathArrays.equals((float[]) null, (float[]) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 193;
      intArray0[2] = 32760;
      intArray0[3] = 193;
      intArray0[4] = 0;
      intArray0[5] = 193;
      intArray0[6] = 184;
      int[] intArray1 = new int[7];
      intArray1[0] = 32760;
      intArray1[1] = 193;
      intArray1[2] = 32760;
      intArray1[3] = 184;
      intArray1[4] = (-1068);
      intArray1[5] = 0;
      intArray1[6] = 311;
      MathArrays.distance(intArray0, intArray1);
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1902);
      intArray0[1] = (-894);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1902);
      doubleArray0[2] = (double) (-1902);
      doubleArray0[3] = (double) (-1902);
      MathArrays.distanceInf(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.0E-5, (double) (-1902), (-1.0), (-1.0), 0.0, (-1902.0), (-2779.30337), (double) 0);
      MathArrays.linearCombination(doubleArray0, doubleArray0);
      MathArrays.distance(intArray0, intArray0);
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = (Integer) (-1902);
      integerArray0[1] = (Integer) (-894);
      integerArray0[2] = (Integer) (-1902);
      integerArray0[3] = (Integer) (-894);
      Integer integer0 = new Integer(4014);
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) (-1902);
      integerArray0[6] = (Integer) (-1902);
      Integer integer1 = new Integer((-894));
      integerArray0[7] = integer1;
      integerArray0[8] = (Integer) (-894);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1566.19;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
      assertTrue(boolean0);
  }
}
