* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.math3.util.MathArrays
* Starting Client-0
* Connecting to master process on port 14071
* Analyzing classpath: 
  - subjects/buggy-versions/Math-3/target/classes
* Finished analyzing classpath
* Generating tests for class org.apache.commons.math3.util.MathArrays
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2071
* Using seed 2804130660
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 814 / 2071
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.convolve([D[D)[D: I23 Branch 118 IFNE L1401 - false: 327
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([F[F)Z: I59 Branch 82 IFNE L1185 - false: 183
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I3 Branch 83 IFNULL L1204 - true: 30
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.safeNorm([D)D: I123 Branch 53 IFLE L605 - false: 1946
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.normalizeArray([DD)[D: I18 Branch 108 IFEQ L1296 - false: 213
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I36 Branch 104 IF_ICMPEQ L1258 - false: 67
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.normalizeArray([DD)[D: I56 Branch 110 IFEQ L1303 - false: 388
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkPositive([D)V: I16 Branch 42 IFGT L482 - true: 24
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I5 Branch 92 IFNONNULL L1229 - false: 208
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I59 Branch 98 IFNE L1236 - false: 50
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;ZZ)Z: I37 Branch 32 IFGT L385 - true: 46
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I65 Branch 24 IFEQ L330 - true: 11
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([F[F)Z: I5 Branch 76 IFNONNULL L1178 - false: 349
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.distanceInf([D[D)D: I12 Branch 15 IF_ICMPGE L268 - false: 143
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.normalizeArray([DD)[D: I4 Branch 107 IFEQ L1293 - false: 2623
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I41 Branch 22 IFLT L319 - true: 58
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.normalizeArray([DD)[D: I126 Branch 114 IFEQ L1314 - false: 102
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.ebeAdd([D[D)[D: I31 Branch 4 IF_ICMPGE L125 - true: 30
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.distanceInf([D[D)D: I12 Branch 15 IF_ICMPGE L268 - true: 143
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkNonNegative([[J)V: I29 Branch 47 IFGE L515 - false: 11
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I3 Branch 99 IFNULL L1255 - true: 60
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I16 Branch 86 IFNONNULL L1205 - true: 32
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkRectangular([[J)V: I12 Branch 39 IF_ICMPGE L462 - true: 6
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.ebeAdd([D[D)[D: I31 Branch 4 IF_ICMPGE L125 - false: 30
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;: Line 1337: 102
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.safeNorm([D)D: I77 Branch 52 IFLE L596 - true: 165
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I23 Branch 95 IFNE L1230 - true: 21
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.distanceInf([D[D)D: Line 267: 143
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkNonNegative([J)V: I16 Branch 44 IFGE L498 - true: 25
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.safeNorm([D)D: I152 Branch 54 IFEQ L610 - false: 3129
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([F[F)Z: I23 Branch 79 IFNE L1179 - true: 12
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.distanceInf([D[D)D: Line 271: 143
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.ebeMultiply([D[D)[D: I6 Branch 7 IF_ICMPEQ L164 - false: 36
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.distanceInf([D[D)D: Line 268: 143
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;I)[Ljava/lang/Object;: Line 1336: 102
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I49 Branch 23 IFLE L323 - true: 45
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I41 Branch 22 IFLT L319 - false: 33
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I16 Branch 102 IFNONNULL L1256 - false: 26
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkNonNegative([J)V: I8 Branch 43 IF_ICMPGE L497 - true: 50
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I9 Branch 101 IFNONNULL L1256 - false: 60
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.ebeSubtract([D[D)[D: I6 Branch 5 IF_ICMPEQ L142 - false: 32
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.safeNorm([D)D: I208 Branch 56 IFNE L624 - false: 2
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I77 Branch 26 IFLE L335 - false: 23
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: Line 1367: 6773
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I9 Branch 101 IFNONNULL L1256 - true: 91
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.normalizeArray([DD)[D: I84 Branch 111 IFNE L1306 - true: 108
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([F[F)Z: I16 Branch 78 IFNONNULL L1179 - true: 12
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.safeNorm([D)D: I223 Branch 57 IFLT L627 - true: 613
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I37 Branch 21 IFEQ L318 - false: 33
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I36 Branch 96 IF_ICMPEQ L1232 - false: 55
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I3 Branch 91 IFNULL L1229 - true: 88
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.linearCombination(DDDD)D: I170 Branch 72 IFEQ L942 - false: 71
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkPositive([D)V: I8 Branch 41 IF_ICMPGE L481 - true: 24
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: Line 1358: 5012
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: Line 1357: 115
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I23 Branch 103 IFNE L1256 - false: 26
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I25 Branch 20 LOOKUPSWITCH L315 Default-Case - true: 46270
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I23 Branch 87 IFNE L1205 - true: 32
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: Line 1363: 8163
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.isMonotonic([Ljava/lang/Comparable;Lorg/apache/commons/math3/util/MathArrays$OrderDirection;Z)Z: I77 Branch 26 IFLE L335 - true: 11
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([F[F)Z: I9 Branch 77 IFNONNULL L1179 - true: 259
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I9 Branch 85 IFNONNULL L1205 - false: 30
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I9 Branch 93 IFNONNULL L1230 - true: 154
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.sortInPlace([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;[[D)V: I37 Branch 60 IFNONNULL L691 - false: 4348
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: I47 Branch 116 IF_ICMPGE L1363 - false: 8163
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkRectangular([[J)V: I23 Branch 40 IF_ICMPEQ L463 - true: 171
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.ebeAdd([D[D)[D: I6 Branch 3 IF_ICMPEQ L120 - true: 30
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I16 Branch 94 IFNONNULL L1230 - true: 21
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equals([D[D)Z: I9 Branch 93 IFNONNULL L1230 - false: 88
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I5 Branch 100 IFNONNULL L1255 - false: 113
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.<init>()V: Line 52: 145610
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I5 Branch 84 IFNONNULL L1204 - false: 222
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([D[D)Z: I59 Branch 106 IFNE L1262 - false: 104
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.checkOrder([DLorg/apache/commons/math3/util/MathArrays$OrderDirection;ZZ)Z: I25 Branch 30 LOOKUPSWITCH L382 Default-Case - true: 11525
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I59 Branch 90 IFNE L1211 - false: 5219
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.equalsIncludingNaN([F[F)Z: I9 Branch 85 IFNONNULL L1205 - true: 192
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.linearCombination(DDDDDD)D: I264 Branch 73 IFEQ L1039 - false: 474
Number of times BBC is called for org.apache.commons.math3.util.MathArrays.buildArray(Lorg/apache/commons/math3/Field;II)[[Ljava/lang/Object;: I47 Branch 116 IF_ICMPGE L1363 - true: 18324
Number of times BBC is called in total: 273916
* Search finished after 605s and 1451 generations, 826542 statements, best individual has fitness: 138.0
* Minimizing test suite
[MASTER] 12:21:35.647 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 413
* Number of covered goals: 410
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 99%
* Total number of goals: 255
* Number of covered goals: 252
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 70
* Number of covered goals: 70
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 982
* Number of covered goals: 943
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 72%
* Total number of goals: 86
* Number of covered goals: 62
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 98%
* Total number of goals: 40
* Number of covered goals: 39
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 99%
* Total number of goals: 255
* Number of covered goals: 252
* Generated 195 tests with total length 3553
* Resulting test suite's coverage: 89% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 12:22:20.052 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6834833333333333% of time used, but only 25/195 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 12:22:48.195 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1627647768082/org/apache/commons/math3/util/MathArrays_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1627647768082/org/apache/commons/math3/util/MathArrays_57_tmp__ESTest_scaffolding.java]]
[MASTER] 12:22:48.198 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-3/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 12:22:48.199 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 12:22:48.207 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.apache.commons.math3.Field<java.lang.String> cannot be converted to org.apache.commons.math3.Field<org.apache.commons.math3.FieldElement<org.apache.commons.math3.FieldElement>>: 67
[MASTER] 12:22:48.209 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_57_1627647768082/org/apache/commons/math3/util/MathArrays_57_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 12:22:48.209 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 12:22:48.217 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1627647768082/org/apache/commons/math3/util/MathArrays_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Jul 30 12:22:48 GMT 2021
4:  */
5: 
6: package org.apache.commons.math3.util;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import org.apache.commons.math3.Field;
13: import org.apache.commons.math3.FieldElement;
14: import org.apache.commons.math3.util.MathArrays;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class MathArrays_57_tmp__ESTest extends MathArrays_57_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       int[] intArray0 = new int[5];
26:       intArray0[0] = 0;
27:       intArray0[1] = (-3323);
28:       intArray0[2] = 0;
29:       intArray0[3] = (-1229);
30:       intArray0[4] = (-4118);
31:       double double0 = MathArrays.distance(intArray0, intArray0);
32:       assertEquals(5, intArray0.length);
33:       assertEquals(0.0, double0, 0.01);
34:       assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
35:       
36:       Integer[] integerArray0 = new Integer[2];
37:       integerArray0[0] = (Integer) (-3323);
38:       integerArray0[1] = (Integer) (-4118);
39:       MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
40:       boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
41:       assertEquals(2, integerArray0.length);
42:       assertFalse(boolean0);
43:       
44:       Double[] doubleArray0 = new Double[1];
45:       Double double1 = new Double(0);
46:       assertEquals(0.0, (double)double1, 0.01);
47:       assertEquals((double)double1, (double)double0, 0.01);
48:       assertNotNull(double1);
49:       
50:       doubleArray0[0] = double1;
51:       MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
52:       boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
53:       assertEquals(1, doubleArray0.length);
54:       assertTrue(boolean1);
55:       assertFalse(boolean1 == boolean0);
56:       assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
57:       
58:       int int0 = MathArrays.distanceInf(intArray0, intArray0);
59:       assertEquals(5, intArray0.length);
60:       assertEquals(0, int0);
61:       assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
62:       
63:       Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
64:       doReturn((Class) null).when(field0).getRuntimeClass();
65:       // Undeclared exception!
66:       try { 
67:         MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, (-2146167786));
68:         fail("Expecting exception: NullPointerException");
69:       
70:       } catch(NullPointerException e) {
71:          //
72:          // no message in exception (getMessage() returned null)
73:          //
74:       }
75:   }
76: }
RegularFileObject[/tmp/EvoSuite_57_1627647768082/org/apache/commons/math3/util/MathArrays_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Jul 30 12:22:48 GMT 2021
5:  */
6: 
7: package org.apache.commons.math3.util;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class MathArrays_57_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.util.MathArrays"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MathArrays_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.math3.util.Precision",
84:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
85:       "org.apache.commons.math3.util.MathArrays",
86:       "org.apache.commons.math3.util.MathArrays$1",
87:       "org.apache.commons.math3.util.MathArrays$2",
88:       "org.apache.commons.math3.util.MathArrays$3",
89:       "org.apache.commons.math3.exception.util.ArgUtils",
90:       "org.apache.commons.math3.exception.MathArithmeticException",
91:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
92:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
93:       "org.apache.commons.math3.exception.NotPositiveException",
94:       "org.apache.commons.math3.exception.MathInternalError",
95:       "org.apache.commons.math3.exception.MathIllegalStateException",
96:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
97:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
98:       "org.apache.commons.math3.util.MathUtils",
99:       "org.apache.commons.math3.exception.MathIllegalNumberException",
100:       "org.apache.commons.math3.exception.util.LocalizedFormats",
101:       "org.apache.commons.math3.util.Pair",
102:       "org.apache.commons.math3.util.FastMath",
103:       "org.apache.commons.math3.exception.DimensionMismatchException",
104:       "org.apache.commons.math3.FieldElement",
105:       "org.apache.commons.math3.exception.util.Localizable",
106:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
107:       "org.apache.commons.math3.exception.util.ExceptionContext",
108:       "org.apache.commons.math3.exception.NullArgumentException",
109:       "org.apache.commons.math3.exception.NoDataException",
110:       "org.apache.commons.math3.Field",
111:       "org.apache.commons.math3.exception.NotFiniteNumberException"
112:     );
113:   } 
114:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
115:     mock(Class.forName("org.apache.commons.math3.Field", false, MathArrays_57_tmp__ESTest_scaffolding.class.getClassLoader()));
116:   }
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MathArrays_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.math3.util.MathArrays",
123:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
124:       "org.apache.commons.math3.util.MathArrays$1",
125:       "org.apache.commons.math3.util.MathArrays$2",
126:       "org.apache.commons.math3.util.MathArrays$3",
127:       "org.apache.commons.math3.exception.util.LocalizedFormats",
128:       "org.apache.commons.math3.util.FastMath",
129:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
130:       "org.apache.commons.math3.exception.MathIllegalNumberException",
131:       "org.apache.commons.math3.exception.DimensionMismatchException",
132:       "org.apache.commons.math3.exception.util.ExceptionContext",
133:       "org.apache.commons.math3.exception.util.ArgUtils",
134:       "org.apache.commons.math3.util.Pair",
135:       "org.apache.commons.math3.util.MathUtils",
136:       "org.apache.commons.math3.exception.NullArgumentException",
137:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
138:       "org.apache.commons.math3.util.Precision",
139:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
140:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
141:       "org.apache.commons.math3.exception.NotPositiveException",
142:       "org.apache.commons.math3.exception.MathArithmeticException",
143:       "org.apache.commons.math3.exception.NoDataException"
144:     );
145:   }
146: }

[MASTER] 12:22:48.242 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[5];
intArray0[0] = 0;
intArray0[1] = (-3323);
intArray0[2] = 0;
intArray0[3] = (-1229);
intArray0[4] = (-4118);
double double0 = MathArrays.distance(intArray0, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0.0, double0, 0.01);
assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);

Integer[] integerArray0 = new Integer[2];
integerArray0[0] = (Integer) (-3323);
integerArray0[1] = (Integer) (-4118);
MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
assertEquals(2, integerArray0.length);
assertFalse(boolean0);

Double[] doubleArray0 = new Double[1];
Double double1 = new Double(0);
assertEquals(0.0, (double)double1, 0.01);
assertEquals((double)double1, (double)double0, 0.01);
assertNotNull(double1);

doubleArray0[0] = double1;
MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
assertEquals(1, doubleArray0.length);
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);

int int0 = MathArrays.distanceInf(intArray0, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, int0);
assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);

Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
doReturn((Class) null).when(field0).getRuntimeClass();
MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, (-2146167786));

[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1627647776508/org/apache/commons/math3/util/MathArrays_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1627647776508/org/apache/commons/math3/util/MathArrays_115_tmp__ESTest_scaffolding.java]]
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Math-3/target/classes:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Math-3/target/classes
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.apache.commons.math3.Field<java.lang.String> cannot be converted to org.apache.commons.math3.Field<org.apache.commons.math3.FieldElement<org.apache.commons.math3.FieldElement>>: 74
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_115_1627647776508/org/apache/commons/math3/util/MathArrays_115_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 12:22:56.635 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1627647776508/org/apache/commons/math3/util/MathArrays_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Jul 30 12:22:56 GMT 2021
4:  */
5: 
6: package org.apache.commons.math3.util;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import org.apache.commons.math3.Field;
13: import org.apache.commons.math3.FieldElement;
14: import org.apache.commons.math3.util.MathArrays;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class MathArrays_115_tmp__ESTest extends MathArrays_115_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       int[] intArray0 = new int[5];
26:       int int0 = 0;
27:       intArray0[0] = 0;
28:       int int1 = (-3323);
29:       intArray0[1] = (-3323);
30:       int int2 = 0;
31:       intArray0[2] = 0;
32:       intArray0[3] = (-1229);
33:       intArray0[4] = (-4118);
34:       double double0 = MathArrays.distance(intArray0, intArray0);
35:       assertEquals(5, intArray0.length);
36:       assertEquals(0.0, double0, 0.01);
37:       assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
38:       
39:       Integer[] integerArray0 = new Integer[2];
40:       integerArray0[0] = (Integer) (-3323);
41:       integerArray0[1] = (Integer) (-4118);
42:       MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
43:       boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
44:       assertEquals(2, integerArray0.length);
45:       assertFalse(boolean0);
46:       
47:       Double[] doubleArray0 = new Double[1];
48:       Double double1 = new Double(0);
49:       assertEquals(0.0, (double)double1, 0.01);
50:       assertEquals((double)double1, (double)double0, 0.01);
51:       assertNotNull(double1);
52:       
53:       doubleArray0[0] = double1;
54:       MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
55:       boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
56:       assertEquals(1, doubleArray0.length);
57:       assertTrue(boolean1);
58:       assertFalse(boolean1 == boolean0);
59:       assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
60:       
61:       int int3 = MathArrays.distanceInf(intArray0, intArray0);
62:       assertEquals(5, intArray0.length);
63:       assertEquals(0, int3);
64:       assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
65:       assertFalse(int3 == int1);
66:       assertTrue(int3 == int2);
67:       assertTrue(int3 == int0);
68:       
69:       Class<FieldElement> class0 = FieldElement.class;
70:       Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
71:       doReturn(class0).when(field0).getRuntimeClass();
72:       // Undeclared exception!
73:       try { 
74:         MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, (-2146167786));
75:         fail("Expecting exception: NegativeArraySizeException");
76:       
77:       } catch(NegativeArraySizeException e) {
78:          //
79:          // no message in exception (getMessage() returned null)
80:          //
81:          verifyException("java.lang.reflect.Array", e);
82:       }
83:   }
84: }
RegularFileObject[/tmp/EvoSuite_115_1627647776508/org/apache/commons/math3/util/MathArrays_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Jul 30 12:22:56 GMT 2021
5:  */
6: 
7: package org.apache.commons.math3.util;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class MathArrays_115_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.math3.util.MathArrays"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(MathArrays_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.apache.commons.math3.util.Precision",
84:       "org.apache.commons.math3.exception.util.ExceptionContextProvider",
85:       "org.apache.commons.math3.util.MathArrays",
86:       "org.apache.commons.math3.util.MathArrays$1",
87:       "org.apache.commons.math3.util.MathArrays$2",
88:       "org.apache.commons.math3.util.MathArrays$3",
89:       "org.apache.commons.math3.exception.util.ArgUtils",
90:       "org.apache.commons.math3.exception.MathArithmeticException",
91:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
92:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
93:       "org.apache.commons.math3.exception.NotPositiveException",
94:       "org.apache.commons.math3.exception.MathInternalError",
95:       "org.apache.commons.math3.exception.MathIllegalStateException",
96:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
97:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
98:       "org.apache.commons.math3.util.MathUtils",
99:       "org.apache.commons.math3.exception.MathIllegalNumberException",
100:       "org.apache.commons.math3.exception.util.LocalizedFormats",
101:       "org.apache.commons.math3.util.Pair",
102:       "org.apache.commons.math3.util.FastMath",
103:       "org.apache.commons.math3.exception.DimensionMismatchException",
104:       "org.apache.commons.math3.FieldElement",
105:       "org.apache.commons.math3.exception.util.Localizable",
106:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
107:       "org.apache.commons.math3.exception.util.ExceptionContext",
108:       "org.apache.commons.math3.exception.NullArgumentException",
109:       "org.apache.commons.math3.exception.NoDataException",
110:       "org.apache.commons.math3.Field",
111:       "org.apache.commons.math3.exception.NotFiniteNumberException"
112:     );
113:   } 
114:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
115:     mock(Class.forName("org.apache.commons.math3.Field", false, MathArrays_115_tmp__ESTest_scaffolding.class.getClassLoader()));
116:   }
117: 
118:   private static void resetClasses() {
119:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(MathArrays_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
120: 
121:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
122:       "org.apache.commons.math3.util.MathArrays",
123:       "org.apache.commons.math3.util.MathArrays$OrderDirection",
124:       "org.apache.commons.math3.util.MathArrays$1",
125:       "org.apache.commons.math3.util.MathArrays$2",
126:       "org.apache.commons.math3.util.MathArrays$3",
127:       "org.apache.commons.math3.exception.util.LocalizedFormats",
128:       "org.apache.commons.math3.util.FastMath",
129:       "org.apache.commons.math3.exception.MathIllegalArgumentException",
130:       "org.apache.commons.math3.exception.MathIllegalNumberException",
131:       "org.apache.commons.math3.exception.DimensionMismatchException",
132:       "org.apache.commons.math3.exception.util.ExceptionContext",
133:       "org.apache.commons.math3.exception.util.ArgUtils",
134:       "org.apache.commons.math3.util.Pair",
135:       "org.apache.commons.math3.util.MathUtils",
136:       "org.apache.commons.math3.exception.NullArgumentException",
137:       "org.apache.commons.math3.exception.NonMonotonicSequenceException",
138:       "org.apache.commons.math3.util.Precision",
139:       "org.apache.commons.math3.exception.NumberIsTooSmallException",
140:       "org.apache.commons.math3.exception.NotStrictlyPositiveException",
141:       "org.apache.commons.math3.exception.NotPositiveException",
142:       "org.apache.commons.math3.exception.MathArithmeticException",
143:       "org.apache.commons.math3.exception.NoDataException"
144:     );
145:   }
146: }

[MASTER] 12:22:56.636 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[5];
int int0 = 0;
intArray0[0] = 0;
int int1 = (-3323);
intArray0[1] = (-3323);
int int2 = 0;
intArray0[2] = 0;
intArray0[3] = (-1229);
intArray0[4] = (-4118);
double double0 = MathArrays.distance(intArray0, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0.0, double0, 0.01);
assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);

Integer[] integerArray0 = new Integer[2];
integerArray0[0] = (Integer) (-3323);
integerArray0[1] = (Integer) (-4118);
MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
assertEquals(2, integerArray0.length);
assertFalse(boolean0);

Double[] doubleArray0 = new Double[1];
Double double1 = new Double(0);
assertEquals(0.0, (double)double1, 0.01);
assertEquals((double)double1, (double)double0, 0.01);
assertNotNull(double1);

doubleArray0[0] = double1;
MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
assertEquals(1, doubleArray0.length);
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);

int int3 = MathArrays.distanceInf(intArray0, intArray0);
assertEquals(5, intArray0.length);
assertEquals(0, int3);
assertArrayEquals(new int[] {0, (-3323), 0, (-1229), (-4118)}, intArray0);
assertFalse(int3 == int1);
assertTrue(int3 == int2);
assertTrue(int3 == int0);

Class<FieldElement> class0 = FieldElement.class;
Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
doReturn(class0).when(field0).getRuntimeClass();
MathArrays.buildArray((Field<FieldElement<FieldElement>>) field0, (-2146167786));

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'MathArrays_ESTest' to results/Math-3/org.apache.commons.math3.util.MathArrays/BBC-F0-50/tests/4
* Done!

* Computation finished
