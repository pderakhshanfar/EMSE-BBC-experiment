/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:08:29 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.apache.commons.math3.util.Pair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-468.1754F);
      floatArray0[2] = (-2643.6F);
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-468.1754F), (-2643.6F), Float.NEGATIVE_INFINITY, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(5, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-468.1754F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) Float.NEGATIVE_INFINITY;
      doubleArray0[3] = (double) Float.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1.4E-45F);
      floatArray0[2] = 247.1F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-2648.5068F);
      floatArray0[6] = 1.4E-45F;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.4E-45F), 247.1F, 0.0F, 0.0F, (-2648.5068F), 1.4E-45F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(7, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1.4E-45F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) (-2648.5068F);
      doubleArray0[4] = (double) 0.0F;
      doubleArray0[5] = (double) 247.1F;
      doubleArray0[6] = (double) (-1.4E-45F);
      doubleArray0[7] = (double) 1.4E-45F;
      doubleArray0[8] = (double) (-2648.5068F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.401298464324817E-45, 0.0, 0.0, (-2648.5068359375), 0.0, 247.10000610351562, (-1.401298464324817E-45), 1.401298464324817E-45, (-2648.5068359375)}, doubleArray0, 0.01);
      assertEquals(3753.6962227958315, double0, 0.01);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 1885.25429323972;
      doubleArray0[0] = 1885.25429323972;
      doubleArray0[1] = (-3110.2872399806024);
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = (-3698.7);
      doubleArray0[4] = 1.25;
      doubleArray0[5] = 0.6299605249474366;
      doubleArray0[6] = 698.9272;
      doubleArray0[7] = 637.6651112981983;
      doubleArray0[8] = (-4021.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1885.25429323972, (-3110.2872399806024), 1.7976931348623157E308, (-3698.7), 1.25, 0.6299605249474366, 698.9272, 637.6651112981983, (-4021.0)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray1, 2351.3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1952.72799874);
      doubleArray0[3] = 1266.101;
      doubleArray0[4] = (-1.7168146928204135);
      doubleArray0[5] = 942.81521;
      doubleArray0[6] = 660.2756;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1952.72799874));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, Double.NaN, (-1952.72799874), 1266.101, (-1.7168146928204135), 942.81521, 660.2756}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {-0.0, Double.NaN, 4168.525998306554, (-2702.770144324974), 3.6649173289441084, (-2012.6457535405789), (-1409.5030165099456)}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double[] doubleArray0 = new double[42];
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(42, doubleArray0.length);
      assertEquals(83, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(42, doubleArray0.length);
      assertEquals(83, doubleArray1.length);
      assertEquals(124, doubleArray2.length);
      
      MathArrays.convolve(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-117.3269707);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1182.60738183);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-117.3269707), 1.0, (-1182.60738183)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {(-117.3269707), 1.0, (-1182.60738183)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][0];
      doubleArray1[0] = null;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.checkOrder(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = null;
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(8);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(8, (int)integer1);
      
      integerArray0[1] = integer1;
      int int0 = (-942);
      Integer integer2 = new Integer((-942));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals((-942), (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(1662);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(1662, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(1);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(1, (int)integer4);
      
      integerArray0[4] = integer4;
      try { 
        Integer.decode("rr/I[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"rr/I[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      long[] longArray0 = new long[1];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      boolean boolean0 = MathArrays.equals((double[]) null, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.4E-45F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.4E-45F);
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 1.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3403.8308F;
      floatArray0[7] = Float.NaN;
      floatArray0[8] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1.4E-45F), 0.0F, (-1.4E-45F), (-1.0F), 1.0F, 0.0F, 3403.8308F, Float.NaN, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(9, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-1.4E-45F);
      doubleArray0[2] = (double) 3403.8308F;
      doubleArray0[3] = (double) 3403.8308F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1.401298464324817E-45), 3403.830810546875, 3403.830810546875}, doubleArray0, 0.01);
      assertEquals(4813.743696298796, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 0.0F);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, -0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, (-1.401298464324817E-45), 3403.830810546875, 3403.830810546875}, doubleArray0, 0.01);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      MathArrays.buildArray(field0, 2147483543, 189);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      Integer integer0 = new Integer(2146431990);
      assertNotNull(integer0);
      assertEquals(2146431990, (int)integer0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2146431990;
      doubleArray0[1] = (double) 2146431990;
      doubleArray0[2] = (double) 2146431990;
      doubleArray0[3] = (double) (-4785.481F);
      doubleArray0[4] = (double) (-4785.481F);
      doubleArray0[5] = (double) (-4785.481F);
      doubleArray0[6] = (double) (-4785.481F);
      doubleArray0[7] = (double) (-4785.481F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[4][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-4785.48095703125), 2.14643199E9, 2.14643199E9, 2.14643199E9, (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 2146431990;
      intArray2[1] = 2146431990;
      intArray2[2] = 2146431990;
      intArray2[3] = 2146431990;
      int int0 = MathArrays.distance1(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {2146431990, 2146431990, 2146431990, 2146431990}, intArray2);
      assertEquals((-2103316), int0);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-4785.48095703125), 2.14643199E9, 2.14643199E9, 2.14643199E9, (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 6.52E18;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      doubleArray1[1] = 6.52E18;
      doubleArray1[2] = 6.52E18;
      doubleArray1[3] = 6.52E18;
      doubleArray1[4] = 6.52E18;
      doubleArray1[5] = 6.52E18;
      try { 
        MathArrays.ebeSubtract(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = 6.52E18;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.25104E37, 8.50208E37, 1.275312E38, 8.50208E37, 4.25104E37}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.25104E37, 8.50208E37, 1.275312E38, 8.50208E37, 4.25104E37}, doubleArray1, 0.01);
      assertEquals(1.8529853764949144E38, double0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.25104E37, 8.50208E37, 1.275312E38, 8.50208E37, 4.25104E37}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {2.77167808E56, 8.315034239999999E56, 1.663006848E57, 1.940174656E57, 1.663006848E57, 8.315034239999999E56, 2.77167808E56}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 170;
      intArray0[1] = 175;
      intArray0[2] = (-896);
      intArray0[3] = 178;
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 170;
      intArray1[1] = 175;
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Double double0 = Double.valueOf((-2892.0));
      assertNotNull(double0);
      assertEquals((-2892.0), (double)double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 195.97;
      doubleArray1[1] = (-2892.0);
      doubleArray1[2] = (-2892.0);
      doubleArray1[3] = (-2892.0);
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {195.97, (-2892.0), (-2892.0), (-2892.0)}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1371.19146;
      doubleArray0[1] = (-151.341);
      doubleArray0[2] = (-0.1428571423679182);
      doubleArray0[3] = 1928.7;
      doubleArray0[4] = (-37.00664504);
      boolean boolean1 = MathArrays.equals(doubleArray0, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1371.19146, (-151.341), (-0.1428571423679182), 1928.7, (-37.00664504)}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(5, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 5;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1), 5}, intArray0);
      assertArrayEquals(new int[] {(-1), 5}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double[][] doubleArray1 = new double[2][5];
      doubleArray1[0] = doubleArray0;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(260);
      assertNotNull(integer0);
      assertEquals(260, (int)integer0);
      
      integerArray0[0] = integer0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(463.5254295485681, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[5];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2689.8066077;
      doubleArray0[1] = 4478.83420365404;
      doubleArray0[2] = (-3647.10163);
      doubleArray0[3] = (-821.3070580949538);
      doubleArray0[4] = (-1355.0);
      doubleArray0[5] = 2445.00194;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {2689.8066077, 4478.83420365404, (-3647.10163), (-821.3070580949538), (-1355.0), 2445.00194}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 6);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2689.8066077, 4478.83420365404, (-3647.10163), (-821.3070580949538), (-1355.0), 2445.00194}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2689.8066077, 4478.83420365404, (-3647.10163), (-821.3070580949538), (-1355.0), 2445.00194}, doubleArray1, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 6;
      floatArray0[1] = (float) 6;
      floatArray0[2] = (float) 6;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 6;
      floatArray0[5] = (float) 6;
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {6.0F, 6.0F, 6.0F, 6.0F, 6.0F, 6.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.52E18;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.52E18;
      doubleArray2[1] = 6.52E18;
      doubleArray2[2] = 6.52E18;
      doubleArray2[3] = 6.52E18;
      doubleArray2[4] = 6.52E18;
      MathArrays.checkPositive(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.scale(1473.95382747, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.52E18, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.610178955104401E21, 0.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double0 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.52E18, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9.610178955104401E21, 0.0}, doubleArray3, 0.01);
      assertEquals(9.610178955104401E21, double0, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double1 = MathArrays.distanceInf(doubleArray3, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {9.610178955104401E21, 0.0}, doubleArray3, 0.01);
      assertEquals(9.603658955104402E21, double1, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.scaleInPlace((-398.0), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {-0.0, -0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-398.0);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 1871.1;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-398.0);
      doubleArray2[5] = 1.304E19;
      MathArrays.scaleInPlace(0.0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {-0.0, 0.0, 0.0, 0.0, -0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray2.length);
      
      try { 
        MathArrays.linearCombination(doubleArray2, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      double double0 = MathArrays.linearCombination(1293.666, 1.2599210498948732, (-1473.95382747), (-1473.95382747), 2492.153737280701, 921.5318258776007);
      assertEquals(4470768.786422367, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (-2424.992609014351);
      doubleArray0[2] = 324.468573;
      doubleArray0[3] = 1293.666;
      doubleArray0[4] = 324.468573;
      doubleArray0[5] = 1.2599210498948732;
      doubleArray0[6] = (-1473.95382747);
      doubleArray0[7] = 4470768.786422367;
      double double1 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, (-2424.992609014351), 324.468573, 1293.666, 324.468573, 1.2599210498948732, (-1473.95382747), 4470768.786422367, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.01;
      doubleArray1[1] = 1293.666;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = (-1473.95382747);
      doubleArray1[4] = 324.468573;
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.52E18;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.52E18;
      doubleArray2[1] = 6.52E18;
      doubleArray2[2] = 6.52E18;
      doubleArray2[3] = 6.52E18;
      doubleArray2[4] = 6.52E18;
      MathArrays.checkPositive(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18}, doubleArray2, 0.01);
      assertEquals(5, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 6.52E18, 6.52E18, 6.52E18, 6.52E18}, doubleArray2, 0.01);
      assertEquals(6.52E18, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 4.25104E37}, doubleArray3, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-4785.481F);
      doubleArray0[1] = (double) (-4785.481F);
      doubleArray0[2] = (double) (-4785.481F);
      doubleArray0[3] = (double) (-4785.481F);
      doubleArray0[4] = (double) (-4785.481F);
      doubleArray0[5] = (double) (-4785.481F);
      doubleArray0[6] = (double) (-4785.481F);
      doubleArray0[7] = (double) (-4785.481F);
      doubleArray0[8] = (double) (-4785.481F);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {(-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertEquals(14356.44287109375, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      double[][] doubleArray2 = new double[5][9];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray0;
      doubleArray2[3] = doubleArray1;
      doubleArray2[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      
      double double1 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125), (-4785.48095703125)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4786.48095703125, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-569.0);
      doubleArray1[1] = 6.52E18;
      doubleArray1[2] = 6.52E18;
      doubleArray1[3] = (-569.0);
      doubleArray1[4] = 6.52E18;
      doubleArray1[5] = (-569.0);
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-569.0), 6.52E18, 6.52E18, (-569.0), 6.52E18, (-569.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-569.0), 6.52E18, 6.52E18, (-569.0), 6.52E18, (-569.0)}, doubleArray1, 0.01);
      assertEquals(1.129297126534908E19, double0, 0.01);
      assertEquals(6, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-569.0), 6.52E18, 6.52E18, (-569.0), 6.52E18, (-569.0)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(10, doubleArray3.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(1.0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[1] = (-1446);
      Integer integer0 = new Integer((-1446));
      assertNotNull(integer0);
      assertEquals((-1446), (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, (-1446), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1446), 0, 0, 0}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertArrayEquals(new int[] {0, (-1446), 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, (-1446), 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, (-1446), 0, 0, 0}, intArray2);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertEquals(5, intArray2.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1446);
      doubleArray0[1] = (double) (-1446);
      doubleArray0[2] = (double) (-1446);
      doubleArray0[3] = 0.7937005259840998;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1446.0), (-1446.0), (-1446.0), 0.7937005259840998}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2090916.0, 4181832.0, 6272748.0, 4179536.618078854, 2088620.618078854, (-2295.381921146017), 0.6299605249474367}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1446.0), (-1446.0), (-1446.0), 0.7937005259840998}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.scaleInPlace(6.52E18, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 6.52E18;
      doubleArray2[1] = 6.52E18;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 6.52E18;
      doubleArray2[4] = 0.0;
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[9];
      Double double0 = new Double(0.11113807559013367);
      assertNotNull(double0);
      assertEquals(0.11113807559013367, (double)double0, 0.01);
      
      doubleArray1[0] = double0;
      Double double1 = new Double((-475.33241623209943));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-475.33241623209943), (double)double1, 0.01);
      
      doubleArray1[1] = double1;
      Double double2 = new Double((-475.33241623209943));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-475.33241623209943), (double)double2, 0.01);
      
      doubleArray1[2] = double2;
      Double double3 = new Double((double) doubleArray1[0]);
      assertNotNull(double3);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(0.11113807559013367, (double)double3, 0.01);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[3] = double3;
      Double double4 = new Double((-475.33241623209943));
      assertNotNull(double4);
      assertEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((double)double4, (double)double2, 0.01);
      assertEquals((-475.33241623209943), (double)double4, 0.01);
      
      doubleArray1[4] = double4;
      Double double5 = new Double(4388.890672915);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double4, 0.01);
      assertEquals(4388.890672915, (double)double5, 0.01);
      
      doubleArray1[5] = double5;
      Double double6 = new Double((double) doubleArray1[0]);
      assertNotNull(double6);
      assertEquals((double)double6, (double)double3, 0.01);
      assertEquals((double)double6, (double)double0, 0.01);
      assertNotEquals((double)double6, (double)double4, 0.01);
      assertNotEquals((double)double6, (double)double2, 0.01);
      assertNotEquals((double)double6, (double)double5, 0.01);
      assertNotEquals((double)double6, (double)double1, 0.01);
      assertEquals(0.11113807559013367, (double)double6, 0.01);
      assertEquals(9, doubleArray1.length);
      
      doubleArray1[6] = double6;
      Double double7 = new Double(2354.625518809419);
      assertNotNull(double7);
      assertNotEquals((double)double7, (double)double4, 0.01);
      assertNotEquals((double)double7, (double)double5, 0.01);
      assertNotEquals((double)double7, (double)double2, 0.01);
      assertNotEquals((double)double7, (double)double0, 0.01);
      assertNotEquals((double)double7, (double)double6, 0.01);
      assertNotEquals((double)double7, (double)double1, 0.01);
      assertNotEquals((double)double7, (double)double3, 0.01);
      assertEquals(2354.625518809419, (double)double7, 0.01);
      
      doubleArray1[7] = double7;
      Double double8 = new Double(0.11113807559013367);
      assertNotNull(double8);
      assertEquals((double)double8, (double)double6, 0.01);
      assertNotEquals((double)double8, (double)double4, 0.01);
      assertNotEquals((double)double8, (double)double2, 0.01);
      assertEquals((double)double8, (double)double0, 0.01);
      assertEquals((double)double8, (double)double3, 0.01);
      assertNotEquals((double)double8, (double)double7, 0.01);
      assertNotEquals((double)double8, (double)double5, 0.01);
      assertNotEquals((double)double8, (double)double1, 0.01);
      assertEquals(0.11113807559013367, (double)double8, 0.01);
      
      doubleArray1[8] = double8;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(9, doubleArray1.length);
      
      Double double9 = new Double((double) doubleArray1[0]);
      assertNotNull(double9);
      assertNotEquals((double)double9, (double)double5, 0.01);
      assertEquals((double)double9, (double)double8, 0.01);
      assertEquals((double)double9, (double)double3, 0.01);
      assertNotEquals((double)double9, (double)double2, 0.01);
      assertEquals((double)double9, (double)double0, 0.01);
      assertNotEquals((double)double9, (double)double4, 0.01);
      assertEquals((double)double9, (double)double6, 0.01);
      assertNotEquals((double)double9, (double)double1, 0.01);
      assertNotEquals((double)double9, (double)double7, 0.01);
      assertEquals(0.11113807559013367, (double)double9, 0.01);
      assertEquals(9, doubleArray1.length);
      
      double double10 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double10, 0.01);
      assertEquals(2, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 1.125);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[1];
      int int0 = 1662;
      intArray0[0] = 1662;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      int[] intArray0 = new int[9];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 0, (double) 0, 1524.75928883, (double) 0, 1524.75928883, (-2051.1978508058));
      assertEquals((-3127582.9762442764), double1, 0.01);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, 422.826493972262);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 6.52E18;
      doubleArray0[0] = 6.52E18;
      double double1 = (-0.16666666666666666);
      double double2 = 860.50964948419;
      double double3 = (-3364.28199516);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      double double0 = MathArrays.linearCombination((-288.77), (-288.77), (-288.77), 382.06573, (double) 1135, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 1135;
      doubleArray0[2] = (double) 1135;
      doubleArray0[3] = (-3364.28199516);
      doubleArray0[4] = 382.06573;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 1135.0, 1135.0, (-3364.28199516), 382.06573}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3364.28199516);
      doubleArray1[1] = (double) 1135;
      doubleArray1[2] = (-3364.28199516);
      try { 
        MathArrays.normalizeArray(doubleArray1, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.52E18;
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 6.52E18;
      doubleArray1[1] = 6.52E18;
      MathArrays.scaleInPlace(6.52E18, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.25104E37, 4.25104E37}, doubleArray1, 0.01);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.25104E37, 4.25104E37}, doubleArray1, 0.01);
      assertEquals(8.50208E37, double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray1, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {4.25104E37, 4.25104E37}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray3, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray3.length);
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6.52E18, double1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = 9.223372036854776E18;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = 3364.28199516;
      doubleArray0[8] = (double) 0;
      MathArrays.scaleInPlace(3364.28199516, doubleArray0);
      assertArrayEquals(new double[] {0.0, 7.224740568502633E12, 7.224740568502633E12, 3.1030024478252738E22, 7.224740568502633E12, 7.224740568502633E12, 0.0, 1.131839334295775E7, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 7.224740568502633E12, 7.224740568502633E12, 3.1030024478252738E22, 7.224740568502633E12, 7.224740568502633E12, 0.0, 1.131839334295775E7, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 7.224740568502633E12, 7.224740568502633E12, 3.1030024478252738E22, 7.224740568502633E12, 7.224740568502633E12, 0.0, 1.131839334295775E7, 0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.52E18;
      double double0 = MathArrays.linearCombination(860.50964948419, (-0.16666666666666666), (-3364.28199516), 6.52E18, (-0.16666666666666666), 860.50964948419);
      assertEquals((-2.19351186084432E22), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6.52E18, double1, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-0.16666666666666666));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.16666666666666666), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {6.52E18, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.16666666666666666), -0.0, -0.0}, doubleArray1, 0.01);
      assertEquals((-1.08666666666666662E18), double2, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.16666666666666666), -0.0, -0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      Integer integer0 = new Integer(2146698859);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2146698859, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = MathArrays.copyOf(intArray1);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray2.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 2146698859;
      doubleArray0[2] = (double) 2146698859;
      doubleArray0[3] = (double) 2146698859;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) 2146698859;
      doubleArray0[7] = (double) 2146698859;
      doubleArray0[8] = 0.4311765432357788;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.147483647E9, 2.146698859E9, 2.146698859E9, 2.146698859E9, 0.0, 2.147483647E9, 2.146698859E9, 2.146698859E9, 0.4311765432357788}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      double double0 = MathArrays.distance(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {2.147483647E9, 2.146698859E9, 2.146698859E9, 2.146698859E9, 0.0, 2.147483647E9, 2.146698859E9, 2.146698859E9, 0.4311765432357788}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      
      int[] intArray3 = new int[4];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 2146698859;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = Integer.MAX_VALUE;
      int int1 = MathArrays.distanceInf(intArray1, intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {2146698859, 0, 0, Integer.MAX_VALUE}, intArray3);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2146698859, int1);
      assertEquals(2, intArray0.length);
      assertEquals(4, intArray3.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 3959.16;
      doubleArray0[2] = 10.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 2.0059955823821317E7;
      doubleArray0[5] = 3767.85008;
      doubleArray0[6] = 2576450.6594286617;
      doubleArray0[7] = 0.008333333333329196;
      doubleArray0[8] = 3.834E-20;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {1.0, 3959.16, 10.0, 1.34217729E8, 2.0059955823821317E7, 3767.85008, 2576450.6594286617, 0.008333333333329196, 3.834E-20}, doubleArray0, 0.01);
      assertEquals(1.3573296848387027E8, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "xswqV/uA:O&-YET";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 6.52E18;
      Double double0 = new Double(6.52E18);
      assertNotNull(double0);
      assertEquals(6.52E18, (double)double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, 6.52E18}, doubleArray0, 0.01);
      assertEquals(6.52E18, double1, 0.01);
      assertEquals(2, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = MathArrays.linearCombination(4.3466666666666665E18, 0.0, 0.0, 324.468573, 0.0, (double) 1135);
      assertEquals(0.0, double0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1135;
      longArray0[1] = (long) 1135;
      longArray0[2] = (long) 1135;
      longArray0[3] = 866L;
      longArray0[4] = (long) 1135;
      longArray0[5] = (long) 1135;
      longArray0[6] = (long) 1135;
      longArray0[7] = (long) 1135;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1135L, 1135L, 1135L, 866L, 1135L, 1135L, 1135L, 1135L}, longArray0);
      assertEquals(8, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1725.71);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1725.71)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = (-1073741823);
      int int0 = 2143689507;
      intArray0[2] = 2143689507;
      intArray0[3] = (-890);
      int int1 = 0;
      intArray0[4] = 0;
      int int2 = (-263);
      intArray0[5] = (-263);
      int int3 = 12;
      intArray0[6] = 12;
      int[] intArray1 = MathArrays.copyOf(intArray0, 40);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2, (-1073741823), 2143689507, (-890), 0, (-263), 12}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(40, intArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {(-1725.71)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Double double0 = new Double(2734.7171925278026);
      assertNotNull(double0);
      assertEquals(2734.7171925278026, (double)double0, 0.01);
      
      Double double1 = new Double(959.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(959.0, (double)double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2734.7171925278026;
      doubleArray0[1] = 959.0;
      doubleArray0[2] = Double.NaN;
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {2734.7171925278026, 959.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      double double3 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {2734.7171925278026, 959.0, Double.NaN}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 5285.431F;
      floatArray0[2] = 1183.26F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NEGATIVE_INFINITY;
      floatArray0[5] = 2467.8828F;
      floatArray0[6] = 2117.7F;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 5285.431F;
      floatArray1[1] = Float.NEGATIVE_INFINITY;
      floatArray1[2] = 0.0F;
      floatArray1[3] = Float.NEGATIVE_INFINITY;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 61.8F;
      floatArray1[6] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {0.0F, 5285.431F, 1183.26F, 0.0F, Float.NEGATIVE_INFINITY, 2467.8828F, 2117.7F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {5285.431F, Float.NEGATIVE_INFINITY, 0.0F, Float.NEGATIVE_INFINITY, 0.0F, 61.8F, Float.NEGATIVE_INFINITY}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[][] longArray0 = new long[0][6];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination(2784.37694141, 1.9699272335463627E-8, 0.0, 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(5.485019965342085E-5, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-3293.9449716);
      doubleArray1[1] = 7478678.1231071465;
      doubleArray1[2] = 4.3466666666666665E18;
      doubleArray1[4] = (-4478.83420365404);
      doubleArray1[5] = (-995.24077);
      doubleArray1[6] = (-1017.4469);
      doubleArray1[7] = (-3293.9449716);
      doubleArray1[8] = 6010624.870994875;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3293.9449716), 7478678.1231071465, 4.3466666666666665E18, 0.0, (-4478.83420365404), (-995.24077), (-1017.4469), (-3293.9449716), 6010624.870994875}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly increasing (4,346,666,666,666,666,500 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.86285714285714278E18;
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 0.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 185;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray1, doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(13, doubleArray2.length);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-4478.83420365404);
      doubleArray3[1] = (double) 185;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (double) 185;
      doubleArray3[5] = (double) 185;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = (double) 185;
      doubleArray3[8] = 0.0;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[][] longArray0 = new long[2][1];
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1135;
      floatArray0[1] = (float) 1135;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 1135;
      floatArray0[4] = (float) 1135;
      floatArray0[5] = (float) 1135;
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {1135.0F, 1135.0F, 0.0F, 1135.0F, 1135.0F, 1135.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(6, floatArray0.length);
      assertEquals(0, floatArray1.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 100.0, 100.0);
      assertEquals(2837098.3357394375, double0, 0.01);
      
      long[] longArray0 = new long[4];
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1732.14099758);
      doubleArray0[1] = 2837098.3357394375;
      doubleArray0[2] = (-1732.14099758);
      doubleArray0[3] = (-1732.14099758);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1732.14099758), 2837098.3357394375, (-1732.14099758), (-1732.14099758)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 2837098.3357394375;
      doubleArray2[1] = (-1732.14099758);
      doubleArray2[2] = 100.0;
      doubleArray2[3] = (-1732.14099758);
      doubleArray2[4] = (-1732.14099758);
      doubleArray2[5] = 100.0;
      doubleArray2[6] = 2837098.3357394375;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray2, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[][] longArray0 = new long[2][1];
      long[] longArray1 = new long[4];
      long long0 = (-9223372036854775808L);
      longArray1[0] = (-9223372036854775808L);
      longArray1[1] = (-1984L);
      long long1 = (-1574L);
      longArray1[3] = (-1574L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1574L);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray0 = new double[7][4];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      doubleArray0[5] = null;
      doubleArray0[6] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      doubleArray0[0] = 1.0;
      int[] intArray0 = new int[9];
      intArray0[0] = (-535);
      intArray0[1] = (-535);
      intArray0[2] = (-535);
      intArray0[3] = (-535);
      intArray0[4] = (-535);
      intArray0[5] = (-535);
      intArray0[6] = (-535);
      intArray0[7] = (-535);
      intArray0[8] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-535), (-535), (-535), (-535), (-535), (-535), (-535), (-535), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-535), (-535), (-535), (-535), (-535), (-535), (-535), (-535), (-1)}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-535);
      floatArray0[1] = (float) (-1);
      boolean boolean0 = MathArrays.equals((float[]) null, floatArray0);
      assertArrayEquals(new float[] {(-535.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[2];
      double double0 = MathArrays.linearCombination(100.0, (-0.09088450866185192), 2.17333333333333325E18, 0.0, 1.8014398822861304E16, 1.8014398822861304E16);
      assertEquals(3.245185649491067E32, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 118;
      intArray0[1] = (-3115);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {118, (-3115)}, intArray0);
      assertArrayEquals(new int[] {118, (-3115)}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 118;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {118.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {236.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray2 = new int[4];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 118;
      intArray2[1] = (-3115);
      intArray2[2] = (-3115);
      intArray2[3] = 118;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray2, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2734.7171925278026);
      assertNotNull(double0);
      assertEquals(2734.7171925278026, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2734.7171925278026, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-770.9862F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1234.587F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-872.29F);
      floatArray0[7] = (-2401.62F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-770.9862F), 0.0F, 1234.587F, 0.0F, Float.NaN, 0.0F, (-872.29F), (-2401.62F)}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("T(Vq]+SSK5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.T(Vq]+SSK5
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Double double0 = new Double((-911.4756730662));
      assertNotNull(double0);
      assertEquals((-911.4756730662), (double)double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      int int0 = (-173);
      int int1 = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-535);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 3;
      floatArray1[1] = (float) 3;
      floatArray1[2] = (float) 3;
      floatArray1[3] = (float) (-535);
      floatArray1[4] = (float) 3;
      floatArray1[5] = (float) 3;
      floatArray1[6] = (float) (-535);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {(-535.0F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {3.0F, 3.0F, 3.0F, (-535.0F), 3.0F, 3.0F, (-535.0F)}, floatArray1, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, floatArray0.length);
      assertEquals(7, floatArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-535.0F);
      doubleArray0[1] = 3689.39;
      doubleArray0[2] = 535.0;
      doubleArray0[3] = 4103.8096;
      doubleArray0[4] = 2827098.3357394375;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (3,689.39 > 535)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-1779);
      longArray0[1] = (-1522L);
      longArray0[2] = (long) (-1779);
      longArray0[3] = (long) (-1779);
      longArray0[4] = (long) (-1779);
      longArray0[5] = (long) (-1779);
      longArray0[6] = (long) (-1779);
      longArray0[7] = (long) (-1779);
      longArray0[8] = (long) (-1779);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,779 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      int int1 = Integer.MAX_VALUE;
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(Integer.MAX_VALUE, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.scale(1.34217729E8, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 298583.81128364225;
      doubleArray0[1] = 6.52E18;
      doubleArray0[2] = (-721.4007547);
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = (-3662.752206);
      doubleArray0[5] = 1176.0;
      doubleArray0[6] = (-0.16666666666666666);
      doubleArray0[7] = (-6848.52);
      doubleArray0[8] = 1.5501688614738874E7;
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1.34217729E8;
      doubleArray2[1] = 1833.0464;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      doubleArray0[1] = 1.0;
      int[] intArray0 = new int[5];
      intArray0[0] = 185;
      intArray0[1] = 247;
      intArray0[2] = (-173);
      intArray0[3] = (-2147170124);
      intArray0[4] = 0;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {185, 247, (-173), (-2147170124), 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(5, intArray0.length);
      
      Double double0 = Double.valueOf((-4478.83420365404));
      assertNotNull(double0);
      assertEquals((-4478.83420365404), (double)double0, 0.01);
      
      Double double1 = new Double(0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Double[] doubleArray1 = new Double[8];
      doubleArray1[0] = double1;
      doubleArray1[1] = double1;
      doubleArray1[2] = (Double) 1.0;
      doubleArray1[3] = (Double) 1.0;
      doubleArray1[4] = (Double) (-4478.83420365404);
      doubleArray1[5] = double1;
      doubleArray1[6] = double0;
      doubleArray1[7] = (Double) 1.0;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination(3.834E-20, (-1325.5333654019), (double) doubleArray1[5], (-9098.9720427584));
      assertEquals((-5.0820949229508843E-17), double2, 0.01);
      assertEquals(8, doubleArray1.length);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) doubleArray1[0];
      doubleArray2[1] = (double) doubleArray1[4];
      doubleArray2[2] = (double) (-2147170124);
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray0, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
      
      MathArrays.scaleInPlace(2014.377812519348, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      double double0 = MathArrays.linearCombination((-1695.0913741900847), (double) Integer.MAX_VALUE, 0.0, (double) 0);
      assertEquals((-3.640181006243965E12), double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertTrue(boolean1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.52E18;
      Double double0 = new Double((-911.4756730662));
      assertNotNull(double0);
      assertEquals((-911.4756730662), (double)double0, 0.01);
      
      Double double1 = new Double((-0.16666666666666666));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.16666666666666666), (double)double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {6.52E18, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6.52E18, double2, 0.01);
      assertEquals(3, doubleArray0.length);
      
      MathArrays.scaleInPlace(4.25104E37, doubleArray0);
      assertArrayEquals(new double[] {2.77167808E56, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1779);
      Double double0 = new Double((-1779));
      assertNotNull(double0);
      assertEquals((-1779.0), (double)double0, 0.01);
      
      Double double1 = new Double((-1779));
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1779.0), (double)double1, 0.01);
      
      Double double2 = new Double((-1779));
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1779.0), (double)double2, 0.01);
      
      double double3 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double4 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(double4, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      Integer integer0 = new Integer(1135);
      assertNotNull(integer0);
      assertEquals(1135, (int)integer0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 1135;
      doubleArray0[2] = (double) 1135;
      doubleArray0[3] = (double) 1135;
      doubleArray0[4] = (double) 1135;
      doubleArray0[5] = (double) 1135;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 1135;
      doubleArray0[8] = (double) 1135;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 5.206150291559893E-8;
      double double2 = MathArrays.linearCombination((-1.0), (-1.0), 0.0, 5.206150291559893E-8, 5.206150291559893E-8, (-4226.0226));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.9997799869120887, double2, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-535);
      intArray0[1] = 3;
      intArray0[2] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-535), 3, 3}, intArray0);
      assertArrayEquals(new int[] {(-535), 3, 3}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("kv r3uFh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.kv r3uFh
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      long[] longArray0 = new long[4];
      long[][] longArray1 = new long[3][5];
      longArray1[0] = longArray0;
      longArray1[1] = longArray0;
      longArray1[2] = longArray0;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(3, longArray1.length);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2736.904107);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(2736.904107, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) doubleArray0[3];
      double double4 = MathArrays.distance(doubleArray1, doubleArray1);
      assertArrayEquals(new double[] {Double.NaN, 2736.904107}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(2, doubleArray1.length);
      
      double double5 = MathArrays.distanceInf(doubleArray1, doubleArray1);
      assertEquals(double5, double4, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 2736.904107}, doubleArray1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(2, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2736.904107);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals(2736.904107, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(35);
      assertNotNull(integer0);
      assertEquals(35, (int)integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(1, integerArray0.length);
      
      double[] doubleArray1 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Double double0 = Double.valueOf((-983.84));
      assertNotNull(double0);
      assertEquals((-983.84), (double)double0, 0.01);
      
      Double double1 = new Double(989.625555);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(989.625555, (double)double1, 0.01);
      
      Double[] doubleArray1 = new Double[2];
      doubleArray1[0] = double0;
      doubleArray1[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray1.length);
      
      double double2 = MathArrays.linearCombination((double) 0, 989.625555, 4.23719669792332E-8, (double) 0L);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(2736.904107, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int int0 = 2;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(2, (int)integer0);
      
      Integer integer1 = new Integer(2);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      
      Integer integer2 = new Integer(2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(2, (int)integer2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      integerArray0[2] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Double double0 = Double.valueOf((-983.84));
      assertNotNull(double0);
      assertEquals((-983.84), (double)double0, 0.01);
      
      Double double1 = new Double(989.625555);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(989.625555, (double)double1, 0.01);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = double0;
      doubleArray2[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-983.84);
      doubleArray3[1] = (-1398.8);
      double[] doubleArray4 = MathArrays.scale(498.461942467, doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-490406.7974767333), (-697248.5651228395)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-983.84), (-1398.8)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection2 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[1];
      String string0 = "KepC|WCF";
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      Integer integer1 = Integer.getInteger("KepC|WCF", integer0);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      
      integerArray0[0] = integer1;
      boolean boolean2 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection2, true);
      assertNotSame(mathArrays_OrderDirection2, mathArrays_OrderDirection0);
      assertSame(mathArrays_OrderDirection2, mathArrays_OrderDirection1);
      assertFalse(mathArrays_OrderDirection2.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, integerArray0.length);
      
      boolean boolean3 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray4);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertTrue(boolean3);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray3, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1779);
      floatArray0[1] = (float) (-1779);
      floatArray0[2] = (float) (-1779);
      floatArray0[3] = (float) (-1779);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1779.0F), (-1779.0F), (-1779.0F), (-1779.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1779);
      intArray0[1] = (-1779);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(intArray0, (-1779));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      Integer integer0 = new Integer(1135);
      assertNotNull(integer0);
      assertEquals(1135, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      int[] intArray2 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray2);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray2.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 1135;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1135.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 1288225.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int2);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[8][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Double double0 = Double.valueOf((-983.84));
      assertNotNull(double0);
      assertEquals((-983.84), (double)double0, 0.01);
      
      Double double1 = new Double(989.625555);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(989.625555, (double)double1, 0.01);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = double0;
      doubleArray2[1] = double1;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0L;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("kv r3uFh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.kv r3uFh
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      Double[] doubleArray0 = new Double[2];
      Double double1 = new Double(0.3333333333333333);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.3333333333333333, (double)double1, 0.01);
      
      doubleArray0[0] = double1;
      Double double2 = new Double(2827098.3357394375);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals(2827098.3357394375, (double)double2, 0.01);
      
      doubleArray0[1] = double2;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(2, doubleArray0.length);
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3;
      doubleArray1[1] = 0.0;
      double[] doubleArray2 = MathArrays.scale((-1398.8), doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4196.4), -0.0}, doubleArray2, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection1, false);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4196.4), -0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray2, doubleArray1);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4196.4), -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-1398.8), Double.NaN}, doubleArray3, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray2, doubleArray1);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4196.4), -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-4199.4), -0.0}, doubleArray4, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotEquals(double3, double0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray4));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray4));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {3.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-4196.4), -0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-4199.4), -0.0}, doubleArray4, 0.01);
      assertEquals(4202.4, double3, 0.01);
      assertEquals(2, doubleArray1.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray4.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 2308;
      intArray0[3] = 3;
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      int[] intArray1 = MathArrays.copyOf(intArray0, 1211);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 3, 2308, 3, 3, 3, 3}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1211, intArray1.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 3;
      intArray2[1] = 1211;
      intArray2[2] = 3;
      intArray2[3] = 1211;
      intArray2[4] = 1211;
      intArray2[5] = 1211;
      intArray2[6] = 3;
      intArray2[7] = 3;
      int int0 = MathArrays.distance1(intArray0, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 3, 2308, 3, 3, 3, 3}, intArray0);
      assertArrayEquals(new int[] {3, 1211, 3, 1211, 1211, 1211, 3, 3}, intArray2);
      assertEquals(7137, int0);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1805);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1805, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1805, (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-503));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((-503), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-591));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-591), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1504));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-1504), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-591));
      assertNotNull(integer7);
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals((-591), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2336);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertEquals(2336, (int)integer8);
      
      integerArray0[8] = integer8;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)integerArray0[2];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1920.5174648);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Double double1 = new Double((-1920.5174648));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-1920.5174648), (double)double1, 0.01);
      
      Pair<Object, Double> pair0 = new Pair<Object, Double>(class0, double1);
      assertNotNull(pair0);
      assertNotEquals((double)double1, (double)double0, 0.01);
      
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn(pair0).when(field0).getZero();
      int int0 = 19;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 19);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3936.7184172);
      doubleArray0[3] = 3056.10183;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.006443465802497E7), 0.0, (-1.5501688614738874E7), (-9336702.293499349)}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      MathArrays.scaleInPlace((-1695.0913741900847), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((-3811.5839840384), (-3811.5839840384), (-5180371.850679533), (double) 0);
      assertEquals(1.4528172467378043E7, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.006443465802497E7), 0.0, (-1.5501688614738874E7), (-9336702.293499349)}, doubleArray3, 0.01);
      assertEquals(2.701958359730798E7, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int[] intArray2 = new int[9];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 0;
      double double2 = MathArrays.distance(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1.0, double2, 0.01);
      assertEquals(9, intArray2.length);
      assertEquals(7, intArray0.length);
      
      MathArrays.scaleInPlace(3056.10183, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {6.130526770289949E10, 3056.10183, 4.736270793123464E10, 2.854325272372389E10}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3161);
      intArray0[1] = 1135;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3161), 1135}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 1135;
      longArray1[1] = (long) (-3161);
      longArray1[2] = (-878L);
      longArray1[3] = (long) 1135;
      longArray1[4] = (-878L);
      longArray1[5] = (long) 1135;
      longArray1[6] = (long) (-3161);
      longArray1[7] = (long) 1135;
      longArray1[8] = (-878L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1984L);
      longArray2[1] = (long) (-3161);
      double double1 = MathArrays.linearCombination((double) 1135L, (double) 1135, (double) (-3161L), (double) 1135L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2299510.0), double1, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      int int0 = (-3);
      int int1 = (-42);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-3), (-42));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(1805);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1805, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[1]);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(1805, (int)integer3);
      assertEquals(9, integerArray0.length);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-503));
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertEquals((-503), (int)integer4);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-591));
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-591), (int)integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1504));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-1504), (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-591));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals((-591), (int)integer7);
      
      integerArray0[7] = integer7;
      Integer integer8 = new Integer(2336);
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer2));
      assertEquals(2336, (int)integer8);
      
      integerArray0[8] = integer8;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.7249995199969751;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1227.58736323);
      doubleArray0[3] = 1.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.7249995199969751, 1.0, (-1227.58736323), 1.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = 1197;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 1197);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.7249995199969751, 1.0, (-1227.58736323), 1.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(1197, doubleArray1.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 1197;
      longArray0[1] = (long) 1197;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {1197L, 1197L}, longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not increasing (1 > -1,227.587)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3811.5839840384);
      doubleArray0[2] = (-3811.5839840384);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1063.38805872);
      doubleArray0[5] = (-3811.5839840384);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-3,811.584 <= -3,811.584)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-294.8283282895357);
      doubleArray0[2] = (-460.0642);
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      Integer integer0 = new Integer(1135);
      assertNotNull(integer0);
      assertEquals(1135, (int)integer0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1135;
      doubleArray0[1] = (double) 1135;
      doubleArray0[2] = (double) 1135;
      doubleArray0[3] = (double) 1135;
      doubleArray0[4] = (double) 1135;
      doubleArray0[5] = (double) 1135;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 1135;
      doubleArray0[8] = (double) 1135;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 1135.0, 0.0, 1135.0, 1135.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      double double2 = MathArrays.safeNorm(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, doubleArray1.length);
      
      double double3 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(1, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3056.10183;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = 3056.10183;
      doubleArray0[5] = 3056.10183;
      doubleArray0[6] = 3056.10183;
      doubleArray0[7] = 3056.10183;
      doubleArray0[8] = (double) 0.0F;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9339758.395329349, 0.0, 0.0, 0.0, 9339758.395329349, 9339758.395329349, 9339758.395329349, 9339758.395329349, 0.0}, doubleArray2, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3056.10183, 0.0, 0.0, 0.0, 3056.10183, 3056.10183, 3056.10183, 3056.10183, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {9339758.395329349, 0.0, 0.0, 0.0, 9339758.395329349, 9339758.395329349, 9339758.395329349, 9339758.395329349, 0.0}, doubleArray2, 0.01);
      assertFalse(boolean1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertEquals(9, doubleArray2.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean2);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray2, (-392));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-3936.7184172);
      doubleArray0[3] = 3056.10183;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray0, doubleArray2);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.006443465802497E7), 0.0, (-1.5501688614738874E7), (-9336702.293499349)}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      MathArrays.scaleInPlace((-1695.0913741900847), doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((-3811.5839840384), (-3811.5839840384), (-5180371.850679533), (double) 0);
      assertEquals(1.4528172467378043E7, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.006443465802497E7), 0.0, (-1.5501688614738874E7), (-9336702.293499349)}, doubleArray3, 0.01);
      assertEquals(2.701958359730798E7, double1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray3, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {7592033.22504148, (-1695.0913741900847), 6673097.431610963, (-5180371.850679533)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {(-2.006443465802497E7), 0.0, (-1.5501688614738874E7), (-9336702.293499349)}, doubleArray3, 0.01);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1920.5174648);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Double>[] pairArray0 = MathArrays.buildArray(field0, 19);
      assertNotNull(pairArray0);
      assertEquals(19, pairArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(1920.5174648, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double[][] doubleArray1 = new double[0][9];
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,920.517 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double double0 = new Double(253.5);
      assertNotNull(double0);
      assertEquals(253.5, (double)double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 274);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(274, doubleArray1.length);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1920.5174648);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Double>[] pairArray0 = MathArrays.buildArray(field0, 19);
      assertNotNull(pairArray0);
      assertEquals(19, pairArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(1920.5174648, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 19, (-1155.761195), 0.0, (-2894.8574136736), 1.0, (double) 19, Double.NEGATIVE_INFINITY, 3.141592653589793);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = 19;
      intArray0[3] = 19;
      intArray0[4] = 19;
      intArray0[5] = 134217729;
      intArray0[6] = 19;
      boolean boolean1 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      Double double0 = Double.valueOf((-983.84));
      assertNotNull(double0);
      assertEquals((-983.84), (double)double0, 0.01);
      
      Double double1 = new Double(989.625555);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(989.625555, (double)double1, 0.01);
      
      Double[] doubleArray2 = new Double[2];
      doubleArray2[0] = double0;
      doubleArray2[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray2, mathArrays_OrderDirection0, true);
      assertTrue(boolean0);
      assertEquals(2, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (-983.84);
      doubleArray3[1] = (-1398.8);
      double[] doubleArray4 = MathArrays.scale(498.461942467, doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-490406.7974767333), (-697248.5651228395)}, doubleArray4, 0.01);
      assertArrayEquals(new double[] {(-983.84), (-1398.8)}, doubleArray3, 0.01);
      assertEquals(2, doubleArray4.length);
      assertEquals(2, doubleArray3.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray4));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray0));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      
      doubleArray5[0] = 795.32835;
      doubleArray5[1] = (double) doubleArray2[1];
      doubleArray5[2] = (-1.0);
      doubleArray5[3] = 989.625555;
      doubleArray5[4] = (-1.0);
      try { 
        MathArrays.ebeDivide(doubleArray5, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = (-1316.289);
      doubleArray0[0] = (-1316.289);
      double double1 = 265.6059458314;
      doubleArray0[1] = 265.6059458314;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1316.289);
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 6.52E18;
      doubleArray0[1] = (-0.16666666666666666);
      doubleArray0[2] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-606);
      intArray0[1] = 118;
      intArray0[2] = 9;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-606), 118, 9}, intArray0);
      assertArrayEquals(new int[] {(-606), 118, 9}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(3, intArray1.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, (-0.16666666666666666), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-0.3333333333333333), 0.0}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {(-606), 118, 9}, intArray0);
      assertEquals(0, int0);
      assertEquals(3, intArray0.length);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) (-606);
      doubleArray2[1] = (double) 118;
      doubleArray2[2] = (double) (-606);
      doubleArray2[3] = (double) 9;
      doubleArray2[4] = (-2391.259448754354);
      boolean boolean0 = MathArrays.equals(doubleArray2, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {6.52E18, (-0.16666666666666666), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-0.3333333333333333), 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-606.0), 118.0, (-606.0), 9.0, (-2391.259448754354)}, doubleArray2, 0.01);
      assertFalse(boolean0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(5, doubleArray2.length);
      
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (6,520,000,000,000,000,000 >= -0.167)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1920.5174648);
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Pair<Object, Double>[] pairArray0 = MathArrays.buildArray(field0, 19);
      assertNotNull(pairArray0);
      assertEquals(19, pairArray0.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(1920.5174648, double1, 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double2 = MathArrays.linearCombination((double) 19, (-1155.761195), 0.0, (-2894.8574136736), 1.0, (double) 19, 1920.5174648, 3.141592653589793);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-15906.979146493426), double2, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 19;
      intArray0[1] = 19;
      intArray0[2] = 19;
      intArray0[3] = 19;
      intArray0[4] = 19;
      intArray0[5] = 19;
      intArray0[6] = 19;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, 19}, intArray1);
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, 19}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3841.0349296)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertArrayEquals(new int[] {19, 19, 19, 19, 19, 19, 19}, intArray0);
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray1, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-3841.0349296)}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      MathArrays.checkOrder(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-1920.5174648)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("edYd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.edYd
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1779);
      floatArray0[1] = (float) (-1779);
      floatArray0[2] = (float) (-1779);
      floatArray0[3] = (float) (-1779);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1779.0F), (-1779.0F), (-1779.0F), (-1779.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double3 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(6, doubleArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1779);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-3073);
      intArray0[0] = (-3073);
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {(-3073)}, intArray0);
      assertEquals(0, int1);
      assertEquals(1, intArray0.length);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-3073);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-3073);
      doubleArray0[3] = (double) (-3073);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-3073);
      doubleArray0[6] = (double) (-3073);
      doubleArray0[7] = (double) (-3073);
      doubleArray0[8] = (double) (-3073);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,073 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1735.4233060008), (-1735.4233060008), 1284.6703, (-1362.098808154271), (-1735.4233060008), 1284.6703);
      assertEquals((-967600.6126374828), double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1284.6703;
      doubleArray0[1] = (-1362.098808154271);
      doubleArray0[2] = 1.2246467991473532E-16;
      doubleArray0[3] = (-967600.6126374828);
      doubleArray0[4] = (-967600.6126374828);
      doubleArray0[5] = (-967600.6126374828);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[2][9];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1284.6703, 1.2246467991473532E-16, (-1362.098808154271), (-967600.6126374828), (-967600.6126374828), (-967600.6126374828)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 3266.4406203651);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1284.6703, 1.2246467991473532E-16, (-1362.098808154271), (-967600.6126374828), (-967600.6126374828), (-967600.6126374828)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1.4455645125299574), (-1.378023570118198E-19), 1.5326902938654101, 1088.7844981945882, 1088.7844981945882, 1088.7844981945882}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double double1 = MathArrays.linearCombination(1.2246467991473532E-16, (-967600.6126374828), (-1048.7208565790713), 1.34217729E8, (-967600.6126374828), (-967600.6126374828), 124.0, (-1877.356041966));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7.954937810593052E11, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3161);
      intArray0[1] = 1135;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3161), 1135}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      long[][] longArray0 = new long[4][8];
      long[] longArray1 = new long[9];
      longArray1[0] = (long) 1135;
      longArray1[1] = (long) (-3161);
      longArray1[2] = (-878L);
      longArray1[3] = (long) 1135;
      longArray1[4] = (-878L);
      longArray1[5] = (long) 1135;
      longArray1[6] = (long) (-3161);
      longArray1[7] = (long) 1135;
      longArray1[8] = (-878L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1984L);
      longArray2[1] = (long) (-3161);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[2];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (long) 1135;
      longArray3[1] = (-878L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (-1984L);
      longArray4[1] = (-878L);
      longArray4[2] = (-1984L);
      longArray4[3] = (long) 1135;
      longArray4[4] = (long) (-3161);
      longArray4[5] = (long) 1135;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 2 while others have length 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 1450.421169883673;
      doubleArray0[2] = 498.461942467;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 1450.421169883673, 498.461942467}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 1450.421169883673, 498.461942467}, doubleArray1, 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-294.8283282895357);
      doubleArray0[2] = (-460.0642);
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection1, false, false);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean1);
      assertEquals(4, doubleArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 2427;
      intArray0[2] = 2427;
      intArray0[3] = 2427;
      intArray0[4] = 134217729;
      intArray0[5] = 134217729;
      intArray0[6] = (-535);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {3, 2427, 2427, 2427, 134217729, 134217729, (-535)}, intArray1);
      assertArrayEquals(new int[] {3, 2427, 2427, 2427, 134217729, 134217729, (-535)}, intArray0);
      assertEquals(7, intArray1.length);
      assertEquals(7, intArray0.length);
      
      boolean boolean2 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("k& rw3uFhH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.k& rw3uFhH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      Integer integer0 = new Integer((-1730));
      assertNotNull(integer0);
      assertEquals((-1730), (int)integer0);
      
      Integer integer1 = new Integer((-1730));
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1730), (int)integer1);
      
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      Integer integer3 = new Integer((-1730));
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals((-1730), (int)integer3);
      
      Integer integer4 = Integer.getInteger("\"vlQkGh$v:*>", integer0);
      assertNotNull(integer4);
      assertTrue(integer0.equals((Object)integer3));
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals((-1730), (int)integer4);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = integer4;
      integerArray0[1] = integer1;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = integer0;
      integerArray0[5] = integer3;
      integerArray0[6] = integer4;
      integerArray0[7] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int[] intArray0 = new int[1];
      intArray0[0] = (-1779);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-1779)}, intArray0);
      assertArrayEquals(new int[] {(-1779)}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      Double double0 = Double.valueOf((-2905.589172));
      assertNotNull(double0);
      assertEquals((-2905.589172), (double)double0, 0.01);
      
      Double double1 = new Double((-227.36));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-227.36), (double)double1, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Double[] doubleArray1 = new Double[9];
      doubleArray1[0] = double1;
      Double double2 = new Double((-1432.35));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-1432.35), (double)double2, 0.01);
      
      doubleArray1[1] = double2;
      doubleArray1[2] = double1;
      doubleArray1[3] = double1;
      doubleArray1[4] = double1;
      doubleArray1[5] = double0;
      doubleArray1[6] = double0;
      doubleArray1[7] = double1;
      doubleArray1[8] = double1;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertFalse(boolean0);
      assertEquals(9, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.scale(631.065, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, false);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray3 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray3.length);
      
      double[] doubleArray4 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray4.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1135;
      double double0 = new Integer(1135);
      assertEquals(1135, double0, 0.01);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1135, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(7, intArray1.length);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(1, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("org.apache.commons.math3.util.MathArrays$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.org.apache.commons.math3.util.MathArrays$2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2442);
      assertNotNull(integer0);
      assertEquals(2442, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0, 938);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2442, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(938, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-2335);
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, 138, (-2335));
      assertNotNull(objectArray0);
      assertEquals(138, objectArray0.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 138;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2335);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,335 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Double double0 = new Double(2734.7171925278026);
      assertNotNull(double0);
      assertEquals(2734.7171925278026, (double)double0, 0.01);
      
      Double double1 = new Double(959.0);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(959.0, (double)double1, 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2734.7171925278026;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1779);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1542.271053685946);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1779);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1779);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1779);
      double[][] doubleArray1 = new double[5][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1542.271053685946), 0.0, 0.0, (-1779.0), 0.0, (-1779.0), 0.0, (-1779.0)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1603.56047);
      doubleArray0[1] = 763.3798;
      double double0 = (-607.964);
      doubleArray0[2] = (-607.964);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      Integer integer1 = Integer.getInteger("cannot format a {0} instance as a 3D vector", integer0);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      
      Integer[] integerArray0 = new Integer[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1603.56047);
      doubleArray0[1] = 763.3798;
      doubleArray0[2] = (-607.964);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1603.56047), 763.3798, (-607.964), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination((-0.5), Double.NaN, (-3811.5839840384), 301.6);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1779);
      double double0 = MathArrays.linearCombination(1.0, 620.167, (-1712.862), 372.727223, (double) (-1779), (double) 0);
      assertEquals((-637810.129642226), double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = MathArrays.linearCombination(1693.3626, 0.0, 1693.3626, 0.0, 1693.3626, 208.503, 164.90639, 208.503);
      assertEquals(387454.65922196995, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(1693.3626, 0.7937005259840998, 1152.9145, 3.834E-20, 1152.9145, 164.90639);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(191466.9909599568, double1, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = (-1352L);
      longArray0[6] = (-1352L);
      longArray0[7] = (-1492L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,352 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      double double0 = MathArrays.linearCombination(1.0, 0.0, (-4478.83420365404), (-1473.95382747), 324.468573, 1293.666);
      assertEquals(7021348.77803804, double0, 0.01);
      
      long[] longArray0 = new long[0];
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2736.904107);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(2736.904107, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = Double.valueOf((-1.0));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertEquals((-1.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale((-1398.8), doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 641;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int0);
      assertEquals(0, intArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int1);
      assertEquals(0, intArray0.length);
      
      int int2 = MathArrays.distance1(intArray0, intArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, int2);
      assertEquals(0, intArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray2 = new double[8][8];
      doubleArray2[0] = doubleArray1;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray1;
      doubleArray2[5] = doubleArray0;
      doubleArray2[6] = doubleArray0;
      doubleArray2[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-983.84)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1168.5);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, (-1168.5), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(13, doubleArray1.length);
      
      long[][] longArray0 = new long[5][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[8];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-865L);
      longArray2[1] = (-587L);
      longArray2[2] = 1L;
      longArray2[3] = (-865L);
      longArray2[4] = (-254L);
      longArray2[5] = 0L;
      longArray2[6] = (-865L);
      longArray2[7] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[6];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = 1L;
      longArray3[1] = (-587L);
      longArray3[2] = (-865L);
      longArray3[3] = (-254L);
      longArray3[4] = (-1497L);
      longArray3[5] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[0];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray0[3] = longArray4;
      long[] longArray5 = new long[1];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = 0L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -865 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1171.7529;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 20.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1171.7529, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1171.7529, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1171.7529;
      int[] intArray0 = new int[9];
      intArray0[0] = (-143);
      intArray0[1] = 91;
      intArray0[2] = 0;
      intArray0[3] = (-1401);
      intArray0[4] = (-143);
      intArray0[5] = (-1401);
      intArray0[6] = (-143);
      intArray0[7] = (-3532);
      intArray0[8] = (-3532);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-143), 91, 0, (-1401), (-143), (-1401), (-143), (-3532), (-3532)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 1450.421169883673);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1450.421169883673, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2346;
      intArray0[1] = 386;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {2346, 386}, intArray0);
      assertEquals(0, int0);
      assertEquals(2, intArray0.length);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 386;
      longArray0[1] = (long) 386;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertArrayEquals(new long[] {386L, 386L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1450.421169883673, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.34217729E8, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1450.421169883673, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0806479745188304E-5, Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, doubleArray2.length);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = (double) 386L;
      doubleArray3[1] = (double) 386L;
      try { 
        MathArrays.ebeSubtract(doubleArray3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(2442);
      assertNotNull(integer0);
      assertEquals(2442, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = Integer.valueOf(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(int0);
      assertNotNull(integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = Integer.getInteger(" l", integer2);
      assertNull(integer4);
      
      integerArray0[4] = null;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-4478.83420365404);
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      double double1 = (-3936.7184172);
      doubleArray0[2] = (-3936.7184172);
      double double2 = 3056.10183;
      doubleArray0[3] = 3056.10183;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.0059955823821317E7, 1.0, 1.5497751896321675E7, 9339758.395329349}, doubleArray2, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray2.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(2, intArray0.length);
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertTrue(boolean1 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray1, 0.01);
      assertTrue(boolean1);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray0, 0);
      assertNotNull(doubleArray3);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {(-4478.83420365404), 1.0, (-3936.7184172), 3056.10183}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray3, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(0, doubleArray3.length);
      
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, intArray1.length);
      assertEquals(2, intArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1732.14099758), (-1732.14099758), (-1732.14099758), 100.0, 0.0, 0.0);
      assertEquals(2827098.3357394375, double0, 0.01);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 0L;
      longArray0[1] = (-1492L);
      longArray0[2] = (-1352L);
      longArray0[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,492 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-294.8283282895357);
      doubleArray0[2] = (-460.0642);
      doubleArray0[3] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.0026528980258468506), 0.7821494900830364, 1.2205034079428105, -0.0}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1592.0F;
      floatArray0[4] = 670.5142F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 1592.0F, 670.5142F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.x
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2429.52608662);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2293.1951);
      doubleArray0[4] = (-2768.28070632);
      doubleArray0[5] = 1548.364045446194;
      doubleArray0[6] = 4491.979523054675;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-3811.5839840384);
      doubleArray0[2] = (-4223.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1063.38805872);
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 2 and 3 are not strictly decreasing (-4,223 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 4118.690879482004;
      doubleArray0[2] = (-1026.268);
      doubleArray0[3] = 1737.004452707;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 2501.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-538.11873582896);
      doubleArray0[8] = (-374.8);
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 4118.690879482004, (-1026.268), 1737.004452707, 0.0, 2501.0, 0.0, (-538.11873582896), (-374.8)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      double double0 = MathArrays.linearCombination(Double.POSITIVE_INFINITY, 715.52, 3.834E-20, 0.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(9, doubleArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 524;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {524}, intArray1);
      assertArrayEquals(new int[] {524}, intArray0);
      assertEquals(1, intArray1.length);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-9223372036854775808L);
      longArray0[1] = 507L;
      long long0 = (-2863L);
      longArray0[2] = (-2863L);
      long long1 = 0L;
      longArray0[3] = 0L;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -9,223,372,036,854,775,808 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(2, floatArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 131.02;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 290.444580501;
      MathArrays.scaleInPlace(290.444580501, doubleArray0);
      assertArrayEquals(new double[] {84358.05434240188}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {84358.05434240188}, doubleArray0, 0.01);
      assertTrue(boolean0);
      assertEquals(1, doubleArray0.length);
      
      float[] floatArray0 = new float[0];
      float[] floatArray1 = new float[6];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 688.8317F;
      floatArray1[3] = 2941.6F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (-729.923F);
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 688.8317F, 2941.6F, 0.0F, (-729.923F)}, floatArray1, 0.01F);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      boolean boolean2 = MathArrays.equals(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 688.8317F, 2941.6F, 0.0F, (-729.923F)}, floatArray1, 0.01F);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      assertEquals(6, floatArray1.length);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-3121);
      intArray0[3] = (-2698);
      intArray0[4] = 0;
      intArray0[5] = (-392);
      intArray0[6] = 0;
      intArray0[7] = 149;
      intArray0[8] = 0;
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertArrayEquals(new int[] {(-1), 0, (-3121), (-2698), 0, (-392), 0, 149, 0}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[][] longArray0 = new long[5][3];
      long[] longArray1 = new long[5];
      longArray1[0] = 746L;
      longArray1[1] = 416L;
      longArray1[2] = (-1035L);
      longArray1[3] = (-1984L);
      longArray1[4] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = (-1035L);
      longArray2[2] = (-1984L);
      longArray2[3] = (-1L);
      longArray2[4] = (-1035L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[4];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1L;
      longArray3[1] = (-1984L);
      longArray3[2] = (-1L);
      longArray3[3] = 746L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[9];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 1909L;
      longArray4[1] = 1L;
      longArray4[2] = (-1L);
      longArray4[3] = 1L;
      longArray4[4] = (-1L);
      longArray4[5] = (-1984L);
      longArray4[6] = 746L;
      longArray4[7] = 416L;
      longArray4[8] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      
      longArray5[0] = (-1035L);
      longArray5[1] = (-1L);
      longArray5[2] = 1909L;
      longArray5[3] = (-1035L);
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,035 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1171.7529;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.POSITIVE_INFINITY;
      doubleArray0[6] = 20.0;
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1171.7529, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray1, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1171.7529, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 20.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1373004.85865841, 1.0, 0.0, 0.0, Double.NaN, Double.POSITIVE_INFINITY, 400.0}, doubleArray2, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = Double.POSITIVE_INFINITY;
      doubleArray3[2] = 1.0;
      doubleArray3[3] = 1171.7529;
      double[] doubleArray4 = MathArrays.copyOf(doubleArray3);
      assertNotNull(doubleArray4);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, 1.0, 1171.7529}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.POSITIVE_INFINITY, 1.0, 1171.7529}, doubleArray4, 0.01);
      assertEquals(4, doubleArray3.length);
      assertEquals(4, doubleArray4.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (1,373,004.859 >= 1)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2277.46796937785);
      doubleArray0[4] = (-2012.8734811255204);
      doubleArray0[5] = 1.34217729E8;
      doubleArray0[6] = 1766.7999146;
      doubleArray0[7] = (-124.7993);
      doubleArray0[8] = (-2425.436924);
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-2012.8734811255204);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1766.7999146;
      doubleArray1[4] = (-1130.32663);
      doubleArray1[5] = (-1430.484072575);
      doubleArray1[6] = 1766.7999146;
      doubleArray1[7] = 0.0;
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-294.8283282895357);
      doubleArray0[2] = (-460.0642);
      doubleArray0[3] = (-294.8283282895357);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), (-294.8283282895357)}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(4, doubleArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2.0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, (-294.8283282895357), (-460.0642), (-294.8283282895357)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-0.0019070851766255536), 0.5622627345302659, 0.877381616116094, 0.5622627345302659}, doubleArray1, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, doubleArray1.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1592.0F;
      floatArray0[4] = 670.5142F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new float[] {(-1.0F), (-1.0F), 0.0F, 1592.0F, 670.5142F}, floatArray0, 0.01F);
      assertTrue(boolean1);
      assertEquals(5, floatArray0.length);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2448);
      intArray0[1] = 2;
      intArray0[2] = 58;
      intArray0[3] = (-1244);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-2448), 2, 58, (-1244)}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4, intArray0.length);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 58;
      try { 
        MathArrays.ebeMultiply(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = 664.3217870333432;
      doubleArray0[3] = 1650.15357246;
      doubleArray0[4] = 823.700911;
      doubleArray0[5] = 526.56792;
      doubleArray0[6] = 3566.5;
      doubleArray0[7] = (-2186.9530365);
      doubleArray0[8] = (-1193.9);
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1650.15357246;
      doubleArray1[1] = 1650.15357246;
      doubleArray1[2] = 664.3217870333432;
      doubleArray1[3] = (-2186.9530365);
      doubleArray1[4] = 1650.15357246;
      doubleArray1[5] = (-2186.9530365);
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {1.0, 100.0, 664.3217870333432, 1650.15357246, 823.700911, 526.56792, 3566.5, (-2186.9530365), (-1193.9)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1650.15357246, 1650.15357246, 664.3217870333432, (-2186.9530365), 1650.15357246, (-2186.9530365)}, doubleArray1, 0.01);
      assertFalse(boolean0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray0);
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {1.0, 100.0, 664.3217870333432, 1650.15357246, 823.700911, 526.56792, 3566.5, (-2186.9530365), (-1193.9)}, doubleArray0, 0.01);
      assertEquals(2.30581712584416E7, double0, 0.01);
      assertEquals(9, doubleArray0.length);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertNotNull(mathArrays_OrderDirectionArray1);
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      
      long[][] longArray0 = new long[8][4];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1252L);
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 1L;
      longArray1[4] = 10000L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 10000L;
      longArray2[3] = 1L;
      longArray2[4] = 0L;
      longArray2[5] = (-1252L);
      longArray2[6] = 10000L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = (-1252L);
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 1L;
      longArray3[5] = 1L;
      longArray3[6] = (-1252L);
      longArray3[7] = 0L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      
      longArray4[0] = 0L;
      longArray4[1] = 0L;
      longArray4[2] = 10000L;
      longArray4[3] = (-1252L);
      longArray4[4] = 10000L;
      longArray4[5] = (-1252L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[3];
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 1L;
      longArray5[1] = (-1252L);
      longArray5[2] = 0L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[6];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray1));
      
      longArray6[0] = 10000L;
      longArray6[1] = 1L;
      longArray6[2] = 0L;
      longArray6[3] = 1L;
      longArray6[4] = 0L;
      longArray6[5] = 2644L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[4];
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray5));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray4));
      
      longArray7[0] = (-1252L);
      longArray7[1] = 0L;
      longArray7[2] = 10000L;
      longArray7[3] = 1L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 7 while others have length 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1168.5);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 3497.1;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-1168.5), 0.0, 0.0, Double.NaN, 0.0, 3497.1}, doubleArray0, 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(7, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      doubleArray0[0] = null;
      doubleArray0[1] = null;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1029.896185566913;
      doubleArray1[2] = 389.827299263764;
      doubleArray1[3] = 2117.0275;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3.141592653589793);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = 0.0;
      doubleArray0[2] = doubleArray1;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-3161);
      intArray0[1] = 1135;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertArrayEquals(new int[] {(-3161), 1135}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, intArray0.length);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double[] doubleArray0 = new Double[6];
      Double double0 = new Double(2736.904107);
      assertNotNull(double0);
      assertEquals(2736.904107, (double)double0, 0.01);
      
      doubleArray0[0] = double0;
      Double double1 = new Double((double) doubleArray0[0]);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(2736.904107, (double)double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[1] = double1;
      Double double2 = new Double((double) doubleArray0[1]);
      assertNotNull(double2);
      assertEquals((double)double2, (double)double0, 0.01);
      assertEquals((double)double2, (double)double1, 0.01);
      assertEquals(2736.904107, (double)double2, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[2] = double2;
      Double double3 = new Double(2736.904107);
      assertNotNull(double3);
      assertEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double2, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(2736.904107, (double)double3, 0.01);
      
      doubleArray0[3] = double3;
      Double double4 = Double.valueOf((-1.0));
      assertNotNull(double4);
      assertNotEquals((double)double4, (double)double1, 0.01);
      assertNotEquals((double)double4, (double)double2, 0.01);
      assertNotEquals((double)double4, (double)double0, 0.01);
      assertNotEquals((double)double4, (double)double3, 0.01);
      assertEquals((-1.0), (double)double4, 0.01);
      
      doubleArray0[4] = double4;
      Double double5 = new Double((double) doubleArray0[4]);
      assertNotNull(double5);
      assertNotEquals((double)double5, (double)double1, 0.01);
      assertEquals((double)double5, (double)double4, 0.01);
      assertNotEquals((double)double5, (double)double3, 0.01);
      assertNotEquals((double)double5, (double)double2, 0.01);
      assertNotEquals((double)double5, (double)double0, 0.01);
      assertEquals((-1.0), (double)double5, 0.01);
      assertEquals(6, doubleArray0.length);
      
      doubleArray0[5] = double5;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = MathArrays.scale((-1398.8), doubleArray1);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, doubleArray2.length);
      assertEquals(0, doubleArray1.length);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 641;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-1970);
      intArray0[4] = 1;
      intArray0[5] = 4008;
      intArray0[6] = 506;
      intArray0[7] = 263;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {641, 0, 0, (-1970), 1, 4008, 506, 263}, intArray0);
      assertEquals(0, int0);
      assertEquals(8, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2999.0;
      doubleArray0[1] = 1047.936682929934;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2822.949184987);
      doubleArray0[4] = 398.82861;
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {1.7976931348623157E308, 0.0, 0.0, Double.NaN, 398.82861, (-2822.949184987), Double.NEGATIVE_INFINITY, 1047.936682929934, 2999.0}, doubleArray0, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer(294);
      assertNotNull(integer0);
      assertEquals(294, (int)integer0);
      
      integerArray0[0] = integer0;
      int int0 = 0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = Integer.valueOf(294);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(294, (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[0]);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(294, (int)integer4);
      assertEquals(8, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((int) integerArray0[3]);
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)integer4));
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals(294, (int)integer5);
      assertEquals(8, integerArray0.length);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(173);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals(173, (int)integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer(int0);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(integer7.equals((Object)int0));
      assertTrue(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertTrue(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertEquals(0, (int)integer7);
      
      integerArray0[7] = integer7;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection1, false);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertFalse(boolean0);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 795.32835;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 1630.25;
      doubleArray0[4] = 837.2;
      doubleArray0[5] = 1713.998123;
      doubleArray0[6] = (-508.066714715247);
      doubleArray0[7] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (795.328 > 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Field<String> field0 = (Field<String>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 0;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1603.56047);
      doubleArray0[1] = 763.3798;
      doubleArray0[2] = (-607.964);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertArrayEquals(new double[] {(-1603.56047), 0.0, 0.0, 763.3798, (-607.964), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1603.56047), 0.0, 0.0, 763.3798, (-607.964), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, 1.0, 1.0, Double.NaN}, doubleArray2, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray2.length);
      
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 763.3798;
      doubleArray3[2] = (-607.964);
      doubleArray3[3] = 0.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray3, doubleArray3);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 763.3798, (-607.964), 0.0}, doubleArray3, 0.01);
      assertTrue(boolean0);
      assertEquals(4, doubleArray3.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2096.16559610945);
      doubleArray0[1] = (-769.0);
      doubleArray0[2] = (-3359.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 332.8393324;
      doubleArray0[5] = 928.361156049422;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-1555.0856580325);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 928.361156049422;
      doubleArray2[1] = 928.361156049422;
      doubleArray2[2] = (-3359.0);
      doubleArray2[3] = (-2096.16559610945);
      doubleArray2[4] = (-1555.0856580325);
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 8
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2784.37694141;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.34217729E8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {1.0, 2784.37694141, 0.0, 1.34217729E8, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1779);
      floatArray0[1] = (float) (-1779);
      floatArray0[2] = (float) (-1779);
      floatArray0[3] = (float) (-1779);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {(-1779.0F), (-1779.0F), (-1779.0F), (-1779.0F)}, floatArray0, 0.01F);
      assertTrue(boolean0);
      assertEquals(4, floatArray0.length);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean1);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(6, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Pair<Object, Object>>) null, (-1779), 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = MathArrays.linearCombination(714.269, 1.0, 1.0, 714.269, 3704.12102232922, 3704.12102232922, 100.0, 714.269);
      assertEquals(1.3793367986061266E7, double0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 898;
      intArray0[1] = 2;
      intArray0[2] = (-1364);
      intArray0[3] = 1086;
      intArray0[4] = (-1740);
      intArray0[5] = 300;
      intArray0[6] = (-1);
      intArray0[7] = (-1067);
      intArray0[8] = 2750;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertArrayEquals(new int[] {898, 2, (-1364), 1086, (-1740), 300, (-1), (-1067), 2750}, intArray0);
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.0);
      double double2 = 0.0;
      double double3 = (-149.4);
      double double4 = MathArrays.linearCombination(0.0, 0.0, 0.0, (-1.0), (-1.0), 0.0, 0.0, (-149.4));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      Field<Double> field0 = (Field<Double>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 1213;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1213, 1213);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2905.589172);
      doubleArray0[1] = 1450.421169883673;
      doubleArray0[2] = 498.461942467;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (1,450.421 >= 498.462)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1347.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, (-1347.0), 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = (-732);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<String>) null, (-732));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.7976931348623157E308;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = (-305.3048851563769);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5119.81);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.304E19;
      MathArrays.distance(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.304E19, 1.304E19, 0.0, 0.0, 1.0E-5, 0.0, (-1868.974881), 0.0);
      long[][] longArray0 = new long[7][6];
      long[] longArray1 = new long[2];
      longArray1[0] = (-1570L);
      longArray1[1] = (-1L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[5];
      longArray2[0] = (-1570L);
      longArray2[1] = (-1570L);
      longArray2[2] = (-1570L);
      longArray2[3] = (-1570L);
      longArray2[4] = (-1570L);
      longArray0[1] = longArray2;
      long[] longArray3 = new long[0];
      longArray0[2] = longArray3;
      long[] longArray4 = new long[3];
      longArray4[0] = (-1L);
      longArray4[1] = (-1570L);
      longArray4[2] = (-1L);
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      longArray5[0] = (-1570L);
      longArray5[1] = (-1L);
      longArray5[2] = (-1L);
      longArray5[3] = (-1570L);
      longArray0[4] = longArray5;
      long[] longArray6 = new long[8];
      longArray6[0] = (-1570L);
      longArray6[1] = (-1L);
      longArray6[2] = (-1L);
      longArray6[3] = (-1570L);
      longArray6[4] = (-1L);
      longArray6[5] = (-1L);
      longArray6[6] = (-878L);
      longArray6[7] = (-1570L);
      longArray0[5] = longArray6;
      long[] longArray7 = new long[5];
      longArray7[0] = (-1L);
      longArray7[1] = (-878L);
      longArray7[2] = (-878L);
      longArray7[3] = (-878L);
      longArray7[4] = (-878L);
      longArray0[6] = longArray7;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 5 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.7976931348623157E308;
      doubleArray0[0] = 1.7976931348623157E308;
      MathArrays.ebeDivide(doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = (-1376);
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 0, (-1376));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1920.5174648);
      MathArrays.distance(doubleArray0, doubleArray0);
      Field<Pair<Object, Double>> field0 = (Field<Pair<Object, Double>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int0 = 19;
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[1];
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-983.84);
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-983.84));
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, false);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-983.84)}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      double[] doubleArray3 = MathArrays.ebeSubtract(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {984.84}, doubleArray3, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, (-2345.2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 779.47934305;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-37.98);
      double double0 = (-240.79965758);
      doubleArray0[3] = (-240.79965758);
      doubleArray0[4] = (-1417.0935562741652);
      MathArrays.copyOf(doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.34217729E8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 89.500022;
      doubleArray0[3] = (-1100.87432245034);
      MathArrays.convolve(doubleArray0, doubleArray0);
      long[][] longArray0 = new long[1][7];
      long[] longArray1 = new long[5];
      longArray1[0] = (-1497L);
      longArray1[1] = 1L;
      longArray1[2] = (-254L);
      longArray1[3] = 0L;
      longArray1[4] = (-865L);
      longArray0[0] = longArray1;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,497 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double double0 = new Double((-911.4756730662));
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-569.0);
      double[] doubleArray2 = new double[0];
      try { 
        MathArrays.convolve(doubleArray1, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-1779);
      intArray0[1] = (-1779);
      int int2 = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      int int0 = (-1779);
      intArray0[1] = (-1779);
      int int1 = 0;
      intArray0[2] = 0;
      int int2 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = new double[0];
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-835);
      intArray0[1] = (-818);
      intArray0[2] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-835), (-818), 0}, intArray1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-818);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-818);
      double[] doubleArray1 = MathArrays.scale((-894.60920478436), doubleArray0);
      assertArrayEquals(new double[] {-0.0, -0.0, 731790.3295136065, -0.0, 731790.3295136065}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1293.666);
      doubleArray0[2] = 1.34217729E8;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(1.3421772900623453E8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.scaleInPlace(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-385);
      intArray0[1] = 2230;
      intArray0[2] = 143;
      intArray0[3] = (-2769);
      intArray0[4] = 266;
      intArray0[5] = 4087;
      intArray0[6] = 10;
      intArray0[7] = 0;
      intArray0[8] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }
}
