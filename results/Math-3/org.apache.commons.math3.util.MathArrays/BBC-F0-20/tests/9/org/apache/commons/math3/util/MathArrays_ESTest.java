/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:52:44 GMT 2021
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.Field;
import org.apache.commons.math3.FieldElement;
import org.apache.commons.math3.util.MathArrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MathArrays_ESTest extends MathArrays_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "bDKAV1/Q";
      stringArray0[3] = "m%LdcjnM";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "K/HsTF6r2_+Jm8<";
      stringArray0[7] = "OP!;C2SX~c ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn("DECREASING").when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 8);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "INCREASING";
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "bDKAV1/Q";
      stringArray0[3] = "m%LdcjnM";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "K/HsTF6r2_+Jm8<";
      stringArray0[7] = "OP!;C2SX~c ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      Object[] objectArray0 = MathArrays.buildArray(field0, 8);
      assertEquals(8, objectArray0.length);
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      double[] doubleArray0 = new double[22];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[12] = (double) 0;
      doubleArray0[3] = (double) 0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(22, doubleArray0.length);
      assertEquals(43, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      MathArrays.buildArray(field0, 2146575932);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 281;
      intArray0[0] = 281;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 281;
      integerArray0[1] = (Integer) 281;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 281;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, integerArray0[0]).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (int) integerArray0[3], 281);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 281;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 281;
      integerArray0[1] = (Integer) 281;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 281;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(field0).getZero();
      Object[][] objectArray0 = MathArrays.buildArray(field0, (int) integerArray0[3], 281);
      assertEquals(4, integerArray0.length);
      assertEquals(281, objectArray0.length);
      assertNotNull(objectArray0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)integerArray0[3];
      floatArray0[1] = (float) 281;
      floatArray0[2] = (float) 281;
      floatArray0[3] = (float) (int)integerArray0[0];
      floatArray0[4] = 1.0F;
      floatArray0[5] = (float) 281;
      floatArray0[6] = (float) (int)integerArray0[0];
      float[] floatArray1 = new float[3];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (float) 281;
      floatArray1[1] = (float) 281;
      floatArray1[2] = (float) (int)integerArray0[2];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(3, floatArray1.length);
      assertEquals(7, floatArray0.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertArrayEquals(new float[] {281.0F, 281.0F, 281.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {281.0F, 281.0F, 281.0F, 281.0F, 1.0F, 281.0F, 281.0F}, floatArray0, 0.01F);
      
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 514.1859713003117;
      doubleArray0[1] = 2051.51356;
      doubleArray0[2] = -0.0;
      doubleArray0[3] = (-1943.4020175521);
      doubleArray0[4] = 0.0036;
      doubleArray0[5] = 1.86285714285714278E18;
      doubleArray0[6] = 3309.6545251258995;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(1.86285714285714278E18, double0, 0.01);
      assertArrayEquals(new double[] {514.1859713003117, 2051.51356, -0.0, (-1943.4020175521), 0.0036, 1.86285714285714278E18, 3309.6545251258995}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 686.47, 2.0);
      assertEquals(1372.94, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 0, 0);
      assertEquals(0, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = 2416;
      intArray0[0] = 2416;
      intArray0[1] = 277;
      intArray0[2] = 134217729;
      intArray0[3] = 235;
      intArray0[4] = (-229);
      int int1 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {2416, 277, 134217729, 235, (-229)}, intArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1590.97768213031);
      doubleArray0[1] = (double) 277;
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.POSITIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      try { 
        MathArrays.normalizeArray((double[]) null, Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to an infinite value
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 2147483632;
      intArray0[2] = 1076;
      intArray0[3] = 2116805310;
      intArray0[4] = (-2146570212);
      intArray0[5] = (-237);
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2147483632;
      intArray1[1] = (-225);
      intArray1[2] = 2147483632;
      intArray1[3] = 2147483632;
      intArray1[4] = 1076;
      intArray1[5] = 2147483632;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-2117719228), int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {4, 2147483632, 1076, 2116805310, (-2146570212), (-237)}, intArray0);
      assertArrayEquals(new int[] {2147483632, (-225), 2147483632, 2147483632, 1076, 2147483632}, intArray1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 3.834E-20;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = (-353.6);
      doubleArray0[5] = 3.834E-20;
      doubleArray0[6] = 3.834E-20;
      doubleArray0[7] = 3.834E-20;
      double[] doubleArray1 = MathArrays.scale(3.834E-20, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, (-353.6), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, (-1.3557024E-17), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.safeNorm(doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(1.3557024E-17, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, (-353.6), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.4699556E-39, 1.4699556E-39, 1.4699556E-39, 1.4699556E-39, (-1.3557024E-17), 1.4699556E-39, 1.4699556E-39, 1.4699556E-39}, doubleArray1, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {3.834E-20, 3.834E-20, 3.834E-20, 3.834E-20, (-353.6), 3.834E-20, 3.834E-20, 3.834E-20}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1862.522285045);
      doubleArray0[1] = (-815.172605);
      doubleArray0[2] = (-2456.79);
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.0169312742331734E7, double0, 0.01);
      assertArrayEquals(new double[] {(-1862.522285045), (-815.172605), (-2456.79)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.scale(1.304E19, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1862.522285045), (-815.172605), (-2456.79)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.42872905969868E22), (-1.06298507692E22), (-3.20365416E22)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double1 = MathArrays.safeNorm(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.158372529736214E22, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1862.522285045), (-815.172605), (-2456.79)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-2.42872905969868E22), (-1.06298507692E22), (-3.20365416E22)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-20.0), (-20.0), 1.304E19, (-20.0), 1.304E19, 1.304E19);
      assertEquals(1.700416E38, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.700416E38;
      doubleArray0[1] = 1.304E19;
      doubleArray0[2] = 1.700416E38;
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = 1.700416E38;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.94520690600304E38, double1, 0.01);
      assertArrayEquals(new double[] {1.700416E38, 1.304E19, 1.700416E38, 1.304E19, 1.700416E38}, doubleArray0, 0.01);
      
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.700416E38, 1.304E19, 1.700416E38, 1.304E19, 1.700416E38}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[] doubleArray0 = null;
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic((double[]) null, mathArrays_OrderDirection1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1.3645088E7, 0.0, (-1497.658), (-1407.7));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2108253.1666, double1, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      FieldElement<Integer>[][] fieldElementArray0 = MathArrays.buildArray(field0, 1178, (-195));
      assertEquals(1178, fieldElementArray0.length);
      assertNotNull(fieldElementArray0);
      
      double double2 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3.834E-20;
      doubleArray0[1] = 4815.77312649;
      doubleArray0[2] = (-925.0);
      doubleArray0[3] = (-2.5857668567479893E-8);
      doubleArray0[4] = (-3253.5848277691);
      doubleArray0[5] = 1144.55379934;
      doubleArray0[6] = 69.88805054078956;
      doubleArray0[7] = 2.0;
      doubleArray0[8] = 2717.109045094;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 69.88805054078956;
      doubleArray1[1] = 1144.55379934;
      doubleArray1[2] = 9.313225746154785E-10;
      doubleArray1[3] = (-96.44419390271);
      doubleArray1[4] = (-925.0);
      doubleArray1[5] = (-2.5857668567479893E-8);
      doubleArray1[6] = 2717.109045094;
      doubleArray1[7] = 3.834E-20;
      doubleArray1[8] = (-2.5857668567479893E-8);
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 4815.77312649, (-925.0), (-2.5857668567479893E-8), (-3253.5848277691), 1144.55379934, 69.88805054078956, 2.0, 2717.109045094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-69.88805054078956), 3671.21932715, (-925.0000000009313), 96.44419387685232, (-2328.5848277691), 1144.5537993658577, (-2647.2209945532104), 2.0, 2717.109045119858}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {69.88805054078956, 1144.55379934, 9.313225746154785E-10, (-96.44419390271), (-925.0), (-2.5857668567479893E-8), 2717.109045094, 3.834E-20, (-2.5857668567479893E-8)}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray1);
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertEquals((-851124.936121031), double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertArrayEquals(new double[] {3.834E-20, 4815.77312649, (-925.0), (-2.5857668567479893E-8), (-3253.5848277691), 1144.55379934, 69.88805054078956, 2.0, 2717.109045094}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-69.88805054078956), 3671.21932715, (-925.0000000009313), 96.44419387685232, (-2328.5848277691), 1144.5537993658577, (-2647.2209945532104), 2.0, 2717.109045119858}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {69.88805054078956, 1144.55379934, 9.313225746154785E-10, (-96.44419390271), (-925.0), (-2.5857668567479893E-8), 2717.109045094, 3.834E-20, (-2.5857668567479893E-8)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-2135.9116F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1440.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, (float[]) null);
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-2135.9116F), 1.0F, 1.0F, 0.0F, 0.0F, (-1440.0F)}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("7fV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.7fV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-2736.7974F);
      floatArray0[1] = (-2400.4F);
      floatArray0[2] = Float.POSITIVE_INFINITY;
      floatArray0[3] = 919.86426F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3.4028235E38F;
      floatArray0[6] = (-3656.464F);
      float float0 = 4516.94F;
      floatArray0[7] = 4516.94F;
      floatArray0[8] = (-1230.125F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-2736.7974F), (-2400.4F), Float.POSITIVE_INFINITY, 919.86426F, 1.0F, 3.4028235E38F, (-3656.464F), 4516.94F, (-1230.125F)}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-2066);
      intArray0[1] = (-1601);
      intArray0[2] = (-1396);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-2066), (-1601), (-1396)}, intArray0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1230.125F);
      doubleArray0[1] = (double) Float.POSITIVE_INFINITY;
      doubleArray0[2] = (double) Float.POSITIVE_INFINITY;
      try { 
        MathArrays.normalizeArray(doubleArray0, 0.7316888570785522);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array contains an infinite element, \u221E at index 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][0];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, 282);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3685.0);
      doubleArray0[1] = (-1687.10110953);
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-3685.0), (-1687.10110953)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-2180.886));
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3685.0), (-1687.10110953)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1495.981692478441), (-684.9043075215591)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-3685.0), (-1687.10110953)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1495.981692478441), (-684.9043075215591)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 7160.1035;
      doubleArray0[1] = (-583.08759294);
      doubleArray0[2] = (-3042.381467005601);
      doubleArray0[3] = 1.304E19;
      doubleArray0[4] = (-1.5565498345884943);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-4369.250737);
      doubleArray0[7] = (-1142.8734982);
      doubleArray0[8] = 804.8629;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, (-1672.0481521));
      assertEquals(9, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {7160.1035, (-583.08759294), (-3042.381467005601), 1.304E19, (-1.5565498345884943), Double.NaN, (-4369.250737), (-1142.8734982), 804.8629}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-9.181010602775877E-13), 7.476614511409235E-14, 3.9010799922469346E-13, (-1672.0481521000002), 1.9958790449196723E-16, Double.NaN, 5.602452163238048E-13, 1.4654444177525867E-13, (-1.0320318440481957E-13)}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = 438.1280948049125;
      doubleArray2[2] = 0.5;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 2.092571258544922;
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2889;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      int int0 = MathArrays.distance1(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2888, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1}, intArray0);
      assertArrayEquals(new int[] {2889, 1, 1, 1, 1}, intArray1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3830.1776229;
      doubleArray0[1] = (double) 2889;
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 2814.4840862);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {3830.1776229, 2889.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1604.3591302351601, 1210.1249559648397}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[7][0];
      doubleArray1[0] = null;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = null;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = null;
      double double0 = (-1200.3198939163156);
      double double1 = (-550.58);
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-231.415997717);
      doubleArray0[1] = (-231.415997717);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 596.22F;
      floatArray0[1] = (-1514.9312F);
      floatArray0[2] = 1001.8F;
      floatArray0[3] = 1443.1F;
      floatArray0[4] = 1895.5259F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 3873.58F;
      floatArray0[8] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-65.4F);
      floatArray1[1] = 1443.1F;
      floatArray1[2] = 3.4028235E38F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = 1895.5259F;
      floatArray1[5] = 1001.8F;
      floatArray1[6] = 1895.5259F;
      floatArray1[7] = 1895.5259F;
      floatArray1[8] = (-1514.9312F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1895.5259F, (-1514.9312F), 1001.8F, 1443.1F, 1895.5259F, 0.0F, 0.0F, 3873.58F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-65.4F), 1443.1F, 3.4028235E38F, 0.0F, 0.0F, 1001.8F, 1895.5259F, 1895.5259F, (-1514.9312F)}, floatArray1, 0.01F);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {1895.5259F, (-1514.9312F), 1001.8F, 1443.1F, 1895.5259F, 0.0F, 0.0F, 3873.58F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-65.4F), 1443.1F, 3.4028235E38F, 0.0F, 0.0F, 1001.8F, 1895.5259F, 1895.5259F, (-1514.9312F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 137.00129046212;
      doubleArray2[1] = 1848.98341;
      doubleArray2[2] = (-5987.09162184);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (-1520.0);
      doubleArray2[5] = 3438200.4356842106;
      doubleArray2[6] = 1.0;
      double double0 = MathArrays.distance(doubleArray1, doubleArray2);
      assertEquals(0, doubleArray1.length);
      assertEquals(7, doubleArray2.length);
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {137.00129046212, 1848.98341, (-5987.09162184), Double.NaN, (-1520.0), 3438200.4356842106, 1.0}, doubleArray2, 0.01);
      
      try { 
        MathArrays.ebeMultiply(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(Double.NaN, Double.NaN, 0.0, Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 132.4;
      doubleArray0[1] = (-3809.0);
      doubleArray0[2] = 566.4012;
      doubleArray0[3] = 1160.0;
      doubleArray0[4] = (-1705.070605197);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, (float[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination(5.669184079525E-24, (-308.126166071), (-308.126166071), (-1298.33));
      assertEquals(400049.4451949614, double0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.copyOf((double[]) null, 994);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 22;
      // Undeclared exception!
      try { 
        MathArrays.normalizeArray((double[]) null, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-469.2868414775338);
      doubleArray1[1] = (-469.2868414775338);
      try { 
        MathArrays.linearCombination(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[2];
      String[] stringArray0 = new String[7];
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale((-469.3), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-3646);
      intArray0[1] = 2209;
      intArray0[2] = (-380);
      intArray0[3] = (-514);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-3646), 2209, (-380), (-514)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-627.09656F);
      floatArray0[1] = (-3398.4797F);
      floatArray0[2] = (-627.09656F);
      floatArray0[3] = (-1907.9304F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-2137.4067F);
      floatArray0[7] = (-2101.6157F);
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-3398.4797F);
      floatArray1[1] = (-1670.89F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(8, floatArray0.length);
      assertEquals(2, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-627.09656F), (-3398.4797F), (-627.09656F), (-1907.9304F), 0.0F, 0.0F, (-2137.4067F), (-2101.6157F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-3398.4797F), (-1670.89F)}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2137.4067F);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) (-627.09656F);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray1.length);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {4568507.564850092, 0.0, 2680720.8156079054, 0.0, 393250.09257532656}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-2137.40673828125), 0.0, (-627.0965576171875)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-3019);
      intArray0[1] = 2145917675;
      intArray0[2] = 1075;
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {(-3019), 2145917675, 1075}, intArray0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3.834E-20;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 2145917675;
      doubleArray0[4] = (double) (-3019);
      doubleArray0[5] = (double) 1075;
      doubleArray0[6] = (double) 2145917675;
      doubleArray0[7] = (double) (-3019);
      doubleArray0[8] = 0.0;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(3.0347858797243333E9, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 3.834E-20, 0.0, 2.145917675E9, (-3019.0), 1075.0, 2.145917675E9, (-3019.0), 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][4];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 2.145917675E9, (-3019.0), 0.0, 2.145917675E9, (-3019.0), 3.834E-20, 0.0, 1075.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "spline partition must have at least {0} points, got {1}";
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.ebeMultiply(doubleArray1, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray3));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray3);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-5300.80471151);
      doubleArray1[1] = 977.6954162;
      // Undeclared exception!
      try { 
        MathArrays.distance(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 2;
      double double0 = MathArrays.distance(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(2.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 2, 2, 2, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      Double double0 = new Double((-3976L));
      assertEquals((-3976.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-3246);
      intArray0[1] = (-4398);
      intArray0[2] = 134217729;
      intArray0[3] = 3554;
      intArray0[4] = 21;
      intArray0[5] = 2022;
      intArray0[6] = (-363);
      intArray0[7] = (-330);
      int[] intArray1 = new int[2];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 134217729;
      intArray1[1] = (-4398);
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 9;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 9;
      doubleArray0[3] = (double) 9;
      doubleArray0[4] = (double) 9;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(5, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {9.0, 0.0, 9.0, 9.0, 9.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.ebeSubtract(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      
      int int1 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z<'";
      stringArray0[1] = "X";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = MathArrays.linearCombination((double) 0L, (double) 0L, 7352361.0, (double) 0, (-3346.582), (double) 0L, (double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1450.95F);
      floatArray0[2] = 886.679F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      float[] floatArray1 = new float[9];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1450.95F);
      floatArray1[2] = (-1450.95F);
      floatArray1[3] = 886.679F;
      floatArray1[4] = 886.679F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-1450.95F);
      floatArray1[8] = 0.0F;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(9, floatArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1450.95F), 886.679F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1450.95F), (-1450.95F), 886.679F, 886.679F, 0.0F, 0.0F, (-1450.95F), 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-219.131F);
      floatArray0[1] = (-219.131F);
      floatArray0[2] = (-219.131F);
      floatArray0[3] = (-219.131F);
      floatArray0[4] = (-219.131F);
      floatArray0[5] = (-219.131F);
      floatArray0[6] = (-219.131F);
      floatArray0[7] = Float.NaN;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {(-219.131F), (-219.131F), (-219.131F), (-219.131F), (-219.131F), (-219.131F), (-219.131F), Float.NaN}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = 1.0;
      double double1 = 0.0;
      double double2 = 2.0;
      double double3 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 1.0, 2.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(2.0, double3, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance((int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray1, mathArrays_OrderDirection0, true, true);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      boolean boolean1 = MathArrays.equals((double[]) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection1, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly decreasing (0 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1205.6131007707536);
      doubleArray0[1] = (-1205.6131007707536);
      double[] doubleArray1 = MathArrays.scale((-1205.6131007707536), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1205.6131007707536), (-1205.6131007707536)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453502.9487500712, 1453502.9487500712}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.linearCombination((-1205.6131007707536), (-1205.6131007707536), 1.073741824E9, (-713.0), (-1205.6131007707536), (-713.0), (-2797.82), (-713.0));
      assertEquals((-7.655736125612504E11), double0, 0.01);
      
      double double1 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2057268.5774697212, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1205.6131007707536), (-1205.6131007707536)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1453502.9487500712, 1453502.9487500712}, doubleArray1, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 8;
      intArray0[1] = 175;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {8, 175}, intArray0);
      assertArrayEquals(new int[] {8, 175}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-1205.6131007707536);
      doubleArray2[1] = (-2797.82);
      doubleArray2[2] = (double) 8;
      doubleArray2[3] = (double) 175;
      try { 
        MathArrays.ebeSubtract(doubleArray2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 2);
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray1 = null;
      boolean boolean0 = MathArrays.equals(doubleArray0, (double[]) null);
      assertEquals(0, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 0.0;
      try { 
        MathArrays.convolve((double[]) null, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        MathArrays.checkPositive((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 686.47, 2.0);
      assertEquals(1372.94, double0, 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 463.5993245422;
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1198.0290040518648);
      doubleArray1[1] = 0.125;
      doubleArray1[2] = 1372.94;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 463.5993245422;
      doubleArray1[5] = 463.5993245422;
      doubleArray1[6] = 1.0;
      doubleArray1[7] = 1.0;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 463.5993245422}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1198.0290040518648), 0.125, 1372.94, 1.0, 463.5993245422, 463.5993245422, 1.0, 1.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.distance1(doubleArray0, doubleArray1);
      assertEquals(4, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(3034.693328594065, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 463.5993245422}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1198.0290040518648), 0.125, 1372.94, 1.0, 463.5993245422, 463.5993245422, 1.0, 1.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      boolean boolean1 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, (-2092.0), 1.304E19);
      assertEquals((-2.7279679999999994E22), double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2092.0);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-219.131F);
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-219.131F);
      floatArray1[1] = (-219.131F);
      floatArray1[2] = (-219.131F);
      floatArray1[3] = (-1464.8F);
      floatArray1[4] = (-219.131F);
      floatArray1[5] = (-219.131F);
      floatArray1[6] = (-219.131F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(1, floatArray0.length);
      assertEquals(7, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-219.131F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-219.131F), (-219.131F), (-219.131F), (-1464.8F), (-219.131F), (-219.131F), (-219.131F)}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[2];
      float float0 = 2409.0F;
      floatArray0[0] = 2409.0F;
      float float1 = 0.0F;
      floatArray0[1] = 0.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {2409.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.scaleInPlace(0.0F, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 9;
      intArray0[1] = 9;
      intArray0[2] = 9;
      intArray0[3] = 9;
      intArray0[4] = 9;
      intArray0[5] = 9;
      intArray0[6] = 9;
      intArray0[7] = 9;
      int[] intArray1 = MathArrays.copyOf(intArray0, 9);
      assertEquals(8, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {9, 9, 9, 9, 9, 9, 9, 9}, intArray0);
      assertArrayEquals(new int[] {9, 9, 9, 9, 9, 9, 9, 9, 0}, intArray1);
      assertNotNull(intArray1);
      
      boolean boolean0 = MathArrays.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
      
      try { 
        MathArrays.convolve((double[]) null, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-92.7);
      doubleArray0[1] = 601.6599731184297;
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {(-92.7), 601.6599731184297}, doubleArray0, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {(-92.7), 601.6599731184297}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((-92.7), (-92.7), (-1.0), 601.6599731184297, 601.6599731184297, (-92.7));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-47782.24948119686), double1, 0.01);
      
      double double2 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(608.759405063174, double2, 0.01);
      assertArrayEquals(new double[] {(-92.7), 601.6599731184297}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-92.7), 601.6599731184297}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {8593.29, 361994.7232528695}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1877);
      intArray0[1] = (-1877);
      intArray0[2] = (-1877);
      intArray0[3] = (-1877);
      intArray0[4] = (-1877);
      intArray0[5] = (-1877);
      intArray0[6] = (-345);
      intArray0[7] = (-1877);
      intArray0[8] = (-1877);
      double double3 = MathArrays.distance(intArray0, intArray0);
      assertEquals(9, intArray0.length);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {(-1877), (-1877), (-1877), (-1877), (-1877), (-1877), (-345), (-1877), (-1877)}, intArray0);
      
      double[] doubleArray2 = MathArrays.ebeSubtract(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray2.length);
      assertEquals(2, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-92.7), 601.6599731184297}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-8685.990000000002), (-361393.06327975105)}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {8593.29, 361994.7232528695}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
      
      double double4 = MathArrays.linearCombination((double) (-1877), 0.7937005259840998, (-0.010714690733195933), (-92.7));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals((-1488.782635441188), double4, 0.01);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = MathArrays.distance1(doubleArray1, doubleArray1);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 1.3645088E7, 0.0, (-1497.658), (-1407.7));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2108253.1666, double1, 0.01);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 1205, (-195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-225);
      intArray0[1] = 1;
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (-225);
      intArray1[3] = (-225);
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 636;
      intArray1[8] = (-225);
      int int0 = MathArrays.distanceInf(intArray0, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(226, int0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-225), 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, (-225), (-225), 1, 1, 1, 636, (-225)}, intArray1);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 686.47, 2.0);
      assertEquals(1372.94, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.distanceInf((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 9;
      int int1 = 6;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray0 = new double[5][3];
      doubleArray0[1] = null;
      doubleArray0[2] = null;
      doubleArray0[3] = null;
      doubleArray0[4] = null;
      try { 
        MathArrays.sortInPlace((double[]) null, mathArrays_OrderDirection0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination(2.0, 0.0, 0.0, 1.34217729E8, (-912.3882829), (double) 0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = 76.9717;
      double double2 = MathArrays.linearCombination(2092.0, (-1.5565498345884943), 0.0, 0.0, (-1.5565498345884943), 3076.2038695);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-8044.566878189841), double2, 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 3076.2038695;
      doubleArray0[2] = 2092.0;
      doubleArray0[3] = (-1.5565498345884943);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.5565498345884943);
      doubleArray0[6] = 1882.0210949;
      double double3 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new double[] {0.0, 3076.2038695, 2092.0, (-1.5565498345884943), 0.0, (-1.5565498345884943), 1882.0210949}, doubleArray0, 0.01);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-231.415997717);
      doubleArray0[1] = (-231.415997717);
      doubleArray0[2] = (-231.415997717);
      doubleArray0[3] = (-231.415997717);
      doubleArray0[4] = 1418.0;
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 1.8014398509481984E16, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      Double double3 = new Double(0.0);
      assertEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals((double)double3, (double)double1, 0.01);
      assertEquals(0.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 76.9717, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      Double double3 = new Double(1L);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1975.68848187442);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.5565498345884943);
      doubleArray1[3] = (double) 1L;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 1L;
      try { 
        MathArrays.convolve(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 76.9717, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      Double double3 = new Double(1L);
      assertNotEquals((double)double3, (double)double0, 0.01);
      assertNotEquals((double)double3, (double)double1, 0.01);
      assertNotEquals((double)double3, (double)double2, 0.01);
      assertEquals(1.0, (double)double3, 0.01);
      assertNotNull(double3);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2325.55F;
      floatArray0[1] = 2325.55F;
      floatArray0[2] = 2325.55F;
      floatArray0[3] = (-656.5155F);
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray1);
      assertEquals(4, floatArray0.length);
      assertEquals(0, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean0);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {2325.55F, 2325.55F, 2325.55F, (-656.5155F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathArrays.scale(3483.280029296875, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1640.1547287);
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      double[] doubleArray1 = MathArrays.normalizeArray(doubleArray0, 68.2038695);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1640.1547287), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.2038695, -0.0, -0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeDivide(doubleArray1, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-1640.1547287), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {68.2038695, -0.0, -0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-0.04158380200754531), Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.28F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1050.28F;
      doubleArray0[1] = 1.44888888888888883E18;
      doubleArray0[2] = 1.44888888888888883E18;
      doubleArray0[3] = (double) 1050.28F;
      doubleArray0[4] = 1.44888888888888883E18;
      doubleArray0[5] = 1.44888888888888883E18;
      doubleArray0[6] = (double) 1050.28F;
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.44888888888888883E18;
      doubleArray1[1] = (-2033.4607);
      doubleArray1[2] = (double) 1050.28F;
      doubleArray1[3] = (double) 1050.28F;
      doubleArray1[4] = 1.44888888888888883E18;
      doubleArray1[5] = 1.44888888888888883E18;
      doubleArray1[6] = (double) 1050.28F;
      double double0 = MathArrays.distance(doubleArray0, doubleArray1);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2.5095491700775736E18, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1050.280029296875, 1.44888888888888883E18, 1.44888888888888883E18, 1050.280029296875, 1.44888888888888883E18, 1.44888888888888883E18, 1050.280029296875}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.44888888888888883E18, (-2033.4607), 1050.280029296875, 1050.280029296875, 1.44888888888888883E18, 1.44888888888888883E18, 1050.280029296875}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 686.47, 2.0);
      assertEquals(1372.94, double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, (float[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[1] = 0.0F;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[][] longArray0 = new long[8][6];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 34L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 34L;
      longArray3[1] = 0L;
      longArray3[2] = 0L;
      longArray3[3] = 0L;
      longArray3[4] = 0L;
      longArray3[5] = 0L;
      longArray3[6] = 34L;
      longArray3[7] = 34L;
      longArray3[8] = 34L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = 0L;
      longArray4[1] = 34L;
      longArray4[2] = 0L;
      longArray4[3] = 0L;
      longArray4[4] = 34L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray4));
      assertFalse(longArray5.equals((Object)longArray3));
      
      longArray5[0] = 0L;
      longArray5[1] = 34L;
      longArray5[2] = 0L;
      longArray5[3] = 34L;
      longArray5[4] = 34L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[3];
      assertFalse(longArray6.equals((Object)longArray5));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray2));
      
      longArray6[0] = 34L;
      longArray6[1] = 0L;
      longArray6[2] = 34L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[7];
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = 34L;
      longArray7[1] = 34L;
      longArray7[2] = 0L;
      longArray7[3] = 34L;
      longArray7[4] = 34L;
      longArray7[5] = 0L;
      longArray7[6] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray2));
      
      longArray8[0] = 34L;
      longArray8[1] = 34L;
      longArray8[2] = 0L;
      longArray8[3] = 0L;
      longArray8[4] = 0L;
      longArray0[7] = longArray8;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 9 while others have length 2
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 2561.87150022239;
      doubleArray0[8] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN, 2561.87150022239, 1.304E19}, doubleArray0, 0.01);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      doReturn((Object) null).when(field0).getZero();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1877), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      try { 
        MathArrays.normalizeArray(doubleArray0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot normalize to NaN
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), 521.0821199171, (-2092.0), 2305653.9309086455, 2305653.9309086455, 2305653.9309086455, 521.0821199171, (-1.0));
      assertEquals(5.311216620048864E12, double0, 0.01);
      
      long[][] longArray0 = new long[3][0];
      long[] longArray1 = new long[0];
      longArray0[0] = longArray1;
      long[] longArray2 = new long[3];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (-1L);
      longArray2[1] = 987L;
      longArray2[2] = 2047L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 2047L;
      longArray0[2] = longArray3;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 3 while others have length 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 521.0821199171;
      doubleArray0[2] = 521.0821199171;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 521.0821199171;
      doubleArray0[7] = (-1.0);
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 521.0821199171, 521.0821199171, (-1.0), (-1.0), (-1.0), 521.0821199171, (-1.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection0, true);
      assertEquals(6, stringArray1.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, (-1781));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i_WDQlx3";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "i_WDQlx3";
      stringArray1[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray1[2] = "i_WDQlx3";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, false);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      long[][] longArray0 = new long[2][6];
      long[] longArray1 = new long[1];
      longArray1[0] = (long) 1;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[1];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 1;
      longArray0[1] = longArray2;
      MathArrays.checkRectangular(longArray0);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3988.1F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = Float.NEGATIVE_INFINITY;
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-3988.1F), 0.0F, 1.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {(-3988.1F), 0.0F, 1.0F, Float.NEGATIVE_INFINITY}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 793;
      intArray0[1] = 793;
      intArray0[2] = 793;
      intArray0[3] = 793;
      int[] intArray1 = MathArrays.copyOf(intArray0, 13);
      assertEquals(8, intArray0.length);
      assertEquals(13, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {793, 793, 793, 793, 0, 0, 0, 0}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 372.97;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.32, 372.97, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("G p6u`7t,9~JFf.[Ib8", integer0);
      assertEquals(122, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("INDEX_NOT_POSITIVE");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(122);
      assertTrue(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer0));
      assertEquals(122, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      double double1 = MathArrays.linearCombination(Double.NaN, 0.0, (-2635.87), 372.97, 0.0, 1504.0, 0.0, (-176.06140440022298));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      assertEquals(1, floatArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[1] = (-2092.0);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-879.5146);
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 2561.87150022239;
      doubleArray0[8] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, (-2092.0), Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN, 2561.87150022239, 1.304E19}, doubleArray0, 0.01);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1877), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.304E19;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 2561.87150022239;
      doubleArray0[8] = 1.304E19;
      double double1 = MathArrays.safeNorm(doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {1.304E19, 0.0, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN, 2561.87150022239, 1.304E19}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(17, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1.304E19, 0.0, Double.NaN, Double.NaN, 0.0, Double.NaN, Double.NaN, 2561.87150022239, 1.304E19}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.5565498345884943), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 76.9717, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      double double3 = new Double(1L);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      MathArrays.checkPositive(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[1];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination((double) 1456, 2477.84323, (-1.7976931348623157E308), 2703.884889468, 2703.884889468, (double) 1456, 2305653.9309086455, 2703.884889468);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = MathArrays.ebeMultiply(doubleArray1, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray3 = new double[5][6];
      doubleArray3[0] = doubleArray1;
      doubleArray3[1] = doubleArray2;
      doubleArray3[2] = doubleArray2;
      doubleArray3[3] = doubleArray0;
      doubleArray3[4] = doubleArray1;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray3);
      assertEquals(6, doubleArray0.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1518.437990472, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray2);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1518.437990472, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      
      double[] doubleArray4 = MathArrays.ebeAdd(doubleArray2, doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray2.length);
      assertEquals(6, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray1, doubleArray4);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1518.437990472, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      try { 
        MathArrays.normalizeArray(doubleArray4, 0.0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // array sums to zero
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1504.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 68.2038695;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 1504.0, 68.2038695}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.normalizeArray(doubleArray0, 1504.0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 1504.0, 68.2038695}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1503.9823826037052, 0.01685313497917978, 7.642613156820898E-4}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = new double[9];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      
      doubleArray3[0] = 1.34217729E8;
      doubleArray3[1] = 1.34217729E8;
      doubleArray3[2] = 1504.0;
      doubleArray3[3] = 68.2038695;
      doubleArray3[4] = 68.2038695;
      doubleArray3[5] = 1504.0;
      doubleArray3[6] = 1.34217729E8;
      doubleArray3[7] = 1.34217729E8;
      doubleArray3[8] = 1.34217729E8;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(doubleArray3, doubleArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1875.56383);
      double double0 = (-402.68597520437);
      doubleArray0[1] = (-402.68597520437);
      doubleArray0[2] = 0.07073719799518585;
      doubleArray0[3] = 3.32;
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1875.56383), (-402.68597520437), 0.07073719799518585, 3.32, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {3517739.680404269, 1510526.4998831865, 161890.65036630386, (-12510.713586315831), (-2673.829871605836), 0.46969499468803405, 11.0224, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double2 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1875.56383), (-402.68597520437), 0.07073719799518585, 3.32, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.distance1(doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1504.0;
      doubleArray0[1] = 1.34217729E8;
      doubleArray0[2] = 68.2038695;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[0][2];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {1.34217729E8, 1504.0, 68.2038695}, doubleArray0, 0.01);
      
      double double0 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1.8014398780184108E16, double0, 0.01);
      assertArrayEquals(new double[] {1.34217729E8, 1504.0, 68.2038695}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1.34217729E8, 1504.0, 68.2038695}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2.68435458E8, 3008.0, 136.407739}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1640.1547287);
      long[][] longArray0 = new long[2][8];
      long[] longArray1 = new long[0];
      longArray0[1] = longArray1;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(2, longArray0.length);
      
      MathArrays.scaleInPlace(2690107.534076971, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {(-4.41219259272784E9), 0.0, 0.0}, doubleArray0, 0.01);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      double[][] doubleArray1 = new double[0][6];
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {(-4.41219259272784E9), 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      int int0 = (-23);
      intArray0[2] = (-23);
      intArray0[3] = 1058;
      intArray0[4] = (-1);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 2;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) (-730);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 0.0F, 0.0F, (-730.0F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, (float[]) null);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {(-1.0F), 2.0F, 0.0F, 0.0F, (-730.0F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      try { 
        MathArrays.ebeMultiply(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1640.1547287);
      doubleArray0[0] = (-1640.1547287);
      double[][] doubleArray1 = new double[8][3];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray1[4] = doubleArray2;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      try { 
        MathArrays.sortInPlace(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[0];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      boolean boolean1 = MathArrays.equals(doubleArray0, doubleArray2);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray2, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1518.437990472;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2305653.9309086455, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 194.57F;
      boolean boolean0 = MathArrays.equals(floatArray1, floatArray1);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean0);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {194.57F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 793;
      floatArray1[0] = (float) 793;
      intArray0[2] = 793;
      intArray0[3] = 793;
      intArray0[4] = 793;
      intArray0[5] = 793;
      int[] intArray1 = MathArrays.copyOf(intArray0, 793);
      assertEquals(6, intArray0.length);
      assertEquals(793, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {793, 0, 793, 793, 793, 793}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean1 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.commons.math3.util.MathArrays";
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (double) 793;
      doubleArray2[1] = (double) 793;
      doubleArray2[2] = (-286.7615927);
      doubleArray2[3] = Double.NaN;
      doubleArray2[4] = (double) 793;
      doubleArray2[5] = (double) 793;
      doubleArray2[6] = (double) 793;
      doubleArray2[7] = (double) 793;
      doubleArray2[8] = 806.634488565535;
      try { 
        MathArrays.ebeSubtract(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 9
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2900.7;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = (-1113.93732786781);
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = 2654.123701423354;
      double[] doubleArray1 = MathArrays.ebeAdd(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2900.7, 1.0E-5, (-1113.93732786781), 3.141592653589793, 0.0, (-20.0), 2654.123701423354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5801.4, 2.0E-5, (-2227.87465573562), 6.283185307179586, 0.0, (-40.0), 5308.247402846708}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray1, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertEquals(2900.7, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2900.7, 1.0E-5, (-1113.93732786781), 3.141592653589793, 0.0, (-20.0), 2654.123701423354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5801.4, 2.0E-5, (-2227.87465573562), 6.283185307179586, 0.0, (-40.0), 5308.247402846708}, doubleArray1, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertEquals(15, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 2900.7, 1.0E-5, (-1113.93732786781), 3.141592653589793, 0.0, (-20.0), 2654.123701423354}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 5801.4, 2.0E-5, (-2227.87465573562), 6.283185307179586, 0.0, (-40.0), 5308.247402846708}, doubleArray1, 0.01);
      assertNotNull(doubleArray2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 281;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 281;
      integerArray0[1] = (Integer) 281;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 281;
      double double0 = MathArrays.linearCombination((double) integerArray0[1], 3661.78912295, (double) integerArray0[0], (double) 281, 3661.78912295, 804.5131901935899, 2060.314070805151, (-3769.473769214394));
      assertEquals(4, integerArray0.length);
      assertEquals((-3712418.453573702), double0, 0.01);
      
      double double1 = MathArrays.distance(intArray0, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 3194L;
      longArray0[0] = 3194L;
      long long1 = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 5041L;
      longArray0[3] = (-28L);
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -28 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2900.7;
      doubleArray0[2] = 1.0E-5;
      int[] intArray0 = new int[0];
      int[] intArray1 = MathArrays.copyOf(intArray0, 2725);
      assertEquals(0, intArray0.length);
      assertEquals(2725, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean0 = MathArrays.equalsIncludingNaN(doubleArray0, (double[]) null);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 2900.7, 1.0E-5, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try { 
        MathArrays.convolve((double[]) null, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-1.0), (-1.0), (-1.0), (-0.1428571423679182));
      assertEquals(1.1428571423679181, double0, 0.01);
      
      long[][] longArray0 = new long[4][4];
      long[] longArray1 = new long[7];
      longArray1[0] = (-2469L);
      longArray1[1] = (-680L);
      longArray1[2] = 0L;
      longArray1[3] = 1042L;
      longArray1[4] = 1L;
      longArray1[5] = 1L;
      longArray1[6] = (-1818L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[0];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray0[1] = longArray2;
      long[] longArray3 = new long[8];
      assertFalse(longArray3.equals((Object)longArray1));
      assertFalse(longArray3.equals((Object)longArray2));
      
      longArray3[0] = 1042L;
      longArray3[1] = (-2469L);
      longArray3[2] = (-2469L);
      longArray3[3] = 0L;
      longArray3[4] = (-1L);
      longArray3[5] = (-2469L);
      longArray3[6] = 1042L;
      longArray3[7] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[1];
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      assertFalse(longArray4.equals((Object)longArray2));
      
      longArray4[0] = 1042L;
      longArray0[3] = longArray4;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,469 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2092.0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[2] = 2077.331F;
      floatArray0[3] = (-376.8164F);
      floatArray0[4] = (-603.2596F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2077.331F, (-376.8164F), (-603.2596F)}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = (-603.2596F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertEquals(5, floatArray0.length);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2077.331F, (-376.8164F), (-603.2596F)}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {(-603.2596F)}, floatArray1, 0.01F);
      
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2077.331F;
      floatArray2[3] = 0.0F;
      boolean boolean2 = MathArrays.equals(floatArray2, floatArray2);
      assertEquals(4, floatArray2.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertTrue(boolean2);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2077.331F, 0.0F}, floatArray2, 0.01F);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder((double[]) null, mathArrays_OrderDirection0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = MathArrays.linearCombination((double) 0, 1.0, 0.0, 1.0, 686.47, 2.0);
      assertEquals(1372.94, double0, 0.01);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals((float[]) null, floatArray0);
      assertEquals(0, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-896.1535459500305), (-1084.67430688), (-166.46040485759), 0.0, (-139.9928171785541), 0.0, 0.0, (-166.46040485759));
      assertEquals(972034.7263114036, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1603;
      intArray0[2] = 346;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1603, 0, 346}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 346;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 1603;
      integerArray0[3] = (Integer) 346;
      integerArray0[4] = (Integer) 1603;
      integerArray0[5] = (Integer) 346;
      integerArray0[6] = (Integer) 346;
      integerArray0[7] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-2060.314070805151);
      doubleArray0[0] = (-2060.314070805151);
      double double1 = 0.0;
      doubleArray0[1] = 0.0;
      double double2 = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distanceInf(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = true;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1518.437990472;
      boolean boolean2 = MathArrays.equals(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1518.437990472}, doubleArray2, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2188.155897);
      doubleArray0[1] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2188.155897), (-20.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      double[][] doubleArray1 = new double[3][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {(-2188.155897), (-20.0)}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2188.155897), (-20.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4788026.229575875, 87526.23588000001, 400.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TOO_SMALL_COST_RELATIVE_TOLERANCE";
      stringArray0[1] = ",du^V^";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      try { 
        MathArrays.ebeDivide(doubleArray0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 3
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2092.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2092.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4376464.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 11.660223F;
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2092.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4376464.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(672);
      assertEquals(672, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, integerArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, 9, (-5422));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2060.314070805151);
      doubleArray0[1] = (-2060.314070805151);
      doubleArray0[2] = (-2060.314070805151);
      doubleArray0[3] = (-2060.314070805151);
      doubleArray0[4] = (-2060.314070805151);
      doubleArray0[5] = (-2060.314070805151);
      doubleArray0[6] = (-2060.314070805151);
      doubleArray0[7] = (-2060.314070805151);
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(5827.448203361531, double0, 0.01);
      assertArrayEquals(new double[] {(-2060.314070805151), (-2060.314070805151), (-2060.314070805151), (-2060.314070805151), (-2060.314070805151), (-2060.314070805151), (-2060.314070805151), (-2060.314070805151)}, doubleArray0, 0.01);
      
      Field<FieldElement<Integer>> field0 = (Field<FieldElement<Integer>>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-703), (-703));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(8, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = 2082L;
      longArray0[1] = 1L;
      longArray0[2] = 0L;
      longArray0[3] = 487L;
      MathArrays.checkNonNegative(longArray0);
      assertEquals(4, longArray0.length);
      assertArrayEquals(new long[] {2082L, 1L, 0L, 487L}, longArray0);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 2082L;
      doubleArray2[1] = (double) 0L;
      double double0 = MathArrays.linearCombination(doubleArray2, doubleArray2);
      assertEquals(2, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertEquals(4334724.0, double0, 0.01);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {2082.0, 0.0}, doubleArray2, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = (-2280);
      intArray0[2] = 208;
      intArray0[3] = 560;
      intArray0[4] = 174;
      intArray0[5] = 1;
      intArray0[6] = 2340;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(7, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {11, (-2280), 208, 560, 174, 1, 2340}, intArray0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      float[] floatArray1 = new float[1];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[0] = 194.57F;
      boolean boolean1 = MathArrays.equals(floatArray1, floatArray1);
      assertEquals(1, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {194.57F}, floatArray1, 0.01F);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 793;
      floatArray1[0] = (float) 793;
      intArray0[2] = 793;
      intArray0[3] = 793;
      intArray0[4] = 793;
      intArray0[5] = 793;
      int[] intArray1 = MathArrays.copyOf(intArray0, 793);
      assertEquals(793, intArray1.length);
      assertEquals(6, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {793, 0, 793, 793, 793, 793}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN((double[]) null, (double[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = 1504.0;
      doubleArray2[1] = (double) 793;
      doubleArray2[2] = (double) 194.57F;
      doubleArray2[3] = 129.383290967;
      doubleArray2[4] = (double) 793;
      doubleArray2[5] = (double) 793;
      doubleArray2[6] = (double) 793;
      doubleArray2[7] = (double) 793;
      double[] doubleArray3 = MathArrays.convolve(doubleArray2, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(8, doubleArray2.length);
      assertEquals(13, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1504.0, 793.0, 194.57000732421875, 129.383290967, 793.0, 793.0, 793.0, 793.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray3);
      
      // Undeclared exception!
      try { 
        MathArrays.distance(intArray1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(8, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination(2070.62833404355, 2070.62833404355, 3964.8485621241457, 0.0, 3964.8485621241457, (-1839.9481756091939));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3007614.180703091), double1, 0.01);
      
      double double2 = MathArrays.linearCombination(doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int[] intArray2 = new int[3];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distanceInf(intArray2, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      int[] intArray0 = new int[9];
      intArray0[0] = 134217729;
      intArray0[1] = 1014;
      intArray0[2] = 836;
      intArray0[3] = 3457;
      intArray0[4] = (-5821);
      intArray0[5] = 2147483437;
      intArray0[6] = 1161;
      intArray0[7] = 134217729;
      intArray0[8] = 1175;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {134217729, 1014, 836, 3457, (-5821), 2147483437, 1161, 134217729, 1175}, intArray0);
      assertArrayEquals(new int[] {134217729, 1014, 836, 3457, (-5821), 2147483437, 1161, 134217729, 1175}, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1518.437990472, double0, 0.01);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = MathArrays.linearCombination((double) 3457, (double) 134217729, (double) 836, (double) 3457, (double) 1175, 2.092571258544922);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.6399358166377124E11, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.ebeDivide(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 11 != 6
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 281;
      intArray0[0] = 281;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 281;
      integerArray0[1] = (Integer) 281;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 281;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      Class<FieldElement> class0 = FieldElement.class;
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1229), 281);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-23);
      intArray0[3] = 1058;
      intArray0[4] = (-1);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, 2, (-23), 1058, (-1)}, intArray0);
      assertArrayEquals(new int[] {2, 2, (-23), 1058, (-1)}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-730);
      doubleArray0[2] = (double) (-23);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(3, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {2.0, (-730.0), (-23.0)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {2.0, (-730.0), (-23.0)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, 1.0, 1.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      float[] floatArray0 = new float[0];
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray0);
      assertEquals(0, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 793;
      int[] intArray1 = MathArrays.copyOf(intArray0, 793);
      assertEquals(1, intArray0.length);
      assertEquals(793, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {793}, intArray0);
      assertNotNull(intArray1);
      
      boolean boolean2 = MathArrays.equalsIncludingNaN(doubleArray1, (double[]) null);
      assertEquals(6, doubleArray0.length);
      assertEquals(11, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1050.28F;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "OP!;C2SX~c ";
      stringArray0[1] = "OP!;C2SX~c ";
      stringArray0[2] = "OP!;C2SX~c ";
      stringArray0[3] = "spline partition must have at least {0} points, got {1}";
      stringArray0[4] = "OP!;C2SX~c ";
      stringArray0[5] = "OP!;C2SX~c ";
      stringArray0[6] = "OP!;C2SX~c ";
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(7, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, true, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeSubtract(doubleArray0, doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1518.437990472, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply(doubleArray1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2060.314070805151);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-911.648), (-1084.67430688), (-166.46040485759), 0.0, (-139.9928171785541), 0.0, 0.0, (-166.46040485759));
      assertEquals(988841.1625185382, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1603;
      intArray0[1] = 0;
      intArray0[2] = 346;
      double[] doubleArray2 = MathArrays.scale(1122.1755407914, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1122.1755407914, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double double1 = MathArrays.distance(doubleArray2, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(3, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray1, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray2, doubleArray1);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1122.1755407914, Double.NaN, Double.NaN}, doubleArray2, 0.01);
      
      long[][] longArray0 = new long[9][5];
      long[] longArray1 = new long[5];
      longArray1[0] = (long) 0;
      longArray1[1] = (long) 346;
      longArray1[2] = (long) 1603;
      longArray1[3] = (long) 346;
      longArray1[4] = (long) 1603;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[7];
      assertFalse(longArray2.equals((Object)longArray1));
      
      longArray2[0] = (long) 346;
      longArray2[1] = (long) 346;
      longArray2[2] = (long) 1603;
      longArray2[3] = (long) 1603;
      longArray2[4] = (long) 1603;
      longArray2[5] = (long) 0;
      longArray2[6] = (long) 1603;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[5];
      assertFalse(longArray3.equals((Object)longArray2));
      assertFalse(longArray3.equals((Object)longArray1));
      
      longArray3[0] = (long) 1603;
      longArray3[1] = (long) 1603;
      longArray3[2] = (long) 346;
      longArray3[3] = (long) 1603;
      longArray3[4] = (long) 1603;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[8];
      assertFalse(longArray4.equals((Object)longArray2));
      assertFalse(longArray4.equals((Object)longArray1));
      assertFalse(longArray4.equals((Object)longArray3));
      
      longArray4[0] = (long) 0;
      longArray4[1] = (long) 346;
      longArray4[2] = (long) 1603;
      longArray4[3] = 3194L;
      longArray4[4] = (long) 346;
      longArray4[5] = (long) 0;
      longArray4[6] = (long) 1603;
      longArray4[7] = (long) 1603;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[4];
      assertFalse(longArray5.equals((Object)longArray3));
      assertFalse(longArray5.equals((Object)longArray2));
      assertFalse(longArray5.equals((Object)longArray1));
      assertFalse(longArray5.equals((Object)longArray4));
      
      longArray5[0] = (long) 0;
      longArray5[1] = (long) 346;
      longArray5[2] = (long) 0;
      longArray5[3] = (long) 346;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[5];
      assertFalse(longArray6.equals((Object)longArray2));
      assertFalse(longArray6.equals((Object)longArray1));
      assertFalse(longArray6.equals((Object)longArray4));
      assertFalse(longArray6.equals((Object)longArray3));
      assertFalse(longArray6.equals((Object)longArray5));
      
      longArray6[0] = (long) 0;
      longArray6[1] = (long) 1603;
      longArray6[2] = 3194L;
      longArray6[3] = (long) 0;
      longArray6[4] = (long) 346;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[2];
      assertFalse(longArray7.equals((Object)longArray6));
      assertFalse(longArray7.equals((Object)longArray3));
      assertFalse(longArray7.equals((Object)longArray2));
      assertFalse(longArray7.equals((Object)longArray1));
      assertFalse(longArray7.equals((Object)longArray4));
      assertFalse(longArray7.equals((Object)longArray5));
      
      longArray7[0] = (long) 346;
      longArray7[1] = (long) 346;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[5];
      assertFalse(longArray8.equals((Object)longArray2));
      assertFalse(longArray8.equals((Object)longArray6));
      assertFalse(longArray8.equals((Object)longArray1));
      assertFalse(longArray8.equals((Object)longArray4));
      assertFalse(longArray8.equals((Object)longArray3));
      assertFalse(longArray8.equals((Object)longArray5));
      assertFalse(longArray8.equals((Object)longArray7));
      
      longArray8[0] = (long) 0;
      longArray8[1] = (long) 0;
      longArray8[2] = (-1L);
      longArray8[3] = 3194L;
      longArray8[4] = (long) 1603;
      longArray0[7] = longArray8;
      long[] longArray9 = new long[5];
      assertFalse(longArray9.equals((Object)longArray2));
      assertFalse(longArray9.equals((Object)longArray1));
      assertFalse(longArray9.equals((Object)longArray8));
      assertFalse(longArray9.equals((Object)longArray7));
      assertFalse(longArray9.equals((Object)longArray6));
      assertFalse(longArray9.equals((Object)longArray5));
      assertFalse(longArray9.equals((Object)longArray4));
      assertFalse(longArray9.equals((Object)longArray3));
      
      longArray9[0] = (-1L);
      longArray9[1] = 3194L;
      longArray9[2] = 3194L;
      longArray9[3] = (long) 1603;
      longArray9[4] = (long) 1603;
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1444.92198052099);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-129.28);
      double[] doubleArray1 = MathArrays.scale((-1762.223464652), doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertEquals(5, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1444.92198052099), 0.0, 1.304E19, 0.0, (-129.28)}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2546275.4186655288, -0.0, (-2.297939397906208E22), -0.0, 227820.24951021056}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 372.97;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(6, doubleArray0.length);
      assertEquals(Double.NaN, double0, 0.01);
      assertArrayEquals(new double[] {3.32, 372.97, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(122);
      assertEquals(122, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("G p6u`7t,9~JFf.[Ib8", integer0);
      assertEquals(122, (int)integer1);
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.getInteger("INDEX_NOT_POSITIVE");
      assertNull(integer2);
      
      integerArray0[2] = null;
      Integer integer3 = new Integer(122);
      assertTrue(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(122, (int)integer3);
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer(122);
      assertTrue(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertEquals(122, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[4] = integer4;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(6, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {3.32, 372.97, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-730);
      intArray0[2] = 0;
      intArray0[3] = 1058;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(5, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, (-730), 0, 1058, 0}, intArray0);
      assertArrayEquals(new int[] {2, (-730), 0, 1058, 0}, intArray1);
      assertNotNull(intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-730);
      doubleArray0[1] = (double) (-730);
      doubleArray0[2] = (double) 0;
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) (-730);
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) (-730);
      integerArray0[3] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = null;
      float[] floatArray1 = new float[1];
      boolean boolean0 = MathArrays.equalsIncludingNaN((float[]) null, floatArray1);
      assertEquals(1, floatArray1.length);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = "DECREASING";
      stringArray0[2] = "bDKAV1/Q";
      stringArray0[3] = "m%LdcjnM";
      stringArray0[5] = "";
      stringArray0[6] = "K/HsTF6r2_+Jm8<";
      stringArray0[7] = "OP!;C2SX~c ";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.copyOf((int[]) null, (-1204));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      try { 
        MathArrays.checkRectangular((long[][]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2188.155897);
      doubleArray0[1] = (-20.0);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertEquals(2, doubleArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {(-2188.155897), (-20.0)}, doubleArray0, 0.01);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 134217729;
      intArray0[2] = (-95);
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-979);
      int[] intArray1 = MathArrays.copyOf(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertEquals(0, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 134217729, (-95), (-1), 0, (-979)}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.DECREASING;
      double[][] doubleArray1 = new double[9][2];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection1, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(9, doubleArray1.length);
      assertSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      assertArrayEquals(new double[] {(-2188.155897), (-20.0)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2060.314070805151);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray0 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray0.length);
      assertNotNull(mathArrays_OrderDirectionArray0);
      
      double double0 = MathArrays.linearCombination((-911.648), (-1084.67430688), (-166.46040485759), 0.0, (-139.9928171785541), 0.0, 0.0, (-166.46040485759));
      assertEquals(988841.1625185382, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1603;
      intArray0[1] = 0;
      intArray0[2] = 346;
      double double1 = MathArrays.distance(intArray0, intArray0);
      assertEquals(3, intArray0.length);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new int[] {1603, 0, 346}, intArray0);
      
      MathArrays.OrderDirection[] mathArrays_OrderDirectionArray1 = MathArrays.OrderDirection.values();
      assertEquals(2, mathArrays_OrderDirectionArray1.length);
      assertFalse(mathArrays_OrderDirectionArray1.equals((Object)mathArrays_OrderDirectionArray0));
      assertNotSame(mathArrays_OrderDirectionArray1, mathArrays_OrderDirectionArray0);
      assertNotNull(mathArrays_OrderDirectionArray1);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4244894.070357692, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      double[] doubleArray3 = MathArrays.copyOf(doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4244894.070357692, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4244894.070357692, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertNotNull(doubleArray3);
      
      double[] doubleArray4 = MathArrays.ebeDivide(doubleArray3, doubleArray2);
      assertEquals(3, doubleArray0.length);
      assertEquals(5, doubleArray2.length);
      assertEquals(5, doubleArray3.length);
      assertEquals(5, doubleArray4.length);
      assertFalse(doubleArray0.equals((Object)doubleArray3));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray3));
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray0));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray0, doubleArray3);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray3);
      assertNotSame(doubleArray2, doubleArray1);
      assertNotSame(doubleArray2, doubleArray4);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray4);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray0);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      assertArrayEquals(new double[] {(-2060.314070805151), 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4244894.070357692, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {4244894.070357692, 0.0, 0.0, 0.0, 0.0}, doubleArray3, 0.01);
      assertArrayEquals(new double[] {1.0, Double.NaN, Double.NaN, Double.NaN, Double.NaN}, doubleArray4, 0.01);
      assertNotNull(doubleArray4);
      
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 346;
      integerArray0[1] = (Integer) 0;
      integerArray0[2] = (Integer) 1603;
      integerArray0[3] = (Integer) 346;
      integerArray0[4] = (Integer) 1603;
      integerArray0[5] = (Integer) 346;
      integerArray0[6] = (Integer) 346;
      integerArray0[7] = (Integer) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(8, integerArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = MathArrays.linearCombination(0.0, (-1.0), Double.NaN, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = MathArrays.linearCombination(0.0, 0.0, 0.0, 76.9717, 0.0, 0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[0];
      double double2 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      long[][] longArray0 = new long[0][4];
      MathArrays.checkRectangular(longArray0);
      assertEquals(0, longArray0.length);
      
      long[] longArray1 = new long[6];
      longArray1[0] = 1L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = 1360L;
      longArray1[4] = 1L;
      longArray1[5] = 0L;
      MathArrays.checkNonNegative(longArray1);
      assertEquals(6, longArray1.length);
      assertArrayEquals(new long[] {1L, 0L, 0L, 1360L, 1L, 0L}, longArray1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1820);
      intArray0[1] = 332;
      intArray0[2] = 286;
      intArray0[3] = 0;
      intArray0[4] = (-2559);
      intArray0[5] = 134217729;
      intArray0[6] = (-1654);
      intArray0[7] = 544;
      intArray0[8] = (-833);
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(9, intArray1.length);
      assertEquals(9, intArray0.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-1820), 332, 286, 0, (-2559), 134217729, (-1654), 544, (-833)}, intArray1);
      assertArrayEquals(new int[] {(-1820), 332, 286, 0, (-2559), 134217729, (-1654), 544, (-833)}, intArray0);
      assertNotNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1518.437990472;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3347.6648;
      doubleArray0[3] = 3905.7409632515114;
      doubleArray0[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = (-2092.8291);
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = (-818.728101);
      double double1 = MathArrays.linearCombination((-818.728101), 0.0, 964.813476618719, (-818.728101), (-818.728101), (-818.728101));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-119604.20216418552), double1, 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1050.28F;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1050.28F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (double) 1050.28F;
      doubleArray0[5] = 2612.0;
      doubleArray0[6] = (double) 1050.28F;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertEquals(3183.050175510831, double0, 0.01);
      assertArrayEquals(new double[] {1050.280029296875, 0.0, 0.0, 0.0, 1050.280029296875, 2612.0, 1050.280029296875}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<FieldElement<Integer>>) null, (-703), 259);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 281;
      intArray0[0] = 281;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {281}, intArray0);
      assertArrayEquals(new int[] {281}, intArray1);
      assertNotNull(intArray1);
      
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = (Integer) 281;
      integerArray0[1] = (Integer) 281;
      integerArray0[2] = (Integer) 281;
      integerArray0[3] = (Integer) 281;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertEquals(4, integerArray0.length);
      assertFalse(boolean0);
      
      Field<Object> field0 = (Field<Object>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      int int1 = (-1229);
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, (-1229), 281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-1.0F);
      doubleArray0[1] = (double) (-1.0F);
      doubleArray0[2] = (double) (-1.0F);
      doubleArray0[3] = (double) (-1.0F);
      doubleArray0[4] = (double) (-1.0F);
      doubleArray0[5] = (double) (-1.0F);
      doubleArray0[6] = 3882.030032857;
      doubleArray0[7] = 1654.629557150948;
      doubleArray0[8] = (double) (-1.0F);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.sortInPlace(doubleArray0, mathArrays_OrderDirection0, (double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1444.92198052099);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.304E19;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-129.28);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not decreasing (-1,444.922 < 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i_WDQlx3";
      stringArray0[1] = "org.apache.commons.math3.util.MathArrays$1";
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, false);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double[] doubleArray1 = MathArrays.ebeDivide(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "i_WDQlx3";
      stringArray1[1] = "org.apache.commons.math3.util.MathArrays$1";
      stringArray1[2] = "i_WDQlx3";
      MathArrays.OrderDirection mathArrays_OrderDirection1 = MathArrays.OrderDirection.INCREASING;
      boolean boolean1 = MathArrays.isMonotonic(stringArray1, mathArrays_OrderDirection1, false);
      assertEquals(3, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(mathArrays_OrderDirection1.equals((Object)mathArrays_OrderDirection0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(mathArrays_OrderDirection1, mathArrays_OrderDirection0);
      
      // Undeclared exception!
      try { 
        MathArrays.buildArray((Field<Object>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1228.05336;
      doubleArray0[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2673.38;
      int int0 = 153;
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 153);
      assertEquals(4, doubleArray0.length);
      assertEquals(153, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {1228.05336, Double.NEGATIVE_INFINITY, 0.0, 2673.38}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertEquals(Double.NaN, double0, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1228.05336, Double.NEGATIVE_INFINITY, 0.0, 2673.38}, doubleArray0, 0.01);
      
      Field<Integer> field0 = (Field<Integer>) mock(Field.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(field0).getRuntimeClass();
      // Undeclared exception!
      try { 
        MathArrays.buildArray(field0, 153);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      assertEquals(1, doubleArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = new double[3][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      MathArrays.sortInPlace(doubleArray0, doubleArray1);
      assertEquals(1, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(1, doubleArray2.length);
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray2, 0.01);
      assertNotNull(doubleArray2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j+{Q3ZCh&p~a5[";
      stringArray0[1] = ",du^V^";
      stringArray0[2] = "K}1";
      boolean boolean1 = MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
      assertEquals(3, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide(doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.ebeDivide((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2002;
      intArray0[5] = (-1733);
      intArray0[6] = 461;
      intArray0[7] = 84;
      intArray0[8] = (-949);
      MathArrays.distanceInf(intArray0, intArray0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1733);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 84;
      doubleArray0[5] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      try { 
        MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not increasing (-1 > -1,733)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MathArrays.linearCombination((-1.0), 521.0821199171, (-2092.0), 2305653.9309086455, 2305653.9309086455, 2305653.9309086455, 521.0821199171, (-1.0));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.311216620048864E12;
      doubleArray0[1] = 521.0821199171;
      doubleArray0[2] = 2305653.9309086455;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2305653.9309086455;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3.141592653589793;
      try { 
        MathArrays.ebeAdd(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MathArrays.distance1(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      try { 
        MathArrays.ebeAdd(doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 1;
      intArray0[1] = 1;
      int int2 = 106;
      intArray0[2] = 106;
      int int3 = 36;
      intArray0[3] = 36;
      MathArrays.distance1(intArray0, intArray0);
      String[] stringArray0 = new String[0];
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      // Undeclared exception!
      try { 
        MathArrays.isMonotonic(stringArray0, mathArrays_OrderDirection0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MathArrays.linearCombination(3.834E-20, (-1432.29903), (-1432.29903), 0.0, 0.0, (-1.0));
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2970.335F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 110.4394F;
      MathArrays.equals(floatArray0, floatArray0);
      // Undeclared exception!
      try { 
        MathArrays.ebeMultiply((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1724.1589644263502;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = 942.03637931;
      MathArrays.distance1(doubleArray0, doubleArray0);
      MathArrays.linearCombination(1.7976931348623157E308, 2.0, 1724.1589644263502, 1742.1673816462196);
      MathArrays.equalsIncludingNaN(doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.7976931348623157E308;
      doubleArray1[1] = 1.0E-5;
      doubleArray1[2] = 1742.1673816462196;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      MathArrays.equalsIncludingNaN(doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        MathArrays.OrderDirection.valueOf(";>[AbhCDIvz?ogh\"N_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.apache.commons.math3.util.MathArrays.OrderDirection.;>[AbhCDIvz?ogh\"N_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.safeNorm((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1640.1547287);
      doubleArray0[1] = (-3298.0);
      doubleArray0[2] = (-1975.68848187442);
      boolean boolean0 = MathArrays.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 3194L;
      longArray0[1] = 0L;
      longArray0[2] = 5041L;
      longArray0[3] = 0L;
      MathArrays.checkNonNegative(longArray0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 3194L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 3194L;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.ebeMultiply(doubleArray0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-719);
      intArray0[1] = (-703);
      intArray0[2] = 170;
      intArray0[3] = 0;
      intArray0[4] = 1830;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-719), (-703), 170, 0, 1830}, intArray1);
      
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      boolean boolean0 = MathArrays.isMonotonic(doubleArray1, mathArrays_OrderDirection0, true);
      assertArrayEquals(new double[] {0.0, 1.0201636E7, 0.0, 1.0201636E7}, doubleArray1, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 814;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 109;
      intArray0[3] = 2848;
      intArray0[4] = 2;
      intArray0[5] = 144;
      intArray0[6] = (-5293);
      int[] intArray1 = new int[4];
      intArray1[0] = 109;
      intArray1[1] = 109;
      intArray1[2] = (-5293);
      intArray1[3] = 0;
      // Undeclared exception!
      try { 
        MathArrays.distance1(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[][] longArray0 = new long[9][3];
      long[] longArray1 = new long[4];
      longArray1[0] = 3399L;
      longArray1[1] = 0L;
      longArray1[2] = 0L;
      longArray1[3] = (-175L);
      longArray0[0] = longArray1;
      long[] longArray2 = new long[4];
      longArray2[0] = 0L;
      longArray2[1] = 0L;
      longArray2[2] = 3399L;
      longArray2[3] = 3399L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[1];
      longArray3[0] = (-175L);
      longArray0[2] = longArray3;
      long[] longArray4 = new long[5];
      longArray4[0] = (-175L);
      longArray4[1] = 0L;
      longArray4[2] = 0L;
      longArray4[3] = 74L;
      longArray4[4] = 0L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[5];
      longArray5[0] = (-175L);
      longArray5[1] = 3399L;
      longArray5[2] = 0L;
      longArray5[3] = 0L;
      longArray5[4] = 74L;
      longArray0[4] = longArray5;
      long[] longArray6 = new long[2];
      longArray6[0] = (-175L);
      longArray6[1] = 0L;
      longArray0[5] = longArray6;
      long[] longArray7 = new long[6];
      longArray7[0] = 74L;
      longArray7[1] = 74L;
      longArray7[2] = 3399L;
      longArray7[3] = (-1669L);
      longArray7[4] = (-175L);
      longArray7[5] = 0L;
      longArray0[6] = longArray7;
      long[] longArray8 = new long[0];
      longArray0[7] = longArray8;
      long[] longArray9 = new long[1];
      longArray9[0] = (-1669L);
      longArray0[8] = longArray9;
      try { 
        MathArrays.checkRectangular(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // some rows have length 1 while others have length 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      MathArrays.OrderDirection.values();
      // Undeclared exception!
      try { 
        MathArrays.ebeAdd((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3252.545681387);
      doubleArray0[3] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4030.628059793151;
      doubleArray0[6] = (-2140.506);
      doubleArray0[7] = 1053.507;
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1392.28);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 530.77;
      doubleArray0[3] = (-1687.3863003);
      doubleArray0[4] = (-362.7);
      doubleArray0[5] = 64.9637785;
      doubleArray0[6] = 0.0;
      double double0 = MathArrays.distance(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2297);
      intArray0[1] = 225;
      intArray0[2] = (-1);
      intArray0[3] = 673;
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1834.995);
      doubleArray0[1] = (-1818.6821064);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1920.46177317);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 879.47;
      doubleArray0[7] = (-2725.7329637119365);
      doubleArray0[8] = 946.8131626630326;
      double double0 = MathArrays.distanceInf(doubleArray0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0, 0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2900.7;
      doubleArray0[2] = 1.0E-5;
      doubleArray0[3] = (-1113.93732786781);
      doubleArray0[4] = 3.141592653589793;
      doubleArray0[5] = 219.1772058059766;
      doubleArray0[6] = (-20.0);
      doubleArray0[7] = 2654.123701423354;
      MathArrays.ebeAdd(doubleArray0, doubleArray0);
      int int0 = (-40);
      // Undeclared exception!
      try { 
        MathArrays.copyOf(doubleArray0, (-40));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = (-730);
      intArray0[2] = 0;
      intArray0[3] = 1058;
      intArray0[4] = 0;
      int[] intArray1 = MathArrays.copyOf(intArray0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {2, (-730), 0, 1058, 0}, intArray1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-730);
      doubleArray0[1] = (double) (-730);
      doubleArray0[2] = (double) 0;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.checkOrder(doubleArray0, mathArrays_OrderDirection0, false, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-2397.877408519607);
      doubleArray0[2] = 689.916282434;
      doubleArray0[3] = 3.834E-20;
      doubleArray0[4] = 483.943;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      double double0 = 0.0;
      doubleArray0[7] = 0.0;
      try { 
        MathArrays.checkPositive(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,397.877 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      MathArrays.linearCombination((-2092.0), (-2092.0), (-2092.0), 0.0, Double.NaN, 1.304E19);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2092.0);
      double[] doubleArray1 = MathArrays.convolve(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {4376464.0}, doubleArray1, 0.01);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 2077.331F;
      floatArray0[3] = (-376.8164F);
      floatArray0[4] = (-603.2596F);
      boolean boolean0 = MathArrays.equals(floatArray0, floatArray0);
      MathArrays.OrderDirection.values();
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-603.2596F);
      boolean boolean1 = MathArrays.equals(floatArray0, floatArray1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 15;
      intArray0[1] = 40;
      intArray0[2] = 0;
      intArray0[3] = 5;
      intArray0[4] = 0;
      int int0 = 166;
      intArray0[5] = 166;
      intArray0[6] = (-3829);
      intArray0[7] = (-447);
      intArray0[8] = 0;
      MathArrays.copyOf(intArray0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.distance((double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.32;
      doubleArray0[1] = 372.97;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = Double.NaN;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = new Integer(120);
      integerArray0[0] = integer0;
      Integer integer1 = Integer.getInteger("G p6u`7t,9~JFf.[Ib8", integer0);
      integerArray0[1] = integer1;
      Integer.getInteger("INDEX_NOT_POSITIVE");
      integerArray0[2] = null;
      Integer integer2 = new Integer(120);
      integerArray0[3] = integer2;
      Integer integer3 = new Integer(120);
      integerArray0[4] = integer3;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      boolean boolean0 = MathArrays.isMonotonic(integerArray0, mathArrays_OrderDirection0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Double[] doubleArray0 = new Double[2];
      Double double0 = new Double(0.0);
      doubleArray0[0] = double0;
      Double double1 = new Double(0.0);
      doubleArray0[1] = double1;
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.INCREASING;
      MathArrays.isMonotonic(doubleArray0, mathArrays_OrderDirection0, true);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-2201.728987064216);
      doubleArray1[3] = (double) doubleArray0[1];
      double[] doubleArray2 = MathArrays.copyOf(doubleArray1);
      double[][] doubleArray3 = new double[7][4];
      doubleArray3[0] = doubleArray2;
      doubleArray3[1] = doubleArray2;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (-2201.728987064216);
      doubleArray4[1] = (-2201.728987064216);
      doubleArray4[2] = (double) doubleArray0[0];
      doubleArray4[3] = (double) doubleArray0[0];
      doubleArray4[4] = (-2201.728987064216);
      doubleArray4[5] = (double) doubleArray0[1];
      doubleArray4[6] = (double) doubleArray0[1];
      doubleArray4[7] = (-2201.728987064216);
      doubleArray4[8] = 0.0;
      doubleArray3[2] = doubleArray4;
      doubleArray3[3] = doubleArray2;
      doubleArray3[4] = doubleArray2;
      doubleArray3[5] = doubleArray1;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (double) doubleArray0[1];
      doubleArray5[2] = 0.0;
      doubleArray5[3] = (-2201.728987064216);
      doubleArray3[6] = doubleArray5;
      try { 
        MathArrays.sortInPlace(doubleArray1, mathArrays_OrderDirection0, doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[][] longArray0 = new long[5][4];
      long[] longArray1 = new long[2];
      longArray1[0] = 0L;
      longArray1[1] = 1L;
      longArray0[0] = longArray1;
      long[] longArray2 = new long[2];
      longArray2[0] = 2310L;
      longArray2[1] = 1L;
      longArray0[1] = longArray2;
      long[] longArray3 = new long[9];
      longArray3[0] = 2310L;
      longArray3[1] = 1L;
      longArray3[2] = 1L;
      longArray3[3] = 2310L;
      longArray3[4] = 2310L;
      longArray3[5] = 1L;
      longArray3[6] = 0L;
      longArray3[7] = 1L;
      longArray3[8] = 1L;
      longArray0[2] = longArray3;
      long[] longArray4 = new long[6];
      longArray4[0] = 0L;
      longArray4[1] = 1L;
      longArray4[2] = 1L;
      longArray4[3] = 1L;
      longArray4[4] = 0L;
      longArray4[5] = 1L;
      longArray0[3] = longArray4;
      long[] longArray5 = new long[8];
      longArray5[0] = 1L;
      longArray5[1] = (-2394L);
      longArray5[2] = 0L;
      longArray5[3] = 2310L;
      longArray5[4] = 0L;
      longArray5[5] = 1L;
      longArray5[6] = 2310L;
      longArray5[7] = 2310L;
      longArray0[4] = longArray5;
      try { 
        MathArrays.checkNonNegative(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,394 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = MathArrays.copyOf(doubleArray0);
      assertEquals(0, doubleArray1.length);
      assertNotSame(doubleArray1, doubleArray0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-825);
      intArray0[1] = 221;
      intArray0[2] = (-3546);
      double double0 = MathArrays.distance(intArray0, intArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 3126.4F;
      MathArrays.equalsIncludingNaN((float[]) null, floatArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3126.4F;
      // Undeclared exception!
      try { 
        MathArrays.linearCombination(doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3143.9);
      doubleArray0[1] = 2353.9865554;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 182.4448876293366;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1092.70051109723);
      doubleArray0[8] = (-204.9674489457726);
      try { 
        MathArrays.checkOrder(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly increasing (2,353.987 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[][] longArrayArray0 = null;
      // Undeclared exception!
      try { 
        MathArrays.checkNonNegative((long[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2362.140952991224);
      doubleArray0[1] = 0.0;
      double double0 = MathArrays.safeNorm(doubleArray0);
      assertEquals(2362.140952991224, double0, 0.01);
      
      MathArrays.checkOrder(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1898.7914F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-197.8923F);
      floatArray0[3] = (-1689.0547F);
      floatArray0[4] = 130.245F;
      floatArray0[5] = 710.3F;
      floatArray0[6] = 1.0F;
      boolean boolean0 = MathArrays.equalsIncludingNaN(floatArray0, floatArray0);
      assertTrue(boolean0);
      
      double double1 = MathArrays.linearCombination(Double.NaN, 536.89263122559, 3686.89339, 0.0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = MathArrays.distance1(intArray0, intArray0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      MathArrays.scaleInPlace(0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double[] doubleArray1 = MathArrays.scale(0.0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1774.27700798323);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1061.815697;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1774.27700798323);
      doubleArray1[3] = (-1774.27700798323);
      doubleArray1[4] = 0.0;
      double[] doubleArray2 = MathArrays.convolve(doubleArray0, doubleArray1);
      MathArrays.OrderDirection mathArrays_OrderDirection0 = MathArrays.OrderDirection.DECREASING;
      try { 
        MathArrays.checkOrder(doubleArray2, mathArrays_OrderDirection0, true, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 1 and 2 are not strictly decreasing (-1,883,955.178 <= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }
}
